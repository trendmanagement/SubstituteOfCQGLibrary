// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
// WARNING                                                                         WARNING
// WARNING    THIS .CS FILE WAS AUTOGENERATED!                                     WARNING
// WARNING    DO NOT EDIT IT BY HAND, BECAUSE ALL YOUR CHANGES WILL BE LOST!       WARNING
// WARNING    MAKE ALL CHANGES DIRECTLY TO THE FILE GENERATOR CODE!                WARNING
// WARNING                                                                         WARNING
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

// Disable two warnings caused by CQG API specific:
// CS3003: Type of 'variable' is not CLS-compliant
// CS3008: Identifier 'identifier' differing only in case is not CLS-compliant
#pragma warning disable 3003, 3008

using CQG;
using FakeCQG.Internal;
using FakeCQG.Internal.Models;
using MongoDB.Driver;
using System.Collections.Generic;
using System.Reflection;

namespace DataCollectionForRealtime
{
    partial class QueryHandler
    {
        private delegate void PropDel(QueryInfo query, object[] args);

        private Dictionary<string, PropDel> hMethods; 


        public void InitHMethodDict()
        {
            hMethods = new Dictionary<string, PropDel> 
            {

                    { "GetCQGAccountClassAccountMarginDetailing", this.GetCQGAccountClassAccountMarginDetailing},
                    { "SetCQGAccountClassAccountMarginDetailing", this.SetCQGAccountClassAccountMarginDetailing},
                    { "GetCQGAccountClassAuthorizedTraders", this.GetCQGAccountClassAuthorizedTraders},
                    { "GetCQGAccountClassAutoSubscribeInstruments", this.GetCQGAccountClassAutoSubscribeInstruments},
                    { "SetCQGAccountClassAutoSubscribeInstruments", this.SetCQGAccountClassAutoSubscribeInstruments},
                    { "GetCQGAccountClassCEL", this.GetCQGAccountClassCEL},
                    { "GetCQGAccountClassCurrencySummaries", this.GetCQGAccountClassCurrencySummaries},
                    { "GetCQGAccountClassDateOfLastStatement", this.GetCQGAccountClassDateOfLastStatement},
                    { "GetCQGAccountClassFcmAccountID", this.GetCQGAccountClassFcmAccountID},
                    { "GetCQGAccountClassFcmClass", this.GetCQGAccountClassFcmClass},
                    { "GetCQGAccountClassFcmID", this.GetCQGAccountClassFcmID},
                    { "GetCQGAccountClassFcmName", this.GetCQGAccountClassFcmName},
                    { "GetCQGAccountClassGWAccountID", this.GetCQGAccountClassGWAccountID},
                    { "GetCQGAccountClassGWAccountName", this.GetCQGAccountClassGWAccountName},
                    { "GetCQGAccountClassInternalOrders", this.GetCQGAccountClassInternalOrders},
                    { "GetCQGAccountClassOrders", this.GetCQGAccountClassOrders},
                    { "GetCQGAccountClassPositions", this.GetCQGAccountClassPositions},
                    { "GetCQGAccountClassPositionSubcriptionLevel", this.GetCQGAccountClassPositionSubcriptionLevel},
                    { "SetCQGAccountClassPositionSubcriptionLevel", this.SetCQGAccountClassPositionSubcriptionLevel},
                    { "GetCQGAccountClassReportingCurrency", this.GetCQGAccountClassReportingCurrency},
                    { "GetCQGAccountClassServerTimestamp", this.GetCQGAccountClassServerTimestamp},
                    { "GetCQGAccountClassSummary", this.GetCQGAccountClassSummary},
                    { "GetCQGAccountClassTimestamp", this.GetCQGAccountClassTimestamp},
                    { "GetCQGAccountClassTotalMarginValue", this.GetCQGAccountClassTotalMarginValue},
                    { "GetCQGAccountClassTotalPurchasingPower", this.GetCQGAccountClassTotalPurchasingPower},
                    { "GetCQGAccountsClassCount", this.GetCQGAccountsClassCount},
                    { "GetCQGAccountsClassItem", this.GetCQGAccountsClassItem},
                    { "GetCQGAccountsClassItemByFCM", this.GetCQGAccountsClassItemByFCM},
                    { "GetCQGAccountSummariesClassCount", this.GetCQGAccountSummariesClassCount},
                    { "GetCQGAccountSummariesClassItem", this.GetCQGAccountSummariesClassItem},
                    { "GetCQGAccountSummaryClassAccount", this.GetCQGAccountSummaryClassAccount},
                    { "GetCQGAccountSummaryClassCurrencyName", this.GetCQGAccountSummaryClassCurrencyName},
                    { "GetCQGAccountSummaryClassManualFillsInvolved", this.GetCQGAccountSummaryClassManualFillsInvolved},
                    { "GetCQGAdvancedStudiesClassCount", this.GetCQGAdvancedStudiesClassCount},
                    { "GetCQGAdvancedStudiesClassItem", this.GetCQGAdvancedStudiesClassItem},
                    { "GetCQGAdvancedStudiesClassItemById", this.GetCQGAdvancedStudiesClassItemById},
                    { "GetCQGAdvancedStudyClassCount", this.GetCQGAdvancedStudyClassCount},
                    { "GetCQGAdvancedStudyClassCurveHeaders", this.GetCQGAdvancedStudyClassCurveHeaders},
                    { "GetCQGAdvancedStudyClassDefinition", this.GetCQGAdvancedStudyClassDefinition},
                    { "GetCQGAdvancedStudyClassEndTimestamp", this.GetCQGAdvancedStudyClassEndTimestamp},
                    { "GetCQGAdvancedStudyClassId", this.GetCQGAdvancedStudyClassId},
                    { "GetCQGAdvancedStudyClassItem", this.GetCQGAdvancedStudyClassItem},
                    { "GetCQGAdvancedStudyClassLastError", this.GetCQGAdvancedStudyClassLastError},
                    { "GetCQGAdvancedStudyClassRequest", this.GetCQGAdvancedStudyClassRequest},
                    { "GetCQGAdvancedStudyClassStartTimestamp", this.GetCQGAdvancedStudyClassStartTimestamp},
                    { "GetCQGAdvancedStudyClassStatus", this.GetCQGAdvancedStudyClassStatus},
                    { "GetCQGAdvancedStudyClassTag", this.GetCQGAdvancedStudyClassTag},
                    { "SetCQGAdvancedStudyClassTag", this.SetCQGAdvancedStudyClassTag},
                    { "GetCQGAdvancedStudyDefinitionClassAbbreviation", this.GetCQGAdvancedStudyDefinitionClassAbbreviation},
                    { "GetCQGAdvancedStudyDefinitionClassCurveDefinitions", this.GetCQGAdvancedStudyDefinitionClassCurveDefinitions},
                    { "GetCQGAdvancedStudyDefinitionClassName", this.GetCQGAdvancedStudyDefinitionClassName},
                    { "GetCQGAdvancedStudyDefinitionClassParameterDefinitions", this.GetCQGAdvancedStudyDefinitionClassParameterDefinitions},
                    { "GetCQGAdvancedStudyDefinitionsClassCount", this.GetCQGAdvancedStudyDefinitionsClassCount},
                    { "GetCQGAdvancedStudyDefinitionsClassItem", this.GetCQGAdvancedStudyDefinitionsClassItem},
                    { "GetCQGAdvancedStudyDefinitionsClassItemByAbbreviation", this.GetCQGAdvancedStudyDefinitionsClassItemByAbbreviation},
                    { "GetCQGAdvancedStudyRequestClassBaseExpression", this.GetCQGAdvancedStudyRequestClassBaseExpression},
                    { "SetCQGAdvancedStudyRequestClassBaseExpression", this.SetCQGAdvancedStudyRequestClassBaseExpression},
                    { "GetCQGAdvancedStudyRequestClassContinuation", this.GetCQGAdvancedStudyRequestClassContinuation},
                    { "SetCQGAdvancedStudyRequestClassContinuation", this.SetCQGAdvancedStudyRequestClassContinuation},
                    { "GetCQGAdvancedStudyRequestClassDaysBeforeExpiration", this.GetCQGAdvancedStudyRequestClassDaysBeforeExpiration},
                    { "SetCQGAdvancedStudyRequestClassDaysBeforeExpiration", this.SetCQGAdvancedStudyRequestClassDaysBeforeExpiration},
                    { "GetCQGAdvancedStudyRequestClassDefinition", this.GetCQGAdvancedStudyRequestClassDefinition},
                    { "GetCQGAdvancedStudyRequestClassEqualizeCloses", this.GetCQGAdvancedStudyRequestClassEqualizeCloses},
                    { "SetCQGAdvancedStudyRequestClassEqualizeCloses", this.SetCQGAdvancedStudyRequestClassEqualizeCloses},
                    { "GetCQGAdvancedStudyRequestClassHistoricalPeriod", this.GetCQGAdvancedStudyRequestClassHistoricalPeriod},
                    { "SetCQGAdvancedStudyRequestClassHistoricalPeriod", this.SetCQGAdvancedStudyRequestClassHistoricalPeriod},
                    { "GetCQGAdvancedStudyRequestClassIncludeEnd", this.GetCQGAdvancedStudyRequestClassIncludeEnd},
                    { "SetCQGAdvancedStudyRequestClassIncludeEnd", this.SetCQGAdvancedStudyRequestClassIncludeEnd},
                    { "GetCQGAdvancedStudyRequestClassIntradayPeriod", this.GetCQGAdvancedStudyRequestClassIntradayPeriod},
                    { "SetCQGAdvancedStudyRequestClassIntradayPeriod", this.SetCQGAdvancedStudyRequestClassIntradayPeriod},
                    { "GetCQGAdvancedStudyRequestClassParameter", this.GetCQGAdvancedStudyRequestClassParameter},
                    { "SetCQGAdvancedStudyRequestClassParameter", this.SetCQGAdvancedStudyRequestClassParameter},
                    { "GetCQGAdvancedStudyRequestClassRangeEnd", this.GetCQGAdvancedStudyRequestClassRangeEnd},
                    { "SetCQGAdvancedStudyRequestClassRangeEnd", this.SetCQGAdvancedStudyRequestClassRangeEnd},
                    { "GetCQGAdvancedStudyRequestClassRangeStart", this.GetCQGAdvancedStudyRequestClassRangeStart},
                    { "SetCQGAdvancedStudyRequestClassRangeStart", this.SetCQGAdvancedStudyRequestClassRangeStart},
                    { "GetCQGAdvancedStudyRequestClassRecalcPeriod", this.GetCQGAdvancedStudyRequestClassRecalcPeriod},
                    { "SetCQGAdvancedStudyRequestClassRecalcPeriod", this.SetCQGAdvancedStudyRequestClassRecalcPeriod},
                    { "GetCQGAdvancedStudyRequestClassSessionFlags", this.GetCQGAdvancedStudyRequestClassSessionFlags},
                    { "SetCQGAdvancedStudyRequestClassSessionFlags", this.SetCQGAdvancedStudyRequestClassSessionFlags},
                    { "GetCQGAdvancedStudyRequestClassSessionsFilter", this.GetCQGAdvancedStudyRequestClassSessionsFilter},
                    { "SetCQGAdvancedStudyRequestClassSessionsFilter", this.SetCQGAdvancedStudyRequestClassSessionsFilter},
                    { "GetCQGAdvancedStudyRequestClassSubscriptionLevel", this.GetCQGAdvancedStudyRequestClassSubscriptionLevel},
                    { "SetCQGAdvancedStudyRequestClassSubscriptionLevel", this.SetCQGAdvancedStudyRequestClassSubscriptionLevel},
                    { "GetCQGAdvancedStudyRequestClassUpdatesEnabled", this.GetCQGAdvancedStudyRequestClassUpdatesEnabled},
                    { "SetCQGAdvancedStudyRequestClassUpdatesEnabled", this.SetCQGAdvancedStudyRequestClassUpdatesEnabled},
                    { "GetCQGAlgorithmicOrderDefinitionClassDefaultValue", this.GetCQGAlgorithmicOrderDefinitionClassDefaultValue},
                    { "SetCQGAlgorithmicOrderDefinitionClassDefaultValue", this.SetCQGAlgorithmicOrderDefinitionClassDefaultValue},
                    { "GetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex", this.GetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex},
                    { "SetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex", this.SetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex},
                    { "GetCQGAlgorithmicOrderDefinitionClassName", this.GetCQGAlgorithmicOrderDefinitionClassName},
                    { "SetCQGAlgorithmicOrderDefinitionClassName", this.SetCQGAlgorithmicOrderDefinitionClassName},
                    { "GetCQGAlgorithmicOrderDefinitionClassType", this.GetCQGAlgorithmicOrderDefinitionClassType},
                    { "SetCQGAlgorithmicOrderDefinitionClassType", this.SetCQGAlgorithmicOrderDefinitionClassType},
                    { "GetCQGAlgorithmicOrderDefinitionClassUnit", this.GetCQGAlgorithmicOrderDefinitionClassUnit},
                    { "SetCQGAlgorithmicOrderDefinitionClassUnit", this.SetCQGAlgorithmicOrderDefinitionClassUnit},
                    { "GetCQGAlgorithmicOrderDefinitionClassValues", this.GetCQGAlgorithmicOrderDefinitionClassValues},
                    { "GetCQGAlgorithmicOrderDefinitionsClassCount", this.GetCQGAlgorithmicOrderDefinitionsClassCount},
                    { "GetCQGAlgorithmicOrderDefinitionsClassItem", this.GetCQGAlgorithmicOrderDefinitionsClassItem},
                    { "GetCQGAlgorithmicOrderParametersClassDurationType", this.GetCQGAlgorithmicOrderParametersClassDurationType},
                    { "GetCQGAlgorithmicOrderParametersClassExecutionInstructions", this.GetCQGAlgorithmicOrderParametersClassExecutionInstructions},
                    { "GetCQGAlgorithmicOrderParametersClassExecutionPattern", this.GetCQGAlgorithmicOrderParametersClassExecutionPattern},
                    { "GetCQGAlgorithmicOrderParametersClassGTD", this.GetCQGAlgorithmicOrderParametersClassGTD},
                    { "GetCQGAlgorithmicOrderParametersClassGWAccountID", this.GetCQGAlgorithmicOrderParametersClassGWAccountID},
                    { "GetCQGAlgorithmicOrderParametersClassInstrumentName", this.GetCQGAlgorithmicOrderParametersClassInstrumentName},
                    { "GetCQGAlgorithmicOrderParametersClassParked", this.GetCQGAlgorithmicOrderParametersClassParked},
                    { "GetCQGAlgorithmicOrderParametersClassPreferredTrailingPeg", this.GetCQGAlgorithmicOrderParametersClassPreferredTrailingPeg},
                    { "GetCQGAlgorithmicOrderParametersClassPrice", this.GetCQGAlgorithmicOrderParametersClassPrice},
                    { "GetCQGAlgorithmicOrderParametersClassQuantity", this.GetCQGAlgorithmicOrderParametersClassQuantity},
                    { "GetCQGAlgorithmicOrderParametersClassSide", this.GetCQGAlgorithmicOrderParametersClassSide},
                    { "GetCQGAlgorithmicOrderParametersClassStopLimitPrice", this.GetCQGAlgorithmicOrderParametersClassStopLimitPrice},
                    { "GetCQGAlgorithmicOrderParametersClassTrailingOffset", this.GetCQGAlgorithmicOrderParametersClassTrailingOffset},
                    { "GetCQGAlgorithmicOrderParametersClassTriggerQuantity", this.GetCQGAlgorithmicOrderParametersClassTriggerQuantity},
                    { "GetCQGAlgorithmicOrderParametersClassType", this.GetCQGAlgorithmicOrderParametersClassType},
                    { "GetCQGAlgorithmicOrderParametersClassVisibleQuantity", this.GetCQGAlgorithmicOrderParametersClassVisibleQuantity},
                    { "GetCQGAlgorithmicOrderPropertiesClassCount", this.GetCQGAlgorithmicOrderPropertiesClassCount},
                    { "GetCQGAlgorithmicOrderPropertiesClassItem", this.GetCQGAlgorithmicOrderPropertiesClassItem},
                    { "GetCQGAlgorithmicOrderPropertyClassName", this.GetCQGAlgorithmicOrderPropertyClassName},
                    { "GetCQGAlgorithmicOrderPropertyClassValue", this.GetCQGAlgorithmicOrderPropertyClassValue},
                    { "GetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval", this.GetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval},
                    { "SetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval", this.SetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval},
                    { "GetCQGAPIConfigClassAgeToDeleteLogFileDays", this.GetCQGAPIConfigClassAgeToDeleteLogFileDays},
                    { "SetCQGAPIConfigClassAgeToDeleteLogFileDays", this.SetCQGAPIConfigClassAgeToDeleteLogFileDays},
                    { "GetCQGAPIConfigClassApplyDaylightSavingChanges", this.GetCQGAPIConfigClassApplyDaylightSavingChanges},
                    { "SetCQGAPIConfigClassApplyDaylightSavingChanges", this.SetCQGAPIConfigClassApplyDaylightSavingChanges},
                    { "GetCQGAPIConfigClassCollectionsThrowException", this.GetCQGAPIConfigClassCollectionsThrowException},
                    { "SetCQGAPIConfigClassCollectionsThrowException", this.SetCQGAPIConfigClassCollectionsThrowException},
                    { "GetCQGAPIConfigClassDefaultAccountMarginDetailing", this.GetCQGAPIConfigClassDefaultAccountMarginDetailing},
                    { "SetCQGAPIConfigClassDefaultAccountMarginDetailing", this.SetCQGAPIConfigClassDefaultAccountMarginDetailing},
                    { "GetCQGAPIConfigClassDefaultInstrumentBBAType", this.GetCQGAPIConfigClassDefaultInstrumentBBAType},
                    { "SetCQGAPIConfigClassDefaultInstrumentBBAType", this.SetCQGAPIConfigClassDefaultInstrumentBBAType},
                    { "GetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel", this.GetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel},
                    { "SetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel", this.SetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel},
                    { "GetCQGAPIConfigClassDefPositionSubscriptionLevel", this.GetCQGAPIConfigClassDefPositionSubscriptionLevel},
                    { "SetCQGAPIConfigClassDefPositionSubscriptionLevel", this.SetCQGAPIConfigClassDefPositionSubscriptionLevel},
                    { "GetCQGAPIConfigClassDOMUpdatesMode", this.GetCQGAPIConfigClassDOMUpdatesMode},
                    { "SetCQGAPIConfigClassDOMUpdatesMode", this.SetCQGAPIConfigClassDOMUpdatesMode},
                    { "GetCQGAPIConfigClassDOMUpdatesPeriod", this.GetCQGAPIConfigClassDOMUpdatesPeriod},
                    { "SetCQGAPIConfigClassDOMUpdatesPeriod", this.SetCQGAPIConfigClassDOMUpdatesPeriod},
                    { "GetCQGAPIConfigClassFireEventOnChangedPrices", this.GetCQGAPIConfigClassFireEventOnChangedPrices},
                    { "SetCQGAPIConfigClassFireEventOnChangedPrices", this.SetCQGAPIConfigClassFireEventOnChangedPrices},
                    { "GetCQGAPIConfigClassGatewayEnabled", this.GetCQGAPIConfigClassGatewayEnabled},
                    { "SetCQGAPIConfigClassGatewayEnabled", this.SetCQGAPIConfigClassGatewayEnabled},
                    { "GetCQGAPIConfigClassIncludeOrderTransactions", this.GetCQGAPIConfigClassIncludeOrderTransactions},
                    { "SetCQGAPIConfigClassIncludeOrderTransactions", this.SetCQGAPIConfigClassIncludeOrderTransactions},
                    { "GetCQGAPIConfigClassLogSeverity", this.GetCQGAPIConfigClassLogSeverity},
                    { "SetCQGAPIConfigClassLogSeverity", this.SetCQGAPIConfigClassLogSeverity},
                    { "GetCQGAPIConfigClassMaxLogFileCount", this.GetCQGAPIConfigClassMaxLogFileCount},
                    { "SetCQGAPIConfigClassMaxLogFileCount", this.SetCQGAPIConfigClassMaxLogFileCount},
                    { "GetCQGAPIConfigClassMaxLogFileDuration", this.GetCQGAPIConfigClassMaxLogFileDuration},
                    { "SetCQGAPIConfigClassMaxLogFileDuration", this.SetCQGAPIConfigClassMaxLogFileDuration},
                    { "GetCQGAPIConfigClassMaxLogFileSize", this.GetCQGAPIConfigClassMaxLogFileSize},
                    { "SetCQGAPIConfigClassMaxLogFileSize", this.SetCQGAPIConfigClassMaxLogFileSize},
                    { "GetCQGAPIConfigClassMessageProcessingTimeout", this.GetCQGAPIConfigClassMessageProcessingTimeout},
                    { "SetCQGAPIConfigClassMessageProcessingTimeout", this.SetCQGAPIConfigClassMessageProcessingTimeout},
                    { "GetCQGAPIConfigClassMetaDataEnabled", this.GetCQGAPIConfigClassMetaDataEnabled},
                    { "SetCQGAPIConfigClassMetaDataEnabled", this.SetCQGAPIConfigClassMetaDataEnabled},
                    { "GetCQGAPIConfigClassNewInstrumentChangeMode", this.GetCQGAPIConfigClassNewInstrumentChangeMode},
                    { "SetCQGAPIConfigClassNewInstrumentChangeMode", this.SetCQGAPIConfigClassNewInstrumentChangeMode},
                    { "GetCQGAPIConfigClassNewInstrumentMode", this.GetCQGAPIConfigClassNewInstrumentMode},
                    { "SetCQGAPIConfigClassNewInstrumentMode", this.SetCQGAPIConfigClassNewInstrumentMode},
                    { "GetCQGAPIConfigClassNonsynchronizedData", this.GetCQGAPIConfigClassNonsynchronizedData},
                    { "SetCQGAPIConfigClassNonsynchronizedData", this.SetCQGAPIConfigClassNonsynchronizedData},
                    { "GetCQGAPIConfigClassPendingOrderActionEnabled", this.GetCQGAPIConfigClassPendingOrderActionEnabled},
                    { "SetCQGAPIConfigClassPendingOrderActionEnabled", this.SetCQGAPIConfigClassPendingOrderActionEnabled},
                    { "GetCQGAPIConfigClassPositionDetailing", this.GetCQGAPIConfigClassPositionDetailing},
                    { "SetCQGAPIConfigClassPositionDetailing", this.SetCQGAPIConfigClassPositionDetailing},
                    { "GetCQGAPIConfigClassPriceMode", this.GetCQGAPIConfigClassPriceMode},
                    { "SetCQGAPIConfigClassPriceMode", this.SetCQGAPIConfigClassPriceMode},
                    { "GetCQGAPIConfigClassProviderPassword", this.GetCQGAPIConfigClassProviderPassword},
                    { "SetCQGAPIConfigClassProviderPassword", this.SetCQGAPIConfigClassProviderPassword},
                    { "GetCQGAPIConfigClassQueryAllAuthorizedTraders", this.GetCQGAPIConfigClassQueryAllAuthorizedTraders},
                    { "SetCQGAPIConfigClassQueryAllAuthorizedTraders", this.SetCQGAPIConfigClassQueryAllAuthorizedTraders},
                    { "GetCQGAPIConfigClassReadyStatusCheck", this.GetCQGAPIConfigClassReadyStatusCheck},
                    { "SetCQGAPIConfigClassReadyStatusCheck", this.SetCQGAPIConfigClassReadyStatusCheck},
                    { "GetCQGAPIConfigClassRemoteOpenAPILoginService", this.GetCQGAPIConfigClassRemoteOpenAPILoginService},
                    { "SetCQGAPIConfigClassRemoteOpenAPILoginService", this.SetCQGAPIConfigClassRemoteOpenAPILoginService},
                    { "GetCQGAPIConfigClassRemoteOpenAPIServer", this.GetCQGAPIConfigClassRemoteOpenAPIServer},
                    { "SetCQGAPIConfigClassRemoteOpenAPIServer", this.SetCQGAPIConfigClassRemoteOpenAPIServer},
                    { "GetCQGAPIConfigClassRemoteOpenAPIServers", this.GetCQGAPIConfigClassRemoteOpenAPIServers},
                    { "GetCQGAPIConfigClassReplaceLoginSession", this.GetCQGAPIConfigClassReplaceLoginSession},
                    { "SetCQGAPIConfigClassReplaceLoginSession", this.SetCQGAPIConfigClassReplaceLoginSession},
                    { "GetCQGAPIConfigClassSnapshotPeriod", this.GetCQGAPIConfigClassSnapshotPeriod},
                    { "SetCQGAPIConfigClassSnapshotPeriod", this.SetCQGAPIConfigClassSnapshotPeriod},
                    { "GetCQGAPIConfigClassStrategyManagerEnabled", this.GetCQGAPIConfigClassStrategyManagerEnabled},
                    { "SetCQGAPIConfigClassStrategyManagerEnabled", this.SetCQGAPIConfigClassStrategyManagerEnabled},
                    { "GetCQGAPIConfigClassTimeZoneCode", this.GetCQGAPIConfigClassTimeZoneCode},
                    { "SetCQGAPIConfigClassTimeZoneCode", this.SetCQGAPIConfigClassTimeZoneCode},
                    { "GetCQGAPIConfigClassUsedFromATLClient", this.GetCQGAPIConfigClassUsedFromATLClient},
                    { "SetCQGAPIConfigClassUsedFromATLClient", this.SetCQGAPIConfigClassUsedFromATLClient},
                    { "GetCQGAPIConfigClassUseOrderSide", this.GetCQGAPIConfigClassUseOrderSide},
                    { "SetCQGAPIConfigClassUseOrderSide", this.SetCQGAPIConfigClassUseOrderSide},
                    { "GetCQGBarsTimestampsClassCount", this.GetCQGBarsTimestampsClassCount},
                    { "GetCQGBarsTimestampsClassId", this.GetCQGBarsTimestampsClassId},
                    { "GetCQGBarsTimestampsClassItem", this.GetCQGBarsTimestampsClassItem},
                    { "GetCQGBarsTimestampsClassLastError", this.GetCQGBarsTimestampsClassLastError},
                    { "GetCQGBarsTimestampsClassStatus", this.GetCQGBarsTimestampsClassStatus},
                    { "GetCQGCELClassAccounts", this.GetCQGCELClassAccounts},
                    { "GetCQGCELClassAccountSubscriptionLevel", this.GetCQGCELClassAccountSubscriptionLevel},
                    { "SetCQGCELClassAccountSubscriptionLevel", this.SetCQGCELClassAccountSubscriptionLevel},
                    { "GetCQGCELClassAllAdvancedStudies", this.GetCQGCELClassAllAdvancedStudies},
                    { "GetCQGCELClassAllConditions", this.GetCQGCELClassAllConditions},
                    { "GetCQGCELClassAllConstantVolumeBars", this.GetCQGCELClassAllConstantVolumeBars},
                    { "GetCQGCELClassAllCustomStudies", this.GetCQGCELClassAllCustomStudies},
                    { "GetCQGCELClassAllExpressions", this.GetCQGCELClassAllExpressions},
                    { "GetCQGCELClassAllInstrumentsGroups", this.GetCQGCELClassAllInstrumentsGroups},
                    { "GetCQGCELClassAllManualFills", this.GetCQGCELClassAllManualFills},
                    { "GetCQGCELClassAllPointAndFigureBars", this.GetCQGCELClassAllPointAndFigureBars},
                    { "GetCQGCELClassAllStrategyDefinitions", this.GetCQGCELClassAllStrategyDefinitions},
                    { "GetCQGCELClassAllSubMinuteBars", this.GetCQGCELClassAllSubMinuteBars},
                    { "GetCQGCELClassAllTFlowBars", this.GetCQGCELClassAllTFlowBars},
                    { "GetCQGCELClassAllTicks", this.GetCQGCELClassAllTicks},
                    { "GetCQGCELClassAllTimedBars", this.GetCQGCELClassAllTimedBars},
                    { "GetCQGCELClassAllTradingSystems", this.GetCQGCELClassAllTradingSystems},
                    { "GetCQGCELClassAllYields", this.GetCQGCELClassAllYields},
                    { "GetCQGCELClassAPIConfiguration", this.GetCQGCELClassAPIConfiguration},
                    { "GetCQGCELClassConfiguration", this.GetCQGCELClassConfiguration},
                    { "SetCQGCELClassConfiguration", this.SetCQGCELClassConfiguration},
                    { "GetCQGCELClassCurrencyRates", this.GetCQGCELClassCurrencyRates},
                    { "GetCQGCELClassDirectEventsAccessor", this.GetCQGCELClassDirectEventsAccessor},
                    { "GetCQGCELClassEnvironment", this.GetCQGCELClassEnvironment},
                    { "GetCQGCELClassInstruments", this.GetCQGCELClassInstruments},
                    { "GetCQGCELClassInternalOrders", this.GetCQGCELClassInternalOrders},
                    { "GetCQGCELClassIsStarted", this.GetCQGCELClassIsStarted},
                    { "GetCQGCELClassLogger", this.GetCQGCELClassLogger},
                    { "GetCQGCELClassOrders", this.GetCQGCELClassOrders},
                    { "GetCQGCELClassOTPRequired", this.GetCQGCELClassOTPRequired},
                    { "GetCQGChangedTradeEntriesClassChangeFilter", this.GetCQGChangedTradeEntriesClassChangeFilter},
                    { "GetCQGChangedTradeEntriesClassCount", this.GetCQGChangedTradeEntriesClassCount},
                    { "GetCQGChangedTradeEntriesClassItem", this.GetCQGChangedTradeEntriesClassItem},
                    { "GetCQGChangedTradeEntryClassChangeCategory", this.GetCQGChangedTradeEntryClassChangeCategory},
                    { "GetCQGChangedTradeEntryClassTradeEntry", this.GetCQGChangedTradeEntryClassTradeEntry},
                    { "GetCQGChangedTradeExitClassChangeCategory", this.GetCQGChangedTradeExitClassChangeCategory},
                    { "GetCQGChangedTradeExitClassTradeExit", this.GetCQGChangedTradeExitClassTradeExit},
                    { "GetCQGChangedTradeExitsClassChangeFilter", this.GetCQGChangedTradeExitsClassChangeFilter},
                    { "GetCQGChangedTradeExitsClassCount", this.GetCQGChangedTradeExitsClassCount},
                    { "GetCQGChangedTradeExitsClassItem", this.GetCQGChangedTradeExitsClassItem},
                    { "GetCQGCommoditiesClassCount", this.GetCQGCommoditiesClassCount},
                    { "GetCQGCommoditiesClassGWAccountID", this.GetCQGCommoditiesClassGWAccountID},
                    { "GetCQGCommoditiesClassItem", this.GetCQGCommoditiesClassItem},
                    { "GetCQGCommodityInstrumentsClassCount", this.GetCQGCommodityInstrumentsClassCount},
                    { "GetCQGCommodityInstrumentsClassIsTradableOnly", this.GetCQGCommodityInstrumentsClassIsTradableOnly},
                    { "GetCQGCommodityInstrumentsClassItem", this.GetCQGCommodityInstrumentsClassItem},
                    { "GetCQGConditionClassCount", this.GetCQGConditionClassCount},
                    { "GetCQGConditionClassDefinition", this.GetCQGConditionClassDefinition},
                    { "GetCQGConditionClassEndTimestamp", this.GetCQGConditionClassEndTimestamp},
                    { "GetCQGConditionClassId", this.GetCQGConditionClassId},
                    { "GetCQGConditionClassItem", this.GetCQGConditionClassItem},
                    { "GetCQGConditionClassLastError", this.GetCQGConditionClassLastError},
                    { "GetCQGConditionClassRequest", this.GetCQGConditionClassRequest},
                    { "GetCQGConditionClassStartTimestamp", this.GetCQGConditionClassStartTimestamp},
                    { "GetCQGConditionClassStatus", this.GetCQGConditionClassStatus},
                    { "GetCQGConditionClassTag", this.GetCQGConditionClassTag},
                    { "SetCQGConditionClassTag", this.SetCQGConditionClassTag},
                    { "GetCQGConditionDefinitionClassName", this.GetCQGConditionDefinitionClassName},
                    { "GetCQGConditionDefinitionClassParameterDefinitions", this.GetCQGConditionDefinitionClassParameterDefinitions},
                    { "GetCQGConditionDefinitionsClassCount", this.GetCQGConditionDefinitionsClassCount},
                    { "GetCQGConditionDefinitionsClassItem", this.GetCQGConditionDefinitionsClassItem},
                    { "GetCQGConditionDefinitionsClassItemByName", this.GetCQGConditionDefinitionsClassItemByName},
                    { "GetCQGConditionRequestClassBaseExpression", this.GetCQGConditionRequestClassBaseExpression},
                    { "SetCQGConditionRequestClassBaseExpression", this.SetCQGConditionRequestClassBaseExpression},
                    { "GetCQGConditionRequestClassContinuation", this.GetCQGConditionRequestClassContinuation},
                    { "SetCQGConditionRequestClassContinuation", this.SetCQGConditionRequestClassContinuation},
                    { "GetCQGConditionRequestClassDaysBeforeExpiration", this.GetCQGConditionRequestClassDaysBeforeExpiration},
                    { "SetCQGConditionRequestClassDaysBeforeExpiration", this.SetCQGConditionRequestClassDaysBeforeExpiration},
                    { "GetCQGConditionRequestClassDefinition", this.GetCQGConditionRequestClassDefinition},
                    { "GetCQGConditionRequestClassEqualizeCloses", this.GetCQGConditionRequestClassEqualizeCloses},
                    { "SetCQGConditionRequestClassEqualizeCloses", this.SetCQGConditionRequestClassEqualizeCloses},
                    { "GetCQGConditionRequestClassHistoricalPeriod", this.GetCQGConditionRequestClassHistoricalPeriod},
                    { "SetCQGConditionRequestClassHistoricalPeriod", this.SetCQGConditionRequestClassHistoricalPeriod},
                    { "GetCQGConditionRequestClassIncludeEnd", this.GetCQGConditionRequestClassIncludeEnd},
                    { "SetCQGConditionRequestClassIncludeEnd", this.SetCQGConditionRequestClassIncludeEnd},
                    { "GetCQGConditionRequestClassIntradayPeriod", this.GetCQGConditionRequestClassIntradayPeriod},
                    { "SetCQGConditionRequestClassIntradayPeriod", this.SetCQGConditionRequestClassIntradayPeriod},
                    { "GetCQGConditionRequestClassParameter", this.GetCQGConditionRequestClassParameter},
                    { "SetCQGConditionRequestClassParameter", this.SetCQGConditionRequestClassParameter},
                    { "GetCQGConditionRequestClassRangeEnd", this.GetCQGConditionRequestClassRangeEnd},
                    { "SetCQGConditionRequestClassRangeEnd", this.SetCQGConditionRequestClassRangeEnd},
                    { "GetCQGConditionRequestClassRangeStart", this.GetCQGConditionRequestClassRangeStart},
                    { "SetCQGConditionRequestClassRangeStart", this.SetCQGConditionRequestClassRangeStart},
                    { "GetCQGConditionRequestClassRecalcPeriod", this.GetCQGConditionRequestClassRecalcPeriod},
                    { "SetCQGConditionRequestClassRecalcPeriod", this.SetCQGConditionRequestClassRecalcPeriod},
                    { "GetCQGConditionRequestClassSessionFlags", this.GetCQGConditionRequestClassSessionFlags},
                    { "SetCQGConditionRequestClassSessionFlags", this.SetCQGConditionRequestClassSessionFlags},
                    { "GetCQGConditionRequestClassSessionsFilter", this.GetCQGConditionRequestClassSessionsFilter},
                    { "SetCQGConditionRequestClassSessionsFilter", this.SetCQGConditionRequestClassSessionsFilter},
                    { "GetCQGConditionRequestClassSubscriptionLevel", this.GetCQGConditionRequestClassSubscriptionLevel},
                    { "SetCQGConditionRequestClassSubscriptionLevel", this.SetCQGConditionRequestClassSubscriptionLevel},
                    { "GetCQGConditionRequestClassUpdatesEnabled", this.GetCQGConditionRequestClassUpdatesEnabled},
                    { "SetCQGConditionRequestClassUpdatesEnabled", this.SetCQGConditionRequestClassUpdatesEnabled},
                    { "GetCQGConditionResultClassTimestamp", this.GetCQGConditionResultClassTimestamp},
                    { "GetCQGConditionResultClassValue", this.GetCQGConditionResultClassValue},
                    { "GetCQGConditionsClassCount", this.GetCQGConditionsClassCount},
                    { "GetCQGConditionsClassItem", this.GetCQGConditionsClassItem},
                    { "GetCQGConditionsClassItemById", this.GetCQGConditionsClassItemById},
                    { "GetCQGConstantVolumeBarClassActualVolume", this.GetCQGConstantVolumeBarClassActualVolume},
                    { "GetCQGConstantVolumeBarClassAskVolume", this.GetCQGConstantVolumeBarClassAskVolume},
                    { "GetCQGConstantVolumeBarClassAvg", this.GetCQGConstantVolumeBarClassAvg},
                    { "GetCQGConstantVolumeBarClassBidVolume", this.GetCQGConstantVolumeBarClassBidVolume},
                    { "GetCQGConstantVolumeBarClassClose", this.GetCQGConstantVolumeBarClassClose},
                    { "GetCQGConstantVolumeBarClassHigh", this.GetCQGConstantVolumeBarClassHigh},
                    { "GetCQGConstantVolumeBarClassHLC3", this.GetCQGConstantVolumeBarClassHLC3},
                    { "GetCQGConstantVolumeBarClassLow", this.GetCQGConstantVolumeBarClassLow},
                    { "GetCQGConstantVolumeBarClassMid", this.GetCQGConstantVolumeBarClassMid},
                    { "GetCQGConstantVolumeBarClassOpen", this.GetCQGConstantVolumeBarClassOpen},
                    { "GetCQGConstantVolumeBarClassRange", this.GetCQGConstantVolumeBarClassRange},
                    { "GetCQGConstantVolumeBarClassTickVolume", this.GetCQGConstantVolumeBarClassTickVolume},
                    { "GetCQGConstantVolumeBarClassTimestamp", this.GetCQGConstantVolumeBarClassTimestamp},
                    { "GetCQGConstantVolumeBarClassTimestampOffset", this.GetCQGConstantVolumeBarClassTimestampOffset},
                    { "GetCQGConstantVolumeBarClassTrueHigh", this.GetCQGConstantVolumeBarClassTrueHigh},
                    { "GetCQGConstantVolumeBarClassTrueLow", this.GetCQGConstantVolumeBarClassTrueLow},
                    { "GetCQGConstantVolumeBarClassTrueRange", this.GetCQGConstantVolumeBarClassTrueRange},
                    { "GetCQGConstantVolumeBarsClassCount", this.GetCQGConstantVolumeBarsClassCount},
                    { "GetCQGConstantVolumeBarsClassEndTimestamp", this.GetCQGConstantVolumeBarsClassEndTimestamp},
                    { "GetCQGConstantVolumeBarsClassId", this.GetCQGConstantVolumeBarsClassId},
                    { "GetCQGConstantVolumeBarsClassItem", this.GetCQGConstantVolumeBarsClassItem},
                    { "GetCQGConstantVolumeBarsClassLastError", this.GetCQGConstantVolumeBarsClassLastError},
                    { "GetCQGConstantVolumeBarsClassRequest", this.GetCQGConstantVolumeBarsClassRequest},
                    { "GetCQGConstantVolumeBarsClassStartTimestamp", this.GetCQGConstantVolumeBarsClassStartTimestamp},
                    { "GetCQGConstantVolumeBarsClassStatus", this.GetCQGConstantVolumeBarsClassStatus},
                    { "GetCQGConstantVolumeBarsClassTag", this.GetCQGConstantVolumeBarsClassTag},
                    { "SetCQGConstantVolumeBarsClassTag", this.SetCQGConstantVolumeBarsClassTag},
                    { "GetCQGConstantVolumeBarsCollectionClassCount", this.GetCQGConstantVolumeBarsCollectionClassCount},
                    { "GetCQGConstantVolumeBarsCollectionClassItem", this.GetCQGConstantVolumeBarsCollectionClassItem},
                    { "GetCQGConstantVolumeBarsCollectionClassItemById", this.GetCQGConstantVolumeBarsCollectionClassItemById},
                    { "GetCQGConstantVolumeBarsRequestClassContinuation", this.GetCQGConstantVolumeBarsRequestClassContinuation},
                    { "SetCQGConstantVolumeBarsRequestClassContinuation", this.SetCQGConstantVolumeBarsRequestClassContinuation},
                    { "GetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration", this.GetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration", this.SetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGConstantVolumeBarsRequestClassEqualizeCloses", this.GetCQGConstantVolumeBarsRequestClassEqualizeCloses},
                    { "SetCQGConstantVolumeBarsRequestClassEqualizeCloses", this.SetCQGConstantVolumeBarsRequestClassEqualizeCloses},
                    { "GetCQGConstantVolumeBarsRequestClassIncludeEnd", this.GetCQGConstantVolumeBarsRequestClassIncludeEnd},
                    { "SetCQGConstantVolumeBarsRequestClassIncludeEnd", this.SetCQGConstantVolumeBarsRequestClassIncludeEnd},
                    { "GetCQGConstantVolumeBarsRequestClassIncludeFlatTicks", this.GetCQGConstantVolumeBarsRequestClassIncludeFlatTicks},
                    { "SetCQGConstantVolumeBarsRequestClassIncludeFlatTicks", this.SetCQGConstantVolumeBarsRequestClassIncludeFlatTicks},
                    { "GetCQGConstantVolumeBarsRequestClassRangeEnd", this.GetCQGConstantVolumeBarsRequestClassRangeEnd},
                    { "SetCQGConstantVolumeBarsRequestClassRangeEnd", this.SetCQGConstantVolumeBarsRequestClassRangeEnd},
                    { "GetCQGConstantVolumeBarsRequestClassRangeStart", this.GetCQGConstantVolumeBarsRequestClassRangeStart},
                    { "SetCQGConstantVolumeBarsRequestClassRangeStart", this.SetCQGConstantVolumeBarsRequestClassRangeStart},
                    { "GetCQGConstantVolumeBarsRequestClassRecalcPeriod", this.GetCQGConstantVolumeBarsRequestClassRecalcPeriod},
                    { "SetCQGConstantVolumeBarsRequestClassRecalcPeriod", this.SetCQGConstantVolumeBarsRequestClassRecalcPeriod},
                    { "GetCQGConstantVolumeBarsRequestClassSessionFlags", this.GetCQGConstantVolumeBarsRequestClassSessionFlags},
                    { "SetCQGConstantVolumeBarsRequestClassSessionFlags", this.SetCQGConstantVolumeBarsRequestClassSessionFlags},
                    { "GetCQGConstantVolumeBarsRequestClassSessionsFilter", this.GetCQGConstantVolumeBarsRequestClassSessionsFilter},
                    { "SetCQGConstantVolumeBarsRequestClassSessionsFilter", this.SetCQGConstantVolumeBarsRequestClassSessionsFilter},
                    { "GetCQGConstantVolumeBarsRequestClassSubscriptionLevel", this.GetCQGConstantVolumeBarsRequestClassSubscriptionLevel},
                    { "SetCQGConstantVolumeBarsRequestClassSubscriptionLevel", this.SetCQGConstantVolumeBarsRequestClassSubscriptionLevel},
                    { "GetCQGConstantVolumeBarsRequestClassSymbol", this.GetCQGConstantVolumeBarsRequestClassSymbol},
                    { "SetCQGConstantVolumeBarsRequestClassSymbol", this.SetCQGConstantVolumeBarsRequestClassSymbol},
                    { "GetCQGConstantVolumeBarsRequestClassUpdatesEnabled", this.GetCQGConstantVolumeBarsRequestClassUpdatesEnabled},
                    { "SetCQGConstantVolumeBarsRequestClassUpdatesEnabled", this.SetCQGConstantVolumeBarsRequestClassUpdatesEnabled},
                    { "GetCQGConstantVolumeBarsRequestClassVolumeLevel", this.GetCQGConstantVolumeBarsRequestClassVolumeLevel},
                    { "SetCQGConstantVolumeBarsRequestClassVolumeLevel", this.SetCQGConstantVolumeBarsRequestClassVolumeLevel},
                    { "GetCQGConstantVolumeBarsRequestClassVolumeType", this.GetCQGConstantVolumeBarsRequestClassVolumeType},
                    { "SetCQGConstantVolumeBarsRequestClassVolumeType", this.SetCQGConstantVolumeBarsRequestClassVolumeType},
                    { "GetCQGCurrencyRateClassBaseCurrencyName", this.GetCQGCurrencyRateClassBaseCurrencyName},
                    { "GetCQGCurrencyRateClassCEL", this.GetCQGCurrencyRateClassCEL},
                    { "GetCQGCurrencyRateClassCurrencyName", this.GetCQGCurrencyRateClassCurrencyName},
                    { "GetCQGCurrencyRateClassFcmID", this.GetCQGCurrencyRateClassFcmID},
                    { "GetCQGCurrencyRateClassRate", this.GetCQGCurrencyRateClassRate},
                    { "GetCQGCurrencyRateClassServerTimestamp", this.GetCQGCurrencyRateClassServerTimestamp},
                    { "GetCQGCurrencyRateClassTimestamp", this.GetCQGCurrencyRateClassTimestamp},
                    { "GetCQGCurrencyRatesClassCount", this.GetCQGCurrencyRatesClassCount},
                    { "GetCQGCurrencyRatesClassItem", this.GetCQGCurrencyRatesClassItem},
                    { "GetCQGCurveDefinitionClassName", this.GetCQGCurveDefinitionClassName},
                    { "GetCQGCurveDefinitionsClassCount", this.GetCQGCurveDefinitionsClassCount},
                    { "GetCQGCurveDefinitionsClassItem", this.GetCQGCurveDefinitionsClassItem},
                    { "GetCQGCurveDefinitionsClassItemByName", this.GetCQGCurveDefinitionsClassItemByName},
                    { "GetCQGCurveHeadersClassCount", this.GetCQGCurveHeadersClassCount},
                    { "GetCQGCurveHeadersClassItem", this.GetCQGCurveHeadersClassItem},
                    { "GetCQGCurvesClassCount", this.GetCQGCurvesClassCount},
                    { "GetCQGCurvesClassItem", this.GetCQGCurvesClassItem},
                    { "GetCQGCurvesClassTimestamp", this.GetCQGCurvesClassTimestamp},
                    { "GetCQGCurvesClassTimestampOffset", this.GetCQGCurvesClassTimestampOffset},
                    { "GetCQGCustomStudiesClassCount", this.GetCQGCustomStudiesClassCount},
                    { "GetCQGCustomStudiesClassItem", this.GetCQGCustomStudiesClassItem},
                    { "GetCQGCustomStudiesClassItemById", this.GetCQGCustomStudiesClassItemById},
                    { "GetCQGCustomStudyClassCount", this.GetCQGCustomStudyClassCount},
                    { "GetCQGCustomStudyClassCurveHeaders", this.GetCQGCustomStudyClassCurveHeaders},
                    { "GetCQGCustomStudyClassDefinition", this.GetCQGCustomStudyClassDefinition},
                    { "GetCQGCustomStudyClassEndTimestamp", this.GetCQGCustomStudyClassEndTimestamp},
                    { "GetCQGCustomStudyClassId", this.GetCQGCustomStudyClassId},
                    { "GetCQGCustomStudyClassItem", this.GetCQGCustomStudyClassItem},
                    { "GetCQGCustomStudyClassLastError", this.GetCQGCustomStudyClassLastError},
                    { "GetCQGCustomStudyClassRequest", this.GetCQGCustomStudyClassRequest},
                    { "GetCQGCustomStudyClassStartTimestamp", this.GetCQGCustomStudyClassStartTimestamp},
                    { "GetCQGCustomStudyClassStatus", this.GetCQGCustomStudyClassStatus},
                    { "GetCQGCustomStudyClassTag", this.GetCQGCustomStudyClassTag},
                    { "SetCQGCustomStudyClassTag", this.SetCQGCustomStudyClassTag},
                    { "GetCQGCustomStudyDefinitionClassAbbreviation", this.GetCQGCustomStudyDefinitionClassAbbreviation},
                    { "GetCQGCustomStudyDefinitionClassCurveDefinitions", this.GetCQGCustomStudyDefinitionClassCurveDefinitions},
                    { "GetCQGCustomStudyDefinitionClassName", this.GetCQGCustomStudyDefinitionClassName},
                    { "GetCQGCustomStudyDefinitionClassParameterDefinitions", this.GetCQGCustomStudyDefinitionClassParameterDefinitions},
                    { "GetCQGCustomStudyDefinitionsClassCount", this.GetCQGCustomStudyDefinitionsClassCount},
                    { "GetCQGCustomStudyDefinitionsClassItem", this.GetCQGCustomStudyDefinitionsClassItem},
                    { "GetCQGCustomStudyDefinitionsClassItemByAbbreviation", this.GetCQGCustomStudyDefinitionsClassItemByAbbreviation},
                    { "GetCQGCustomStudyRequestClassBaseExpression", this.GetCQGCustomStudyRequestClassBaseExpression},
                    { "SetCQGCustomStudyRequestClassBaseExpression", this.SetCQGCustomStudyRequestClassBaseExpression},
                    { "GetCQGCustomStudyRequestClassContinuation", this.GetCQGCustomStudyRequestClassContinuation},
                    { "SetCQGCustomStudyRequestClassContinuation", this.SetCQGCustomStudyRequestClassContinuation},
                    { "GetCQGCustomStudyRequestClassDaysBeforeExpiration", this.GetCQGCustomStudyRequestClassDaysBeforeExpiration},
                    { "SetCQGCustomStudyRequestClassDaysBeforeExpiration", this.SetCQGCustomStudyRequestClassDaysBeforeExpiration},
                    { "GetCQGCustomStudyRequestClassDefinition", this.GetCQGCustomStudyRequestClassDefinition},
                    { "GetCQGCustomStudyRequestClassEqualizeCloses", this.GetCQGCustomStudyRequestClassEqualizeCloses},
                    { "SetCQGCustomStudyRequestClassEqualizeCloses", this.SetCQGCustomStudyRequestClassEqualizeCloses},
                    { "GetCQGCustomStudyRequestClassHistoricalPeriod", this.GetCQGCustomStudyRequestClassHistoricalPeriod},
                    { "SetCQGCustomStudyRequestClassHistoricalPeriod", this.SetCQGCustomStudyRequestClassHistoricalPeriod},
                    { "GetCQGCustomStudyRequestClassIncludeEnd", this.GetCQGCustomStudyRequestClassIncludeEnd},
                    { "SetCQGCustomStudyRequestClassIncludeEnd", this.SetCQGCustomStudyRequestClassIncludeEnd},
                    { "GetCQGCustomStudyRequestClassIntradayPeriod", this.GetCQGCustomStudyRequestClassIntradayPeriod},
                    { "SetCQGCustomStudyRequestClassIntradayPeriod", this.SetCQGCustomStudyRequestClassIntradayPeriod},
                    { "GetCQGCustomStudyRequestClassParameter", this.GetCQGCustomStudyRequestClassParameter},
                    { "SetCQGCustomStudyRequestClassParameter", this.SetCQGCustomStudyRequestClassParameter},
                    { "GetCQGCustomStudyRequestClassRangeEnd", this.GetCQGCustomStudyRequestClassRangeEnd},
                    { "SetCQGCustomStudyRequestClassRangeEnd", this.SetCQGCustomStudyRequestClassRangeEnd},
                    { "GetCQGCustomStudyRequestClassRangeStart", this.GetCQGCustomStudyRequestClassRangeStart},
                    { "SetCQGCustomStudyRequestClassRangeStart", this.SetCQGCustomStudyRequestClassRangeStart},
                    { "GetCQGCustomStudyRequestClassRecalcPeriod", this.GetCQGCustomStudyRequestClassRecalcPeriod},
                    { "SetCQGCustomStudyRequestClassRecalcPeriod", this.SetCQGCustomStudyRequestClassRecalcPeriod},
                    { "GetCQGCustomStudyRequestClassSessionFlags", this.GetCQGCustomStudyRequestClassSessionFlags},
                    { "SetCQGCustomStudyRequestClassSessionFlags", this.SetCQGCustomStudyRequestClassSessionFlags},
                    { "GetCQGCustomStudyRequestClassSessionsFilter", this.GetCQGCustomStudyRequestClassSessionsFilter},
                    { "SetCQGCustomStudyRequestClassSessionsFilter", this.SetCQGCustomStudyRequestClassSessionsFilter},
                    { "GetCQGCustomStudyRequestClassSubscriptionLevel", this.GetCQGCustomStudyRequestClassSubscriptionLevel},
                    { "SetCQGCustomStudyRequestClassSubscriptionLevel", this.SetCQGCustomStudyRequestClassSubscriptionLevel},
                    { "GetCQGCustomStudyRequestClassUpdatesEnabled", this.GetCQGCustomStudyRequestClassUpdatesEnabled},
                    { "SetCQGCustomStudyRequestClassUpdatesEnabled", this.SetCQGCustomStudyRequestClassUpdatesEnabled},
                    { "GetCQGDataSourceClassAbbreviation", this.GetCQGDataSourceClassAbbreviation},
                    { "GetCQGDataSourceClassName", this.GetCQGDataSourceClassName},
                    { "GetCQGDataSourceClassStatus", this.GetCQGDataSourceClassStatus},
                    { "GetCQGDataSourceClassSymbolTypes", this.GetCQGDataSourceClassSymbolTypes},
                    { "GetCQGDataSourcesClassCount", this.GetCQGDataSourcesClassCount},
                    { "GetCQGDataSourcesClassItem", this.GetCQGDataSourcesClassItem},
                    { "GetCQGDataSourcesClassItemByAbbreviation", this.GetCQGDataSourcesClassItemByAbbreviation},
                    { "GetCQGDataSourceSymbolClassAbbreviation", this.GetCQGDataSourceSymbolClassAbbreviation},
                    { "GetCQGDataSourceSymbolClassDescription", this.GetCQGDataSourceSymbolClassDescription},
                    { "GetCQGDataSourceSymbolClassType", this.GetCQGDataSourceSymbolClassType},
                    { "GetCQGDataSourceSymbolsClassCount", this.GetCQGDataSourceSymbolsClassCount},
                    { "GetCQGDataSourceSymbolsClassDataSourceAbbreviation", this.GetCQGDataSourceSymbolsClassDataSourceAbbreviation},
                    { "GetCQGDataSourceSymbolsClassItem", this.GetCQGDataSourceSymbolsClassItem},
                    { "GetCQGDOMQuotesClassCount", this.GetCQGDOMQuotesClassCount},
                    { "GetCQGDOMQuotesClassItem", this.GetCQGDOMQuotesClassItem},
                    { "GetCQGDOMQuotesClassItemByPrice", this.GetCQGDOMQuotesClassItemByPrice},
                    { "GetCQGEnvironmentClassCEL", this.GetCQGEnvironmentClassCEL},
                    { "GetCQGEnvironmentClassCELVersion", this.GetCQGEnvironmentClassCELVersion},
                    { "GetCQGEnvironmentClassCQGSerialNumber", this.GetCQGEnvironmentClassCQGSerialNumber},
                    { "GetCQGEnvironmentClassCQGVersion", this.GetCQGEnvironmentClassCQGVersion},
                    { "GetCQGEnvironmentClassDataConnectionStatus", this.GetCQGEnvironmentClassDataConnectionStatus},
                    { "GetCQGEnvironmentClassGWConnectionStatus", this.GetCQGEnvironmentClassGWConnectionStatus},
                    { "GetCQGEnvironmentClassGWLogonName", this.GetCQGEnvironmentClassGWLogonName},
                    { "GetCQGEnvironmentClassLastError", this.GetCQGEnvironmentClassLastError},
                    { "GetCQGEnvironmentClassLineTime", this.GetCQGEnvironmentClassLineTime},
                    { "GetCQGEnvironmentClassLocalTime", this.GetCQGEnvironmentClassLocalTime},
                    { "GetCQGEnvironmentClassMessagesPending", this.GetCQGEnvironmentClassMessagesPending},
                    { "GetCQGEnvironmentClassOrdersPending", this.GetCQGEnvironmentClassOrdersPending},
                    { "GetCQGEnvironmentClassRemoteOpenAPISession", this.GetCQGEnvironmentClassRemoteOpenAPISession},
                    { "GetCQGErrorClassCode", this.GetCQGErrorClassCode},
                    { "GetCQGErrorClassDescription", this.GetCQGErrorClassDescription},
                    { "GetCQGErrorClassOwner", this.GetCQGErrorClassOwner},
                    { "GetCQGExchangesClassCount", this.GetCQGExchangesClassCount},
                    { "GetCQGExchangesClassGWAccountID", this.GetCQGExchangesClassGWAccountID},
                    { "GetCQGExchangesClassItem", this.GetCQGExchangesClassItem},
                    { "GetCQGExecutionPatternClassParameters", this.GetCQGExecutionPatternClassParameters},
                    { "GetCQGExecutionPatternClassPatternString", this.GetCQGExecutionPatternClassPatternString},
                    { "GetCQGExecutionPatternParameterClassName", this.GetCQGExecutionPatternParameterClassName},
                    { "GetCQGExecutionPatternParameterClassParameters", this.GetCQGExecutionPatternParameterClassParameters},
                    { "GetCQGExecutionPatternParameterClassType", this.GetCQGExecutionPatternParameterClassType},
                    { "GetCQGExecutionPatternParameterClassValue", this.GetCQGExecutionPatternParameterClassValue},
                    { "SetCQGExecutionPatternParameterClassValue", this.SetCQGExecutionPatternParameterClassValue},
                    { "GetCQGExecutionPatternParametersClassCount", this.GetCQGExecutionPatternParametersClassCount},
                    { "GetCQGExecutionPatternParametersClassItem", this.GetCQGExecutionPatternParametersClassItem},
                    { "GetCQGExpressionClassCount", this.GetCQGExpressionClassCount},
                    { "GetCQGExpressionClassEndTimestamp", this.GetCQGExpressionClassEndTimestamp},
                    { "GetCQGExpressionClassId", this.GetCQGExpressionClassId},
                    { "GetCQGExpressionClassItem", this.GetCQGExpressionClassItem},
                    { "GetCQGExpressionClassLastError", this.GetCQGExpressionClassLastError},
                    { "GetCQGExpressionClassOutputHeaders", this.GetCQGExpressionClassOutputHeaders},
                    { "GetCQGExpressionClassRequest", this.GetCQGExpressionClassRequest},
                    { "GetCQGExpressionClassStartTimestamp", this.GetCQGExpressionClassStartTimestamp},
                    { "GetCQGExpressionClassStatus", this.GetCQGExpressionClassStatus},
                    { "GetCQGExpressionClassTag", this.GetCQGExpressionClassTag},
                    { "SetCQGExpressionClassTag", this.SetCQGExpressionClassTag},
                    { "GetCQGExpressionOutputHeadersClassCount", this.GetCQGExpressionOutputHeadersClassCount},
                    { "GetCQGExpressionOutputHeadersClassItem", this.GetCQGExpressionOutputHeadersClassItem},
                    { "GetCQGExpressionOutputsClassCount", this.GetCQGExpressionOutputsClassCount},
                    { "GetCQGExpressionOutputsClassItem", this.GetCQGExpressionOutputsClassItem},
                    { "GetCQGExpressionOutputsClassTimestamp", this.GetCQGExpressionOutputsClassTimestamp},
                    { "GetCQGExpressionOutputsClassTimestampOffset", this.GetCQGExpressionOutputsClassTimestampOffset},
                    { "GetCQGExpressionRequestClassContinuation", this.GetCQGExpressionRequestClassContinuation},
                    { "SetCQGExpressionRequestClassContinuation", this.SetCQGExpressionRequestClassContinuation},
                    { "GetCQGExpressionRequestClassDaysBeforeExpiration", this.GetCQGExpressionRequestClassDaysBeforeExpiration},
                    { "SetCQGExpressionRequestClassDaysBeforeExpiration", this.SetCQGExpressionRequestClassDaysBeforeExpiration},
                    { "GetCQGExpressionRequestClassEqualizeCloses", this.GetCQGExpressionRequestClassEqualizeCloses},
                    { "SetCQGExpressionRequestClassEqualizeCloses", this.SetCQGExpressionRequestClassEqualizeCloses},
                    { "GetCQGExpressionRequestClassHistoricalPeriod", this.GetCQGExpressionRequestClassHistoricalPeriod},
                    { "SetCQGExpressionRequestClassHistoricalPeriod", this.SetCQGExpressionRequestClassHistoricalPeriod},
                    { "GetCQGExpressionRequestClassIncludeEnd", this.GetCQGExpressionRequestClassIncludeEnd},
                    { "SetCQGExpressionRequestClassIncludeEnd", this.SetCQGExpressionRequestClassIncludeEnd},
                    { "GetCQGExpressionRequestClassIntradayPeriod", this.GetCQGExpressionRequestClassIntradayPeriod},
                    { "SetCQGExpressionRequestClassIntradayPeriod", this.SetCQGExpressionRequestClassIntradayPeriod},
                    { "GetCQGExpressionRequestClassRangeEnd", this.GetCQGExpressionRequestClassRangeEnd},
                    { "SetCQGExpressionRequestClassRangeEnd", this.SetCQGExpressionRequestClassRangeEnd},
                    { "GetCQGExpressionRequestClassRangeStart", this.GetCQGExpressionRequestClassRangeStart},
                    { "SetCQGExpressionRequestClassRangeStart", this.SetCQGExpressionRequestClassRangeStart},
                    { "GetCQGExpressionRequestClassRecalcPeriod", this.GetCQGExpressionRequestClassRecalcPeriod},
                    { "SetCQGExpressionRequestClassRecalcPeriod", this.SetCQGExpressionRequestClassRecalcPeriod},
                    { "GetCQGExpressionRequestClassSessionFlags", this.GetCQGExpressionRequestClassSessionFlags},
                    { "SetCQGExpressionRequestClassSessionFlags", this.SetCQGExpressionRequestClassSessionFlags},
                    { "GetCQGExpressionRequestClassSessionsFilter", this.GetCQGExpressionRequestClassSessionsFilter},
                    { "SetCQGExpressionRequestClassSessionsFilter", this.SetCQGExpressionRequestClassSessionsFilter},
                    { "GetCQGExpressionRequestClassSubExpression", this.GetCQGExpressionRequestClassSubExpression},
                    { "GetCQGExpressionRequestClassSubExpressionCount", this.GetCQGExpressionRequestClassSubExpressionCount},
                    { "GetCQGExpressionRequestClassSubscriptionLevel", this.GetCQGExpressionRequestClassSubscriptionLevel},
                    { "SetCQGExpressionRequestClassSubscriptionLevel", this.SetCQGExpressionRequestClassSubscriptionLevel},
                    { "GetCQGExpressionRequestClassUpdatesEnabled", this.GetCQGExpressionRequestClassUpdatesEnabled},
                    { "SetCQGExpressionRequestClassUpdatesEnabled", this.SetCQGExpressionRequestClassUpdatesEnabled},
                    { "GetCQGExpressionsClassCount", this.GetCQGExpressionsClassCount},
                    { "GetCQGExpressionsClassItem", this.GetCQGExpressionsClassItem},
                    { "GetCQGExpressionsClassItemById", this.GetCQGExpressionsClassItemById},
                    { "GetCQGFillClassGWTradesCount", this.GetCQGFillClassGWTradesCount},
                    { "GetCQGFillClassId", this.GetCQGFillClassId},
                    { "GetCQGFillClassLegCount", this.GetCQGFillClassLegCount},
                    { "GetCQGFillClassOrder", this.GetCQGFillClassOrder},
                    { "GetCQGFillClassRefFillId", this.GetCQGFillClassRefFillId},
                    { "GetCQGFillClassServerTimestamp", this.GetCQGFillClassServerTimestamp},
                    { "GetCQGFillClassStatus", this.GetCQGFillClassStatus},
                    { "GetCQGFillClassTimestamp", this.GetCQGFillClassTimestamp},
                    { "GetCQGFillsClassCount", this.GetCQGFillsClassCount},
                    { "GetCQGFillsClassItem", this.GetCQGFillsClassItem},
                    { "GetCQGFillsClassItemByIndex", this.GetCQGFillsClassItemByIndex},
                    { "GetCQGGWTradeClassAggressive", this.GetCQGGWTradeClassAggressive},
                    { "GetCQGGWTradeClassCurrency", this.GetCQGGWTradeClassCurrency},
                    { "GetCQGGWTradeClassDisplayPrice", this.GetCQGGWTradeClassDisplayPrice},
                    { "GetCQGGWTradeClassExchangeTradeDate", this.GetCQGGWTradeClassExchangeTradeDate},
                    { "GetCQGGWTradeClassFill", this.GetCQGGWTradeClassFill},
                    { "GetCQGGWTradeClassId", this.GetCQGGWTradeClassId},
                    { "GetCQGGWTradeClassInstrumentName", this.GetCQGGWTradeClassInstrumentName},
                    { "GetCQGGWTradeClassLeg", this.GetCQGGWTradeClassLeg},
                    { "GetCQGGWTradeClassPrice", this.GetCQGGWTradeClassPrice},
                    { "GetCQGGWTradeClassQuantity", this.GetCQGGWTradeClassQuantity},
                    { "GetCQGGWTradeClassSide", this.GetCQGGWTradeClassSide},
                    { "GetCQGGWTradeClassStatementDate", this.GetCQGGWTradeClassStatementDate},
                    { "GetCQGGWTradesClassCount", this.GetCQGGWTradesClassCount},
                    { "GetCQGGWTradesClassItem", this.GetCQGGWTradesClassItem},
                    { "GetCQGGWTradesClassItemByIndex", this.GetCQGGWTradesClassItemByIndex},
                    { "GetCQGHistoricalSessionsRequestClassRangeEnd", this.GetCQGHistoricalSessionsRequestClassRangeEnd},
                    { "SetCQGHistoricalSessionsRequestClassRangeEnd", this.SetCQGHistoricalSessionsRequestClassRangeEnd},
                    { "GetCQGHistoricalSessionsRequestClassRangeStart", this.GetCQGHistoricalSessionsRequestClassRangeStart},
                    { "SetCQGHistoricalSessionsRequestClassRangeStart", this.SetCQGHistoricalSessionsRequestClassRangeStart},
                    { "GetCQGHistoricalSessionsRequestClassSymbol", this.GetCQGHistoricalSessionsRequestClassSymbol},
                    { "SetCQGHistoricalSessionsRequestClassSymbol", this.SetCQGHistoricalSessionsRequestClassSymbol},
                    { "GetCQGHistoricalSessionsRequestClassType", this.GetCQGHistoricalSessionsRequestClassType},
                    { "SetCQGHistoricalSessionsRequestClassType", this.SetCQGHistoricalSessionsRequestClassType},
                    { "GetCQGHolidayClassHolidayDate", this.GetCQGHolidayClassHolidayDate},
                    { "GetCQGHolidayClassIsDaily", this.GetCQGHolidayClassIsDaily},
                    { "GetCQGHolidayClassSessionMask", this.GetCQGHolidayClassSessionMask},
                    { "GetCQGHolidaysClassCount", this.GetCQGHolidaysClassCount},
                    { "GetCQGHolidaysClassItem", this.GetCQGHolidaysClassItem},
                    { "GetCQGHolidaysClassSessions", this.GetCQGHolidaysClassSessions},
                    { "GetCQGInstrumentClassAsk", this.GetCQGInstrumentClassAsk},
                    { "GetCQGInstrumentClassBBAType", this.GetCQGInstrumentClassBBAType},
                    { "SetCQGInstrumentClassBBAType", this.SetCQGInstrumentClassBBAType},
                    { "GetCQGInstrumentClassBid", this.GetCQGInstrumentClassBid},
                    { "GetCQGInstrumentClassCEL", this.GetCQGInstrumentClassCEL},
                    { "GetCQGInstrumentClassCommodity", this.GetCQGInstrumentClassCommodity},
                    { "GetCQGInstrumentClassCountry", this.GetCQGInstrumentClassCountry},
                    { "GetCQGInstrumentClassCurrency", this.GetCQGInstrumentClassCurrency},
                    { "GetCQGInstrumentClassDataSubscriptionLevel", this.GetCQGInstrumentClassDataSubscriptionLevel},
                    { "SetCQGInstrumentClassDataSubscriptionLevel", this.SetCQGInstrumentClassDataSubscriptionLevel},
                    { "GetCQGInstrumentClassDescription", this.GetCQGInstrumentClassDescription},
                    { "GetCQGInstrumentClassDOMAsks", this.GetCQGInstrumentClassDOMAsks},
                    { "GetCQGInstrumentClassDOMBids", this.GetCQGInstrumentClassDOMBids},
                    { "GetCQGInstrumentClassDOMBookLimit", this.GetCQGInstrumentClassDOMBookLimit},
                    { "SetCQGInstrumentClassDOMBookLimit", this.SetCQGInstrumentClassDOMBookLimit},
                    { "GetCQGInstrumentClassDOMStatus", this.GetCQGInstrumentClassDOMStatus},
                    { "SetCQGInstrumentClassDOMStatus", this.SetCQGInstrumentClassDOMStatus},
                    { "GetCQGInstrumentClassDTE", this.GetCQGInstrumentClassDTE},
                    { "GetCQGInstrumentClassExchangeAbbreviation", this.GetCQGInstrumentClassExchangeAbbreviation},
                    { "GetCQGInstrumentClassExchangeID", this.GetCQGInstrumentClassExchangeID},
                    { "GetCQGInstrumentClassExpirationDate", this.GetCQGInstrumentClassExpirationDate},
                    { "GetCQGInstrumentClassFullName", this.GetCQGInstrumentClassFullName},
                    { "GetCQGInstrumentClassInitialMargin", this.GetCQGInstrumentClassInitialMargin},
                    { "GetCQGInstrumentClassInstrumentID", this.GetCQGInstrumentClassInstrumentID},
                    { "GetCQGInstrumentClassInstrumentType", this.GetCQGInstrumentClassInstrumentType},
                    { "GetCQGInstrumentClassIsDownTick", this.GetCQGInstrumentClassIsDownTick},
                    { "GetCQGInstrumentClassIsFastMarket", this.GetCQGInstrumentClassIsFastMarket},
                    { "GetCQGInstrumentClassIsUpTick", this.GetCQGInstrumentClassIsUpTick},
                    { "GetCQGInstrumentClassMaintenanceMargin", this.GetCQGInstrumentClassMaintenanceMargin},
                    { "GetCQGInstrumentClassMonth", this.GetCQGInstrumentClassMonth},
                    { "GetCQGInstrumentClassMonthChar", this.GetCQGInstrumentClassMonthChar},
                    { "GetCQGInstrumentClassNetChange", this.GetCQGInstrumentClassNetChange},
                    { "GetCQGInstrumentClassPreferredSessionsName", this.GetCQGInstrumentClassPreferredSessionsName},
                    { "GetCQGInstrumentClassProperties", this.GetCQGInstrumentClassProperties},
                    { "GetCQGInstrumentClassPropertyLevel", this.GetCQGInstrumentClassPropertyLevel},
                    { "GetCQGInstrumentClassQuoteLevel", this.GetCQGInstrumentClassQuoteLevel},
                    { "GetCQGInstrumentClassQuotes", this.GetCQGInstrumentClassQuotes},
                    { "GetCQGInstrumentClassScale", this.GetCQGInstrumentClassScale},
                    { "GetCQGInstrumentClassServerTimestamp", this.GetCQGInstrumentClassServerTimestamp},
                    { "GetCQGInstrumentClassSessionMask", this.GetCQGInstrumentClassSessionMask},
                    { "GetCQGInstrumentClassSessionNumber", this.GetCQGInstrumentClassSessionNumber},
                    { "GetCQGInstrumentClassSessions", this.GetCQGInstrumentClassSessions},
                    { "GetCQGInstrumentClassStrike", this.GetCQGInstrumentClassStrike},
                    { "GetCQGInstrumentClassTag", this.GetCQGInstrumentClassTag},
                    { "SetCQGInstrumentClassTag", this.SetCQGInstrumentClassTag},
                    { "GetCQGInstrumentClassTickSize", this.GetCQGInstrumentClassTickSize},
                    { "GetCQGInstrumentClassTickSizeFractionDenominator", this.GetCQGInstrumentClassTickSizeFractionDenominator},
                    { "GetCQGInstrumentClassTickSizeFractionNumerator", this.GetCQGInstrumentClassTickSizeFractionNumerator},
                    { "GetCQGInstrumentClassTickValue", this.GetCQGInstrumentClassTickValue},
                    { "GetCQGInstrumentClassTimestamp", this.GetCQGInstrumentClassTimestamp},
                    { "GetCQGInstrumentClassTodayCTotalVolume", this.GetCQGInstrumentClassTodayCTotalVolume},
                    { "GetCQGInstrumentClassTrade", this.GetCQGInstrumentClassTrade},
                    { "GetCQGInstrumentClassUnderlyingInstrument", this.GetCQGInstrumentClassUnderlyingInstrument},
                    { "GetCQGInstrumentClassUnderlyingInstrumentName", this.GetCQGInstrumentClassUnderlyingInstrumentName},
                    { "GetCQGInstrumentClassYCOI", this.GetCQGInstrumentClassYCOI},
                    { "GetCQGInstrumentClassYear", this.GetCQGInstrumentClassYear},
                    { "GetCQGInstrumentClassYearString", this.GetCQGInstrumentClassYearString},
                    { "GetCQGInstrumentClassYesterdayCTotalVolume", this.GetCQGInstrumentClassYesterdayCTotalVolume},
                    { "GetCQGInstrumentPropertiesClassCount", this.GetCQGInstrumentPropertiesClassCount},
                    { "GetCQGInstrumentPropertiesClassItem", this.GetCQGInstrumentPropertiesClassItem},
                    { "GetCQGInstrumentPropertyClassInstrument", this.GetCQGInstrumentPropertyClassInstrument},
                    { "GetCQGInstrumentPropertyClassName", this.GetCQGInstrumentPropertyClassName},
                    { "GetCQGInstrumentPropertyClassServerTimestamp", this.GetCQGInstrumentPropertyClassServerTimestamp},
                    { "GetCQGInstrumentPropertyClassTimestamp", this.GetCQGInstrumentPropertyClassTimestamp},
                    { "GetCQGInstrumentPropertyClassType", this.GetCQGInstrumentPropertyClassType},
                    { "GetCQGInstrumentPropertyClassValue", this.GetCQGInstrumentPropertyClassValue},
                    { "GetCQGInstrumentsClassCount", this.GetCQGInstrumentsClassCount},
                    { "GetCQGInstrumentsClassItem", this.GetCQGInstrumentsClassItem},
                    { "GetCQGInstrumentsGroupClassId", this.GetCQGInstrumentsGroupClassId},
                    { "GetCQGInstrumentsGroupClassInstruments", this.GetCQGInstrumentsGroupClassInstruments},
                    { "GetCQGInstrumentsGroupClassRequest", this.GetCQGInstrumentsGroupClassRequest},
                    { "GetCQGInstrumentsGroupRequestClassCommodity", this.GetCQGInstrumentsGroupRequestClassCommodity},
                    { "SetCQGInstrumentsGroupRequestClassCommodity", this.SetCQGInstrumentsGroupRequestClassCommodity},
                    { "GetCQGInstrumentsGroupRequestClassInstrumentTypes", this.GetCQGInstrumentsGroupRequestClassInstrumentTypes},
                    { "SetCQGInstrumentsGroupRequestClassInstrumentTypes", this.SetCQGInstrumentsGroupRequestClassInstrumentTypes},
                    { "GetCQGInstrumentsGroupRequestClassRangeEnd", this.GetCQGInstrumentsGroupRequestClassRangeEnd},
                    { "SetCQGInstrumentsGroupRequestClassRangeEnd", this.SetCQGInstrumentsGroupRequestClassRangeEnd},
                    { "GetCQGInstrumentsGroupRequestClassRangeStart", this.GetCQGInstrumentsGroupRequestClassRangeStart},
                    { "SetCQGInstrumentsGroupRequestClassRangeStart", this.SetCQGInstrumentsGroupRequestClassRangeStart},
                    { "GetCQGInstrumentsGroupRequestClassSubscriptionLevel", this.GetCQGInstrumentsGroupRequestClassSubscriptionLevel},
                    { "SetCQGInstrumentsGroupRequestClassSubscriptionLevel", this.SetCQGInstrumentsGroupRequestClassSubscriptionLevel},
                    { "GetCQGInstrumentsGroupsClassCount", this.GetCQGInstrumentsGroupsClassCount},
                    { "GetCQGInstrumentsGroupsClassItem", this.GetCQGInstrumentsGroupsClassItem},
                    { "GetCQGInstrumentSubscriptionRequestClassDOMBBAType", this.GetCQGInstrumentSubscriptionRequestClassDOMBBAType},
                    { "SetCQGInstrumentSubscriptionRequestClassDOMBBAType", this.SetCQGInstrumentSubscriptionRequestClassDOMBBAType},
                    { "GetCQGInstrumentSubscriptionRequestClassDOMStatus", this.GetCQGInstrumentSubscriptionRequestClassDOMStatus},
                    { "SetCQGInstrumentSubscriptionRequestClassDOMStatus", this.SetCQGInstrumentSubscriptionRequestClassDOMStatus},
                    { "GetCQGInstrumentSubscriptionRequestClassPropertyLevel", this.GetCQGInstrumentSubscriptionRequestClassPropertyLevel},
                    { "SetCQGInstrumentSubscriptionRequestClassPropertyLevel", this.SetCQGInstrumentSubscriptionRequestClassPropertyLevel},
                    { "GetCQGInstrumentSubscriptionRequestClassQuoteLevel", this.GetCQGInstrumentSubscriptionRequestClassQuoteLevel},
                    { "SetCQGInstrumentSubscriptionRequestClassQuoteLevel", this.SetCQGInstrumentSubscriptionRequestClassQuoteLevel},
                    { "GetCQGInstrumentSubscriptionRequestClassSymbol", this.GetCQGInstrumentSubscriptionRequestClassSymbol},
                    { "SetCQGInstrumentSubscriptionRequestClassSymbol", this.SetCQGInstrumentSubscriptionRequestClassSymbol},
                    { "GetCQGIntegerCollectionClassCount", this.GetCQGIntegerCollectionClassCount},
                    { "GetCQGIntegerCollectionClassItem", this.GetCQGIntegerCollectionClassItem},
                    { "GetCQGLoggerClassCEL", this.GetCQGLoggerClassCEL},
                    { "GetCQGManualFillClassDisplayPrice", this.GetCQGManualFillClassDisplayPrice},
                    { "GetCQGManualFillClassGWAccountID", this.GetCQGManualFillClassGWAccountID},
                    { "GetCQGManualFillClassInstrumentName", this.GetCQGManualFillClassInstrumentName},
                    { "GetCQGManualFillClassNote", this.GetCQGManualFillClassNote},
                    { "GetCQGManualFillClassPrice", this.GetCQGManualFillClassPrice},
                    { "GetCQGManualFillClassQuantity", this.GetCQGManualFillClassQuantity},
                    { "GetCQGManualFillClassSide", this.GetCQGManualFillClassSide},
                    { "GetCQGManualFillClassStatementDate", this.GetCQGManualFillClassStatementDate},
                    { "GetCQGManualFillClassTradeId", this.GetCQGManualFillClassTradeId},
                    { "GetCQGManualFillClassTradeTimestamp", this.GetCQGManualFillClassTradeTimestamp},
                    { "GetCQGManualFillRequestClassGWAccountID", this.GetCQGManualFillRequestClassGWAccountID},
                    { "SetCQGManualFillRequestClassGWAccountID", this.SetCQGManualFillRequestClassGWAccountID},
                    { "GetCQGManualFillRequestClassInstrumentName", this.GetCQGManualFillRequestClassInstrumentName},
                    { "SetCQGManualFillRequestClassInstrumentName", this.SetCQGManualFillRequestClassInstrumentName},
                    { "GetCQGManualFillRequestClassNote", this.GetCQGManualFillRequestClassNote},
                    { "SetCQGManualFillRequestClassNote", this.SetCQGManualFillRequestClassNote},
                    { "GetCQGManualFillRequestClassPrice", this.GetCQGManualFillRequestClassPrice},
                    { "SetCQGManualFillRequestClassPrice", this.SetCQGManualFillRequestClassPrice},
                    { "GetCQGManualFillRequestClassQuantity", this.GetCQGManualFillRequestClassQuantity},
                    { "SetCQGManualFillRequestClassQuantity", this.SetCQGManualFillRequestClassQuantity},
                    { "GetCQGManualFillRequestClassSide", this.GetCQGManualFillRequestClassSide},
                    { "SetCQGManualFillRequestClassSide", this.SetCQGManualFillRequestClassSide},
                    { "GetCQGManualFillRequestClassStatementDate", this.GetCQGManualFillRequestClassStatementDate},
                    { "SetCQGManualFillRequestClassStatementDate", this.SetCQGManualFillRequestClassStatementDate},
                    { "GetCQGManualFillRequestClassTradeId", this.GetCQGManualFillRequestClassTradeId},
                    { "SetCQGManualFillRequestClassTradeId", this.SetCQGManualFillRequestClassTradeId},
                    { "GetCQGManualFillRequestClassTradeTimestamp", this.GetCQGManualFillRequestClassTradeTimestamp},
                    { "SetCQGManualFillRequestClassTradeTimestamp", this.SetCQGManualFillRequestClassTradeTimestamp},
                    { "GetCQGManualFillsClassCount", this.GetCQGManualFillsClassCount},
                    { "GetCQGManualFillsClassDataLevel", this.GetCQGManualFillsClassDataLevel},
                    { "GetCQGManualFillsClassGWAccountID", this.GetCQGManualFillsClassGWAccountID},
                    { "GetCQGManualFillsClassItem", this.GetCQGManualFillsClassItem},
                    { "GetCQGManualFillsCollectionClassCount", this.GetCQGManualFillsCollectionClassCount},
                    { "GetCQGManualFillsCollectionClassItem", this.GetCQGManualFillsCollectionClassItem},
                    { "GetCQGModifiedPropertiesClassCount", this.GetCQGModifiedPropertiesClassCount},
                    { "GetCQGModifiedPropertiesClassItem", this.GetCQGModifiedPropertiesClassItem},
                    { "GetCQGModifiedPropertiesClassItemByIndex", this.GetCQGModifiedPropertiesClassItemByIndex},
                    { "GetCQGModifiedPropertyClassDescription", this.GetCQGModifiedPropertyClassDescription},
                    { "GetCQGModifiedPropertyClassName", this.GetCQGModifiedPropertyClassName},
                    { "GetCQGModifiedPropertyClassNewValue", this.GetCQGModifiedPropertyClassNewValue},
                    { "GetCQGModifiedPropertyClassPreviousValue", this.GetCQGModifiedPropertyClassPreviousValue},
                    { "GetCQGModifiedPropertyClassType", this.GetCQGModifiedPropertyClassType},
                    { "GetCQGOrderActionRequestClassAccount", this.GetCQGOrderActionRequestClassAccount},
                    { "SetCQGOrderActionRequestClassAccount", this.SetCQGOrderActionRequestClassAccount},
                    { "GetCQGOrderActionRequestClassAlgorithmID", this.GetCQGOrderActionRequestClassAlgorithmID},
                    { "SetCQGOrderActionRequestClassAlgorithmID", this.SetCQGOrderActionRequestClassAlgorithmID},
                    { "GetCQGOrderActionRequestClassAlgorithmStringID", this.GetCQGOrderActionRequestClassAlgorithmStringID},
                    { "SetCQGOrderActionRequestClassAlgorithmStringID", this.SetCQGOrderActionRequestClassAlgorithmStringID},
                    { "GetCQGOrderActionRequestClassFromAllTraders", this.GetCQGOrderActionRequestClassFromAllTraders},
                    { "SetCQGOrderActionRequestClassFromAllTraders", this.SetCQGOrderActionRequestClassFromAllTraders},
                    { "GetCQGOrderActionRequestClassInstrument", this.GetCQGOrderActionRequestClassInstrument},
                    { "SetCQGOrderActionRequestClassInstrument", this.SetCQGOrderActionRequestClassInstrument},
                    { "GetCQGOrderActionRequestClassOrderSide", this.GetCQGOrderActionRequestClassOrderSide},
                    { "SetCQGOrderActionRequestClassOrderSide", this.SetCQGOrderActionRequestClassOrderSide},
                    { "GetCQGOrderActionRequestClassParked", this.GetCQGOrderActionRequestClassParked},
                    { "SetCQGOrderActionRequestClassParked", this.SetCQGOrderActionRequestClassParked},
                    { "GetCQGOrderChainClassAlgorithmID", this.GetCQGOrderChainClassAlgorithmID},
                    { "SetCQGOrderChainClassAlgorithmID", this.SetCQGOrderChainClassAlgorithmID},
                    { "GetCQGOrderChainClassAlgorithmStringID", this.GetCQGOrderChainClassAlgorithmStringID},
                    { "SetCQGOrderChainClassAlgorithmStringID", this.SetCQGOrderChainClassAlgorithmStringID},
                    { "GetCQGOrderChainClassGWAccountID", this.GetCQGOrderChainClassGWAccountID},
                    { "GetCQGOrderClassAccount", this.GetCQGOrderClassAccount},
                    { "SetCQGOrderClassAccount", this.SetCQGOrderClassAccount},
                    { "GetCQGOrderClassAlgorithmID", this.GetCQGOrderClassAlgorithmID},
                    { "SetCQGOrderClassAlgorithmID", this.SetCQGOrderClassAlgorithmID},
                    { "GetCQGOrderClassAlgorithmStringID", this.GetCQGOrderClassAlgorithmStringID},
                    { "SetCQGOrderClassAlgorithmStringID", this.SetCQGOrderClassAlgorithmStringID},
                    { "GetCQGOrderClassCanBeCanceled", this.GetCQGOrderClassCanBeCanceled},
                    { "GetCQGOrderClassCanBeModified", this.GetCQGOrderClassCanBeModified},
                    { "GetCQGOrderClassCanBeReplaced", this.GetCQGOrderClassCanBeReplaced},
                    { "GetCQGOrderClassCancelationInstruction", this.GetCQGOrderClassCancelationInstruction},
                    { "SetCQGOrderClassCancelationInstruction", this.SetCQGOrderClassCancelationInstruction},
                    { "GetCQGOrderClassDescription", this.GetCQGOrderClassDescription},
                    { "SetCQGOrderClassDescription", this.SetCQGOrderClassDescription},
                    { "GetCQGOrderClassDurationType", this.GetCQGOrderClassDurationType},
                    { "SetCQGOrderClassDurationType", this.SetCQGOrderClassDurationType},
                    { "GetCQGOrderClassFilledQuantity", this.GetCQGOrderClassFilledQuantity},
                    { "GetCQGOrderClassFills", this.GetCQGOrderClassFills},
                    { "GetCQGOrderClassGUID", this.GetCQGOrderClassGUID},
                    { "GetCQGOrderClassGWOrderID", this.GetCQGOrderClassGWOrderID},
                    { "GetCQGOrderClassGWStatus", this.GetCQGOrderClassGWStatus},
                    { "GetCQGOrderClassInstrument", this.GetCQGOrderClassInstrument},
                    { "SetCQGOrderClassInstrument", this.SetCQGOrderClassInstrument},
                    { "GetCQGOrderClassInstrumentName", this.GetCQGOrderClassInstrumentName},
                    { "GetCQGOrderClassIsExternal", this.GetCQGOrderClassIsExternal},
                    { "GetCQGOrderClassIsFinal", this.GetCQGOrderClassIsFinal},
                    { "GetCQGOrderClassLastError", this.GetCQGOrderClassLastError},
                    { "GetCQGOrderClassLastEvent", this.GetCQGOrderClassLastEvent},
                    { "GetCQGOrderClassLimitPrice", this.GetCQGOrderClassLimitPrice},
                    { "SetCQGOrderClassLimitPrice", this.SetCQGOrderClassLimitPrice},
                    { "GetCQGOrderClassOrderCheckMark", this.GetCQGOrderClassOrderCheckMark},
                    { "SetCQGOrderClassOrderCheckMark", this.SetCQGOrderClassOrderCheckMark},
                    { "GetCQGOrderClassOriginalOrderID", this.GetCQGOrderClassOriginalOrderID},
                    { "GetCQGOrderClassPlaceTime", this.GetCQGOrderClassPlaceTime},
                    { "GetCQGOrderClassProperties", this.GetCQGOrderClassProperties},
                    { "GetCQGOrderClassQuantity", this.GetCQGOrderClassQuantity},
                    { "SetCQGOrderClassQuantity", this.SetCQGOrderClassQuantity},
                    { "GetCQGOrderClassRemainingQuantity", this.GetCQGOrderClassRemainingQuantity},
                    { "GetCQGOrderClassServerTimestamp", this.GetCQGOrderClassServerTimestamp},
                    { "GetCQGOrderClassSide", this.GetCQGOrderClassSide},
                    { "SetCQGOrderClassSide", this.SetCQGOrderClassSide},
                    { "GetCQGOrderClassState", this.GetCQGOrderClassState},
                    { "GetCQGOrderClassStopPrice", this.GetCQGOrderClassStopPrice},
                    { "SetCQGOrderClassStopPrice", this.SetCQGOrderClassStopPrice},
                    { "GetCQGOrderClassTag", this.GetCQGOrderClassTag},
                    { "SetCQGOrderClassTag", this.SetCQGOrderClassTag},
                    { "GetCQGOrderClassTimeActiveAt", this.GetCQGOrderClassTimeActiveAt},
                    { "GetCQGOrderClassTimestamp", this.GetCQGOrderClassTimestamp},
                    { "GetCQGOrderClassTransactions", this.GetCQGOrderClassTransactions},
                    { "GetCQGOrderClassType", this.GetCQGOrderClassType},
                    { "GetCQGOrderClassUEName", this.GetCQGOrderClassUEName},
                    { "GetCQGOrderModifyClassProperties", this.GetCQGOrderModifyClassProperties},
                    { "GetCQGOrderPropertiesClassCount", this.GetCQGOrderPropertiesClassCount},
                    { "GetCQGOrderPropertiesClassItem", this.GetCQGOrderPropertiesClassItem},
                    { "GetCQGOrderPropertyClassCanBeSet", this.GetCQGOrderPropertyClassCanBeSet},
                    { "GetCQGOrderPropertyClassDescription", this.GetCQGOrderPropertyClassDescription},
                    { "GetCQGOrderPropertyClassName", this.GetCQGOrderPropertyClassName},
                    { "GetCQGOrderPropertyClassOrder", this.GetCQGOrderPropertyClassOrder},
                    { "GetCQGOrderPropertyClassTimestamp", this.GetCQGOrderPropertyClassTimestamp},
                    { "GetCQGOrderPropertyClassType", this.GetCQGOrderPropertyClassType},
                    { "GetCQGOrderPropertyClassValue", this.GetCQGOrderPropertyClassValue},
                    { "SetCQGOrderPropertyClassValue", this.SetCQGOrderPropertyClassValue},
                    { "GetCQGOrdersClassCount", this.GetCQGOrdersClassCount},
                    { "GetCQGOrdersClassItem", this.GetCQGOrdersClassItem},
                    { "GetCQGOrdersQueryClassAccount", this.GetCQGOrdersQueryClassAccount},
                    { "GetCQGOrdersQueryClassCEL", this.GetCQGOrdersQueryClassCEL},
                    { "GetCQGOrdersQueryClassFinalError", this.GetCQGOrdersQueryClassFinalError},
                    { "GetCQGOrdersQueryClassLastChunk", this.GetCQGOrdersQueryClassLastChunk},
                    { "GetCQGOrdersQueryClassOrders", this.GetCQGOrdersQueryClassOrders},
                    { "GetCQGOrdersQueryClassQueryID", this.GetCQGOrdersQueryClassQueryID},
                    { "GetCQGOrdersQueryClassServerTimestamp", this.GetCQGOrdersQueryClassServerTimestamp},
                    { "GetCQGOrdersQueryClassStatus", this.GetCQGOrdersQueryClassStatus},
                    { "GetCQGOrdersQueryClassTimestamp", this.GetCQGOrdersQueryClassTimestamp},
                    { "GetCQGOrderStatisticsClassStatisticsOnReceive", this.GetCQGOrderStatisticsClassStatisticsOnReceive},
                    { "SetCQGOrderStatisticsClassSwitch", this.SetCQGOrderStatisticsClassSwitch},
                    { "GetCQGParameterDefinitionClassAvailableValues", this.GetCQGParameterDefinitionClassAvailableValues},
                    { "GetCQGParameterDefinitionClassComment", this.GetCQGParameterDefinitionClassComment},
                    { "GetCQGParameterDefinitionClassDefaultValue", this.GetCQGParameterDefinitionClassDefaultValue},
                    { "GetCQGParameterDefinitionClassName", this.GetCQGParameterDefinitionClassName},
                    { "GetCQGParameterDefinitionClassType", this.GetCQGParameterDefinitionClassType},
                    { "GetCQGParameterDefinitionsClassCount", this.GetCQGParameterDefinitionsClassCount},
                    { "GetCQGParameterDefinitionsClassItem", this.GetCQGParameterDefinitionsClassItem},
                    { "GetCQGParameterDefinitionsClassItemByName", this.GetCQGParameterDefinitionsClassItemByName},
                    { "GetCQGPointAndFigureBarClassHigh", this.GetCQGPointAndFigureBarClassHigh},
                    { "GetCQGPointAndFigureBarClassLow", this.GetCQGPointAndFigureBarClassLow},
                    { "GetCQGPointAndFigureBarClassMid", this.GetCQGPointAndFigureBarClassMid},
                    { "GetCQGPointAndFigureBarClassPFHigh", this.GetCQGPointAndFigureBarClassPFHigh},
                    { "GetCQGPointAndFigureBarClassPFLow", this.GetCQGPointAndFigureBarClassPFLow},
                    { "GetCQGPointAndFigureBarClassTimestamp", this.GetCQGPointAndFigureBarClassTimestamp},
                    { "GetCQGPointAndFigureBarClassTimestampOffset", this.GetCQGPointAndFigureBarClassTimestampOffset},
                    { "GetCQGPointAndFigureBarClassUp", this.GetCQGPointAndFigureBarClassUp},
                    { "GetCQGPointAndFigureBarsClassCount", this.GetCQGPointAndFigureBarsClassCount},
                    { "GetCQGPointAndFigureBarsClassEndTimestamp", this.GetCQGPointAndFigureBarsClassEndTimestamp},
                    { "GetCQGPointAndFigureBarsClassId", this.GetCQGPointAndFigureBarsClassId},
                    { "GetCQGPointAndFigureBarsClassItem", this.GetCQGPointAndFigureBarsClassItem},
                    { "GetCQGPointAndFigureBarsClassLastError", this.GetCQGPointAndFigureBarsClassLastError},
                    { "GetCQGPointAndFigureBarsClassRequest", this.GetCQGPointAndFigureBarsClassRequest},
                    { "GetCQGPointAndFigureBarsClassStartTimestamp", this.GetCQGPointAndFigureBarsClassStartTimestamp},
                    { "GetCQGPointAndFigureBarsClassStatus", this.GetCQGPointAndFigureBarsClassStatus},
                    { "GetCQGPointAndFigureBarsClassTag", this.GetCQGPointAndFigureBarsClassTag},
                    { "SetCQGPointAndFigureBarsClassTag", this.SetCQGPointAndFigureBarsClassTag},
                    { "GetCQGPointAndFigureBarsCollectionClassCount", this.GetCQGPointAndFigureBarsCollectionClassCount},
                    { "GetCQGPointAndFigureBarsCollectionClassItem", this.GetCQGPointAndFigureBarsCollectionClassItem},
                    { "GetCQGPointAndFigureBarsCollectionClassItemById", this.GetCQGPointAndFigureBarsCollectionClassItemById},
                    { "GetCQGPointAndFigureBarsRequestClassBoxSize", this.GetCQGPointAndFigureBarsRequestClassBoxSize},
                    { "SetCQGPointAndFigureBarsRequestClassBoxSize", this.SetCQGPointAndFigureBarsRequestClassBoxSize},
                    { "GetCQGPointAndFigureBarsRequestClassBoxUnits", this.GetCQGPointAndFigureBarsRequestClassBoxUnits},
                    { "SetCQGPointAndFigureBarsRequestClassBoxUnits", this.SetCQGPointAndFigureBarsRequestClassBoxUnits},
                    { "GetCQGPointAndFigureBarsRequestClassContinuation", this.GetCQGPointAndFigureBarsRequestClassContinuation},
                    { "SetCQGPointAndFigureBarsRequestClassContinuation", this.SetCQGPointAndFigureBarsRequestClassContinuation},
                    { "GetCQGPointAndFigureBarsRequestClassDataSource", this.GetCQGPointAndFigureBarsRequestClassDataSource},
                    { "SetCQGPointAndFigureBarsRequestClassDataSource", this.SetCQGPointAndFigureBarsRequestClassDataSource},
                    { "GetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration", this.GetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration", this.SetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGPointAndFigureBarsRequestClassEqualizeCloses", this.GetCQGPointAndFigureBarsRequestClassEqualizeCloses},
                    { "SetCQGPointAndFigureBarsRequestClassEqualizeCloses", this.SetCQGPointAndFigureBarsRequestClassEqualizeCloses},
                    { "GetCQGPointAndFigureBarsRequestClassIncludeEnd", this.GetCQGPointAndFigureBarsRequestClassIncludeEnd},
                    { "SetCQGPointAndFigureBarsRequestClassIncludeEnd", this.SetCQGPointAndFigureBarsRequestClassIncludeEnd},
                    { "GetCQGPointAndFigureBarsRequestClassRangeEnd", this.GetCQGPointAndFigureBarsRequestClassRangeEnd},
                    { "SetCQGPointAndFigureBarsRequestClassRangeEnd", this.SetCQGPointAndFigureBarsRequestClassRangeEnd},
                    { "GetCQGPointAndFigureBarsRequestClassRangeStart", this.GetCQGPointAndFigureBarsRequestClassRangeStart},
                    { "SetCQGPointAndFigureBarsRequestClassRangeStart", this.SetCQGPointAndFigureBarsRequestClassRangeStart},
                    { "GetCQGPointAndFigureBarsRequestClassRecalcPeriod", this.GetCQGPointAndFigureBarsRequestClassRecalcPeriod},
                    { "SetCQGPointAndFigureBarsRequestClassRecalcPeriod", this.SetCQGPointAndFigureBarsRequestClassRecalcPeriod},
                    { "GetCQGPointAndFigureBarsRequestClassReversal", this.GetCQGPointAndFigureBarsRequestClassReversal},
                    { "SetCQGPointAndFigureBarsRequestClassReversal", this.SetCQGPointAndFigureBarsRequestClassReversal},
                    { "GetCQGPointAndFigureBarsRequestClassSessionFlags", this.GetCQGPointAndFigureBarsRequestClassSessionFlags},
                    { "SetCQGPointAndFigureBarsRequestClassSessionFlags", this.SetCQGPointAndFigureBarsRequestClassSessionFlags},
                    { "GetCQGPointAndFigureBarsRequestClassSessionsFilter", this.GetCQGPointAndFigureBarsRequestClassSessionsFilter},
                    { "SetCQGPointAndFigureBarsRequestClassSessionsFilter", this.SetCQGPointAndFigureBarsRequestClassSessionsFilter},
                    { "GetCQGPointAndFigureBarsRequestClassSubscriptionLevel", this.GetCQGPointAndFigureBarsRequestClassSubscriptionLevel},
                    { "SetCQGPointAndFigureBarsRequestClassSubscriptionLevel", this.SetCQGPointAndFigureBarsRequestClassSubscriptionLevel},
                    { "GetCQGPointAndFigureBarsRequestClassSymbol", this.GetCQGPointAndFigureBarsRequestClassSymbol},
                    { "SetCQGPointAndFigureBarsRequestClassSymbol", this.SetCQGPointAndFigureBarsRequestClassSymbol},
                    { "GetCQGPointAndFigureBarsRequestClassUpdatesEnabled", this.GetCQGPointAndFigureBarsRequestClassUpdatesEnabled},
                    { "SetCQGPointAndFigureBarsRequestClassUpdatesEnabled", this.SetCQGPointAndFigureBarsRequestClassUpdatesEnabled},
                    { "GetCQGPositionClassAccount", this.GetCQGPositionClassAccount},
                    { "GetCQGPositionClassAveragePrice", this.GetCQGPositionClassAveragePrice},
                    { "GetCQGPositionClassInstrument", this.GetCQGPositionClassInstrument},
                    { "GetCQGPositionClassInstrumentName", this.GetCQGPositionClassInstrumentName},
                    { "GetCQGPositionClassManualFillsInvolved", this.GetCQGPositionClassManualFillsInvolved},
                    { "GetCQGPositionClassMatchedTrades", this.GetCQGPositionClassMatchedTrades},
                    { "GetCQGPositionClassMVO", this.GetCQGPositionClassMVO},
                    { "GetCQGPositionClassOpenTrades", this.GetCQGPositionClassOpenTrades},
                    { "GetCQGPositionClassOTE", this.GetCQGPositionClassOTE},
                    { "GetCQGPositionClassProfitLoss", this.GetCQGPositionClassProfitLoss},
                    { "GetCQGPositionClassQuantity", this.GetCQGPositionClassQuantity},
                    { "GetCQGPositionClassServerTimestamp", this.GetCQGPositionClassServerTimestamp},
                    { "GetCQGPositionClassSide", this.GetCQGPositionClassSide},
                    { "GetCQGPositionClassTimestamp", this.GetCQGPositionClassTimestamp},
                    { "GetCQGPositionClassUPL", this.GetCQGPositionClassUPL},
                    { "GetCQGPositionsClassCount", this.GetCQGPositionsClassCount},
                    { "GetCQGPositionsClassItem", this.GetCQGPositionsClassItem},
                    { "GetCQGPositionsClassItemByIndex", this.GetCQGPositionsClassItemByIndex},
                    { "GetCQGPositionsStatementClassGWAccountID", this.GetCQGPositionsStatementClassGWAccountID},
                    { "GetCQGPositionsStatementClassPositions", this.GetCQGPositionsStatementClassPositions},
                    { "GetCQGPositionsStatementClassStatementDate", this.GetCQGPositionsStatementClassStatementDate},
                    { "GetCQGQFormulaDefinitionClassExpression", this.GetCQGQFormulaDefinitionClassExpression},
                    { "GetCQGQFormulaDefinitionClassName", this.GetCQGQFormulaDefinitionClassName},
                    { "GetCQGQFormulaDefinitionClassNumber", this.GetCQGQFormulaDefinitionClassNumber},
                    { "GetCQGQFormulaDefinitionsClassCount", this.GetCQGQFormulaDefinitionsClassCount},
                    { "GetCQGQFormulaDefinitionsClassItem", this.GetCQGQFormulaDefinitionsClassItem},
                    { "GetCQGQFormulaDefinitionsClassItemByName", this.GetCQGQFormulaDefinitionsClassItemByName},
                    { "GetCQGQuoteClassHasVolume", this.GetCQGQuoteClassHasVolume},
                    { "GetCQGQuoteClassInstrument", this.GetCQGQuoteClassInstrument},
                    { "GetCQGQuoteClassIsValid", this.GetCQGQuoteClassIsValid},
                    { "GetCQGQuoteClassName", this.GetCQGQuoteClassName},
                    { "GetCQGQuoteClassPrice", this.GetCQGQuoteClassPrice},
                    { "GetCQGQuoteClassServerTimestamp", this.GetCQGQuoteClassServerTimestamp},
                    { "GetCQGQuoteClassTimestamp", this.GetCQGQuoteClassTimestamp},
                    { "GetCQGQuoteClassType", this.GetCQGQuoteClassType},
                    { "GetCQGQuoteClassVolume", this.GetCQGQuoteClassVolume},
                    { "GetCQGQuotesClassCount", this.GetCQGQuotesClassCount},
                    { "GetCQGQuotesClassItem", this.GetCQGQuotesClassItem},
                    { "GetCQGRemoteOpenAPISessionClassLogonName", this.GetCQGRemoteOpenAPISessionClassLogonName},
                    { "GetCQGRemoteOpenAPISessionClassROMNumber", this.GetCQGRemoteOpenAPISessionClassROMNumber},
                    { "GetCQGRemoteOpenAPISessionClassServerAddress", this.GetCQGRemoteOpenAPISessionClassServerAddress},
                    { "GetCQGSessionClassActivationDate", this.GetCQGSessionClassActivationDate},
                    { "GetCQGSessionClassDayCloseOffset", this.GetCQGSessionClassDayCloseOffset},
                    { "GetCQGSessionClassDayStartOffset", this.GetCQGSessionClassDayStartOffset},
                    { "GetCQGSessionClassDayStartsYesterday", this.GetCQGSessionClassDayStartsYesterday},
                    { "GetCQGSessionClassEndTime", this.GetCQGSessionClassEndTime},
                    { "GetCQGSessionClassInstrument", this.GetCQGSessionClassInstrument},
                    { "GetCQGSessionClassName", this.GetCQGSessionClassName},
                    { "GetCQGSessionClassNumber", this.GetCQGSessionClassNumber},
                    { "GetCQGSessionClassPrimaryFlag", this.GetCQGSessionClassPrimaryFlag},
                    { "GetCQGSessionClassStartTime", this.GetCQGSessionClassStartTime},
                    { "GetCQGSessionClassType", this.GetCQGSessionClassType},
                    { "GetCQGSessionClassValidEndTime", this.GetCQGSessionClassValidEndTime},
                    { "GetCQGSessionClassValidStartTime", this.GetCQGSessionClassValidStartTime},
                    { "GetCQGSessionClassWorkingWeekDays", this.GetCQGSessionClassWorkingWeekDays},
                    { "GetCQGSessionsClassCount", this.GetCQGSessionsClassCount},
                    { "GetCQGSessionsClassDescriptionEnd", this.GetCQGSessionsClassDescriptionEnd},
                    { "GetCQGSessionsClassDescriptionNumber", this.GetCQGSessionsClassDescriptionNumber},
                    { "GetCQGSessionsClassDescriptionStart", this.GetCQGSessionsClassDescriptionStart},
                    { "GetCQGSessionsClassHolidays", this.GetCQGSessionsClassHolidays},
                    { "GetCQGSessionsClassItem", this.GetCQGSessionsClassItem},
                    { "GetCQGSessionsClassName", this.GetCQGSessionsClassName},
                    { "GetCQGSessionsClassType", this.GetCQGSessionsClassType},
                    { "GetCQGSessionsCollectionClassCount", this.GetCQGSessionsCollectionClassCount},
                    { "GetCQGSessionsCollectionClassItem", this.GetCQGSessionsCollectionClassItem},
                    { "GetCQGStrategyDefinitionClassClientId", this.GetCQGStrategyDefinitionClassClientId},
                    { "GetCQGStrategyDefinitionClassId", this.GetCQGStrategyDefinitionClassId},
                    { "GetCQGStrategyDefinitionClassLastError", this.GetCQGStrategyDefinitionClassLastError},
                    { "GetCQGStrategyDefinitionClassRequestString", this.GetCQGStrategyDefinitionClassRequestString},
                    { "GetCQGStrategyDefinitionClassStatus", this.GetCQGStrategyDefinitionClassStatus},
                    { "GetCQGStrategyDefinitionClassSymbol", this.GetCQGStrategyDefinitionClassSymbol},
                    { "GetCQGStrategyDefinitionsClassCount", this.GetCQGStrategyDefinitionsClassCount},
                    { "GetCQGStrategyDefinitionsClassItem", this.GetCQGStrategyDefinitionsClassItem},
                    { "GetCQGStrategyDefinitionsClassItemByIndex", this.GetCQGStrategyDefinitionsClassItemByIndex},
                    { "GetCQGStrategyLegFillClassExecutionId", this.GetCQGStrategyLegFillClassExecutionId},
                    { "GetCQGStrategyLegFillClassOrder", this.GetCQGStrategyLegFillClassOrder},
                    { "GetCQGStrategyLegFillClassOriginalOrderID", this.GetCQGStrategyLegFillClassOriginalOrderID},
                    { "GetCQGStrategyLegFillClassQuantity", this.GetCQGStrategyLegFillClassQuantity},
                    { "GetCQGStrategyLegFillsClassCount", this.GetCQGStrategyLegFillsClassCount},
                    { "GetCQGStrategyLegFillsClassItemByIndex", this.GetCQGStrategyLegFillsClassItemByIndex},
                    { "GetCQGStringCollectionClassCount", this.GetCQGStringCollectionClassCount},
                    { "GetCQGStringCollectionClassItem", this.GetCQGStringCollectionClassItem},
                    { "GetCQGSubMinuteBarClassAskVolume", this.GetCQGSubMinuteBarClassAskVolume},
                    { "GetCQGSubMinuteBarClassAvg", this.GetCQGSubMinuteBarClassAvg},
                    { "GetCQGSubMinuteBarClassBidVolume", this.GetCQGSubMinuteBarClassBidVolume},
                    { "GetCQGSubMinuteBarClassClose", this.GetCQGSubMinuteBarClassClose},
                    { "GetCQGSubMinuteBarClassHigh", this.GetCQGSubMinuteBarClassHigh},
                    { "GetCQGSubMinuteBarClassHLC3", this.GetCQGSubMinuteBarClassHLC3},
                    { "GetCQGSubMinuteBarClassLow", this.GetCQGSubMinuteBarClassLow},
                    { "GetCQGSubMinuteBarClassMid", this.GetCQGSubMinuteBarClassMid},
                    { "GetCQGSubMinuteBarClassOpen", this.GetCQGSubMinuteBarClassOpen},
                    { "GetCQGSubMinuteBarClassRange", this.GetCQGSubMinuteBarClassRange},
                    { "GetCQGSubMinuteBarClassTickVolume", this.GetCQGSubMinuteBarClassTickVolume},
                    { "GetCQGSubMinuteBarClassTimestamp", this.GetCQGSubMinuteBarClassTimestamp},
                    { "GetCQGSubMinuteBarClassTimestampOffset", this.GetCQGSubMinuteBarClassTimestampOffset},
                    { "GetCQGSubMinuteBarClassTrueHigh", this.GetCQGSubMinuteBarClassTrueHigh},
                    { "GetCQGSubMinuteBarClassTrueLow", this.GetCQGSubMinuteBarClassTrueLow},
                    { "GetCQGSubMinuteBarClassTrueRange", this.GetCQGSubMinuteBarClassTrueRange},
                    { "GetCQGSubMinuteBarClassVolume", this.GetCQGSubMinuteBarClassVolume},
                    { "GetCQGSubMinuteBarsClassCount", this.GetCQGSubMinuteBarsClassCount},
                    { "GetCQGSubMinuteBarsClassEndTimestamp", this.GetCQGSubMinuteBarsClassEndTimestamp},
                    { "GetCQGSubMinuteBarsClassId", this.GetCQGSubMinuteBarsClassId},
                    { "GetCQGSubMinuteBarsClassItem", this.GetCQGSubMinuteBarsClassItem},
                    { "GetCQGSubMinuteBarsClassLastError", this.GetCQGSubMinuteBarsClassLastError},
                    { "GetCQGSubMinuteBarsClassRequest", this.GetCQGSubMinuteBarsClassRequest},
                    { "GetCQGSubMinuteBarsClassStartTimestamp", this.GetCQGSubMinuteBarsClassStartTimestamp},
                    { "GetCQGSubMinuteBarsClassStatus", this.GetCQGSubMinuteBarsClassStatus},
                    { "GetCQGSubMinuteBarsClassTag", this.GetCQGSubMinuteBarsClassTag},
                    { "SetCQGSubMinuteBarsClassTag", this.SetCQGSubMinuteBarsClassTag},
                    { "GetCQGSubMinuteBarsCollectionClassCount", this.GetCQGSubMinuteBarsCollectionClassCount},
                    { "GetCQGSubMinuteBarsCollectionClassItem", this.GetCQGSubMinuteBarsCollectionClassItem},
                    { "GetCQGSubMinuteBarsCollectionClassItemById", this.GetCQGSubMinuteBarsCollectionClassItemById},
                    { "GetCQGSubMinuteBarsRequestClassContinuation", this.GetCQGSubMinuteBarsRequestClassContinuation},
                    { "SetCQGSubMinuteBarsRequestClassContinuation", this.SetCQGSubMinuteBarsRequestClassContinuation},
                    { "GetCQGSubMinuteBarsRequestClassDaysBeforeExpiration", this.GetCQGSubMinuteBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGSubMinuteBarsRequestClassDaysBeforeExpiration", this.SetCQGSubMinuteBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGSubMinuteBarsRequestClassEqualizeCloses", this.GetCQGSubMinuteBarsRequestClassEqualizeCloses},
                    { "SetCQGSubMinuteBarsRequestClassEqualizeCloses", this.SetCQGSubMinuteBarsRequestClassEqualizeCloses},
                    { "GetCQGSubMinuteBarsRequestClassGapFilter", this.GetCQGSubMinuteBarsRequestClassGapFilter},
                    { "SetCQGSubMinuteBarsRequestClassGapFilter", this.SetCQGSubMinuteBarsRequestClassGapFilter},
                    { "GetCQGSubMinuteBarsRequestClassIncludeEnd", this.GetCQGSubMinuteBarsRequestClassIncludeEnd},
                    { "SetCQGSubMinuteBarsRequestClassIncludeEnd", this.SetCQGSubMinuteBarsRequestClassIncludeEnd},
                    { "GetCQGSubMinuteBarsRequestClassInterval", this.GetCQGSubMinuteBarsRequestClassInterval},
                    { "SetCQGSubMinuteBarsRequestClassInterval", this.SetCQGSubMinuteBarsRequestClassInterval},
                    { "GetCQGSubMinuteBarsRequestClassRangeEnd", this.GetCQGSubMinuteBarsRequestClassRangeEnd},
                    { "SetCQGSubMinuteBarsRequestClassRangeEnd", this.SetCQGSubMinuteBarsRequestClassRangeEnd},
                    { "GetCQGSubMinuteBarsRequestClassRangeStart", this.GetCQGSubMinuteBarsRequestClassRangeStart},
                    { "SetCQGSubMinuteBarsRequestClassRangeStart", this.SetCQGSubMinuteBarsRequestClassRangeStart},
                    { "GetCQGSubMinuteBarsRequestClassRecalcPeriod", this.GetCQGSubMinuteBarsRequestClassRecalcPeriod},
                    { "SetCQGSubMinuteBarsRequestClassRecalcPeriod", this.SetCQGSubMinuteBarsRequestClassRecalcPeriod},
                    { "GetCQGSubMinuteBarsRequestClassSessionFlags", this.GetCQGSubMinuteBarsRequestClassSessionFlags},
                    { "SetCQGSubMinuteBarsRequestClassSessionFlags", this.SetCQGSubMinuteBarsRequestClassSessionFlags},
                    { "GetCQGSubMinuteBarsRequestClassSessionsFilter", this.GetCQGSubMinuteBarsRequestClassSessionsFilter},
                    { "SetCQGSubMinuteBarsRequestClassSessionsFilter", this.SetCQGSubMinuteBarsRequestClassSessionsFilter},
                    { "GetCQGSubMinuteBarsRequestClassSubscriptionLevel", this.GetCQGSubMinuteBarsRequestClassSubscriptionLevel},
                    { "SetCQGSubMinuteBarsRequestClassSubscriptionLevel", this.SetCQGSubMinuteBarsRequestClassSubscriptionLevel},
                    { "GetCQGSubMinuteBarsRequestClassSymbol", this.GetCQGSubMinuteBarsRequestClassSymbol},
                    { "SetCQGSubMinuteBarsRequestClassSymbol", this.SetCQGSubMinuteBarsRequestClassSymbol},
                    { "GetCQGSubMinuteBarsRequestClassTickFilter", this.GetCQGSubMinuteBarsRequestClassTickFilter},
                    { "SetCQGSubMinuteBarsRequestClassTickFilter", this.SetCQGSubMinuteBarsRequestClassTickFilter},
                    { "GetCQGSubMinuteBarsRequestClassUpdatesEnabled", this.GetCQGSubMinuteBarsRequestClassUpdatesEnabled},
                    { "SetCQGSubMinuteBarsRequestClassUpdatesEnabled", this.SetCQGSubMinuteBarsRequestClassUpdatesEnabled},
                    { "GetCQGSummariesStatementClassCurrencySummaries", this.GetCQGSummariesStatementClassCurrencySummaries},
                    { "GetCQGSummariesStatementClassGWAccountID", this.GetCQGSummariesStatementClassGWAccountID},
                    { "GetCQGSummariesStatementClassStatementDate", this.GetCQGSummariesStatementClassStatementDate},
                    { "GetCQGSummariesStatementClassSummary", this.GetCQGSummariesStatementClassSummary},
                    { "GetCQGTFlowBarClassAskVolume", this.GetCQGTFlowBarClassAskVolume},
                    { "GetCQGTFlowBarClassBestAskPrice", this.GetCQGTFlowBarClassBestAskPrice},
                    { "GetCQGTFlowBarClassBestBidPrice", this.GetCQGTFlowBarClassBestBidPrice},
                    { "GetCQGTFlowBarClassBidVolume", this.GetCQGTFlowBarClassBidVolume},
                    { "GetCQGTFlowBarClassClose", this.GetCQGTFlowBarClassClose},
                    { "GetCQGTFlowBarClassDomAskCount", this.GetCQGTFlowBarClassDomAskCount},
                    { "GetCQGTFlowBarClassDomAskVolume", this.GetCQGTFlowBarClassDomAskVolume},
                    { "GetCQGTFlowBarClassDomBidCount", this.GetCQGTFlowBarClassDomBidCount},
                    { "GetCQGTFlowBarClassHigh", this.GetCQGTFlowBarClassHigh},
                    { "GetCQGTFlowBarClassLow", this.GetCQGTFlowBarClassLow},
                    { "GetCQGTFlowBarClassMid", this.GetCQGTFlowBarClassMid},
                    { "GetCQGTFlowBarClassOpen", this.GetCQGTFlowBarClassOpen},
                    { "GetCQGTFlowBarClassTimestamp", this.GetCQGTFlowBarClassTimestamp},
                    { "GetCQGTFlowBarClassTimestampOffset", this.GetCQGTFlowBarClassTimestampOffset},
                    { "GetCQGTFlowBarClassTrueHigh", this.GetCQGTFlowBarClassTrueHigh},
                    { "GetCQGTFlowBarClassTrueLow", this.GetCQGTFlowBarClassTrueLow},
                    { "GetCQGTFlowBarClassTrueMid", this.GetCQGTFlowBarClassTrueMid},
                    { "GetCQGTFlowBarsClassCount", this.GetCQGTFlowBarsClassCount},
                    { "GetCQGTFlowBarsClassEndTimestamp", this.GetCQGTFlowBarsClassEndTimestamp},
                    { "GetCQGTFlowBarsClassId", this.GetCQGTFlowBarsClassId},
                    { "GetCQGTFlowBarsClassItem", this.GetCQGTFlowBarsClassItem},
                    { "GetCQGTFlowBarsClassLastError", this.GetCQGTFlowBarsClassLastError},
                    { "GetCQGTFlowBarsClassRequest", this.GetCQGTFlowBarsClassRequest},
                    { "GetCQGTFlowBarsClassStartTimestamp", this.GetCQGTFlowBarsClassStartTimestamp},
                    { "GetCQGTFlowBarsClassStatus", this.GetCQGTFlowBarsClassStatus},
                    { "GetCQGTFlowBarsClassTag", this.GetCQGTFlowBarsClassTag},
                    { "SetCQGTFlowBarsClassTag", this.SetCQGTFlowBarsClassTag},
                    { "GetCQGTFlowBarsCollectionClassCount", this.GetCQGTFlowBarsCollectionClassCount},
                    { "GetCQGTFlowBarsCollectionClassItem", this.GetCQGTFlowBarsCollectionClassItem},
                    { "GetCQGTFlowBarsCollectionClassItemById", this.GetCQGTFlowBarsCollectionClassItemById},
                    { "GetCQGTFlowBarsRequestClassAggregation", this.GetCQGTFlowBarsRequestClassAggregation},
                    { "SetCQGTFlowBarsRequestClassAggregation", this.SetCQGTFlowBarsRequestClassAggregation},
                    { "GetCQGTFlowBarsRequestClassAggregationLevel", this.GetCQGTFlowBarsRequestClassAggregationLevel},
                    { "SetCQGTFlowBarsRequestClassAggregationLevel", this.SetCQGTFlowBarsRequestClassAggregationLevel},
                    { "GetCQGTFlowBarsRequestClassContinuation", this.GetCQGTFlowBarsRequestClassContinuation},
                    { "SetCQGTFlowBarsRequestClassContinuation", this.SetCQGTFlowBarsRequestClassContinuation},
                    { "GetCQGTFlowBarsRequestClassDaysBeforeExpiration", this.GetCQGTFlowBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGTFlowBarsRequestClassDaysBeforeExpiration", this.SetCQGTFlowBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGTFlowBarsRequestClassDomAskVolumeLevel", this.GetCQGTFlowBarsRequestClassDomAskVolumeLevel},
                    { "SetCQGTFlowBarsRequestClassDomAskVolumeLevel", this.SetCQGTFlowBarsRequestClassDomAskVolumeLevel},
                    { "GetCQGTFlowBarsRequestClassDomBidVolumeLevel", this.GetCQGTFlowBarsRequestClassDomBidVolumeLevel},
                    { "SetCQGTFlowBarsRequestClassDomBidVolumeLevel", this.SetCQGTFlowBarsRequestClassDomBidVolumeLevel},
                    { "GetCQGTFlowBarsRequestClassEqualizeCloses", this.GetCQGTFlowBarsRequestClassEqualizeCloses},
                    { "SetCQGTFlowBarsRequestClassEqualizeCloses", this.SetCQGTFlowBarsRequestClassEqualizeCloses},
                    { "GetCQGTFlowBarsRequestClassIncludeEnd", this.GetCQGTFlowBarsRequestClassIncludeEnd},
                    { "SetCQGTFlowBarsRequestClassIncludeEnd", this.SetCQGTFlowBarsRequestClassIncludeEnd},
                    { "GetCQGTFlowBarsRequestClassRangeEnd", this.GetCQGTFlowBarsRequestClassRangeEnd},
                    { "SetCQGTFlowBarsRequestClassRangeEnd", this.SetCQGTFlowBarsRequestClassRangeEnd},
                    { "GetCQGTFlowBarsRequestClassRangeStart", this.GetCQGTFlowBarsRequestClassRangeStart},
                    { "SetCQGTFlowBarsRequestClassRangeStart", this.SetCQGTFlowBarsRequestClassRangeStart},
                    { "GetCQGTFlowBarsRequestClassRecalcPeriod", this.GetCQGTFlowBarsRequestClassRecalcPeriod},
                    { "SetCQGTFlowBarsRequestClassRecalcPeriod", this.SetCQGTFlowBarsRequestClassRecalcPeriod},
                    { "GetCQGTFlowBarsRequestClassSessionFlags", this.GetCQGTFlowBarsRequestClassSessionFlags},
                    { "SetCQGTFlowBarsRequestClassSessionFlags", this.SetCQGTFlowBarsRequestClassSessionFlags},
                    { "GetCQGTFlowBarsRequestClassSessionsFilter", this.GetCQGTFlowBarsRequestClassSessionsFilter},
                    { "SetCQGTFlowBarsRequestClassSessionsFilter", this.SetCQGTFlowBarsRequestClassSessionsFilter},
                    { "GetCQGTFlowBarsRequestClassSubscriptionLevel", this.GetCQGTFlowBarsRequestClassSubscriptionLevel},
                    { "SetCQGTFlowBarsRequestClassSubscriptionLevel", this.SetCQGTFlowBarsRequestClassSubscriptionLevel},
                    { "GetCQGTFlowBarsRequestClassSymbol", this.GetCQGTFlowBarsRequestClassSymbol},
                    { "SetCQGTFlowBarsRequestClassSymbol", this.SetCQGTFlowBarsRequestClassSymbol},
                    { "GetCQGTFlowBarsRequestClassUpdatesEnabled", this.GetCQGTFlowBarsRequestClassUpdatesEnabled},
                    { "SetCQGTFlowBarsRequestClassUpdatesEnabled", this.SetCQGTFlowBarsRequestClassUpdatesEnabled},
                    { "GetCQGTickClassContributorId", this.GetCQGTickClassContributorId},
                    { "GetCQGTickClassContributorIdCode", this.GetCQGTickClassContributorIdCode},
                    { "GetCQGTickClassCorrectionType", this.GetCQGTickClassCorrectionType},
                    { "GetCQGTickClassMarketState", this.GetCQGTickClassMarketState},
                    { "GetCQGTickClassPrice", this.GetCQGTickClassPrice},
                    { "GetCQGTickClassPriceType", this.GetCQGTickClassPriceType},
                    { "GetCQGTickClassSalesConditionCode", this.GetCQGTickClassSalesConditionCode},
                    { "GetCQGTickClassSalesConditionLabel", this.GetCQGTickClassSalesConditionLabel},
                    { "GetCQGTickClassTimestamp", this.GetCQGTickClassTimestamp},
                    { "GetCQGTickClassVolume", this.GetCQGTickClassVolume},
                    { "GetCQGTicksClassCount", this.GetCQGTicksClassCount},
                    { "GetCQGTicksClassEndTimestamp", this.GetCQGTicksClassEndTimestamp},
                    { "GetCQGTicksClassHasUpdates", this.GetCQGTicksClassHasUpdates},
                    { "GetCQGTicksClassId", this.GetCQGTicksClassId},
                    { "GetCQGTicksClassItem", this.GetCQGTicksClassItem},
                    { "GetCQGTicksClassLastError", this.GetCQGTicksClassLastError},
                    { "GetCQGTicksClassRequest", this.GetCQGTicksClassRequest},
                    { "GetCQGTicksClassStartTimestamp", this.GetCQGTicksClassStartTimestamp},
                    { "GetCQGTicksClassStatus", this.GetCQGTicksClassStatus},
                    { "GetCQGTicksClassTag", this.GetCQGTicksClassTag},
                    { "SetCQGTicksClassTag", this.SetCQGTicksClassTag},
                    { "GetCQGTicksCollectionClassCount", this.GetCQGTicksCollectionClassCount},
                    { "GetCQGTicksCollectionClassItem", this.GetCQGTicksCollectionClassItem},
                    { "GetCQGTicksCollectionClassItemById", this.GetCQGTicksCollectionClassItemById},
                    { "GetCQGTicksRequestClassRangeEnd", this.GetCQGTicksRequestClassRangeEnd},
                    { "SetCQGTicksRequestClassRangeEnd", this.SetCQGTicksRequestClassRangeEnd},
                    { "GetCQGTicksRequestClassRangeStart", this.GetCQGTicksRequestClassRangeStart},
                    { "SetCQGTicksRequestClassRangeStart", this.SetCQGTicksRequestClassRangeStart},
                    { "GetCQGTicksRequestClassSessionsFilter", this.GetCQGTicksRequestClassSessionsFilter},
                    { "SetCQGTicksRequestClassSessionsFilter", this.SetCQGTicksRequestClassSessionsFilter},
                    { "GetCQGTicksRequestClassSymbol", this.GetCQGTicksRequestClassSymbol},
                    { "SetCQGTicksRequestClassSymbol", this.SetCQGTicksRequestClassSymbol},
                    { "GetCQGTicksRequestClassTickFilter", this.GetCQGTicksRequestClassTickFilter},
                    { "SetCQGTicksRequestClassTickFilter", this.SetCQGTicksRequestClassTickFilter},
                    { "GetCQGTicksRequestClassType", this.GetCQGTicksRequestClassType},
                    { "SetCQGTicksRequestClassType", this.SetCQGTicksRequestClassType},
                    { "GetCQGTimedBarClassActualVolume", this.GetCQGTimedBarClassActualVolume},
                    { "GetCQGTimedBarClassAskVolume", this.GetCQGTimedBarClassAskVolume},
                    { "GetCQGTimedBarClassAvg", this.GetCQGTimedBarClassAvg},
                    { "GetCQGTimedBarClassBidVolume", this.GetCQGTimedBarClassBidVolume},
                    { "GetCQGTimedBarClassClose", this.GetCQGTimedBarClassClose},
                    { "GetCQGTimedBarClassCommodityOpenInterest", this.GetCQGTimedBarClassCommodityOpenInterest},
                    { "GetCQGTimedBarClassCommodityTickVolume", this.GetCQGTimedBarClassCommodityTickVolume},
                    { "GetCQGTimedBarClassCommodityVolume", this.GetCQGTimedBarClassCommodityVolume},
                    { "GetCQGTimedBarClassContractOpenInterest", this.GetCQGTimedBarClassContractOpenInterest},
                    { "GetCQGTimedBarClassContractTickVolume", this.GetCQGTimedBarClassContractTickVolume},
                    { "GetCQGTimedBarClassContractVolume", this.GetCQGTimedBarClassContractVolume},
                    { "GetCQGTimedBarClassHigh", this.GetCQGTimedBarClassHigh},
                    { "GetCQGTimedBarClassHLC3", this.GetCQGTimedBarClassHLC3},
                    { "GetCQGTimedBarClassLow", this.GetCQGTimedBarClassLow},
                    { "GetCQGTimedBarClassMid", this.GetCQGTimedBarClassMid},
                    { "GetCQGTimedBarClassOpen", this.GetCQGTimedBarClassOpen},
                    { "GetCQGTimedBarClassOpenInterest", this.GetCQGTimedBarClassOpenInterest},
                    { "GetCQGTimedBarClassRange", this.GetCQGTimedBarClassRange},
                    { "GetCQGTimedBarClassTickVolume", this.GetCQGTimedBarClassTickVolume},
                    { "GetCQGTimedBarClassTimestamp", this.GetCQGTimedBarClassTimestamp},
                    { "GetCQGTimedBarClassTrueHigh", this.GetCQGTimedBarClassTrueHigh},
                    { "GetCQGTimedBarClassTrueLow", this.GetCQGTimedBarClassTrueLow},
                    { "GetCQGTimedBarClassTrueRange", this.GetCQGTimedBarClassTrueRange},
                    { "GetCQGTimedBarsClassCount", this.GetCQGTimedBarsClassCount},
                    { "GetCQGTimedBarsClassEndTimestamp", this.GetCQGTimedBarsClassEndTimestamp},
                    { "GetCQGTimedBarsClassId", this.GetCQGTimedBarsClassId},
                    { "GetCQGTimedBarsClassItem", this.GetCQGTimedBarsClassItem},
                    { "GetCQGTimedBarsClassLastError", this.GetCQGTimedBarsClassLastError},
                    { "GetCQGTimedBarsClassRequest", this.GetCQGTimedBarsClassRequest},
                    { "GetCQGTimedBarsClassStartTimestamp", this.GetCQGTimedBarsClassStartTimestamp},
                    { "GetCQGTimedBarsClassStatus", this.GetCQGTimedBarsClassStatus},
                    { "GetCQGTimedBarsClassTag", this.GetCQGTimedBarsClassTag},
                    { "SetCQGTimedBarsClassTag", this.SetCQGTimedBarsClassTag},
                    { "GetCQGTimedBarsCollectionClassCount", this.GetCQGTimedBarsCollectionClassCount},
                    { "GetCQGTimedBarsCollectionClassItem", this.GetCQGTimedBarsCollectionClassItem},
                    { "GetCQGTimedBarsCollectionClassItemById", this.GetCQGTimedBarsCollectionClassItemById},
                    { "GetCQGTimedBarsRequestClassContinuation", this.GetCQGTimedBarsRequestClassContinuation},
                    { "SetCQGTimedBarsRequestClassContinuation", this.SetCQGTimedBarsRequestClassContinuation},
                    { "GetCQGTimedBarsRequestClassDaysBeforeExpiration", this.GetCQGTimedBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGTimedBarsRequestClassDaysBeforeExpiration", this.SetCQGTimedBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGTimedBarsRequestClassEqualizeCloses", this.GetCQGTimedBarsRequestClassEqualizeCloses},
                    { "SetCQGTimedBarsRequestClassEqualizeCloses", this.SetCQGTimedBarsRequestClassEqualizeCloses},
                    { "GetCQGTimedBarsRequestClassHistoricalPeriod", this.GetCQGTimedBarsRequestClassHistoricalPeriod},
                    { "SetCQGTimedBarsRequestClassHistoricalPeriod", this.SetCQGTimedBarsRequestClassHistoricalPeriod},
                    { "GetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars", this.GetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars},
                    { "SetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars", this.SetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars},
                    { "GetCQGTimedBarsRequestClassIncludeEnd", this.GetCQGTimedBarsRequestClassIncludeEnd},
                    { "SetCQGTimedBarsRequestClassIncludeEnd", this.SetCQGTimedBarsRequestClassIncludeEnd},
                    { "GetCQGTimedBarsRequestClassIntradayPeriod", this.GetCQGTimedBarsRequestClassIntradayPeriod},
                    { "SetCQGTimedBarsRequestClassIntradayPeriod", this.SetCQGTimedBarsRequestClassIntradayPeriod},
                    { "GetCQGTimedBarsRequestClassRangeEnd", this.GetCQGTimedBarsRequestClassRangeEnd},
                    { "SetCQGTimedBarsRequestClassRangeEnd", this.SetCQGTimedBarsRequestClassRangeEnd},
                    { "GetCQGTimedBarsRequestClassRangeStart", this.GetCQGTimedBarsRequestClassRangeStart},
                    { "SetCQGTimedBarsRequestClassRangeStart", this.SetCQGTimedBarsRequestClassRangeStart},
                    { "GetCQGTimedBarsRequestClassSessionFlags", this.GetCQGTimedBarsRequestClassSessionFlags},
                    { "SetCQGTimedBarsRequestClassSessionFlags", this.SetCQGTimedBarsRequestClassSessionFlags},
                    { "GetCQGTimedBarsRequestClassSessionsFilter", this.GetCQGTimedBarsRequestClassSessionsFilter},
                    { "SetCQGTimedBarsRequestClassSessionsFilter", this.SetCQGTimedBarsRequestClassSessionsFilter},
                    { "GetCQGTimedBarsRequestClassSymbol", this.GetCQGTimedBarsRequestClassSymbol},
                    { "SetCQGTimedBarsRequestClassSymbol", this.SetCQGTimedBarsRequestClassSymbol},
                    { "GetCQGTimedBarsRequestClassTickFilter", this.GetCQGTimedBarsRequestClassTickFilter},
                    { "SetCQGTimedBarsRequestClassTickFilter", this.SetCQGTimedBarsRequestClassTickFilter},
                    { "GetCQGTimedBarsRequestClassUpdatesEnabled", this.GetCQGTimedBarsRequestClassUpdatesEnabled},
                    { "SetCQGTimedBarsRequestClassUpdatesEnabled", this.SetCQGTimedBarsRequestClassUpdatesEnabled},
                    { "GetCQGTradeClassGroupID", this.GetCQGTradeClassGroupID},
                    { "GetCQGTradeClassIsMatched", this.GetCQGTradeClassIsMatched},
                    { "GetCQGTradeClassPrice", this.GetCQGTradeClassPrice},
                    { "GetCQGTradeClassQuantity", this.GetCQGTradeClassQuantity},
                    { "GetCQGTradeClassServerTimestamp", this.GetCQGTradeClassServerTimestamp},
                    { "GetCQGTradeClassSide", this.GetCQGTradeClassSide},
                    { "GetCQGTradeClassTimestamp", this.GetCQGTradeClassTimestamp},
                    { "GetCQGTradeEntriesClassCount", this.GetCQGTradeEntriesClassCount},
                    { "GetCQGTradeEntriesClassItem", this.GetCQGTradeEntriesClassItem},
                    { "GetCQGTradeEntryClassCanPlaceOrderSignal", this.GetCQGTradeEntryClassCanPlaceOrderSignal},
                    { "GetCQGTradeEntryClassDefinition", this.GetCQGTradeEntryClassDefinition},
                    { "GetCQGTradeEntryClassPrice", this.GetCQGTradeEntryClassPrice},
                    { "GetCQGTradeEntryClassQuantity", this.GetCQGTradeEntryClassQuantity},
                    { "GetCQGTradeEntryClassRelatedExits", this.GetCQGTradeEntryClassRelatedExits},
                    { "GetCQGTradeEntryClassSignal", this.GetCQGTradeEntryClassSignal},
                    { "GetCQGTradeEntryClassStopLimitPrice", this.GetCQGTradeEntryClassStopLimitPrice},
                    { "GetCQGTradeEntryClassTrade", this.GetCQGTradeEntryClassTrade},
                    { "GetCQGTradeEntryDefinitionClassAllowEntryOnExit", this.GetCQGTradeEntryDefinitionClassAllowEntryOnExit},
                    { "GetCQGTradeEntryDefinitionClassAllowPyramids", this.GetCQGTradeEntryDefinitionClassAllowPyramids},
                    { "GetCQGTradeEntryDefinitionClassOrderType", this.GetCQGTradeEntryDefinitionClassOrderType},
                    { "GetCQGTradeExitClassCanPlaceOrderSignal", this.GetCQGTradeExitClassCanPlaceOrderSignal},
                    { "GetCQGTradeExitClassDefinition", this.GetCQGTradeExitClassDefinition},
                    { "GetCQGTradeExitClassPrice", this.GetCQGTradeExitClassPrice},
                    { "GetCQGTradeExitClassQuantity", this.GetCQGTradeExitClassQuantity},
                    { "GetCQGTradeExitClassRelatedEntries", this.GetCQGTradeExitClassRelatedEntries},
                    { "GetCQGTradeExitClassSignal", this.GetCQGTradeExitClassSignal},
                    { "GetCQGTradeExitClassStopLimitPrice", this.GetCQGTradeExitClassStopLimitPrice},
                    { "GetCQGTradeExitClassTrade", this.GetCQGTradeExitClassTrade},
                    { "GetCQGTradeExitDefinitionClassAllowExitOnEntry", this.GetCQGTradeExitDefinitionClassAllowExitOnEntry},
                    { "GetCQGTradeExitDefinitionClassAllowMoreThanOnce", this.GetCQGTradeExitDefinitionClassAllowMoreThanOnce},
                    { "GetCQGTradeExitDefinitionClassName", this.GetCQGTradeExitDefinitionClassName},
                    { "GetCQGTradeExitDefinitionClassOrderType", this.GetCQGTradeExitDefinitionClassOrderType},
                    { "GetCQGTradeExitDefinitionsClassCount", this.GetCQGTradeExitDefinitionsClassCount},
                    { "GetCQGTradeExitDefinitionsClassItem", this.GetCQGTradeExitDefinitionsClassItem},
                    { "GetCQGTradeExitDefinitionsClassItemByName", this.GetCQGTradeExitDefinitionsClassItemByName},
                    { "GetCQGTradeExitsClassCount", this.GetCQGTradeExitsClassCount},
                    { "GetCQGTradeExitsClassItem", this.GetCQGTradeExitsClassItem},
                    { "GetCQGTradeExitsClassItemByName", this.GetCQGTradeExitsClassItemByName},
                    { "GetCQGTradesClassCount", this.GetCQGTradesClassCount},
                    { "GetCQGTradesClassItem", this.GetCQGTradesClassItem},
                    { "GetCQGTradingSystemBaseBarParameterClassName", this.GetCQGTradingSystemBaseBarParameterClassName},
                    { "GetCQGTradingSystemBaseBarParameterClassType", this.GetCQGTradingSystemBaseBarParameterClassType},
                    { "GetCQGTradingSystemBaseBarParameterClassValue", this.GetCQGTradingSystemBaseBarParameterClassValue},
                    { "SetCQGTradingSystemBaseBarParameterClassValue", this.SetCQGTradingSystemBaseBarParameterClassValue},
                    { "GetCQGTradingSystemBaseBarParametersClassCount", this.GetCQGTradingSystemBaseBarParametersClassCount},
                    { "GetCQGTradingSystemBaseBarParametersClassItem", this.GetCQGTradingSystemBaseBarParametersClassItem},
                    { "GetCQGTradingSystemClassDefinition", this.GetCQGTradingSystemClassDefinition},
                    { "GetCQGTradingSystemClassId", this.GetCQGTradingSystemClassId},
                    { "GetCQGTradingSystemClassLastError", this.GetCQGTradingSystemClassLastError},
                    { "GetCQGTradingSystemClassRequest", this.GetCQGTradingSystemClassRequest},
                    { "GetCQGTradingSystemClassStatistics", this.GetCQGTradingSystemClassStatistics},
                    { "GetCQGTradingSystemClassStatus", this.GetCQGTradingSystemClassStatus},
                    { "GetCQGTradingSystemClassTag", this.GetCQGTradingSystemClassTag},
                    { "SetCQGTradingSystemClassTag", this.SetCQGTradingSystemClassTag},
                    { "GetCQGTradingSystemClassTradesRows", this.GetCQGTradingSystemClassTradesRows},
                    { "GetCQGTradingSystemDefinitionClassAbbreviation", this.GetCQGTradingSystemDefinitionClassAbbreviation},
                    { "GetCQGTradingSystemDefinitionClassCommission", this.GetCQGTradingSystemDefinitionClassCommission},
                    { "GetCQGTradingSystemDefinitionClassCommissionType", this.GetCQGTradingSystemDefinitionClassCommissionType},
                    { "GetCQGTradingSystemDefinitionClassName", this.GetCQGTradingSystemDefinitionClassName},
                    { "GetCQGTradingSystemDefinitionClassParameterDefinitions", this.GetCQGTradingSystemDefinitionClassParameterDefinitions},
                    { "GetCQGTradingSystemDefinitionClassTradeDefinitions", this.GetCQGTradingSystemDefinitionClassTradeDefinitions},
                    { "GetCQGTradingSystemDefinitionsClassCount", this.GetCQGTradingSystemDefinitionsClassCount},
                    { "GetCQGTradingSystemDefinitionsClassItem", this.GetCQGTradingSystemDefinitionsClassItem},
                    { "GetCQGTradingSystemDefinitionsClassItemByAbbreviation", this.GetCQGTradingSystemDefinitionsClassItemByAbbreviation},
                    { "GetCQGTradingSystemInsertInfoClassIndex", this.GetCQGTradingSystemInsertInfoClassIndex},
                    { "GetCQGTradingSystemRelationAddInfoClassEntry", this.GetCQGTradingSystemRelationAddInfoClassEntry},
                    { "GetCQGTradingSystemRelationAddInfoClassEntryRowIndex", this.GetCQGTradingSystemRelationAddInfoClassEntryRowIndex},
                    { "GetCQGTradingSystemRelationAddInfoClassExit", this.GetCQGTradingSystemRelationAddInfoClassExit},
                    { "GetCQGTradingSystemRelationAddInfoClassExitRowIndex", this.GetCQGTradingSystemRelationAddInfoClassExitRowIndex},
                    { "GetCQGTradingSystemRemoveInfoClassIndex", this.GetCQGTradingSystemRemoveInfoClassIndex},
                    { "GetCQGTradingSystemRequestClassBaseBarParameters", this.GetCQGTradingSystemRequestClassBaseBarParameters},
                    { "GetCQGTradingSystemRequestClassBaseBarType", this.GetCQGTradingSystemRequestClassBaseBarType},
                    { "SetCQGTradingSystemRequestClassBaseBarType", this.SetCQGTradingSystemRequestClassBaseBarType},
                    { "GetCQGTradingSystemRequestClassBaseExpression", this.GetCQGTradingSystemRequestClassBaseExpression},
                    { "SetCQGTradingSystemRequestClassBaseExpression", this.SetCQGTradingSystemRequestClassBaseExpression},
                    { "GetCQGTradingSystemRequestClassContinuation", this.GetCQGTradingSystemRequestClassContinuation},
                    { "SetCQGTradingSystemRequestClassContinuation", this.SetCQGTradingSystemRequestClassContinuation},
                    { "GetCQGTradingSystemRequestClassDaysBeforeExpiration", this.GetCQGTradingSystemRequestClassDaysBeforeExpiration},
                    { "SetCQGTradingSystemRequestClassDaysBeforeExpiration", this.SetCQGTradingSystemRequestClassDaysBeforeExpiration},
                    { "GetCQGTradingSystemRequestClassDefinition", this.GetCQGTradingSystemRequestClassDefinition},
                    { "GetCQGTradingSystemRequestClassEqualizeCloses", this.GetCQGTradingSystemRequestClassEqualizeCloses},
                    { "SetCQGTradingSystemRequestClassEqualizeCloses", this.SetCQGTradingSystemRequestClassEqualizeCloses},
                    { "GetCQGTradingSystemRequestClassHistoricalPeriod", this.GetCQGTradingSystemRequestClassHistoricalPeriod},
                    { "SetCQGTradingSystemRequestClassHistoricalPeriod", this.SetCQGTradingSystemRequestClassHistoricalPeriod},
                    { "GetCQGTradingSystemRequestClassIncludeEnd", this.GetCQGTradingSystemRequestClassIncludeEnd},
                    { "SetCQGTradingSystemRequestClassIncludeEnd", this.SetCQGTradingSystemRequestClassIncludeEnd},
                    { "GetCQGTradingSystemRequestClassIntradayPeriod", this.GetCQGTradingSystemRequestClassIntradayPeriod},
                    { "SetCQGTradingSystemRequestClassIntradayPeriod", this.SetCQGTradingSystemRequestClassIntradayPeriod},
                    { "GetCQGTradingSystemRequestClassParameter", this.GetCQGTradingSystemRequestClassParameter},
                    { "SetCQGTradingSystemRequestClassParameter", this.SetCQGTradingSystemRequestClassParameter},
                    { "GetCQGTradingSystemRequestClassRangeEnd", this.GetCQGTradingSystemRequestClassRangeEnd},
                    { "SetCQGTradingSystemRequestClassRangeEnd", this.SetCQGTradingSystemRequestClassRangeEnd},
                    { "GetCQGTradingSystemRequestClassRangeStart", this.GetCQGTradingSystemRequestClassRangeStart},
                    { "SetCQGTradingSystemRequestClassRangeStart", this.SetCQGTradingSystemRequestClassRangeStart},
                    { "GetCQGTradingSystemRequestClassRecalcPeriod", this.GetCQGTradingSystemRequestClassRecalcPeriod},
                    { "SetCQGTradingSystemRequestClassRecalcPeriod", this.SetCQGTradingSystemRequestClassRecalcPeriod},
                    { "GetCQGTradingSystemRequestClassSessionFlags", this.GetCQGTradingSystemRequestClassSessionFlags},
                    { "SetCQGTradingSystemRequestClassSessionFlags", this.SetCQGTradingSystemRequestClassSessionFlags},
                    { "GetCQGTradingSystemRequestClassSessionsFilter", this.GetCQGTradingSystemRequestClassSessionsFilter},
                    { "SetCQGTradingSystemRequestClassSessionsFilter", this.SetCQGTradingSystemRequestClassSessionsFilter},
                    { "GetCQGTradingSystemRequestClassSubscriptionLevel", this.GetCQGTradingSystemRequestClassSubscriptionLevel},
                    { "SetCQGTradingSystemRequestClassSubscriptionLevel", this.SetCQGTradingSystemRequestClassSubscriptionLevel},
                    { "GetCQGTradingSystemsClassCount", this.GetCQGTradingSystemsClassCount},
                    { "GetCQGTradingSystemsClassItem", this.GetCQGTradingSystemsClassItem},
                    { "GetCQGTradingSystemsClassItemById", this.GetCQGTradingSystemsClassItemById},
                    { "GetCQGTradingSystemStatisticsChangeInfoClassStatistics", this.GetCQGTradingSystemStatisticsChangeInfoClassStatistics},
                    { "GetCQGTradingSystemStatisticsClassAverageDuration", this.GetCQGTradingSystemStatisticsClassAverageDuration},
                    { "GetCQGTradingSystemStatisticsClassAverageLoss", this.GetCQGTradingSystemStatisticsClassAverageLoss},
                    { "GetCQGTradingSystemStatisticsClassAverageProfit", this.GetCQGTradingSystemStatisticsClassAverageProfit},
                    { "GetCQGTradingSystemStatisticsClassAverageWin", this.GetCQGTradingSystemStatisticsClassAverageWin},
                    { "GetCQGTradingSystemStatisticsClassClosedNetProfit", this.GetCQGTradingSystemStatisticsClassClosedNetProfit},
                    { "GetCQGTradingSystemStatisticsClassCurConsecLosses", this.GetCQGTradingSystemStatisticsClassCurConsecLosses},
                    { "GetCQGTradingSystemStatisticsClassCurConsecWins", this.GetCQGTradingSystemStatisticsClassCurConsecWins},
                    { "GetCQGTradingSystemStatisticsClassCurDrawDown", this.GetCQGTradingSystemStatisticsClassCurDrawDown},
                    { "GetCQGTradingSystemStatisticsClassLinearRegression", this.GetCQGTradingSystemStatisticsClassLinearRegression},
                    { "GetCQGTradingSystemStatisticsClassMaxClosedDraw", this.GetCQGTradingSystemStatisticsClassMaxClosedDraw},
                    { "GetCQGTradingSystemStatisticsClassMaxConsecLosses", this.GetCQGTradingSystemStatisticsClassMaxConsecLosses},
                    { "GetCQGTradingSystemStatisticsClassMaxConsecWins", this.GetCQGTradingSystemStatisticsClassMaxConsecWins},
                    { "GetCQGTradingSystemStatisticsClassMaxDrawAmount", this.GetCQGTradingSystemStatisticsClassMaxDrawAmount},
                    { "GetCQGTradingSystemStatisticsClassMaxDrawDuration", this.GetCQGTradingSystemStatisticsClassMaxDrawDuration},
                    { "GetCQGTradingSystemStatisticsClassMaximumLoss", this.GetCQGTradingSystemStatisticsClassMaximumLoss},
                    { "GetCQGTradingSystemStatisticsClassMaximumWin", this.GetCQGTradingSystemStatisticsClassMaximumWin},
                    { "GetCQGTradingSystemStatisticsClassOpenPosition", this.GetCQGTradingSystemStatisticsClassOpenPosition},
                    { "GetCQGTradingSystemStatisticsClassPercentLong", this.GetCQGTradingSystemStatisticsClassPercentLong},
                    { "GetCQGTradingSystemStatisticsClassPercentWinners", this.GetCQGTradingSystemStatisticsClassPercentWinners},
                    { "GetCQGTradingSystemStatisticsClassProfitLossRatio", this.GetCQGTradingSystemStatisticsClassProfitLossRatio},
                    { "GetCQGTradingSystemStatisticsClassProfitToMaxDraw", this.GetCQGTradingSystemStatisticsClassProfitToMaxDraw},
                    { "GetCQGTradingSystemStatisticsClassRemoveToNeutral", this.GetCQGTradingSystemStatisticsClassRemoveToNeutral},
                    { "GetCQGTradingSystemStatisticsClassReturnRetracement", this.GetCQGTradingSystemStatisticsClassReturnRetracement},
                    { "GetCQGTradingSystemStatisticsClassTimePercentage", this.GetCQGTradingSystemStatisticsClassTimePercentage},
                    { "GetCQGTradingSystemStatisticsClassTimestamp", this.GetCQGTradingSystemStatisticsClassTimestamp},
                    { "GetCQGTradingSystemStatisticsClassTimestampOffset", this.GetCQGTradingSystemStatisticsClassTimestampOffset},
                    { "GetCQGTradingSystemStatisticsClassTotalNetProfit", this.GetCQGTradingSystemStatisticsClassTotalNetProfit},
                    { "GetCQGTradingSystemStatisticsClassTotalTradeCount", this.GetCQGTradingSystemStatisticsClassTotalTradeCount},
                    { "GetCQGTradingSystemStatisticsClassValue", this.GetCQGTradingSystemStatisticsClassValue},
                    { "GetCQGTradingSystemStatisticsCollectionClassCount", this.GetCQGTradingSystemStatisticsCollectionClassCount},
                    { "GetCQGTradingSystemStatisticsCollectionClassItem", this.GetCQGTradingSystemStatisticsCollectionClassItem},
                    { "GetCQGTradingSystemTradeClassDefinition", this.GetCQGTradingSystemTradeClassDefinition},
                    { "GetCQGTradingSystemTradeClassIsActive", this.GetCQGTradingSystemTradeClassIsActive},
                    { "GetCQGTradingSystemTradeClassTimestamp", this.GetCQGTradingSystemTradeClassTimestamp},
                    { "GetCQGTradingSystemTradeClassTimestampOffset", this.GetCQGTradingSystemTradeClassTimestampOffset},
                    { "GetCQGTradingSystemTradeClassTradeEntry", this.GetCQGTradingSystemTradeClassTradeEntry},
                    { "GetCQGTradingSystemTradeClassTradeExits", this.GetCQGTradingSystemTradeClassTradeExits},
                    { "GetCQGTradingSystemTradeClassTradesRow", this.GetCQGTradingSystemTradeClassTradesRow},
                    { "GetCQGTradingSystemTradeDefinitionClassEntry", this.GetCQGTradingSystemTradeDefinitionClassEntry},
                    { "GetCQGTradingSystemTradeDefinitionClassExits", this.GetCQGTradingSystemTradeDefinitionClassExits},
                    { "GetCQGTradingSystemTradeDefinitionClassName", this.GetCQGTradingSystemTradeDefinitionClassName},
                    { "GetCQGTradingSystemTradeDefinitionClassSide", this.GetCQGTradingSystemTradeDefinitionClassSide},
                    { "GetCQGTradingSystemTradeDefinitionsClassCount", this.GetCQGTradingSystemTradeDefinitionsClassCount},
                    { "GetCQGTradingSystemTradeDefinitionsClassItem", this.GetCQGTradingSystemTradeDefinitionsClassItem},
                    { "GetCQGTradingSystemTradeDefinitionsClassItemByName", this.GetCQGTradingSystemTradeDefinitionsClassItemByName},
                    { "GetCQGTradingSystemTradesRowClassCount", this.GetCQGTradingSystemTradesRowClassCount},
                    { "GetCQGTradingSystemTradesRowClassItem", this.GetCQGTradingSystemTradesRowClassItem},
                    { "GetCQGTradingSystemTradesRowClassItemByName", this.GetCQGTradingSystemTradesRowClassItemByName},
                    { "GetCQGTradingSystemTradesRowClassTimestamp", this.GetCQGTradingSystemTradesRowClassTimestamp},
                    { "GetCQGTradingSystemTradesRowClassTimestampOffset", this.GetCQGTradingSystemTradesRowClassTimestampOffset},
                    { "GetCQGTradingSystemTradesRowsClassCount", this.GetCQGTradingSystemTradesRowsClassCount},
                    { "GetCQGTradingSystemTradesRowsClassItem", this.GetCQGTradingSystemTradesRowsClassItem},
                    { "GetCQGTradingSystemUpdateInfoClassIndex", this.GetCQGTradingSystemUpdateInfoClassIndex},
                    { "GetCQGTradingSystemUpdateInfoClassStatisticsChangeInfo", this.GetCQGTradingSystemUpdateInfoClassStatisticsChangeInfo},
                    { "GetCQGTransactionClassExecutionId", this.GetCQGTransactionClassExecutionId},
                    { "GetCQGTransactionClassFill", this.GetCQGTransactionClassFill},
                    { "GetCQGTransactionClassHangOrderIds", this.GetCQGTransactionClassHangOrderIds},
                    { "GetCQGTransactionClassHangQuantity", this.GetCQGTransactionClassHangQuantity},
                    { "GetCQGTransactionClassId", this.GetCQGTransactionClassId},
                    { "GetCQGTransactionClassOrder", this.GetCQGTransactionClassOrder},
                    { "GetCQGTransactionClassProperties", this.GetCQGTransactionClassProperties},
                    { "GetCQGTransactionClassRejectReason", this.GetCQGTransactionClassRejectReason},
                    { "GetCQGTransactionClassServerTimestamp", this.GetCQGTransactionClassServerTimestamp},
                    { "GetCQGTransactionClassStatus", this.GetCQGTransactionClassStatus},
                    { "GetCQGTransactionClassStrategyLegFills", this.GetCQGTransactionClassStrategyLegFills},
                    { "GetCQGTransactionClassTimestamp", this.GetCQGTransactionClassTimestamp},
                    { "GetCQGTransactionsClassCount", this.GetCQGTransactionsClassCount},
                    { "GetCQGTransactionsClassItem", this.GetCQGTransactionsClassItem},
                    { "GetCQGTransactionsClassItemByIndex", this.GetCQGTransactionsClassItemByIndex},
                    { "GetCQGYieldClassAvg", this.GetCQGYieldClassAvg},
                    { "GetCQGYieldClassClose", this.GetCQGYieldClassClose},
                    { "GetCQGYieldClassHigh", this.GetCQGYieldClassHigh},
                    { "GetCQGYieldClassHLC3", this.GetCQGYieldClassHLC3},
                    { "GetCQGYieldClassLow", this.GetCQGYieldClassLow},
                    { "GetCQGYieldClassMid", this.GetCQGYieldClassMid},
                    { "GetCQGYieldClassOpen", this.GetCQGYieldClassOpen},
                    { "GetCQGYieldClassRange", this.GetCQGYieldClassRange},
                    { "GetCQGYieldClassTimestamp", this.GetCQGYieldClassTimestamp},
                    { "GetCQGYieldClassTrueHigh", this.GetCQGYieldClassTrueHigh},
                    { "GetCQGYieldClassTrueLow", this.GetCQGYieldClassTrueLow},
                    { "GetCQGYieldClassTrueRange", this.GetCQGYieldClassTrueRange},
                    { "GetCQGYieldsClassCount", this.GetCQGYieldsClassCount},
                    { "GetCQGYieldsClassEndTimestamp", this.GetCQGYieldsClassEndTimestamp},
                    { "GetCQGYieldsClassId", this.GetCQGYieldsClassId},
                    { "GetCQGYieldsClassItem", this.GetCQGYieldsClassItem},
                    { "GetCQGYieldsClassLastError", this.GetCQGYieldsClassLastError},
                    { "GetCQGYieldsClassRequest", this.GetCQGYieldsClassRequest},
                    { "GetCQGYieldsClassStartTimestamp", this.GetCQGYieldsClassStartTimestamp},
                    { "GetCQGYieldsClassStatus", this.GetCQGYieldsClassStatus},
                    { "GetCQGYieldsClassTag", this.GetCQGYieldsClassTag},
                    { "SetCQGYieldsClassTag", this.SetCQGYieldsClassTag},
                    { "GetCQGYieldsCollectionClassCount", this.GetCQGYieldsCollectionClassCount},
                    { "GetCQGYieldsCollectionClassItem", this.GetCQGYieldsCollectionClassItem},
                    { "GetCQGYieldsCollectionClassItemById", this.GetCQGYieldsCollectionClassItemById},
                    { "GetCQGYieldsRequestClassCompound", this.GetCQGYieldsRequestClassCompound},
                    { "SetCQGYieldsRequestClassCompound", this.SetCQGYieldsRequestClassCompound},
                    { "GetCQGYieldsRequestClassContinuation", this.GetCQGYieldsRequestClassContinuation},
                    { "SetCQGYieldsRequestClassContinuation", this.SetCQGYieldsRequestClassContinuation},
                    { "GetCQGYieldsRequestClassDaysBeforeExpiration", this.GetCQGYieldsRequestClassDaysBeforeExpiration},
                    { "SetCQGYieldsRequestClassDaysBeforeExpiration", this.SetCQGYieldsRequestClassDaysBeforeExpiration},
                    { "GetCQGYieldsRequestClassEqualizeCloses", this.GetCQGYieldsRequestClassEqualizeCloses},
                    { "SetCQGYieldsRequestClassEqualizeCloses", this.SetCQGYieldsRequestClassEqualizeCloses},
                    { "GetCQGYieldsRequestClassIncludeEnd", this.GetCQGYieldsRequestClassIncludeEnd},
                    { "SetCQGYieldsRequestClassIncludeEnd", this.SetCQGYieldsRequestClassIncludeEnd},
                    { "GetCQGYieldsRequestClassModel", this.GetCQGYieldsRequestClassModel},
                    { "SetCQGYieldsRequestClassModel", this.SetCQGYieldsRequestClassModel},
                    { "GetCQGYieldsRequestClassRangeEnd", this.GetCQGYieldsRequestClassRangeEnd},
                    { "SetCQGYieldsRequestClassRangeEnd", this.SetCQGYieldsRequestClassRangeEnd},
                    { "GetCQGYieldsRequestClassRangeStart", this.GetCQGYieldsRequestClassRangeStart},
                    { "SetCQGYieldsRequestClassRangeStart", this.SetCQGYieldsRequestClassRangeStart},
                    { "GetCQGYieldsRequestClassRecalcPeriod", this.GetCQGYieldsRequestClassRecalcPeriod},
                    { "SetCQGYieldsRequestClassRecalcPeriod", this.SetCQGYieldsRequestClassRecalcPeriod},
                    { "GetCQGYieldsRequestClassSessionFlags", this.GetCQGYieldsRequestClassSessionFlags},
                    { "SetCQGYieldsRequestClassSessionFlags", this.SetCQGYieldsRequestClassSessionFlags},
                    { "GetCQGYieldsRequestClassSessionsFilter", this.GetCQGYieldsRequestClassSessionsFilter},
                    { "SetCQGYieldsRequestClassSessionsFilter", this.SetCQGYieldsRequestClassSessionsFilter},
                    { "GetCQGYieldsRequestClassSubscriptionLevel", this.GetCQGYieldsRequestClassSubscriptionLevel},
                    { "SetCQGYieldsRequestClassSubscriptionLevel", this.SetCQGYieldsRequestClassSubscriptionLevel},
                    { "GetCQGYieldsRequestClassSymbol", this.GetCQGYieldsRequestClassSymbol},
                    { "SetCQGYieldsRequestClassSymbol", this.SetCQGYieldsRequestClassSymbol},
                    { "GetCQGYieldsRequestClassUpdatesEnabled", this.GetCQGYieldsRequestClassUpdatesEnabled},
                    { "SetCQGYieldsRequestClassUpdatesEnabled", this.SetCQGYieldsRequestClassUpdatesEnabled},
            };

        }
        public void AutoGenQueryProcessing(QueryInfo query)
        {
            object qObj = ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
            object[] args = Core.ParseInputArgsFromQueryInfo(query);
            switch (query.QueryType)
            {
                case QueryType.GetProperty:
                    string getHndlrName = string.Concat("Get", query.ObjectType, query.MemberName);
                    if (!hMethods.ContainsKey(getHndlrName)) 
                        throw new System.ArgumentException(string.Concat("Operation ", getHndlrName, " is invalid"), "getter name");
                    hMethods[getHndlrName](query, args); 
                    break;
                case QueryType.SetProperty:
                    string setHndlrName = string.Concat("Set", query.ObjectType, query.MemberName);
                    if (!hMethods.ContainsKey(setHndlrName)) 
                        throw new System.ArgumentException(string.Concat("Operation ", setHndlrName, " is invalid"), "setter name");
                    hMethods[setHndlrName](query, args); 
                    break;
            }
        }

            private void GetCQGAccountClassAccountMarginDetailing(QueryInfo query, object[] args)
            {
                CQGAccount AccountMarginDetailingObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eAccountMarginDetailing AccountMarginDetailingpropV = AccountMarginDetailingObj.AccountMarginDetailing;
                var AccountMarginDetailingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountMarginDetailingPropKey, value: AccountMarginDetailingpropV));
            }

            private void GetCQGAccountClassAuthorizedTraders(QueryInfo query, object[] args)
            {
                CQGAccount AuthorizedTradersObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStringCollection AuthorizedTraderspropV = AuthorizedTradersObj.AuthorizedTraders;
                var AuthorizedTradersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AuthorizedTradersPropKey, AuthorizedTraderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AuthorizedTradersPropKey));
            }

            private void GetCQGAccountClassAutoSubscribeInstruments(QueryInfo query, object[] args)
            {
                CQGAccount AutoSubscribeInstrumentsObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean AutoSubscribeInstrumentspropV = AutoSubscribeInstrumentsObj.AutoSubscribeInstruments;
                var AutoSubscribeInstrumentsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AutoSubscribeInstrumentsPropKey, value: AutoSubscribeInstrumentspropV));
            }

            private void GetCQGAccountClassCEL(QueryInfo query, object[] args)
            {
                CQGAccount CELObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCEL CELpropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGAccountClassCurrencySummaries(QueryInfo query, object[] args)
            {
                CQGAccount CurrencySummariesObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccountSummaries CurrencySummariespropV = CurrencySummariesObj.CurrencySummaries;
                var CurrencySummariesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurrencySummariesPropKey, CurrencySummariespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencySummariesPropKey));
            }

            private void GetCQGAccountClassDateOfLastStatement(QueryInfo query, object[] args)
            {
                CQGAccount DateOfLastStatementObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime DateOfLastStatementpropV = DateOfLastStatementObj.DateOfLastStatement;
                var DateOfLastStatementPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DateOfLastStatementPropKey, value: DateOfLastStatementpropV));
            }

            private void GetCQGAccountClassFcmAccountID(QueryInfo query, object[] args)
            {
                CQGAccount FcmAccountIDObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String FcmAccountIDpropV = FcmAccountIDObj.FcmAccountID;
                var FcmAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmAccountIDPropKey, value: FcmAccountIDpropV));
            }

            private void GetCQGAccountClassFcmClass(QueryInfo query, object[] args)
            {
                CQGAccount FcmClassObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eFcmClass FcmClasspropV = FcmClassObj.FcmClass;
                var FcmClassPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmClassPropKey, value: FcmClasspropV));
            }

            private void GetCQGAccountClassFcmID(QueryInfo query, object[] args)
            {
                CQGAccount FcmIDObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 FcmIDpropV = FcmIDObj.FcmID;
                var FcmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmIDPropKey, value: FcmIDpropV));
            }

            private void GetCQGAccountClassFcmName(QueryInfo query, object[] args)
            {
                CQGAccount FcmNameObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String FcmNamepropV = FcmNameObj.FcmName;
                var FcmNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmNamePropKey, value: FcmNamepropV));
            }

            private void GetCQGAccountClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGAccount GWAccountIDObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGAccountClassGWAccountName(QueryInfo query, object[] args)
            {
                CQGAccount GWAccountNameObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String GWAccountNamepropV = GWAccountNameObj.GWAccountName;
                var GWAccountNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountNamePropKey, value: GWAccountNamepropV));
            }

            private void GetCQGAccountClassInternalOrders(QueryInfo query, object[] args)
            {
                CQGAccount InternalOrdersObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrders InternalOrderspropV = InternalOrdersObj.InternalOrders;
                var InternalOrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InternalOrdersPropKey, InternalOrderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InternalOrdersPropKey));
            }

            private void GetCQGAccountClassOrders(QueryInfo query, object[] args)
            {
                CQGAccount OrdersObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrders OrderspropV = OrdersObj.Orders;
                var OrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
            }

            private void GetCQGAccountClassPositions(QueryInfo query, object[] args)
            {
                CQGAccount PositionsObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPositions PositionspropV = PositionsObj.Positions;
                var PositionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PositionsPropKey, PositionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionsPropKey));
            }

            private void GetCQGAccountClassPositionSubcriptionLevel(QueryInfo query, object[] args)
            {
                CQGAccount PositionSubcriptionLevelObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.ePositionSubscriptionLevel PositionSubcriptionLevelpropV = PositionSubcriptionLevelObj.PositionSubcriptionLevel;
                var PositionSubcriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionSubcriptionLevelPropKey, value: PositionSubcriptionLevelpropV));
            }

            private void GetCQGAccountClassReportingCurrency(QueryInfo query, object[] args)
            {
                CQGAccount ReportingCurrencyObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ReportingCurrencypropV = ReportingCurrencyObj.ReportingCurrency;
                var ReportingCurrencyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReportingCurrencyPropKey, value: ReportingCurrencypropV));
            }

            private void GetCQGAccountClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGAccount ServerTimestampObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGAccountClassSummary(QueryInfo query, object[] args)
            {
                CQGAccount SummaryObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccountSummary SummarypropV = SummaryObj.Summary;
                var SummaryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SummaryPropKey, SummarypropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SummaryPropKey));
            }

            private void GetCQGAccountClassTimestamp(QueryInfo query, object[] args)
            {
                CQGAccount TimestampObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGAccountClassTotalMarginValue(QueryInfo query, object[] args)
            {
                CQGAccount TotalMarginValueObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TotalMarginValuepropV = TotalMarginValueObj.TotalMarginValue;
                var TotalMarginValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalMarginValuePropKey, value: TotalMarginValuepropV));
            }

            private void GetCQGAccountClassTotalPurchasingPower(QueryInfo query, object[] args)
            {
                CQGAccount TotalPurchasingPowerObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TotalPurchasingPowerpropV = TotalPurchasingPowerObj.TotalPurchasingPower;
                var TotalPurchasingPowerPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalPurchasingPowerPropKey, value: TotalPurchasingPowerpropV));
            }

            private void GetCQGAccountsClassCount(QueryInfo query, object[] args)
            {
                CQGAccounts CountObj = (CQGAccounts)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGAccountsClassItem(QueryInfo query, object[] args)
            {
                CQGAccounts ItemObj = (CQGAccounts)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccount ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAccountsClassItemByFCM(QueryInfo query, object[] args)
            {
                CQGAccounts ItemByFCMObj = (CQGAccounts)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccount ItemByFCMpropV = ItemByFCMObj.ItemByFCM[(System.String)args[0],(System.Int32)args[1]];
                var ItemByFCMPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByFCMPropKey, ItemByFCMpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByFCMPropKey));
            }

            private void GetCQGAccountSummariesClassCount(QueryInfo query, object[] args)
            {
                CQGAccountSummaries CountObj = (CQGAccountSummaries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGAccountSummariesClassItem(QueryInfo query, object[] args)
            {
                CQGAccountSummaries ItemObj = (CQGAccountSummaries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccountSummary ItempropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAccountSummaryClassAccount(QueryInfo query, object[] args)
            {
                CQGAccountSummary AccountObj = (CQGAccountSummary)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccount AccountpropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGAccountSummaryClassCurrencyName(QueryInfo query, object[] args)
            {
                CQGAccountSummary CurrencyNameObj = (CQGAccountSummary)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CurrencyNamepropV = CurrencyNameObj.CurrencyName;
                var CurrencyNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyNamePropKey, value: CurrencyNamepropV));
            }

            private void GetCQGAccountSummaryClassManualFillsInvolved(QueryInfo query, object[] args)
            {
                CQGAccountSummary ManualFillsInvolvedObj = (CQGAccountSummary)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean ManualFillsInvolvedpropV = ManualFillsInvolvedObj.ManualFillsInvolved;
                var ManualFillsInvolvedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ManualFillsInvolvedPropKey, value: ManualFillsInvolvedpropV));
            }

            private void GetCQGAdvancedStudiesClassCount(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies CountObj = (CQGAdvancedStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGAdvancedStudiesClassItem(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies ItemObj = (CQGAdvancedStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAdvancedStudy ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAdvancedStudiesClassItemById(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies ItemByIdObj = (CQGAdvancedStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAdvancedStudy ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGAdvancedStudyClassCount(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy CountObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGAdvancedStudyClassCurveHeaders(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy CurveHeadersObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurveHeaders CurveHeaderspropV = CurveHeadersObj.CurveHeaders;
                var CurveHeadersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurveHeadersPropKey, CurveHeaderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveHeadersPropKey));
            }

            private void GetCQGAdvancedStudyClassDefinition(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy DefinitionObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAdvancedStudyDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGAdvancedStudyClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy EndTimestampObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGAdvancedStudyClassId(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy IdObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGAdvancedStudyClassItem(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy ItemObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurves ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAdvancedStudyClassLastError(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy LastErrorObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGAdvancedStudyClassRequest(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy RequestObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAdvancedStudyRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGAdvancedStudyClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy StartTimestampObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGAdvancedStudyClassStatus(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy StatusObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGAdvancedStudyClassTag(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy TagObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGAdvancedStudyDefinitionClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition AbbreviationObj = (CQGAdvancedStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
            }

            private void GetCQGAdvancedStudyDefinitionClassCurveDefinitions(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition CurveDefinitionsObj = (CQGAdvancedStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurveDefinitions CurveDefinitionspropV = CurveDefinitionsObj.CurveDefinitions;
                var CurveDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurveDefinitionsPropKey, CurveDefinitionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveDefinitionsPropKey));
            }

            private void GetCQGAdvancedStudyDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition NameObj = (CQGAdvancedStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGAdvancedStudyDefinitionClassParameterDefinitions(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition ParameterDefinitionsObj = (CQGAdvancedStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGParameterDefinitions ParameterDefinitionspropV = ParameterDefinitionsObj.ParameterDefinitions;
                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
            }

            private void GetCQGAdvancedStudyDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions CountObj = (CQGAdvancedStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGAdvancedStudyDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions ItemObj = (CQGAdvancedStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAdvancedStudyDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAdvancedStudyDefinitionsClassItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions ItemByAbbreviationObj = (CQGAdvancedStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAdvancedStudyDefinition ItemByAbbreviationpropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
            }

            private void GetCQGAdvancedStudyRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest BaseExpressionObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String BaseExpressionpropV = BaseExpressionObj.BaseExpression;
                var BaseExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionpropV));
            }

            private void GetCQGAdvancedStudyRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ContinuationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGAdvancedStudyRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest DaysBeforeExpirationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGAdvancedStudyRequestClassDefinition(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest DefinitionObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAdvancedStudyDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGAdvancedStudyRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest EqualizeClosesObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGAdvancedStudyRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest HistoricalPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
            }

            private void GetCQGAdvancedStudyRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IncludeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGAdvancedStudyRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IntradayPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
            }

            private void GetCQGAdvancedStudyRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ParameterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object ParameterpropV = ParameterObj.Parameter[(System.Object)args[0]];
                var ParameterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterpropV));
            }

            private void GetCQGAdvancedStudyRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RangeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGAdvancedStudyRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RangeStartObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGAdvancedStudyRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RecalcPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGAdvancedStudyRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SessionFlagsObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGAdvancedStudyRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SessionsFilterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGAdvancedStudyRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SubscriptionLevelObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGAdvancedStudyRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest UpdatesEnabledObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassDefaultValue(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition DefaultValueObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object DefaultValuepropV = DefaultValueObj.DefaultValue;
                var DefaultValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValuePropKey, value: DefaultValuepropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition DefaultValueIndexObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DefaultValueIndexpropV = DefaultValueIndexObj.DefaultValueIndex;
                var DefaultValueIndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValueIndexPropKey, value: DefaultValueIndexpropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition NameObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassType(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition TypeObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eAlgorithmicOrderPropertyType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassUnit(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition UnitObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String UnitpropV = UnitObj.Unit;
                var UnitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnitPropKey, value: UnitpropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassValues(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition ValuesObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStringCollection ValuespropV = ValuesObj.Values;
                var ValuesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ValuesPropKey, ValuespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuesPropKey));
            }

            private void GetCQGAlgorithmicOrderDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions CountObj = (CQGAlgorithmicOrderDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions ItemObj = (CQGAlgorithmicOrderDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAlgorithmicOrderDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAlgorithmicOrderParametersClassDurationType(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters DurationTypeObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderDuration DurationTypepropV = DurationTypeObj.DurationType;
                var DurationTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DurationTypePropKey, value: DurationTypepropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassExecutionInstructions(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters ExecutionInstructionsObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderExecutionInstruction ExecutionInstructionspropV = ExecutionInstructionsObj.ExecutionInstructions;
                var ExecutionInstructionsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionInstructionsPropKey, value: ExecutionInstructionspropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassExecutionPattern(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters ExecutionPatternObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ExecutionPatternpropV = ExecutionPatternObj.ExecutionPattern;
                var ExecutionPatternPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionPatternPropKey, value: ExecutionPatternpropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassGTD(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters GTDObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime GTDpropV = GTDObj.GTD;
                var GTDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GTDPropKey, value: GTDpropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters GWAccountIDObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters InstrumentNameObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassParked(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters ParkedObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean ParkedpropV = ParkedObj.Parked;
                var ParkedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParkedPropKey, value: ParkedpropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassPreferredTrailingPeg(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters PreferredTrailingPegObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderTrailingPeg PreferredTrailingPegpropV = PreferredTrailingPegObj.PreferredTrailingPeg;
                var PreferredTrailingPegPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreferredTrailingPegPropKey, value: PreferredTrailingPegpropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassPrice(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters PriceObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassQuantity(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters QuantityObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassSide(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters SideObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderSide SidepropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassStopLimitPrice(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters StopLimitPriceObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double StopLimitPricepropV = StopLimitPriceObj.StopLimitPrice;
                var StopLimitPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricepropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassTrailingOffset(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters TrailingOffsetObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrailingOffsetpropV = TrailingOffsetObj.TrailingOffset;
                var TrailingOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrailingOffsetPropKey, value: TrailingOffsetpropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassTriggerQuantity(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters TriggerQuantityObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TriggerQuantitypropV = TriggerQuantityObj.TriggerQuantity;
                var TriggerQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TriggerQuantityPropKey, value: TriggerQuantitypropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassType(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters TypeObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassVisibleQuantity(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters VisibleQuantityObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 VisibleQuantitypropV = VisibleQuantityObj.VisibleQuantity;
                var VisibleQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VisibleQuantityPropKey, value: VisibleQuantitypropV));
            }

            private void GetCQGAlgorithmicOrderPropertiesClassCount(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperties CountObj = (CQGAlgorithmicOrderProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGAlgorithmicOrderPropertiesClassItem(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperties ItemObj = (CQGAlgorithmicOrderProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAlgorithmicOrderProperty ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAlgorithmicOrderPropertyClassName(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperty NameObj = (CQGAlgorithmicOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGAlgorithmicOrderPropertyClassValue(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperty ValueObj = (CQGAlgorithmicOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object ValuepropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
            }

            private void GetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval(QueryInfo query, object[] args)
            {
                CQGAPIConfig AccountMarginAndPositionsThrottleIntervalObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 AccountMarginAndPositionsThrottleIntervalpropV = AccountMarginAndPositionsThrottleIntervalObj.AccountMarginAndPositionsThrottleInterval;
                var AccountMarginAndPositionsThrottleIntervalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountMarginAndPositionsThrottleIntervalPropKey, value: AccountMarginAndPositionsThrottleIntervalpropV));
            }

            private void GetCQGAPIConfigClassAgeToDeleteLogFileDays(QueryInfo query, object[] args)
            {
                CQGAPIConfig AgeToDeleteLogFileDaysObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 AgeToDeleteLogFileDayspropV = AgeToDeleteLogFileDaysObj.AgeToDeleteLogFileDays;
                var AgeToDeleteLogFileDaysPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AgeToDeleteLogFileDaysPropKey, value: AgeToDeleteLogFileDayspropV));
            }

            private void GetCQGAPIConfigClassApplyDaylightSavingChanges(QueryInfo query, object[] args)
            {
                CQGAPIConfig ApplyDaylightSavingChangesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean ApplyDaylightSavingChangespropV = ApplyDaylightSavingChangesObj.ApplyDaylightSavingChanges;
                var ApplyDaylightSavingChangesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ApplyDaylightSavingChangesPropKey, value: ApplyDaylightSavingChangespropV));
            }

            private void GetCQGAPIConfigClassCollectionsThrowException(QueryInfo query, object[] args)
            {
                CQGAPIConfig CollectionsThrowExceptionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean CollectionsThrowExceptionpropV = CollectionsThrowExceptionObj.CollectionsThrowException;
                var CollectionsThrowExceptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CollectionsThrowExceptionPropKey, value: CollectionsThrowExceptionpropV));
            }

            private void GetCQGAPIConfigClassDefaultAccountMarginDetailing(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultAccountMarginDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eAccountMarginDetailing DefaultAccountMarginDetailingpropV = DefaultAccountMarginDetailingObj.DefaultAccountMarginDetailing;
                var DefaultAccountMarginDetailingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultAccountMarginDetailingPropKey, value: DefaultAccountMarginDetailingpropV));
            }

            private void GetCQGAPIConfigClassDefaultInstrumentBBAType(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultInstrumentBBATypeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eDOMandBBAType DefaultInstrumentBBATypepropV = DefaultInstrumentBBATypeObj.DefaultInstrumentBBAType;
                var DefaultInstrumentBBATypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultInstrumentBBATypePropKey, value: DefaultInstrumentBBATypepropV));
            }

            private void GetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultInstrumentSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eDataSubscriptionLevel DefaultInstrumentSubscriptionLevelpropV = DefaultInstrumentSubscriptionLevelObj.DefaultInstrumentSubscriptionLevel;
                var DefaultInstrumentSubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultInstrumentSubscriptionLevelPropKey, value: DefaultInstrumentSubscriptionLevelpropV));
            }

            private void GetCQGAPIConfigClassDefPositionSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefPositionSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.ePositionSubscriptionLevel DefPositionSubscriptionLevelpropV = DefPositionSubscriptionLevelObj.DefPositionSubscriptionLevel;
                var DefPositionSubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefPositionSubscriptionLevelPropKey, value: DefPositionSubscriptionLevelpropV));
            }

            private void GetCQGAPIConfigClassDOMUpdatesMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig DOMUpdatesModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eDOMUpdatesMode DOMUpdatesModepropV = DOMUpdatesModeObj.DOMUpdatesMode;
                var DOMUpdatesModePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMUpdatesModePropKey, value: DOMUpdatesModepropV));
            }

            private void GetCQGAPIConfigClassDOMUpdatesPeriod(QueryInfo query, object[] args)
            {
                CQGAPIConfig DOMUpdatesPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DOMUpdatesPeriodpropV = DOMUpdatesPeriodObj.DOMUpdatesPeriod;
                var DOMUpdatesPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMUpdatesPeriodPropKey, value: DOMUpdatesPeriodpropV));
            }

            private void GetCQGAPIConfigClassFireEventOnChangedPrices(QueryInfo query, object[] args)
            {
                CQGAPIConfig FireEventOnChangedPricesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean FireEventOnChangedPricespropV = FireEventOnChangedPricesObj.FireEventOnChangedPrices;
                var FireEventOnChangedPricesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FireEventOnChangedPricesPropKey, value: FireEventOnChangedPricespropV));
            }

            private void GetCQGAPIConfigClassGatewayEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig GatewayEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean GatewayEnabledpropV = GatewayEnabledObj.GatewayEnabled;
                var GatewayEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GatewayEnabledPropKey, value: GatewayEnabledpropV));
            }

            private void GetCQGAPIConfigClassIncludeOrderTransactions(QueryInfo query, object[] args)
            {
                CQGAPIConfig IncludeOrderTransactionsObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeOrderTransactionspropV = IncludeOrderTransactionsObj.IncludeOrderTransactions;
                var IncludeOrderTransactionsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeOrderTransactionsPropKey, value: IncludeOrderTransactionspropV));
            }

            private void GetCQGAPIConfigClassLogSeverity(QueryInfo query, object[] args)
            {
                CQGAPIConfig LogSeverityObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eLogSeverity LogSeveritypropV = LogSeverityObj.LogSeverity;
                var LogSeverityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LogSeverityPropKey, value: LogSeveritypropV));
            }

            private void GetCQGAPIConfigClassMaxLogFileCount(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileCountObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 MaxLogFileCountpropV = MaxLogFileCountObj.MaxLogFileCount;
                var MaxLogFileCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileCountPropKey, value: MaxLogFileCountpropV));
            }

            private void GetCQGAPIConfigClassMaxLogFileDuration(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileDurationObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime MaxLogFileDurationpropV = MaxLogFileDurationObj.MaxLogFileDuration;
                var MaxLogFileDurationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileDurationPropKey, value: MaxLogFileDurationpropV));
            }

            private void GetCQGAPIConfigClassMaxLogFileSize(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileSizeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 MaxLogFileSizepropV = MaxLogFileSizeObj.MaxLogFileSize;
                var MaxLogFileSizePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileSizePropKey, value: MaxLogFileSizepropV));
            }

            private void GetCQGAPIConfigClassMessageProcessingTimeout(QueryInfo query, object[] args)
            {
                CQGAPIConfig MessageProcessingTimeoutObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 MessageProcessingTimeoutpropV = MessageProcessingTimeoutObj.MessageProcessingTimeout;
                var MessageProcessingTimeoutPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MessageProcessingTimeoutPropKey, value: MessageProcessingTimeoutpropV));
            }

            private void GetCQGAPIConfigClassMetaDataEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig MetaDataEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean MetaDataEnabledpropV = MetaDataEnabledObj.MetaDataEnabled;
                var MetaDataEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MetaDataEnabledPropKey, value: MetaDataEnabledpropV));
            }

            private void GetCQGAPIConfigClassNewInstrumentChangeMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig NewInstrumentChangeModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean NewInstrumentChangeModepropV = NewInstrumentChangeModeObj.NewInstrumentChangeMode;
                var NewInstrumentChangeModePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewInstrumentChangeModePropKey, value: NewInstrumentChangeModepropV));
            }

            private void GetCQGAPIConfigClassNewInstrumentMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig NewInstrumentModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean NewInstrumentModepropV = NewInstrumentModeObj.NewInstrumentMode;
                var NewInstrumentModePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewInstrumentModePropKey, value: NewInstrumentModepropV));
            }

            private void GetCQGAPIConfigClassNonsynchronizedData(QueryInfo query, object[] args)
            {
                CQGAPIConfig NonsynchronizedDataObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean NonsynchronizedDatapropV = NonsynchronizedDataObj.NonsynchronizedData;
                var NonsynchronizedDataPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NonsynchronizedDataPropKey, value: NonsynchronizedDatapropV));
            }

            private void GetCQGAPIConfigClassPendingOrderActionEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig PendingOrderActionEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean PendingOrderActionEnabledpropV = PendingOrderActionEnabledObj.PendingOrderActionEnabled;
                var PendingOrderActionEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PendingOrderActionEnabledPropKey, value: PendingOrderActionEnabledpropV));
            }

            private void GetCQGAPIConfigClassPositionDetailing(QueryInfo query, object[] args)
            {
                CQGAPIConfig PositionDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.ePositionDetailing PositionDetailingpropV = PositionDetailingObj.PositionDetailing;
                var PositionDetailingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionDetailingPropKey, value: PositionDetailingpropV));
            }

            private void GetCQGAPIConfigClassPriceMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig PriceModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.ePriceMode PriceModepropV = PriceModeObj.PriceMode;
                var PriceModePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PriceModePropKey, value: PriceModepropV));
            }

            private void GetCQGAPIConfigClassProviderPassword(QueryInfo query, object[] args)
            {
                CQGAPIConfig ProviderPasswordObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ProviderPasswordpropV = ProviderPasswordObj.ProviderPassword;
                var ProviderPasswordPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProviderPasswordPropKey, value: ProviderPasswordpropV));
            }

            private void GetCQGAPIConfigClassQueryAllAuthorizedTraders(QueryInfo query, object[] args)
            {
                CQGAPIConfig QueryAllAuthorizedTradersObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean QueryAllAuthorizedTraderspropV = QueryAllAuthorizedTradersObj.QueryAllAuthorizedTraders;
                var QueryAllAuthorizedTradersPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QueryAllAuthorizedTradersPropKey, value: QueryAllAuthorizedTraderspropV));
            }

            private void GetCQGAPIConfigClassReadyStatusCheck(QueryInfo query, object[] args)
            {
                CQGAPIConfig ReadyStatusCheckObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eReadyStatusCheck ReadyStatusCheckpropV = ReadyStatusCheckObj.ReadyStatusCheck;
                var ReadyStatusCheckPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReadyStatusCheckPropKey, value: ReadyStatusCheckpropV));
            }

            private void GetCQGAPIConfigClassRemoteOpenAPILoginService(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPILoginServiceObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String RemoteOpenAPILoginServicepropV = RemoteOpenAPILoginServiceObj.RemoteOpenAPILoginService;
                var RemoteOpenAPILoginServicePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPILoginServicePropKey, value: RemoteOpenAPILoginServicepropV));
            }

            private void GetCQGAPIConfigClassRemoteOpenAPIServer(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPIServerObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String RemoteOpenAPIServerpropV = RemoteOpenAPIServerObj.RemoteOpenAPIServer;
                var RemoteOpenAPIServerPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPIServerPropKey, value: RemoteOpenAPIServerpropV));
            }

            private void GetCQGAPIConfigClassRemoteOpenAPIServers(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPIServersObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStringCollection RemoteOpenAPIServerspropV = RemoteOpenAPIServersObj.RemoteOpenAPIServers;
                var RemoteOpenAPIServersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RemoteOpenAPIServersPropKey, RemoteOpenAPIServerspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPIServersPropKey));
            }

            private void GetCQGAPIConfigClassReplaceLoginSession(QueryInfo query, object[] args)
            {
                CQGAPIConfig ReplaceLoginSessionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean ReplaceLoginSessionpropV = ReplaceLoginSessionObj.ReplaceLoginSession;
                var ReplaceLoginSessionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReplaceLoginSessionPropKey, value: ReplaceLoginSessionpropV));
            }

            private void GetCQGAPIConfigClassSnapshotPeriod(QueryInfo query, object[] args)
            {
                CQGAPIConfig SnapshotPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 SnapshotPeriodpropV = SnapshotPeriodObj.SnapshotPeriod;
                var SnapshotPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SnapshotPeriodPropKey, value: SnapshotPeriodpropV));
            }

            private void GetCQGAPIConfigClassStrategyManagerEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig StrategyManagerEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean StrategyManagerEnabledpropV = StrategyManagerEnabledObj.StrategyManagerEnabled;
                var StrategyManagerEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrategyManagerEnabledPropKey, value: StrategyManagerEnabledpropV));
            }

            private void GetCQGAPIConfigClassTimeZoneCode(QueryInfo query, object[] args)
            {
                CQGAPIConfig TimeZoneCodeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeZone TimeZoneCodepropV = TimeZoneCodeObj.TimeZoneCode;
                var TimeZoneCodePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimeZoneCodePropKey, value: TimeZoneCodepropV));
            }

            private void GetCQGAPIConfigClassUsedFromATLClient(QueryInfo query, object[] args)
            {
                CQGAPIConfig UsedFromATLClientObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UsedFromATLClientpropV = UsedFromATLClientObj.UsedFromATLClient;
                var UsedFromATLClientPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UsedFromATLClientPropKey, value: UsedFromATLClientpropV));
            }

            private void GetCQGAPIConfigClassUseOrderSide(QueryInfo query, object[] args)
            {
                CQGAPIConfig UseOrderSideObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UseOrderSidepropV = UseOrderSideObj.UseOrderSide;
                var UseOrderSidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UseOrderSidePropKey, value: UseOrderSidepropV));
            }

            private void GetCQGBarsTimestampsClassCount(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps CountObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGBarsTimestampsClassId(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps IdObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGBarsTimestampsClassItem(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps ItemObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGBarsTimestampsClassLastError(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps LastErrorObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGBarsTimestampsClassStatus(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps StatusObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGCELClassAccounts(QueryInfo query, object[] args)
            {
                CQGCEL AccountsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccounts AccountspropV = AccountsObj.Accounts;
                var AccountsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountsPropKey, AccountspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountsPropKey));
            }

            private void GetCQGCELClassAccountSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGCEL AccountSubscriptionLevelObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eAccountSubscriptionLevel AccountSubscriptionLevelpropV = AccountSubscriptionLevelObj.AccountSubscriptionLevel;
                var AccountSubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountSubscriptionLevelPropKey, value: AccountSubscriptionLevelpropV));
            }

            private void GetCQGCELClassAllAdvancedStudies(QueryInfo query, object[] args)
            {
                CQGCEL AllAdvancedStudiesObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAdvancedStudies AllAdvancedStudiespropV = AllAdvancedStudiesObj.AllAdvancedStudies;
                var AllAdvancedStudiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllAdvancedStudiesPropKey, AllAdvancedStudiespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllAdvancedStudiesPropKey));
            }

            private void GetCQGCELClassAllConditions(QueryInfo query, object[] args)
            {
                CQGCEL AllConditionsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConditions AllConditionspropV = AllConditionsObj.AllConditions;
                var AllConditionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllConditionsPropKey, AllConditionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllConditionsPropKey));
            }

            private void GetCQGCELClassAllConstantVolumeBars(QueryInfo query, object[] args)
            {
                CQGCEL AllConstantVolumeBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConstantVolumeBarsCollection AllConstantVolumeBarspropV = AllConstantVolumeBarsObj.AllConstantVolumeBars;
                var AllConstantVolumeBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllConstantVolumeBarsPropKey, AllConstantVolumeBarspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllConstantVolumeBarsPropKey));
            }

            private void GetCQGCELClassAllCustomStudies(QueryInfo query, object[] args)
            {
                CQGCEL AllCustomStudiesObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCustomStudies AllCustomStudiespropV = AllCustomStudiesObj.AllCustomStudies;
                var AllCustomStudiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllCustomStudiesPropKey, AllCustomStudiespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllCustomStudiesPropKey));
            }

            private void GetCQGCELClassAllExpressions(QueryInfo query, object[] args)
            {
                CQGCEL AllExpressionsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExpressions AllExpressionspropV = AllExpressionsObj.AllExpressions;
                var AllExpressionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllExpressionsPropKey, AllExpressionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllExpressionsPropKey));
            }

            private void GetCQGCELClassAllInstrumentsGroups(QueryInfo query, object[] args)
            {
                CQGCEL AllInstrumentsGroupsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrumentsGroups AllInstrumentsGroupspropV = AllInstrumentsGroupsObj.AllInstrumentsGroups;
                var AllInstrumentsGroupsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllInstrumentsGroupsPropKey, AllInstrumentsGroupspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllInstrumentsGroupsPropKey));
            }

            private void GetCQGCELClassAllManualFills(QueryInfo query, object[] args)
            {
                CQGCEL AllManualFillsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGManualFillsCollection AllManualFillspropV = AllManualFillsObj.AllManualFills;
                var AllManualFillsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllManualFillsPropKey, AllManualFillspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllManualFillsPropKey));
            }

            private void GetCQGCELClassAllPointAndFigureBars(QueryInfo query, object[] args)
            {
                CQGCEL AllPointAndFigureBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPointAndFigureBarsCollection AllPointAndFigureBarspropV = AllPointAndFigureBarsObj.AllPointAndFigureBars;
                var AllPointAndFigureBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllPointAndFigureBarsPropKey, AllPointAndFigureBarspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllPointAndFigureBarsPropKey));
            }

            private void GetCQGCELClassAllStrategyDefinitions(QueryInfo query, object[] args)
            {
                CQGCEL AllStrategyDefinitionsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStrategyDefinitions AllStrategyDefinitionspropV = AllStrategyDefinitionsObj.AllStrategyDefinitions;
                var AllStrategyDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllStrategyDefinitionsPropKey, AllStrategyDefinitionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllStrategyDefinitionsPropKey));
            }

            private void GetCQGCELClassAllSubMinuteBars(QueryInfo query, object[] args)
            {
                CQGCEL AllSubMinuteBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSubMinuteBarsCollection AllSubMinuteBarspropV = AllSubMinuteBarsObj.AllSubMinuteBars;
                var AllSubMinuteBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllSubMinuteBarsPropKey, AllSubMinuteBarspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllSubMinuteBarsPropKey));
            }

            private void GetCQGCELClassAllTFlowBars(QueryInfo query, object[] args)
            {
                CQGCEL AllTFlowBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTFlowBarsCollection AllTFlowBarspropV = AllTFlowBarsObj.AllTFlowBars;
                var AllTFlowBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllTFlowBarsPropKey, AllTFlowBarspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTFlowBarsPropKey));
            }

            private void GetCQGCELClassAllTicks(QueryInfo query, object[] args)
            {
                CQGCEL AllTicksObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTicksCollection AllTickspropV = AllTicksObj.AllTicks;
                var AllTicksPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllTicksPropKey, AllTickspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTicksPropKey));
            }

            private void GetCQGCELClassAllTimedBars(QueryInfo query, object[] args)
            {
                CQGCEL AllTimedBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTimedBarsCollection AllTimedBarspropV = AllTimedBarsObj.AllTimedBars;
                var AllTimedBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllTimedBarsPropKey, AllTimedBarspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTimedBarsPropKey));
            }

            private void GetCQGCELClassAllTradingSystems(QueryInfo query, object[] args)
            {
                CQGCEL AllTradingSystemsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystems AllTradingSystemspropV = AllTradingSystemsObj.AllTradingSystems;
                var AllTradingSystemsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllTradingSystemsPropKey, AllTradingSystemspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTradingSystemsPropKey));
            }

            private void GetCQGCELClassAllYields(QueryInfo query, object[] args)
            {
                CQGCEL AllYieldsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGYieldsCollection AllYieldspropV = AllYieldsObj.AllYields;
                var AllYieldsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllYieldsPropKey, AllYieldspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllYieldsPropKey));
            }

            private void GetCQGCELClassAPIConfiguration(QueryInfo query, object[] args)
            {
                CQGCEL APIConfigurationObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAPIConfig APIConfigurationpropV = APIConfigurationObj.APIConfiguration;
                var APIConfigurationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(APIConfigurationPropKey, APIConfigurationpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: APIConfigurationPropKey));
            }

            private void GetCQGCELClassConfiguration(QueryInfo query, object[] args)
            {
                CQGCEL ConfigurationObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCELConfiguration ConfigurationpropV = ConfigurationObj.get_Configuration();
                var ConfigurationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ConfigurationPropKey, value: ConfigurationpropV));
            }

            private void GetCQGCELClassCurrencyRates(QueryInfo query, object[] args)
            {
                CQGCEL CurrencyRatesObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurrencyRates CurrencyRatespropV = CurrencyRatesObj.CurrencyRates;
                var CurrencyRatesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurrencyRatesPropKey, CurrencyRatespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyRatesPropKey));
            }

            private void GetCQGCELClassDirectEventsAccessor(QueryInfo query, object[] args)
            {
                CQGCEL DirectEventsAccessorObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGDirectEventsAccessor DirectEventsAccessorpropV = DirectEventsAccessorObj.DirectEventsAccessor;
                var DirectEventsAccessorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DirectEventsAccessorPropKey, DirectEventsAccessorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DirectEventsAccessorPropKey));
            }

            private void GetCQGCELClassEnvironment(QueryInfo query, object[] args)
            {
                CQGCEL EnvironmentObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGEnvironment EnvironmentpropV = EnvironmentObj.Environment;
                var EnvironmentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(EnvironmentPropKey, EnvironmentpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EnvironmentPropKey));
            }

            private void GetCQGCELClassInstruments(QueryInfo query, object[] args)
            {
                CQGCEL InstrumentsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstruments InstrumentspropV = InstrumentsObj.Instruments;
                var InstrumentsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentsPropKey, InstrumentspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentsPropKey));
            }

            private void GetCQGCELClassInternalOrders(QueryInfo query, object[] args)
            {
                CQGCEL InternalOrdersObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrders InternalOrderspropV = InternalOrdersObj.InternalOrders;
                var InternalOrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InternalOrdersPropKey, InternalOrderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InternalOrdersPropKey));
            }

            private void GetCQGCELClassIsStarted(QueryInfo query, object[] args)
            {
                System.Boolean IsStartedpropV = CqgDataManagement.IsCQGStarted;
                var IsStartedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsStartedPropKey, value: IsStartedpropV));
            }

            private void GetCQGCELClassLogger(QueryInfo query, object[] args)
            {
                CQGCEL LoggerObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGLogger LoggerpropV = LoggerObj.Logger;
                var LoggerPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LoggerPropKey, LoggerpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LoggerPropKey));
            }

            private void GetCQGCELClassOrders(QueryInfo query, object[] args)
            {
                CQGCEL OrdersObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrders OrderspropV = OrdersObj.Orders;
                var OrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
            }

            private void GetCQGCELClassOTPRequired(QueryInfo query, object[] args)
            {
                CQGCEL OTPRequiredObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean OTPRequiredpropV = OTPRequiredObj.OTPRequired;
                var OTPRequiredPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OTPRequiredPropKey, value: OTPRequiredpropV));
            }

            private void GetCQGChangedTradeEntriesClassChangeFilter(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries ChangeFilterObj = (CQGChangedTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTradeChangeCategory ChangeFilterpropV = ChangeFilterObj.ChangeFilter;
                var ChangeFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeFilterPropKey, value: ChangeFilterpropV));
            }

            private void GetCQGChangedTradeEntriesClassCount(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries CountObj = (CQGChangedTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGChangedTradeEntriesClassItem(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries ItemObj = (CQGChangedTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGChangedTradeEntry ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGChangedTradeEntryClassChangeCategory(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntry ChangeCategoryObj = (CQGChangedTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTradeChangeCategory ChangeCategorypropV = ChangeCategoryObj.ChangeCategory;
                var ChangeCategoryPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeCategoryPropKey, value: ChangeCategorypropV));
            }

            private void GetCQGChangedTradeEntryClassTradeEntry(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntry TradeEntryObj = (CQGChangedTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeEntry TradeEntrypropV = TradeEntryObj.TradeEntry;
                var TradeEntryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeEntryPropKey, TradeEntrypropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeEntryPropKey));
            }

            private void GetCQGChangedTradeExitClassChangeCategory(QueryInfo query, object[] args)
            {
                CQGChangedTradeExit ChangeCategoryObj = (CQGChangedTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTradeChangeCategory ChangeCategorypropV = ChangeCategoryObj.ChangeCategory;
                var ChangeCategoryPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeCategoryPropKey, value: ChangeCategorypropV));
            }

            private void GetCQGChangedTradeExitClassTradeExit(QueryInfo query, object[] args)
            {
                CQGChangedTradeExit TradeExitObj = (CQGChangedTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExit TradeExitpropV = TradeExitObj.TradeExit;
                var TradeExitPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeExitPropKey, TradeExitpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeExitPropKey));
            }

            private void GetCQGChangedTradeExitsClassChangeFilter(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits ChangeFilterObj = (CQGChangedTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTradeChangeCategory ChangeFilterpropV = ChangeFilterObj.ChangeFilter;
                var ChangeFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeFilterPropKey, value: ChangeFilterpropV));
            }

            private void GetCQGChangedTradeExitsClassCount(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits CountObj = (CQGChangedTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGChangedTradeExitsClassItem(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits ItemObj = (CQGChangedTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGChangedTradeExit ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCommoditiesClassCount(QueryInfo query, object[] args)
            {
                CQGCommodities CountObj = (CQGCommodities)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCommoditiesClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGCommodities GWAccountIDObj = (CQGCommodities)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGCommoditiesClassItem(QueryInfo query, object[] args)
            {
                CQGCommodities ItemObj = (CQGCommodities)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGCommodityInstrumentsClassCount(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments CountObj = (CQGCommodityInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCommodityInstrumentsClassIsTradableOnly(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments IsTradableOnlyObj = (CQGCommodityInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsTradableOnlypropV = IsTradableOnlyObj.IsTradableOnly;
                var IsTradableOnlyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsTradableOnlyPropKey, value: IsTradableOnlypropV));
            }

            private void GetCQGCommodityInstrumentsClassItem(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments ItemObj = (CQGCommodityInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGConditionClassCount(QueryInfo query, object[] args)
            {
                CQGCondition CountObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGConditionClassDefinition(QueryInfo query, object[] args)
            {
                CQGCondition DefinitionObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConditionDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGConditionClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGCondition EndTimestampObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGConditionClassId(QueryInfo query, object[] args)
            {
                CQGCondition IdObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGConditionClassItem(QueryInfo query, object[] args)
            {
                CQGCondition ItemObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConditionResult ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConditionClassLastError(QueryInfo query, object[] args)
            {
                CQGCondition LastErrorObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGConditionClassRequest(QueryInfo query, object[] args)
            {
                CQGCondition RequestObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConditionRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGConditionClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGCondition StartTimestampObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGConditionClassStatus(QueryInfo query, object[] args)
            {
                CQGCondition StatusObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGConditionClassTag(QueryInfo query, object[] args)
            {
                CQGCondition TagObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGConditionDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGConditionDefinition NameObj = (CQGConditionDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGConditionDefinitionClassParameterDefinitions(QueryInfo query, object[] args)
            {
                CQGConditionDefinition ParameterDefinitionsObj = (CQGConditionDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGParameterDefinitions ParameterDefinitionspropV = ParameterDefinitionsObj.ParameterDefinitions;
                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
            }

            private void GetCQGConditionDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions CountObj = (CQGConditionDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGConditionDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions ItemObj = (CQGConditionDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConditionDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConditionDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions ItemByNameObj = (CQGConditionDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConditionDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGConditionRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGConditionRequest BaseExpressionObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String BaseExpressionpropV = BaseExpressionObj.BaseExpression;
                var BaseExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionpropV));
            }

            private void GetCQGConditionRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGConditionRequest ContinuationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGConditionRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGConditionRequest DaysBeforeExpirationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGConditionRequestClassDefinition(QueryInfo query, object[] args)
            {
                CQGConditionRequest DefinitionObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConditionDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGConditionRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGConditionRequest EqualizeClosesObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGConditionRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest HistoricalPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
            }

            private void GetCQGConditionRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGConditionRequest IncludeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGConditionRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest IntradayPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
            }

            private void GetCQGConditionRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGConditionRequest ParameterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object ParameterpropV = ParameterObj.Parameter[(System.Object)args[0]];
                var ParameterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterpropV));
            }

            private void GetCQGConditionRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGConditionRequest RangeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGConditionRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGConditionRequest RangeStartObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGConditionRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest RecalcPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGConditionRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGConditionRequest SessionFlagsObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGConditionRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGConditionRequest SessionsFilterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGConditionRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGConditionRequest SubscriptionLevelObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGConditionRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGConditionRequest UpdatesEnabledObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGConditionResultClassTimestamp(QueryInfo query, object[] args)
            {
                CQGConditionResult TimestampObj = (CQGConditionResult)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGConditionResultClassValue(QueryInfo query, object[] args)
            {
                CQGConditionResult ValueObj = (CQGConditionResult)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean ValuepropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
            }

            private void GetCQGConditionsClassCount(QueryInfo query, object[] args)
            {
                CQGConditions CountObj = (CQGConditions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGConditionsClassItem(QueryInfo query, object[] args)
            {
                CQGConditions ItemObj = (CQGConditions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCondition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConditionsClassItemById(QueryInfo query, object[] args)
            {
                CQGConditions ItemByIdObj = (CQGConditions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCondition ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGConstantVolumeBarClassActualVolume(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar ActualVolumeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ActualVolumepropV = ActualVolumeObj.ActualVolume;
                var ActualVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActualVolumePropKey, value: ActualVolumepropV));
            }

            private void GetCQGConstantVolumeBarClassAskVolume(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar AskVolumeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 AskVolumepropV = AskVolumeObj.AskVolume;
                var AskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumepropV));
            }

            private void GetCQGConstantVolumeBarClassAvg(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar AvgObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AvgpropV = AvgObj.Avg;
                var AvgPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgpropV));
            }

            private void GetCQGConstantVolumeBarClassBidVolume(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar BidVolumeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 BidVolumepropV = BidVolumeObj.BidVolume;
                var BidVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumepropV));
            }

            private void GetCQGConstantVolumeBarClassClose(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar CloseObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ClosepropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
            }

            private void GetCQGConstantVolumeBarClassHigh(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar HighObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HighpropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
            }

            private void GetCQGConstantVolumeBarClassHLC3(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar HLC3Obj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HLC3propV = HLC3Obj.HLC3;
                var HLC3PropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3propV));
            }

            private void GetCQGConstantVolumeBarClassLow(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar LowObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double LowpropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
            }

            private void GetCQGConstantVolumeBarClassMid(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar MidObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MidpropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
            }

            private void GetCQGConstantVolumeBarClassOpen(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar OpenObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double OpenpropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
            }

            private void GetCQGConstantVolumeBarClassRange(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar RangeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double RangepropV = RangeObj.Range;
                var RangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangepropV));
            }

            private void GetCQGConstantVolumeBarClassTickVolume(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TickVolumeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TickVolumepropV = TickVolumeObj.TickVolume;
                var TickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumepropV));
            }

            private void GetCQGConstantVolumeBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TimestampObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGConstantVolumeBarClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TimestampOffsetObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGConstantVolumeBarClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TrueHighObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
            }

            private void GetCQGConstantVolumeBarClassTrueLow(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TrueLowObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
            }

            private void GetCQGConstantVolumeBarClassTrueRange(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TrueRangeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueRangepropV = TrueRangeObj.TrueRange;
                var TrueRangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangepropV));
            }

            private void GetCQGConstantVolumeBarsClassCount(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars CountObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGConstantVolumeBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars EndTimestampObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGConstantVolumeBarsClassId(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars IdObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGConstantVolumeBarsClassItem(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars ItemObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConstantVolumeBar ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConstantVolumeBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars LastErrorObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGConstantVolumeBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars RequestObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConstantVolumeBarsRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGConstantVolumeBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars StartTimestampObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGConstantVolumeBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars StatusObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGConstantVolumeBarsClassTag(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars TagObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGConstantVolumeBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection CountObj = (CQGConstantVolumeBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGConstantVolumeBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection ItemObj = (CQGConstantVolumeBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConstantVolumeBars ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConstantVolumeBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection ItemByIdObj = (CQGConstantVolumeBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGConstantVolumeBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGConstantVolumeBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest ContinuationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest DaysBeforeExpirationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest EqualizeClosesObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest IncludeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassIncludeFlatTicks(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest IncludeFlatTicksObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeFlatTickspropV = IncludeFlatTicksObj.IncludeFlatTicks;
                var IncludeFlatTicksPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeFlatTicksPropKey, value: IncludeFlatTickspropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RangeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RangeStartObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RecalcPeriodObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SessionFlagsObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SessionsFilterObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SubscriptionLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SymbolObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest UpdatesEnabledObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassVolumeLevel(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest VolumeLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 VolumeLevelpropV = VolumeLevelObj.VolumeLevel;
                var VolumeLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumeLevelPropKey, value: VolumeLevelpropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassVolumeType(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest VolumeTypeObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eCvbVolumeType VolumeTypepropV = VolumeTypeObj.VolumeType;
                var VolumeTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumeTypePropKey, value: VolumeTypepropV));
            }

            private void GetCQGCurrencyRateClassBaseCurrencyName(QueryInfo query, object[] args)
            {
                CQGCurrencyRate BaseCurrencyNameObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String BaseCurrencyNamepropV = BaseCurrencyNameObj.BaseCurrencyName;
                var BaseCurrencyNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseCurrencyNamePropKey, value: BaseCurrencyNamepropV));
            }

            private void GetCQGCurrencyRateClassCEL(QueryInfo query, object[] args)
            {
                CQGCurrencyRate CELObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCEL CELpropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGCurrencyRateClassCurrencyName(QueryInfo query, object[] args)
            {
                CQGCurrencyRate CurrencyNameObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CurrencyNamepropV = CurrencyNameObj.CurrencyName;
                var CurrencyNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyNamePropKey, value: CurrencyNamepropV));
            }

            private void GetCQGCurrencyRateClassFcmID(QueryInfo query, object[] args)
            {
                CQGCurrencyRate FcmIDObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 FcmIDpropV = FcmIDObj.FcmID;
                var FcmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmIDPropKey, value: FcmIDpropV));
            }

            private void GetCQGCurrencyRateClassRate(QueryInfo query, object[] args)
            {
                CQGCurrencyRate RateObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double RatepropV = RateObj.Rate;
                var RatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RatePropKey, value: RatepropV));
            }

            private void GetCQGCurrencyRateClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGCurrencyRate ServerTimestampObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGCurrencyRateClassTimestamp(QueryInfo query, object[] args)
            {
                CQGCurrencyRate TimestampObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGCurrencyRatesClassCount(QueryInfo query, object[] args)
            {
                CQGCurrencyRates CountObj = (CQGCurrencyRates)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCurrencyRatesClassItem(QueryInfo query, object[] args)
            {
                CQGCurrencyRates ItemObj = (CQGCurrencyRates)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurrencyRate ItempropV = ItemObj[(System.Int32)args[0],(System.String)args[1],(System.String)args[2]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCurveDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGCurveDefinition NameObj = (CQGCurveDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGCurveDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions CountObj = (CQGCurveDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCurveDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions ItemObj = (CQGCurveDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurveDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCurveDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions ItemByNameObj = (CQGCurveDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurveDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGCurveHeadersClassCount(QueryInfo query, object[] args)
            {
                CQGCurveHeaders CountObj = (CQGCurveHeaders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCurveHeadersClassItem(QueryInfo query, object[] args)
            {
                CQGCurveHeaders ItemObj = (CQGCurveHeaders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGCurvesClassCount(QueryInfo query, object[] args)
            {
                CQGCurves CountObj = (CQGCurves)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCurvesClassItem(QueryInfo query, object[] args)
            {
                CQGCurves ItemObj = (CQGCurves)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ItempropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGCurvesClassTimestamp(QueryInfo query, object[] args)
            {
                CQGCurves TimestampObj = (CQGCurves)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGCurvesClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGCurves TimestampOffsetObj = (CQGCurves)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGCustomStudiesClassCount(QueryInfo query, object[] args)
            {
                CQGCustomStudies CountObj = (CQGCustomStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCustomStudiesClassItem(QueryInfo query, object[] args)
            {
                CQGCustomStudies ItemObj = (CQGCustomStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCustomStudy ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCustomStudiesClassItemById(QueryInfo query, object[] args)
            {
                CQGCustomStudies ItemByIdObj = (CQGCustomStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCustomStudy ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGCustomStudyClassCount(QueryInfo query, object[] args)
            {
                CQGCustomStudy CountObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCustomStudyClassCurveHeaders(QueryInfo query, object[] args)
            {
                CQGCustomStudy CurveHeadersObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurveHeaders CurveHeaderspropV = CurveHeadersObj.CurveHeaders;
                var CurveHeadersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurveHeadersPropKey, CurveHeaderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveHeadersPropKey));
            }

            private void GetCQGCustomStudyClassDefinition(QueryInfo query, object[] args)
            {
                CQGCustomStudy DefinitionObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCustomStudyDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGCustomStudyClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGCustomStudy EndTimestampObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGCustomStudyClassId(QueryInfo query, object[] args)
            {
                CQGCustomStudy IdObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGCustomStudyClassItem(QueryInfo query, object[] args)
            {
                CQGCustomStudy ItemObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurves ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCustomStudyClassLastError(QueryInfo query, object[] args)
            {
                CQGCustomStudy LastErrorObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGCustomStudyClassRequest(QueryInfo query, object[] args)
            {
                CQGCustomStudy RequestObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCustomStudyRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGCustomStudyClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGCustomStudy StartTimestampObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGCustomStudyClassStatus(QueryInfo query, object[] args)
            {
                CQGCustomStudy StatusObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGCustomStudyClassTag(QueryInfo query, object[] args)
            {
                CQGCustomStudy TagObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGCustomStudyDefinitionClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition AbbreviationObj = (CQGCustomStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
            }

            private void GetCQGCustomStudyDefinitionClassCurveDefinitions(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition CurveDefinitionsObj = (CQGCustomStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCurveDefinitions CurveDefinitionspropV = CurveDefinitionsObj.CurveDefinitions;
                var CurveDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurveDefinitionsPropKey, CurveDefinitionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveDefinitionsPropKey));
            }

            private void GetCQGCustomStudyDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition NameObj = (CQGCustomStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGCustomStudyDefinitionClassParameterDefinitions(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition ParameterDefinitionsObj = (CQGCustomStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGParameterDefinitions ParameterDefinitionspropV = ParameterDefinitionsObj.ParameterDefinitions;
                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
            }

            private void GetCQGCustomStudyDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions CountObj = (CQGCustomStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGCustomStudyDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions ItemObj = (CQGCustomStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCustomStudyDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCustomStudyDefinitionsClassItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions ItemByAbbreviationObj = (CQGCustomStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCustomStudyDefinition ItemByAbbreviationpropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
            }

            private void GetCQGCustomStudyRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest BaseExpressionObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String BaseExpressionpropV = BaseExpressionObj.BaseExpression;
                var BaseExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionpropV));
            }

            private void GetCQGCustomStudyRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ContinuationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGCustomStudyRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest DaysBeforeExpirationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGCustomStudyRequestClassDefinition(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest DefinitionObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCustomStudyDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGCustomStudyRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest EqualizeClosesObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGCustomStudyRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest HistoricalPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
            }

            private void GetCQGCustomStudyRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IncludeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGCustomStudyRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IntradayPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
            }

            private void GetCQGCustomStudyRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ParameterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object ParameterpropV = ParameterObj.Parameter[(System.Object)args[0]];
                var ParameterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterpropV));
            }

            private void GetCQGCustomStudyRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RangeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGCustomStudyRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RangeStartObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGCustomStudyRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RecalcPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGCustomStudyRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SessionFlagsObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGCustomStudyRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SessionsFilterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGCustomStudyRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SubscriptionLevelObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGCustomStudyRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest UpdatesEnabledObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGDataSourceClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSource AbbreviationObj = (CQGDataSource)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
            }

            private void GetCQGDataSourceClassName(QueryInfo query, object[] args)
            {
                CQGDataSource NameObj = (CQGDataSource)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGDataSourceClassStatus(QueryInfo query, object[] args)
            {
                CQGDataSource StatusObj = (CQGDataSource)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eDataSourceStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGDataSourceClassSymbolTypes(QueryInfo query, object[] args)
            {
                CQGDataSource SymbolTypesObj = (CQGDataSource)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSymbolType SymbolTypespropV = SymbolTypesObj.SymbolTypes;
                var SymbolTypesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolTypesPropKey, value: SymbolTypespropV));
            }

            private void GetCQGDataSourcesClassCount(QueryInfo query, object[] args)
            {
                CQGDataSources CountObj = (CQGDataSources)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGDataSourcesClassItem(QueryInfo query, object[] args)
            {
                CQGDataSources ItemObj = (CQGDataSources)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGDataSource ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGDataSourcesClassItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSources ItemByAbbreviationObj = (CQGDataSources)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGDataSource ItemByAbbreviationpropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
            }

            private void GetCQGDataSourceSymbolClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbol AbbreviationObj = (CQGDataSourceSymbol)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
            }

            private void GetCQGDataSourceSymbolClassDescription(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbol DescriptionObj = (CQGDataSourceSymbol)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DescriptionpropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
            }

            private void GetCQGDataSourceSymbolClassType(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbol TypeObj = (CQGDataSourceSymbol)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSymbolType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGDataSourceSymbolsClassCount(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols CountObj = (CQGDataSourceSymbols)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGDataSourceSymbolsClassDataSourceAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols DataSourceAbbreviationObj = (CQGDataSourceSymbols)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DataSourceAbbreviationpropV = DataSourceAbbreviationObj.DataSourceAbbreviation;
                var DataSourceAbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSourceAbbreviationPropKey, value: DataSourceAbbreviationpropV));
            }

            private void GetCQGDataSourceSymbolsClassItem(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols ItemObj = (CQGDataSourceSymbols)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGDataSourceSymbol ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGDOMQuotesClassCount(QueryInfo query, object[] args)
            {
                CQGDOMQuotes CountObj = (CQGDOMQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGDOMQuotesClassItem(QueryInfo query, object[] args)
            {
                CQGDOMQuotes ItemObj = (CQGDOMQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQuote ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGDOMQuotesClassItemByPrice(QueryInfo query, object[] args)
            {
                CQGDOMQuotes ItemByPriceObj = (CQGDOMQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQuote ItemByPricepropV = ItemByPriceObj.ItemByPrice[(System.Double)args[0],(System.Boolean)args[1]];
                var ItemByPricePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByPricePropKey, ItemByPricepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByPricePropKey));
            }

            private void GetCQGEnvironmentClassCEL(QueryInfo query, object[] args)
            {
                CQGEnvironment CELObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCEL CELpropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGEnvironmentClassCELVersion(QueryInfo query, object[] args)
            {
                CQGEnvironment CELVersionObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CELVersionpropV = CELVersionObj.CELVersion;
                var CELVersionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELVersionPropKey, value: CELVersionpropV));
            }

            private void GetCQGEnvironmentClassCQGSerialNumber(QueryInfo query, object[] args)
            {
                CQGEnvironment CQGSerialNumberObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CQGSerialNumberpropV = CQGSerialNumberObj.CQGSerialNumber;
                var CQGSerialNumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CQGSerialNumberPropKey, value: CQGSerialNumberpropV));
            }

            private void GetCQGEnvironmentClassCQGVersion(QueryInfo query, object[] args)
            {
                CQGEnvironment CQGVersionObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CQGVersionpropV = CQGVersionObj.CQGVersion;
                var CQGVersionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CQGVersionPropKey, value: CQGVersionpropV));
            }

            private void GetCQGEnvironmentClassDataConnectionStatus(QueryInfo query, object[] args)
            {
                CQGEnvironment DataConnectionStatusObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eConnectionStatus DataConnectionStatuspropV = DataConnectionStatusObj.DataConnectionStatus;
                var DataConnectionStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataConnectionStatusPropKey, value: DataConnectionStatuspropV));
            }

            private void GetCQGEnvironmentClassGWConnectionStatus(QueryInfo query, object[] args)
            {
                CQGEnvironment GWConnectionStatusObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eConnectionStatus GWConnectionStatuspropV = GWConnectionStatusObj.GWConnectionStatus;
                var GWConnectionStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWConnectionStatusPropKey, value: GWConnectionStatuspropV));
            }

            private void GetCQGEnvironmentClassGWLogonName(QueryInfo query, object[] args)
            {
                CQGEnvironment GWLogonNameObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String GWLogonNamepropV = GWLogonNameObj.GWLogonName;
                var GWLogonNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWLogonNamePropKey, value: GWLogonNamepropV));
            }

            private void GetCQGEnvironmentClassLastError(QueryInfo query, object[] args)
            {
                CQGEnvironment LastErrorObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGEnvironmentClassLineTime(QueryInfo query, object[] args)
            {
                CQGEnvironment LineTimeObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime LineTimepropV = LineTimeObj.LineTime;
                var LineTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LineTimePropKey, value: LineTimepropV));
            }

            private void GetCQGEnvironmentClassLocalTime(QueryInfo query, object[] args)
            {
                CQGEnvironment LocalTimeObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime LocalTimepropV = LocalTimeObj.LocalTime;
                var LocalTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LocalTimePropKey, value: LocalTimepropV));
            }

            private void GetCQGEnvironmentClassMessagesPending(QueryInfo query, object[] args)
            {
                CQGEnvironment MessagesPendingObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 MessagesPendingpropV = MessagesPendingObj.MessagesPending;
                var MessagesPendingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MessagesPendingPropKey, value: MessagesPendingpropV));
            }

            private void GetCQGEnvironmentClassOrdersPending(QueryInfo query, object[] args)
            {
                CQGEnvironment OrdersPendingObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 OrdersPendingpropV = OrdersPendingObj.OrdersPending;
                var OrdersPendingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPendingPropKey, value: OrdersPendingpropV));
            }

            private void GetCQGEnvironmentClassRemoteOpenAPISession(QueryInfo query, object[] args)
            {
                CQGEnvironment RemoteOpenAPISessionObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGRemoteOpenAPISession RemoteOpenAPISessionpropV = RemoteOpenAPISessionObj.RemoteOpenAPISession;
                var RemoteOpenAPISessionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RemoteOpenAPISessionPropKey, RemoteOpenAPISessionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPISessionPropKey));
            }

            private void GetCQGErrorClassCode(QueryInfo query, object[] args)
            {
                CQGError CodeObj = (CQGError)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CodepropV = CodeObj.Code;
                var CodePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CodePropKey, value: CodepropV));
            }

            private void GetCQGErrorClassDescription(QueryInfo query, object[] args)
            {
                CQGError DescriptionObj = (CQGError)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DescriptionpropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
            }

            private void GetCQGErrorClassOwner(QueryInfo query, object[] args)
            {
                CQGError OwnerObj = (CQGError)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object OwnerpropV = OwnerObj.Owner;
                var OwnerPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OwnerPropKey, value: OwnerpropV));
            }

            private void GetCQGExchangesClassCount(QueryInfo query, object[] args)
            {
                CQGExchanges CountObj = (CQGExchanges)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGExchangesClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGExchanges GWAccountIDObj = (CQGExchanges)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGExchangesClassItem(QueryInfo query, object[] args)
            {
                CQGExchanges ItemObj = (CQGExchanges)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGExecutionPatternClassParameters(QueryInfo query, object[] args)
            {
                CQGExecutionPattern ParametersObj = (CQGExecutionPattern)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExecutionPatternParameters ParameterspropV = ParametersObj.Parameters;
                var ParametersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParametersPropKey, ParameterspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParametersPropKey));
            }

            private void GetCQGExecutionPatternClassPatternString(QueryInfo query, object[] args)
            {
                CQGExecutionPattern PatternStringObj = (CQGExecutionPattern)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String PatternStringpropV = PatternStringObj.PatternString;
                var PatternStringPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PatternStringPropKey, value: PatternStringpropV));
            }

            private void GetCQGExecutionPatternParameterClassName(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter NameObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGExecutionPatternParameterClassParameters(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter ParametersObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExecutionPatternParameters ParameterspropV = ParametersObj.Parameters;
                var ParametersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParametersPropKey, ParameterspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParametersPropKey));
            }

            private void GetCQGExecutionPatternParameterClassType(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter TypeObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eExecutionPatternParameterType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGExecutionPatternParameterClassValue(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter ValueObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ValuepropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
            }

            private void GetCQGExecutionPatternParametersClassCount(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters CountObj = (CQGExecutionPatternParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGExecutionPatternParametersClassItem(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters ItemObj = (CQGExecutionPatternParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExecutionPatternParameter ItempropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGExpressionClassCount(QueryInfo query, object[] args)
            {
                CQGExpression CountObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGExpressionClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGExpression EndTimestampObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGExpressionClassId(QueryInfo query, object[] args)
            {
                CQGExpression IdObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGExpressionClassItem(QueryInfo query, object[] args)
            {
                CQGExpression ItemObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExpressionOutputs ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGExpressionClassLastError(QueryInfo query, object[] args)
            {
                CQGExpression LastErrorObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGExpressionClassOutputHeaders(QueryInfo query, object[] args)
            {
                CQGExpression OutputHeadersObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExpressionOutputHeaders OutputHeaderspropV = OutputHeadersObj.OutputHeaders;
                var OutputHeadersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OutputHeadersPropKey, OutputHeaderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OutputHeadersPropKey));
            }

            private void GetCQGExpressionClassRequest(QueryInfo query, object[] args)
            {
                CQGExpression RequestObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExpressionRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGExpressionClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGExpression StartTimestampObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGExpressionClassStatus(QueryInfo query, object[] args)
            {
                CQGExpression StatusObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGExpressionClassTag(QueryInfo query, object[] args)
            {
                CQGExpression TagObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGExpressionOutputHeadersClassCount(QueryInfo query, object[] args)
            {
                CQGExpressionOutputHeaders CountObj = (CQGExpressionOutputHeaders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGExpressionOutputHeadersClassItem(QueryInfo query, object[] args)
            {
                CQGExpressionOutputHeaders ItemObj = (CQGExpressionOutputHeaders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGExpressionOutputsClassCount(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs CountObj = (CQGExpressionOutputs)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGExpressionOutputsClassItem(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs ItemObj = (CQGExpressionOutputs)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ItempropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGExpressionOutputsClassTimestamp(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs TimestampObj = (CQGExpressionOutputs)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGExpressionOutputsClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs TimestampOffsetObj = (CQGExpressionOutputs)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGExpressionRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGExpressionRequest ContinuationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGExpressionRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGExpressionRequest DaysBeforeExpirationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGExpressionRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGExpressionRequest EqualizeClosesObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGExpressionRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest HistoricalPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
            }

            private void GetCQGExpressionRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGExpressionRequest IncludeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGExpressionRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest IntradayPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
            }

            private void GetCQGExpressionRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RangeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGExpressionRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RangeStartObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGExpressionRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RecalcPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGExpressionRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SessionFlagsObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGExpressionRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SessionsFilterObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGExpressionRequestClassSubExpression(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SubExpressionObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SubExpressionpropV = SubExpressionObj.SubExpression[(System.Int32)args[0]];
                var SubExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubExpressionPropKey, value: SubExpressionpropV));
            }

            private void GetCQGExpressionRequestClassSubExpressionCount(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SubExpressionCountObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 SubExpressionCountpropV = SubExpressionCountObj.SubExpressionCount;
                var SubExpressionCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubExpressionCountPropKey, value: SubExpressionCountpropV));
            }

            private void GetCQGExpressionRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SubscriptionLevelObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGExpressionRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGExpressionRequest UpdatesEnabledObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGExpressionsClassCount(QueryInfo query, object[] args)
            {
                CQGExpressions CountObj = (CQGExpressions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGExpressionsClassItem(QueryInfo query, object[] args)
            {
                CQGExpressions ItemObj = (CQGExpressions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExpression ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGExpressionsClassItemById(QueryInfo query, object[] args)
            {
                CQGExpressions ItemByIdObj = (CQGExpressions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGExpression ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGFillClassGWTradesCount(QueryInfo query, object[] args)
            {
                CQGFill GWTradesCountObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWTradesCountpropV = GWTradesCountObj.GWTradesCount[(System.Int32)args[0]];
                var GWTradesCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWTradesCountPropKey, value: GWTradesCountpropV));
            }

            private void GetCQGFillClassId(QueryInfo query, object[] args)
            {
                CQGFill IdObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGFillClassLegCount(QueryInfo query, object[] args)
            {
                CQGFill LegCountObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 LegCountpropV = LegCountObj.LegCount;
                var LegCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LegCountPropKey, value: LegCountpropV));
            }

            private void GetCQGFillClassOrder(QueryInfo query, object[] args)
            {
                CQGFill OrderObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrder OrderpropV = OrderObj.Order;
                var OrderPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
            }

            private void GetCQGFillClassRefFillId(QueryInfo query, object[] args)
            {
                CQGFill RefFillIdObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String RefFillIdpropV = RefFillIdObj.RefFillId;
                var RefFillIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RefFillIdPropKey, value: RefFillIdpropV));
            }

            private void GetCQGFillClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGFill ServerTimestampObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGFillClassStatus(QueryInfo query, object[] args)
            {
                CQGFill StatusObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eFillStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGFillClassTimestamp(QueryInfo query, object[] args)
            {
                CQGFill TimestampObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGFillsClassCount(QueryInfo query, object[] args)
            {
                CQGFills CountObj = (CQGFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGFillsClassItem(QueryInfo query, object[] args)
            {
                CQGFills ItemObj = (CQGFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGFill ItempropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGFillsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGFills ItemByIndexObj = (CQGFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGFill ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGGWTradeClassAggressive(QueryInfo query, object[] args)
            {
                CQGGWTrade AggressiveObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean AggressivepropV = AggressiveObj.Aggressive;
                var AggressivePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggressivePropKey, value: AggressivepropV));
            }

            private void GetCQGGWTradeClassCurrency(QueryInfo query, object[] args)
            {
                CQGGWTrade CurrencyObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CurrencypropV = CurrencyObj.Currency;
                var CurrencyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyPropKey, value: CurrencypropV));
            }

            private void GetCQGGWTradeClassDisplayPrice(QueryInfo query, object[] args)
            {
                CQGGWTrade DisplayPriceObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DisplayPricepropV = DisplayPriceObj.DisplayPrice;
                var DisplayPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DisplayPricePropKey, value: DisplayPricepropV));
            }

            private void GetCQGGWTradeClassExchangeTradeDate(QueryInfo query, object[] args)
            {
                CQGGWTrade ExchangeTradeDateObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ExchangeTradeDatepropV = ExchangeTradeDateObj.ExchangeTradeDate;
                var ExchangeTradeDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeTradeDatePropKey, value: ExchangeTradeDatepropV));
            }

            private void GetCQGGWTradeClassFill(QueryInfo query, object[] args)
            {
                CQGGWTrade FillObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGFill FillpropV = FillObj.Fill;
                var FillPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(FillPropKey, FillpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillPropKey));
            }

            private void GetCQGGWTradeClassId(QueryInfo query, object[] args)
            {
                CQGGWTrade IdObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGGWTradeClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGGWTrade InstrumentNameObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
            }

            private void GetCQGGWTradeClassLeg(QueryInfo query, object[] args)
            {
                CQGGWTrade LegObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 LegpropV = LegObj.Leg;
                var LegPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LegPropKey, value: LegpropV));
            }

            private void GetCQGGWTradeClassPrice(QueryInfo query, object[] args)
            {
                CQGGWTrade PriceObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGGWTradeClassQuantity(QueryInfo query, object[] args)
            {
                CQGGWTrade QuantityObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGGWTradeClassSide(QueryInfo query, object[] args)
            {
                CQGGWTrade SideObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderSide SidepropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
            }

            private void GetCQGGWTradeClassStatementDate(QueryInfo query, object[] args)
            {
                CQGGWTrade StatementDateObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
            }

            private void GetCQGGWTradesClassCount(QueryInfo query, object[] args)
            {
                CQGGWTrades CountObj = (CQGGWTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGGWTradesClassItem(QueryInfo query, object[] args)
            {
                CQGGWTrades ItemObj = (CQGGWTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGGWTrade ItempropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGGWTradesClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGGWTrades ItemByIndexObj = (CQGGWTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGGWTrade ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGHistoricalSessionsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest RangeEndObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGHistoricalSessionsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest RangeStartObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGHistoricalSessionsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest SymbolObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGHistoricalSessionsRequestClassType(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest TypeObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eHistoricalSessionsRequestType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGHolidayClassHolidayDate(QueryInfo query, object[] args)
            {
                CQGHoliday HolidayDateObj = (CQGHoliday)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime HolidayDatepropV = HolidayDateObj.HolidayDate;
                var HolidayDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HolidayDatePropKey, value: HolidayDatepropV));
            }

            private void GetCQGHolidayClassIsDaily(QueryInfo query, object[] args)
            {
                CQGHoliday IsDailyObj = (CQGHoliday)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsDailypropV = IsDailyObj.IsDaily;
                var IsDailyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsDailyPropKey, value: IsDailypropV));
            }

            private void GetCQGHolidayClassSessionMask(QueryInfo query, object[] args)
            {
                CQGHoliday SessionMaskObj = (CQGHoliday)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionWeekDays SessionMaskpropV = SessionMaskObj.SessionMask;
                var SessionMaskPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionMaskPropKey, value: SessionMaskpropV));
            }

            private void GetCQGHolidaysClassCount(QueryInfo query, object[] args)
            {
                CQGHolidays CountObj = (CQGHolidays)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGHolidaysClassItem(QueryInfo query, object[] args)
            {
                CQGHolidays ItemObj = (CQGHolidays)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGHoliday ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGHolidaysClassSessions(QueryInfo query, object[] args)
            {
                CQGHolidays SessionsObj = (CQGHolidays)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSessions SessionspropV = SessionsObj.Sessions;
                var SessionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SessionsPropKey, SessionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsPropKey));
            }

            private void GetCQGInstrumentClassAsk(QueryInfo query, object[] args)
            {
                CQGInstrument AskObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQuote AskpropV = AskObj.Ask;
                var AskPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AskPropKey, AskpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskPropKey));
            }

            private void GetCQGInstrumentClassBBAType(QueryInfo query, object[] args)
            {
                CQGInstrument BBATypeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eDOMandBBAType BBATypepropV = BBATypeObj.BBAType;
                var BBATypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BBATypePropKey, value: BBATypepropV));
            }

            private void GetCQGInstrumentClassBid(QueryInfo query, object[] args)
            {
                CQGInstrument BidObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQuote BidpropV = BidObj.Bid;
                var BidPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(BidPropKey, BidpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidPropKey));
            }

            private void GetCQGInstrumentClassCEL(QueryInfo query, object[] args)
            {
                CQGInstrument CELObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCEL CELpropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGInstrumentClassCommodity(QueryInfo query, object[] args)
            {
                CQGInstrument CommodityObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CommoditypropV = CommodityObj.Commodity;
                var CommodityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityPropKey, value: CommoditypropV));
            }

            private void GetCQGInstrumentClassCountry(QueryInfo query, object[] args)
            {
                CQGInstrument CountryObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CountrypropV = CountryObj.Country;
                var CountryPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountryPropKey, value: CountrypropV));
            }

            private void GetCQGInstrumentClassCurrency(QueryInfo query, object[] args)
            {
                CQGInstrument CurrencyObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CurrencypropV = CurrencyObj.Currency;
                var CurrencyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyPropKey, value: CurrencypropV));
            }

            private void GetCQGInstrumentClassDataSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGInstrument DataSubscriptionLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eDataSubscriptionLevel DataSubscriptionLevelpropV = DataSubscriptionLevelObj.DataSubscriptionLevel;
                var DataSubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSubscriptionLevelPropKey, value: DataSubscriptionLevelpropV));
            }

            private void GetCQGInstrumentClassDescription(QueryInfo query, object[] args)
            {
                CQGInstrument DescriptionObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DescriptionpropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
            }

            private void GetCQGInstrumentClassDOMAsks(QueryInfo query, object[] args)
            {
                CQGInstrument DOMAsksObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGDOMQuotes DOMAskspropV = DOMAsksObj.DOMAsks;
                var DOMAsksPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DOMAsksPropKey, DOMAskspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMAsksPropKey));
            }

            private void GetCQGInstrumentClassDOMBids(QueryInfo query, object[] args)
            {
                CQGInstrument DOMBidsObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGDOMQuotes DOMBidspropV = DOMBidsObj.DOMBids;
                var DOMBidsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DOMBidsPropKey, DOMBidspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBidsPropKey));
            }

            private void GetCQGInstrumentClassDOMBookLimit(QueryInfo query, object[] args)
            {
                CQGInstrument DOMBookLimitObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DOMBookLimitpropV = DOMBookLimitObj.DOMBookLimit;
                var DOMBookLimitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBookLimitPropKey, value: DOMBookLimitpropV));
            }

            private void GetCQGInstrumentClassDOMStatus(QueryInfo query, object[] args)
            {
                CQGInstrument DOMStatusObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean DOMStatuspropV = DOMStatusObj.DOMStatus;
                var DOMStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMStatusPropKey, value: DOMStatuspropV));
            }

            private void GetCQGInstrumentClassDTE(QueryInfo query, object[] args)
            {
                CQGInstrument DTEObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DTEpropV = DTEObj.DTE;
                var DTEPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DTEPropKey, value: DTEpropV));
            }

            private void GetCQGInstrumentClassExchangeAbbreviation(QueryInfo query, object[] args)
            {
                CQGInstrument ExchangeAbbreviationObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ExchangeAbbreviationpropV = ExchangeAbbreviationObj.ExchangeAbbreviation;
                var ExchangeAbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeAbbreviationPropKey, value: ExchangeAbbreviationpropV));
            }

            private void GetCQGInstrumentClassExchangeID(QueryInfo query, object[] args)
            {
                CQGInstrument ExchangeIDObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ExchangeIDpropV = ExchangeIDObj.ExchangeID;
                var ExchangeIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeIDPropKey, value: ExchangeIDpropV));
            }

            private void GetCQGInstrumentClassExpirationDate(QueryInfo query, object[] args)
            {
                CQGInstrument ExpirationDateObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ExpirationDatepropV = ExpirationDateObj.ExpirationDate;
                var ExpirationDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExpirationDatePropKey, value: ExpirationDatepropV));
            }

            private void GetCQGInstrumentClassFullName(QueryInfo query, object[] args)
            {
                CQGInstrument FullNameObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String FullNamepropV = FullNameObj.FullName;
                var FullNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FullNamePropKey, value: FullNamepropV));
            }

            private void GetCQGInstrumentClassInitialMargin(QueryInfo query, object[] args)
            {
                CQGInstrument InitialMarginObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double InitialMarginpropV = InitialMarginObj.InitialMargin;
                var InitialMarginPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InitialMarginPropKey, value: InitialMarginpropV));
            }

            private void GetCQGInstrumentClassInstrumentID(QueryInfo query, object[] args)
            {
                CQGInstrument InstrumentIDObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 InstrumentIDpropV = InstrumentIDObj.InstrumentID;
                var InstrumentIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentIDPropKey, value: InstrumentIDpropV));
            }

            private void GetCQGInstrumentClassInstrumentType(QueryInfo query, object[] args)
            {
                CQGInstrument InstrumentTypeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eInstrumentType InstrumentTypepropV = InstrumentTypeObj.InstrumentType;
                var InstrumentTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentTypePropKey, value: InstrumentTypepropV));
            }

            private void GetCQGInstrumentClassIsDownTick(QueryInfo query, object[] args)
            {
                CQGInstrument IsDownTickObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsDownTickpropV = IsDownTickObj.IsDownTick;
                var IsDownTickPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsDownTickPropKey, value: IsDownTickpropV));
            }

            private void GetCQGInstrumentClassIsFastMarket(QueryInfo query, object[] args)
            {
                CQGInstrument IsFastMarketObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsFastMarketpropV = IsFastMarketObj.IsFastMarket;
                var IsFastMarketPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsFastMarketPropKey, value: IsFastMarketpropV));
            }

            private void GetCQGInstrumentClassIsUpTick(QueryInfo query, object[] args)
            {
                CQGInstrument IsUpTickObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsUpTickpropV = IsUpTickObj.IsUpTick;
                var IsUpTickPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsUpTickPropKey, value: IsUpTickpropV));
            }

            private void GetCQGInstrumentClassMaintenanceMargin(QueryInfo query, object[] args)
            {
                CQGInstrument MaintenanceMarginObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MaintenanceMarginpropV = MaintenanceMarginObj.MaintenanceMargin;
                var MaintenanceMarginPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaintenanceMarginPropKey, value: MaintenanceMarginpropV));
            }

            private void GetCQGInstrumentClassMonth(QueryInfo query, object[] args)
            {
                CQGInstrument MonthObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 MonthpropV = MonthObj.Month;
                var MonthPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MonthPropKey, value: MonthpropV));
            }

            private void GetCQGInstrumentClassMonthChar(QueryInfo query, object[] args)
            {
                CQGInstrument MonthCharObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String MonthCharpropV = MonthCharObj.MonthChar;
                var MonthCharPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MonthCharPropKey, value: MonthCharpropV));
            }

            private void GetCQGInstrumentClassNetChange(QueryInfo query, object[] args)
            {
                CQGInstrument NetChangeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double NetChangepropV = NetChangeObj.NetChange;
                var NetChangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NetChangePropKey, value: NetChangepropV));
            }

            private void GetCQGInstrumentClassPreferredSessionsName(QueryInfo query, object[] args)
            {
                CQGInstrument PreferredSessionsNameObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String PreferredSessionsNamepropV = PreferredSessionsNameObj.PreferredSessionsName;
                var PreferredSessionsNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreferredSessionsNamePropKey, value: PreferredSessionsNamepropV));
            }

            private void GetCQGInstrumentClassProperties(QueryInfo query, object[] args)
            {
                CQGInstrument PropertiesObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrumentProperties PropertiespropV = PropertiesObj.Properties;
                var PropertiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
            }

            private void GetCQGInstrumentClassPropertyLevel(QueryInfo query, object[] args)
            {
                CQGInstrument PropertyLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.ePropertySubscriptionLevel PropertyLevelpropV = PropertyLevelObj.PropertyLevel;
                var PropertyLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertyLevelPropKey, value: PropertyLevelpropV));
            }

            private void GetCQGInstrumentClassQuoteLevel(QueryInfo query, object[] args)
            {
                CQGInstrument QuoteLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eQuoteSubscriptionLevel QuoteLevelpropV = QuoteLevelObj.QuoteLevel;
                var QuoteLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuoteLevelPropKey, value: QuoteLevelpropV));
            }

            private void GetCQGInstrumentClassQuotes(QueryInfo query, object[] args)
            {
                CQGInstrument QuotesObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQuotes QuotespropV = QuotesObj.Quotes;
                var QuotesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(QuotesPropKey, QuotespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuotesPropKey));
            }

            private void GetCQGInstrumentClassScale(QueryInfo query, object[] args)
            {
                CQGInstrument ScaleObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int16 ScalepropV = ScaleObj.Scale;
                var ScalePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ScalePropKey, value: ScalepropV));
            }

            private void GetCQGInstrumentClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGInstrument ServerTimestampObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGInstrumentClassSessionMask(QueryInfo query, object[] args)
            {
                CQGInstrument SessionMaskObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 SessionMaskpropV = SessionMaskObj.SessionMask;
                var SessionMaskPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionMaskPropKey, value: SessionMaskpropV));
            }

            private void GetCQGInstrumentClassSessionNumber(QueryInfo query, object[] args)
            {
                CQGInstrument SessionNumberObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 SessionNumberpropV = SessionNumberObj.SessionNumber;
                var SessionNumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionNumberPropKey, value: SessionNumberpropV));
            }

            private void GetCQGInstrumentClassSessions(QueryInfo query, object[] args)
            {
                CQGInstrument SessionsObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSessions SessionspropV = SessionsObj.Sessions;
                var SessionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SessionsPropKey, SessionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsPropKey));
            }

            private void GetCQGInstrumentClassStrike(QueryInfo query, object[] args)
            {
                CQGInstrument StrikeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 StrikepropV = StrikeObj.Strike;
                var StrikePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrikePropKey, value: StrikepropV));
            }

            private void GetCQGInstrumentClassTag(QueryInfo query, object[] args)
            {
                CQGInstrument TagObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGInstrumentClassTickSize(QueryInfo query, object[] args)
            {
                CQGInstrument TickSizeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TickSizepropV = TickSizeObj.TickSize;
                var TickSizePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizePropKey, value: TickSizepropV));
            }

            private void GetCQGInstrumentClassTickSizeFractionDenominator(QueryInfo query, object[] args)
            {
                CQGInstrument TickSizeFractionDenominatorObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TickSizeFractionDenominatorpropV = TickSizeFractionDenominatorObj.TickSizeFractionDenominator;
                var TickSizeFractionDenominatorPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizeFractionDenominatorPropKey, value: TickSizeFractionDenominatorpropV));
            }

            private void GetCQGInstrumentClassTickSizeFractionNumerator(QueryInfo query, object[] args)
            {
                CQGInstrument TickSizeFractionNumeratorObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TickSizeFractionNumeratorpropV = TickSizeFractionNumeratorObj.TickSizeFractionNumerator;
                var TickSizeFractionNumeratorPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizeFractionNumeratorPropKey, value: TickSizeFractionNumeratorpropV));
            }

            private void GetCQGInstrumentClassTickValue(QueryInfo query, object[] args)
            {
                CQGInstrument TickValueObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TickValuepropV = TickValueObj.TickValue;
                var TickValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickValuePropKey, value: TickValuepropV));
            }

            private void GetCQGInstrumentClassTimestamp(QueryInfo query, object[] args)
            {
                CQGInstrument TimestampObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGInstrumentClassTodayCTotalVolume(QueryInfo query, object[] args)
            {
                CQGInstrument TodayCTotalVolumeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TodayCTotalVolumepropV = TodayCTotalVolumeObj.TodayCTotalVolume;
                var TodayCTotalVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TodayCTotalVolumePropKey, value: TodayCTotalVolumepropV));
            }

            private void GetCQGInstrumentClassTrade(QueryInfo query, object[] args)
            {
                CQGInstrument TradeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQuote TradepropV = TradeObj.Trade;
                var TradePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
            }

            private void GetCQGInstrumentClassUnderlyingInstrument(QueryInfo query, object[] args)
            {
                CQGInstrument UnderlyingInstrumentObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrument UnderlyingInstrumentpropV = UnderlyingInstrumentObj.UnderlyingInstrument;
                var UnderlyingInstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(UnderlyingInstrumentPropKey, UnderlyingInstrumentpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnderlyingInstrumentPropKey));
            }

            private void GetCQGInstrumentClassUnderlyingInstrumentName(QueryInfo query, object[] args)
            {
                CQGInstrument UnderlyingInstrumentNameObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String UnderlyingInstrumentNamepropV = UnderlyingInstrumentNameObj.UnderlyingInstrumentName;
                var UnderlyingInstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnderlyingInstrumentNamePropKey, value: UnderlyingInstrumentNamepropV));
            }

            private void GetCQGInstrumentClassYCOI(QueryInfo query, object[] args)
            {
                CQGInstrument YCOIObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double YCOIpropV = YCOIObj.YCOI;
                var YCOIPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YCOIPropKey, value: YCOIpropV));
            }

            private void GetCQGInstrumentClassYear(QueryInfo query, object[] args)
            {
                CQGInstrument YearObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 YearpropV = YearObj.Year;
                var YearPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YearPropKey, value: YearpropV));
            }

            private void GetCQGInstrumentClassYearString(QueryInfo query, object[] args)
            {
                CQGInstrument YearStringObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String YearStringpropV = YearStringObj.YearString;
                var YearStringPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YearStringPropKey, value: YearStringpropV));
            }

            private void GetCQGInstrumentClassYesterdayCTotalVolume(QueryInfo query, object[] args)
            {
                CQGInstrument YesterdayCTotalVolumeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double YesterdayCTotalVolumepropV = YesterdayCTotalVolumeObj.YesterdayCTotalVolume;
                var YesterdayCTotalVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YesterdayCTotalVolumePropKey, value: YesterdayCTotalVolumepropV));
            }

            private void GetCQGInstrumentPropertiesClassCount(QueryInfo query, object[] args)
            {
                CQGInstrumentProperties CountObj = (CQGInstrumentProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGInstrumentPropertiesClassItem(QueryInfo query, object[] args)
            {
                CQGInstrumentProperties ItemObj = (CQGInstrumentProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrumentProperty ItempropV = ItemObj[(CQG.eInstrumentProperty)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGInstrumentPropertyClassInstrument(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty InstrumentObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGInstrumentPropertyClassName(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty NameObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGInstrumentPropertyClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty ServerTimestampObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGInstrumentPropertyClassTimestamp(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty TimestampObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGInstrumentPropertyClassType(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty TypeObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eInstrumentProperty TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGInstrumentPropertyClassValue(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty ValueObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object ValuepropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
            }

            private void GetCQGInstrumentsClassCount(QueryInfo query, object[] args)
            {
                CQGInstruments CountObj = (CQGInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGInstrumentsClassItem(QueryInfo query, object[] args)
            {
                CQGInstruments ItemObj = (CQGInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrument ItempropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGInstrumentsGroupClassId(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroup IdObj = (CQGInstrumentsGroup)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGInstrumentsGroupClassInstruments(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroup InstrumentsObj = (CQGInstrumentsGroup)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstruments InstrumentspropV = InstrumentsObj.Instruments;
                var InstrumentsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentsPropKey, InstrumentspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentsPropKey));
            }

            private void GetCQGInstrumentsGroupClassRequest(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroup RequestObj = (CQGInstrumentsGroup)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrumentsGroupRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGInstrumentsGroupRequestClassCommodity(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest CommodityObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CommoditypropV = CommodityObj.Commodity;
                var CommodityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityPropKey, value: CommoditypropV));
            }

            private void GetCQGInstrumentsGroupRequestClassInstrumentTypes(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest InstrumentTypesObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eInstrumentType InstrumentTypespropV = InstrumentTypesObj.InstrumentTypes;
                var InstrumentTypesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentTypesPropKey, value: InstrumentTypespropV));
            }

            private void GetCQGInstrumentsGroupRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest RangeEndObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGInstrumentsGroupRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest RangeStartObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGInstrumentsGroupRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest SubscriptionLevelObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eGroupSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGInstrumentsGroupsClassCount(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroups CountObj = (CQGInstrumentsGroups)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGInstrumentsGroupsClassItem(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroups ItemObj = (CQGInstrumentsGroups)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrumentsGroup ItempropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGInstrumentSubscriptionRequestClassDOMBBAType(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest DOMBBATypeObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eDOMandBBAType DOMBBATypepropV = DOMBBATypeObj.DOMBBAType;
                var DOMBBATypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBBATypePropKey, value: DOMBBATypepropV));
            }

            private void GetCQGInstrumentSubscriptionRequestClassDOMStatus(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest DOMStatusObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean DOMStatuspropV = DOMStatusObj.DOMStatus;
                var DOMStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMStatusPropKey, value: DOMStatuspropV));
            }

            private void GetCQGInstrumentSubscriptionRequestClassPropertyLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest PropertyLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.ePropertySubscriptionLevel PropertyLevelpropV = PropertyLevelObj.PropertyLevel;
                var PropertyLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertyLevelPropKey, value: PropertyLevelpropV));
            }

            private void GetCQGInstrumentSubscriptionRequestClassQuoteLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest QuoteLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eQuoteSubscriptionLevel QuoteLevelpropV = QuoteLevelObj.QuoteLevel;
                var QuoteLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuoteLevelPropKey, value: QuoteLevelpropV));
            }

            private void GetCQGInstrumentSubscriptionRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest SymbolObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGIntegerCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGIntegerCollection CountObj = (CQGIntegerCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGIntegerCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGIntegerCollection ItemObj = (CQGIntegerCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGLoggerClassCEL(QueryInfo query, object[] args)
            {
                CQGLogger CELObj = (CQGLogger)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCEL CELpropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGManualFillClassDisplayPrice(QueryInfo query, object[] args)
            {
                CQGManualFill DisplayPriceObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DisplayPricepropV = DisplayPriceObj.DisplayPrice;
                var DisplayPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DisplayPricePropKey, value: DisplayPricepropV));
            }

            private void GetCQGManualFillClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGManualFill GWAccountIDObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGManualFillClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGManualFill InstrumentNameObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
            }

            private void GetCQGManualFillClassNote(QueryInfo query, object[] args)
            {
                CQGManualFill NoteObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NotepropV = NoteObj.Note;
                var NotePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NotePropKey, value: NotepropV));
            }

            private void GetCQGManualFillClassPrice(QueryInfo query, object[] args)
            {
                CQGManualFill PriceObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGManualFillClassQuantity(QueryInfo query, object[] args)
            {
                CQGManualFill QuantityObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGManualFillClassSide(QueryInfo query, object[] args)
            {
                CQGManualFill SideObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderSide SidepropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
            }

            private void GetCQGManualFillClassStatementDate(QueryInfo query, object[] args)
            {
                CQGManualFill StatementDateObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
            }

            private void GetCQGManualFillClassTradeId(QueryInfo query, object[] args)
            {
                CQGManualFill TradeIdObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TradeIdpropV = TradeIdObj.TradeId;
                var TradeIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeIdPropKey, value: TradeIdpropV));
            }

            private void GetCQGManualFillClassTradeTimestamp(QueryInfo query, object[] args)
            {
                CQGManualFill TradeTimestampObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TradeTimestamppropV = TradeTimestampObj.TradeTimestamp;
                var TradeTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeTimestampPropKey, value: TradeTimestamppropV));
            }

            private void GetCQGManualFillRequestClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGManualFillRequest GWAccountIDObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGManualFillRequestClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGManualFillRequest InstrumentNameObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
            }

            private void GetCQGManualFillRequestClassNote(QueryInfo query, object[] args)
            {
                CQGManualFillRequest NoteObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NotepropV = NoteObj.Note;
                var NotePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NotePropKey, value: NotepropV));
            }

            private void GetCQGManualFillRequestClassPrice(QueryInfo query, object[] args)
            {
                CQGManualFillRequest PriceObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGManualFillRequestClassQuantity(QueryInfo query, object[] args)
            {
                CQGManualFillRequest QuantityObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGManualFillRequestClassSide(QueryInfo query, object[] args)
            {
                CQGManualFillRequest SideObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderSide SidepropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
            }

            private void GetCQGManualFillRequestClassStatementDate(QueryInfo query, object[] args)
            {
                CQGManualFillRequest StatementDateObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
            }

            private void GetCQGManualFillRequestClassTradeId(QueryInfo query, object[] args)
            {
                CQGManualFillRequest TradeIdObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TradeIdpropV = TradeIdObj.TradeId;
                var TradeIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeIdPropKey, value: TradeIdpropV));
            }

            private void GetCQGManualFillRequestClassTradeTimestamp(QueryInfo query, object[] args)
            {
                CQGManualFillRequest TradeTimestampObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TradeTimestamppropV = TradeTimestampObj.TradeTimestamp;
                var TradeTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeTimestampPropKey, value: TradeTimestamppropV));
            }

            private void GetCQGManualFillsClassCount(QueryInfo query, object[] args)
            {
                CQGManualFills CountObj = (CQGManualFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGManualFillsClassDataLevel(QueryInfo query, object[] args)
            {
                CQGManualFills DataLevelObj = (CQGManualFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eManualFillsDataLevel DataLevelpropV = DataLevelObj.DataLevel;
                var DataLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataLevelPropKey, value: DataLevelpropV));
            }

            private void GetCQGManualFillsClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGManualFills GWAccountIDObj = (CQGManualFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGManualFillsClassItem(QueryInfo query, object[] args)
            {
                CQGManualFills ItemObj = (CQGManualFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGManualFill ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGManualFillsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGManualFillsCollection CountObj = (CQGManualFillsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGManualFillsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGManualFillsCollection ItemObj = (CQGManualFillsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGManualFills ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGModifiedPropertiesClassCount(QueryInfo query, object[] args)
            {
                CQGModifiedProperties CountObj = (CQGModifiedProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGModifiedPropertiesClassItem(QueryInfo query, object[] args)
            {
                CQGModifiedProperties ItemObj = (CQGModifiedProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGModifiedProperty ItempropV = ItemObj[(CQG.eOrderProperty)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGModifiedPropertiesClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGModifiedProperties ItemByIndexObj = (CQGModifiedProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGModifiedProperty ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGModifiedPropertyClassDescription(QueryInfo query, object[] args)
            {
                CQGModifiedProperty DescriptionObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DescriptionpropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
            }

            private void GetCQGModifiedPropertyClassName(QueryInfo query, object[] args)
            {
                CQGModifiedProperty NameObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGModifiedPropertyClassNewValue(QueryInfo query, object[] args)
            {
                CQGModifiedProperty NewValueObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object NewValuepropV = NewValueObj.NewValue;
                var NewValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewValuePropKey, value: NewValuepropV));
            }

            private void GetCQGModifiedPropertyClassPreviousValue(QueryInfo query, object[] args)
            {
                CQGModifiedProperty PreviousValueObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object PreviousValuepropV = PreviousValueObj.PreviousValue;
                var PreviousValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreviousValuePropKey, value: PreviousValuepropV));
            }

            private void GetCQGModifiedPropertyClassType(QueryInfo query, object[] args)
            {
                CQGModifiedProperty TypeObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderProperty TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGOrderActionRequestClassAccount(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AccountObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccount AccountpropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGOrderActionRequestClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AlgorithmIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.UInt32 AlgorithmIDpropV = AlgorithmIDObj.AlgorithmID;
                var AlgorithmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDpropV));
            }

            private void GetCQGOrderActionRequestClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AlgorithmStringIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String AlgorithmStringIDpropV = AlgorithmStringIDObj.AlgorithmStringID;
                var AlgorithmStringIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDpropV));
            }

            private void GetCQGOrderActionRequestClassFromAllTraders(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest FromAllTradersObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean FromAllTraderspropV = FromAllTradersObj.FromAllTraders;
                var FromAllTradersPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FromAllTradersPropKey, value: FromAllTraderspropV));
            }

            private void GetCQGOrderActionRequestClassInstrument(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest InstrumentObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGOrderActionRequestClassOrderSide(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest OrderSideObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderSide OrderSidepropV = OrderSideObj.OrderSide;
                var OrderSidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderSidePropKey, value: OrderSidepropV));
            }

            private void GetCQGOrderActionRequestClassParked(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest ParkedObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean ParkedpropV = ParkedObj.Parked;
                var ParkedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParkedPropKey, value: ParkedpropV));
            }

            private void GetCQGOrderChainClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrderChain AlgorithmIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.UInt32 AlgorithmIDpropV = AlgorithmIDObj.AlgorithmID;
                var AlgorithmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDpropV));
            }

            private void GetCQGOrderChainClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrderChain AlgorithmStringIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String AlgorithmStringIDpropV = AlgorithmStringIDObj.AlgorithmStringID;
                var AlgorithmStringIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDpropV));
            }

            private void GetCQGOrderChainClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGOrderChain GWAccountIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGOrderClassAccount(QueryInfo query, object[] args)
            {
                CQGOrder AccountObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccount AccountpropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGOrderClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrder AlgorithmIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.UInt32 AlgorithmIDpropV = AlgorithmIDObj.AlgorithmID;
                var AlgorithmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDpropV));
            }

            private void GetCQGOrderClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrder AlgorithmStringIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String AlgorithmStringIDpropV = AlgorithmStringIDObj.AlgorithmStringID;
                var AlgorithmStringIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDpropV));
            }

            private void GetCQGOrderClassCanBeCanceled(QueryInfo query, object[] args)
            {
                CQGOrder CanBeCanceledObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean CanBeCanceledpropV = CanBeCanceledObj.CanBeCanceled;
                var CanBeCanceledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeCanceledPropKey, value: CanBeCanceledpropV));
            }

            private void GetCQGOrderClassCanBeModified(QueryInfo query, object[] args)
            {
                CQGOrder CanBeModifiedObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean CanBeModifiedpropV = CanBeModifiedObj.CanBeModified;
                var CanBeModifiedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeModifiedPropKey, value: CanBeModifiedpropV));
            }

            private void GetCQGOrderClassCanBeReplaced(QueryInfo query, object[] args)
            {
                CQGOrder CanBeReplacedObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean CanBeReplacedpropV = CanBeReplacedObj.CanBeReplaced;
                var CanBeReplacedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeReplacedPropKey, value: CanBeReplacedpropV));
            }

            private void GetCQGOrderClassCancelationInstruction(QueryInfo query, object[] args)
            {
                CQGOrder CancelationInstructionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderCancelationType CancelationInstructionpropV = CancelationInstructionObj.CancelationInstruction;
                var CancelationInstructionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CancelationInstructionPropKey, value: CancelationInstructionpropV));
            }

            private void GetCQGOrderClassDescription(QueryInfo query, object[] args)
            {
                CQGOrder DescriptionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DescriptionpropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
            }

            private void GetCQGOrderClassDurationType(QueryInfo query, object[] args)
            {
                CQGOrder DurationTypeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderDuration DurationTypepropV = DurationTypeObj.DurationType;
                var DurationTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DurationTypePropKey, value: DurationTypepropV));
            }

            private void GetCQGOrderClassFilledQuantity(QueryInfo query, object[] args)
            {
                CQGOrder FilledQuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 FilledQuantitypropV = FilledQuantityObj.FilledQuantity;
                var FilledQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FilledQuantityPropKey, value: FilledQuantitypropV));
            }

            private void GetCQGOrderClassFills(QueryInfo query, object[] args)
            {
                CQGOrder FillsObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGFills FillspropV = FillsObj.Fills;
                var FillsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(FillsPropKey, FillspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillsPropKey));
            }

            private void GetCQGOrderClassGUID(QueryInfo query, object[] args)
            {
                CQGOrder GUIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String GUIDpropV = GUIDObj.GUID;
                var GUIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GUIDPropKey, value: GUIDpropV));
            }

            private void GetCQGOrderClassGWOrderID(QueryInfo query, object[] args)
            {
                CQGOrder GWOrderIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String GWOrderIDpropV = GWOrderIDObj.GWOrderID;
                var GWOrderIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWOrderIDPropKey, value: GWOrderIDpropV));
            }

            private void GetCQGOrderClassGWStatus(QueryInfo query, object[] args)
            {
                CQGOrder GWStatusObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderStatus GWStatuspropV = GWStatusObj.GWStatus;
                var GWStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWStatusPropKey, value: GWStatuspropV));
            }

            private void GetCQGOrderClassInstrument(QueryInfo query, object[] args)
            {
                CQGOrder InstrumentObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGOrderClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGOrder InstrumentNameObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
            }

            private void GetCQGOrderClassIsExternal(QueryInfo query, object[] args)
            {
                CQGOrder IsExternalObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsExternalpropV = IsExternalObj.IsExternal;
                var IsExternalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsExternalPropKey, value: IsExternalpropV));
            }

            private void GetCQGOrderClassIsFinal(QueryInfo query, object[] args)
            {
                CQGOrder IsFinalObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsFinalpropV = IsFinalObj.IsFinal;
                var IsFinalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsFinalPropKey, value: IsFinalpropV));
            }

            private void GetCQGOrderClassLastError(QueryInfo query, object[] args)
            {
                CQGOrder LastErrorObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGOrderClassLastEvent(QueryInfo query, object[] args)
            {
                CQGOrder LastEventObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderEvent LastEventpropV = LastEventObj.LastEvent;
                var LastEventPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastEventPropKey, value: LastEventpropV));
            }

            private void GetCQGOrderClassLimitPrice(QueryInfo query, object[] args)
            {
                CQGOrder LimitPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double LimitPricepropV = LimitPriceObj.LimitPrice;
                var LimitPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LimitPricePropKey, value: LimitPricepropV));
            }

            private void GetCQGOrderClassOrderCheckMark(QueryInfo query, object[] args)
            {
                CQGOrder OrderCheckMarkObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean OrderCheckMarkpropV = OrderCheckMarkObj.OrderCheckMark;
                var OrderCheckMarkPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderCheckMarkPropKey, value: OrderCheckMarkpropV));
            }

            private void GetCQGOrderClassOriginalOrderID(QueryInfo query, object[] args)
            {
                CQGOrder OriginalOrderIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String OriginalOrderIDpropV = OriginalOrderIDObj.OriginalOrderID;
                var OriginalOrderIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OriginalOrderIDPropKey, value: OriginalOrderIDpropV));
            }

            private void GetCQGOrderClassPlaceTime(QueryInfo query, object[] args)
            {
                CQGOrder PlaceTimeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime PlaceTimepropV = PlaceTimeObj.PlaceTime;
                var PlaceTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PlaceTimePropKey, value: PlaceTimepropV));
            }

            private void GetCQGOrderClassProperties(QueryInfo query, object[] args)
            {
                CQGOrder PropertiesObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrderProperties PropertiespropV = PropertiesObj.Properties;
                var PropertiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
            }

            private void GetCQGOrderClassQuantity(QueryInfo query, object[] args)
            {
                CQGOrder QuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGOrderClassRemainingQuantity(QueryInfo query, object[] args)
            {
                CQGOrder RemainingQuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RemainingQuantitypropV = RemainingQuantityObj.RemainingQuantity;
                var RemainingQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemainingQuantityPropKey, value: RemainingQuantitypropV));
            }

            private void GetCQGOrderClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGOrder ServerTimestampObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGOrderClassSide(QueryInfo query, object[] args)
            {
                CQGOrder SideObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderSide SidepropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
            }

            private void GetCQGOrderClassState(QueryInfo query, object[] args)
            {
                CQGOrder StateObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderLocalState StatepropV = StateObj.State;
                var StatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatePropKey, value: StatepropV));
            }

            private void GetCQGOrderClassStopPrice(QueryInfo query, object[] args)
            {
                CQGOrder StopPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double StopPricepropV = StopPriceObj.StopPrice;
                var StopPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopPricePropKey, value: StopPricepropV));
            }

            private void GetCQGOrderClassTag(QueryInfo query, object[] args)
            {
                CQGOrder TagObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGOrderClassTimeActiveAt(QueryInfo query, object[] args)
            {
                CQGOrder TimeActiveAtObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimeActiveAtpropV = TimeActiveAtObj.TimeActiveAt;
                var TimeActiveAtPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimeActiveAtPropKey, value: TimeActiveAtpropV));
            }

            private void GetCQGOrderClassTimestamp(QueryInfo query, object[] args)
            {
                CQGOrder TimestampObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGOrderClassTransactions(QueryInfo query, object[] args)
            {
                CQGOrder TransactionsObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTransactions TransactionspropV = TransactionsObj.Transactions;
                var TransactionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TransactionsPropKey, TransactionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TransactionsPropKey));
            }

            private void GetCQGOrderClassType(QueryInfo query, object[] args)
            {
                CQGOrder TypeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGOrderClassUEName(QueryInfo query, object[] args)
            {
                CQGOrder UENameObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String UENamepropV = UENameObj.UEName;
                var UENamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UENamePropKey, value: UENamepropV));
            }

            private void GetCQGOrderModifyClassProperties(QueryInfo query, object[] args)
            {
                CQGOrderModify PropertiesObj = (CQGOrderModify)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrderProperties PropertiespropV = PropertiesObj.Properties;
                var PropertiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
            }

            private void GetCQGOrderPropertiesClassCount(QueryInfo query, object[] args)
            {
                CQGOrderProperties CountObj = (CQGOrderProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGOrderPropertiesClassItem(QueryInfo query, object[] args)
            {
                CQGOrderProperties ItemObj = (CQGOrderProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrderProperty ItempropV = ItemObj[(CQG.eOrderProperty)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGOrderPropertyClassCanBeSet(QueryInfo query, object[] args)
            {
                CQGOrderProperty CanBeSetObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean CanBeSetpropV = CanBeSetObj.CanBeSet;
                var CanBeSetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeSetPropKey, value: CanBeSetpropV));
            }

            private void GetCQGOrderPropertyClassDescription(QueryInfo query, object[] args)
            {
                CQGOrderProperty DescriptionObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String DescriptionpropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
            }

            private void GetCQGOrderPropertyClassName(QueryInfo query, object[] args)
            {
                CQGOrderProperty NameObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGOrderPropertyClassOrder(QueryInfo query, object[] args)
            {
                CQGOrderProperty OrderObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrder OrderpropV = OrderObj.Order;
                var OrderPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
            }

            private void GetCQGOrderPropertyClassTimestamp(QueryInfo query, object[] args)
            {
                CQGOrderProperty TimestampObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGOrderPropertyClassType(QueryInfo query, object[] args)
            {
                CQGOrderProperty TypeObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderProperty TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGOrderPropertyClassValue(QueryInfo query, object[] args)
            {
                CQGOrderProperty ValueObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object ValuepropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
            }

            private void GetCQGOrdersClassCount(QueryInfo query, object[] args)
            {
                CQGOrders CountObj = (CQGOrders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGOrdersClassItem(QueryInfo query, object[] args)
            {
                CQGOrders ItemObj = (CQGOrders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrder ItempropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGOrdersQueryClassAccount(QueryInfo query, object[] args)
            {
                CQGOrdersQuery AccountObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccount AccountpropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGOrdersQueryClassCEL(QueryInfo query, object[] args)
            {
                CQGOrdersQuery CELObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGCEL CELpropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGOrdersQueryClassFinalError(QueryInfo query, object[] args)
            {
                CQGOrdersQuery FinalErrorObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError FinalErrorpropV = FinalErrorObj.FinalError;
                var FinalErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(FinalErrorPropKey, FinalErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FinalErrorPropKey));
            }

            private void GetCQGOrdersQueryClassLastChunk(QueryInfo query, object[] args)
            {
                CQGOrdersQuery LastChunkObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrders LastChunkpropV = LastChunkObj.LastChunk;
                var LastChunkPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastChunkPropKey, LastChunkpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastChunkPropKey));
            }

            private void GetCQGOrdersQueryClassOrders(QueryInfo query, object[] args)
            {
                CQGOrdersQuery OrdersObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrders OrderspropV = OrdersObj.Orders;
                var OrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrderspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
            }

            private void GetCQGOrdersQueryClassQueryID(QueryInfo query, object[] args)
            {
                CQGOrdersQuery QueryIDObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QueryIDpropV = QueryIDObj.QueryID;
                var QueryIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QueryIDPropKey, value: QueryIDpropV));
            }

            private void GetCQGOrdersQueryClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGOrdersQuery ServerTimestampObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGOrdersQueryClassStatus(QueryInfo query, object[] args)
            {
                CQGOrdersQuery StatusObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGOrdersQueryClassTimestamp(QueryInfo query, object[] args)
            {
                CQGOrdersQuery TimestampObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGOrderStatisticsClassStatisticsOnReceive(QueryInfo query, object[] args)
            {
                CQGOrderStatistics StatisticsOnReceiveObj = (CQGOrderStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object StatisticsOnReceivepropV = StatisticsOnReceiveObj.StatisticsOnReceive[(System.String)args[0]];
                var StatisticsOnReceivePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsOnReceivePropKey, value: StatisticsOnReceivepropV));
            }

            private void GetCQGParameterDefinitionClassAvailableValues(QueryInfo query, object[] args)
            {
                CQGParameterDefinition AvailableValuesObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStringCollection AvailableValuespropV = AvailableValuesObj.AvailableValues;
                var AvailableValuesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AvailableValuesPropKey, AvailableValuespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvailableValuesPropKey));
            }

            private void GetCQGParameterDefinitionClassComment(QueryInfo query, object[] args)
            {
                CQGParameterDefinition CommentObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String CommentpropV = CommentObj.Comment;
                var CommentPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommentPropKey, value: CommentpropV));
            }

            private void GetCQGParameterDefinitionClassDefaultValue(QueryInfo query, object[] args)
            {
                CQGParameterDefinition DefaultValueObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object DefaultValuepropV = DefaultValueObj.DefaultValue;
                var DefaultValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValuePropKey, value: DefaultValuepropV));
            }

            private void GetCQGParameterDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGParameterDefinition NameObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGParameterDefinitionClassType(QueryInfo query, object[] args)
            {
                CQGParameterDefinition TypeObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eUserFormulaParameterType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGParameterDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions CountObj = (CQGParameterDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGParameterDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions ItemObj = (CQGParameterDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGParameterDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGParameterDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions ItemByNameObj = (CQGParameterDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGParameterDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGPointAndFigureBarClassHigh(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar HighObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HighpropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
            }

            private void GetCQGPointAndFigureBarClassLow(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar LowObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double LowpropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
            }

            private void GetCQGPointAndFigureBarClassMid(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar MidObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MidpropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
            }

            private void GetCQGPointAndFigureBarClassPFHigh(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar PFHighObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PFHighpropV = PFHighObj.PFHigh;
                var PFHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PFHighPropKey, value: PFHighpropV));
            }

            private void GetCQGPointAndFigureBarClassPFLow(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar PFLowObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PFLowpropV = PFLowObj.PFLow;
                var PFLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PFLowPropKey, value: PFLowpropV));
            }

            private void GetCQGPointAndFigureBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar TimestampObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGPointAndFigureBarClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar TimestampOffsetObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGPointAndFigureBarClassUp(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar UpObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UppropV = UpObj.Up;
                var UpPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpPropKey, value: UppropV));
            }

            private void GetCQGPointAndFigureBarsClassCount(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars CountObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGPointAndFigureBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars EndTimestampObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGPointAndFigureBarsClassId(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars IdObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGPointAndFigureBarsClassItem(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars ItemObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPointAndFigureBar ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGPointAndFigureBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars LastErrorObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGPointAndFigureBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars RequestObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPointAndFigureBarsRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGPointAndFigureBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars StartTimestampObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGPointAndFigureBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars StatusObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGPointAndFigureBarsClassTag(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars TagObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGPointAndFigureBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection CountObj = (CQGPointAndFigureBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGPointAndFigureBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection ItemObj = (CQGPointAndFigureBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPointAndFigureBars ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGPointAndFigureBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection ItemByIdObj = (CQGPointAndFigureBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPointAndFigureBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGPointAndFigureBarsRequestClassBoxSize(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest BoxSizeObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 BoxSizepropV = BoxSizeObj.BoxSize;
                var BoxSizePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BoxSizePropKey, value: BoxSizepropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassBoxUnits(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest BoxUnitsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.ePfBoxUnits BoxUnitspropV = BoxUnitsObj.BoxUnits;
                var BoxUnitsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BoxUnitsPropKey, value: BoxUnitspropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ContinuationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassDataSource(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest DataSourceObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.ePfDataSource DataSourcepropV = DataSourceObj.DataSource;
                var DataSourcePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSourcePropKey, value: DataSourcepropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest DaysBeforeExpirationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest EqualizeClosesObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest IncludeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RangeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RangeStartObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RecalcPeriodObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassReversal(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ReversalObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ReversalpropV = ReversalObj.Reversal;
                var ReversalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReversalPropKey, value: ReversalpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SessionFlagsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SessionsFilterObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SubscriptionLevelObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SymbolObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest UpdatesEnabledObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGPositionClassAccount(QueryInfo query, object[] args)
            {
                CQGPosition AccountObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccount AccountpropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGPositionClassAveragePrice(QueryInfo query, object[] args)
            {
                CQGPosition AveragePriceObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AveragePricepropV = AveragePriceObj.AveragePrice;
                var AveragePricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AveragePricePropKey, value: AveragePricepropV));
            }

            private void GetCQGPositionClassInstrument(QueryInfo query, object[] args)
            {
                CQGPosition InstrumentObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGPositionClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGPosition InstrumentNameObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
            }

            private void GetCQGPositionClassManualFillsInvolved(QueryInfo query, object[] args)
            {
                CQGPosition ManualFillsInvolvedObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean ManualFillsInvolvedpropV = ManualFillsInvolvedObj.ManualFillsInvolved;
                var ManualFillsInvolvedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ManualFillsInvolvedPropKey, value: ManualFillsInvolvedpropV));
            }

            private void GetCQGPositionClassMatchedTrades(QueryInfo query, object[] args)
            {
                CQGPosition MatchedTradesObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTrades MatchedTradespropV = MatchedTradesObj.MatchedTrades;
                var MatchedTradesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(MatchedTradesPropKey, MatchedTradespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MatchedTradesPropKey));
            }

            private void GetCQGPositionClassMVO(QueryInfo query, object[] args)
            {
                CQGPosition MVOObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MVOpropV = MVOObj.MVO;
                var MVOPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MVOPropKey, value: MVOpropV));
            }

            private void GetCQGPositionClassOpenTrades(QueryInfo query, object[] args)
            {
                CQGPosition OpenTradesObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTrades OpenTradespropV = OpenTradesObj.OpenTrades;
                var OpenTradesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OpenTradesPropKey, OpenTradespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenTradesPropKey));
            }

            private void GetCQGPositionClassOTE(QueryInfo query, object[] args)
            {
                CQGPosition OTEObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double OTEpropV = OTEObj.OTE;
                var OTEPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OTEPropKey, value: OTEpropV));
            }

            private void GetCQGPositionClassProfitLoss(QueryInfo query, object[] args)
            {
                CQGPosition ProfitLossObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ProfitLosspropV = ProfitLossObj.ProfitLoss;
                var ProfitLossPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitLossPropKey, value: ProfitLosspropV));
            }

            private void GetCQGPositionClassQuantity(QueryInfo query, object[] args)
            {
                CQGPosition QuantityObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGPositionClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGPosition ServerTimestampObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGPositionClassSide(QueryInfo query, object[] args)
            {
                CQGPosition SideObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderSide SidepropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
            }

            private void GetCQGPositionClassTimestamp(QueryInfo query, object[] args)
            {
                CQGPosition TimestampObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGPositionClassUPL(QueryInfo query, object[] args)
            {
                CQGPosition UPLObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double UPLpropV = UPLObj.UPL;
                var UPLPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UPLPropKey, value: UPLpropV));
            }

            private void GetCQGPositionsClassCount(QueryInfo query, object[] args)
            {
                CQGPositions CountObj = (CQGPositions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGPositionsClassItem(QueryInfo query, object[] args)
            {
                CQGPositions ItemObj = (CQGPositions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPosition ItempropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGPositionsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGPositions ItemByIndexObj = (CQGPositions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPosition ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGPositionsStatementClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGPositionsStatement GWAccountIDObj = (CQGPositionsStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGPositionsStatementClassPositions(QueryInfo query, object[] args)
            {
                CQGPositionsStatement PositionsObj = (CQGPositionsStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGPositions PositionspropV = PositionsObj.Positions;
                var PositionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PositionsPropKey, PositionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionsPropKey));
            }

            private void GetCQGPositionsStatementClassStatementDate(QueryInfo query, object[] args)
            {
                CQGPositionsStatement StatementDateObj = (CQGPositionsStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
            }

            private void GetCQGQFormulaDefinitionClassExpression(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinition ExpressionObj = (CQGQFormulaDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ExpressionpropV = ExpressionObj.Expression;
                var ExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExpressionPropKey, value: ExpressionpropV));
            }

            private void GetCQGQFormulaDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinition NameObj = (CQGQFormulaDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGQFormulaDefinitionClassNumber(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinition NumberObj = (CQGQFormulaDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 NumberpropV = NumberObj.Number;
                var NumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NumberPropKey, value: NumberpropV));
            }

            private void GetCQGQFormulaDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions CountObj = (CQGQFormulaDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGQFormulaDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions ItemObj = (CQGQFormulaDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQFormulaDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGQFormulaDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions ItemByNameObj = (CQGQFormulaDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQFormulaDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGQuoteClassHasVolume(QueryInfo query, object[] args)
            {
                CQGQuote HasVolumeObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean HasVolumepropV = HasVolumeObj.HasVolume;
                var HasVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HasVolumePropKey, value: HasVolumepropV));
            }

            private void GetCQGQuoteClassInstrument(QueryInfo query, object[] args)
            {
                CQGQuote InstrumentObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGQuoteClassIsValid(QueryInfo query, object[] args)
            {
                CQGQuote IsValidObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsValidpropV = IsValidObj.IsValid;
                var IsValidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsValidPropKey, value: IsValidpropV));
            }

            private void GetCQGQuoteClassName(QueryInfo query, object[] args)
            {
                CQGQuote NameObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGQuoteClassPrice(QueryInfo query, object[] args)
            {
                CQGQuote PriceObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGQuoteClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGQuote ServerTimestampObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGQuoteClassTimestamp(QueryInfo query, object[] args)
            {
                CQGQuote TimestampObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGQuoteClassType(QueryInfo query, object[] args)
            {
                CQGQuote TypeObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eQuoteType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGQuoteClassVolume(QueryInfo query, object[] args)
            {
                CQGQuote VolumeObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 VolumepropV = VolumeObj.Volume;
                var VolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumepropV));
            }

            private void GetCQGQuotesClassCount(QueryInfo query, object[] args)
            {
                CQGQuotes CountObj = (CQGQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGQuotesClassItem(QueryInfo query, object[] args)
            {
                CQGQuotes ItemObj = (CQGQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGQuote ItempropV = ItemObj[(CQG.eQuoteType)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGRemoteOpenAPISessionClassLogonName(QueryInfo query, object[] args)
            {
                CQGRemoteOpenAPISession LogonNameObj = (CQGRemoteOpenAPISession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String LogonNamepropV = LogonNameObj.LogonName;
                var LogonNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LogonNamePropKey, value: LogonNamepropV));
            }

            private void GetCQGRemoteOpenAPISessionClassROMNumber(QueryInfo query, object[] args)
            {
                CQGRemoteOpenAPISession ROMNumberObj = (CQGRemoteOpenAPISession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ROMNumberpropV = ROMNumberObj.ROMNumber;
                var ROMNumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ROMNumberPropKey, value: ROMNumberpropV));
            }

            private void GetCQGRemoteOpenAPISessionClassServerAddress(QueryInfo query, object[] args)
            {
                CQGRemoteOpenAPISession ServerAddressObj = (CQGRemoteOpenAPISession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ServerAddresspropV = ServerAddressObj.ServerAddress;
                var ServerAddressPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerAddressPropKey, value: ServerAddresspropV));
            }

            private void GetCQGSessionClassActivationDate(QueryInfo query, object[] args)
            {
                CQGSession ActivationDateObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ActivationDatepropV = ActivationDateObj.ActivationDate;
                var ActivationDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActivationDatePropKey, value: ActivationDatepropV));
            }

            private void GetCQGSessionClassDayCloseOffset(QueryInfo query, object[] args)
            {
                CQGSession DayCloseOffsetObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.SByte DayCloseOffsetpropV = DayCloseOffsetObj.DayCloseOffset;
                var DayCloseOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayCloseOffsetPropKey, value: DayCloseOffsetpropV));
            }

            private void GetCQGSessionClassDayStartOffset(QueryInfo query, object[] args)
            {
                CQGSession DayStartOffsetObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.SByte DayStartOffsetpropV = DayStartOffsetObj.DayStartOffset;
                var DayStartOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayStartOffsetPropKey, value: DayStartOffsetpropV));
            }

            private void GetCQGSessionClassDayStartsYesterday(QueryInfo query, object[] args)
            {
                CQGSession DayStartsYesterdayObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean DayStartsYesterdaypropV = DayStartsYesterdayObj.DayStartsYesterday;
                var DayStartsYesterdayPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayStartsYesterdayPropKey, value: DayStartsYesterdaypropV));
            }

            private void GetCQGSessionClassEndTime(QueryInfo query, object[] args)
            {
                CQGSession EndTimeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimepropV = EndTimeObj.EndTime;
                var EndTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimePropKey, value: EndTimepropV));
            }

            private void GetCQGSessionClassInstrument(QueryInfo query, object[] args)
            {
                CQGSession InstrumentObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGSessionClassName(QueryInfo query, object[] args)
            {
                CQGSession NameObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGSessionClassNumber(QueryInfo query, object[] args)
            {
                CQGSession NumberObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int16 NumberpropV = NumberObj.Number;
                var NumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NumberPropKey, value: NumberpropV));
            }

            private void GetCQGSessionClassPrimaryFlag(QueryInfo query, object[] args)
            {
                CQGSession PrimaryFlagObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean PrimaryFlagpropV = PrimaryFlagObj.PrimaryFlag;
                var PrimaryFlagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PrimaryFlagPropKey, value: PrimaryFlagpropV));
            }

            private void GetCQGSessionClassStartTime(QueryInfo query, object[] args)
            {
                CQGSession StartTimeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimepropV = StartTimeObj.StartTime;
                var StartTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimePropKey, value: StartTimepropV));
            }

            private void GetCQGSessionClassType(QueryInfo query, object[] args)
            {
                CQGSession TypeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSymbolSessionType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGSessionClassValidEndTime(QueryInfo query, object[] args)
            {
                CQGSession ValidEndTimeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ValidEndTimepropV = ValidEndTimeObj.ValidEndTime;
                var ValidEndTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValidEndTimePropKey, value: ValidEndTimepropV));
            }

            private void GetCQGSessionClassValidStartTime(QueryInfo query, object[] args)
            {
                CQGSession ValidStartTimeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ValidStartTimepropV = ValidStartTimeObj.ValidStartTime;
                var ValidStartTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValidStartTimePropKey, value: ValidStartTimepropV));
            }

            private void GetCQGSessionClassWorkingWeekDays(QueryInfo query, object[] args)
            {
                CQGSession WorkingWeekDaysObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionWeekDays WorkingWeekDayspropV = WorkingWeekDaysObj.WorkingWeekDays;
                var WorkingWeekDaysPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: WorkingWeekDaysPropKey, value: WorkingWeekDayspropV));
            }

            private void GetCQGSessionsClassCount(QueryInfo query, object[] args)
            {
                CQGSessions CountObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGSessionsClassDescriptionEnd(QueryInfo query, object[] args)
            {
                CQGSessions DescriptionEndObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime DescriptionEndpropV = DescriptionEndObj.DescriptionEnd;
                var DescriptionEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionEndPropKey, value: DescriptionEndpropV));
            }

            private void GetCQGSessionsClassDescriptionNumber(QueryInfo query, object[] args)
            {
                CQGSessions DescriptionNumberObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DescriptionNumberpropV = DescriptionNumberObj.DescriptionNumber;
                var DescriptionNumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionNumberPropKey, value: DescriptionNumberpropV));
            }

            private void GetCQGSessionsClassDescriptionStart(QueryInfo query, object[] args)
            {
                CQGSessions DescriptionStartObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime DescriptionStartpropV = DescriptionStartObj.DescriptionStart;
                var DescriptionStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionStartPropKey, value: DescriptionStartpropV));
            }

            private void GetCQGSessionsClassHolidays(QueryInfo query, object[] args)
            {
                CQGSessions HolidaysObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGHolidays HolidayspropV = HolidaysObj.Holidays;
                var HolidaysPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(HolidaysPropKey, HolidayspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HolidaysPropKey));
            }

            private void GetCQGSessionsClassItem(QueryInfo query, object[] args)
            {
                CQGSessions ItemObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSession ItempropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGSessionsClassName(QueryInfo query, object[] args)
            {
                CQGSessions NameObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGSessionsClassType(QueryInfo query, object[] args)
            {
                CQGSessions TypeObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSymbolSessionType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGSessionsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGSessionsCollection CountObj = (CQGSessionsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGSessionsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGSessionsCollection ItemObj = (CQGSessionsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSessions ItempropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGStrategyDefinitionClassClientId(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition ClientIdObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ClientIdpropV = ClientIdObj.ClientId;
                var ClientIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClientIdPropKey, value: ClientIdpropV));
            }

            private void GetCQGStrategyDefinitionClassId(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition IdObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGStrategyDefinitionClassLastError(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition LastErrorObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGStrategyDefinitionClassRequestString(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition RequestStringObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String RequestStringpropV = RequestStringObj.RequestString;
                var RequestStringPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestStringPropKey, value: RequestStringpropV));
            }

            private void GetCQGStrategyDefinitionClassStatus(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition StatusObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eStrategyRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGStrategyDefinitionClassSymbol(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition SymbolObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGStrategyDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions CountObj = (CQGStrategyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGStrategyDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions ItemObj = (CQGStrategyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStrategyDefinition ItempropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGStrategyDefinitionsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions ItemByIndexObj = (CQGStrategyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStrategyDefinition ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGStrategyLegFillClassExecutionId(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill ExecutionIdObj = (CQGStrategyLegFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ExecutionIdpropV = ExecutionIdObj.ExecutionId;
                var ExecutionIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionIdPropKey, value: ExecutionIdpropV));
            }

            private void GetCQGStrategyLegFillClassOrder(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill OrderObj = (CQGStrategyLegFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrder OrderpropV = OrderObj.Order;
                var OrderPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
            }

            private void GetCQGStrategyLegFillClassOriginalOrderID(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill OriginalOrderIDObj = (CQGStrategyLegFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String OriginalOrderIDpropV = OriginalOrderIDObj.OriginalOrderID;
                var OriginalOrderIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OriginalOrderIDPropKey, value: OriginalOrderIDpropV));
            }

            private void GetCQGStrategyLegFillClassQuantity(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill QuantityObj = (CQGStrategyLegFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGStrategyLegFillsClassCount(QueryInfo query, object[] args)
            {
                CQGStrategyLegFills CountObj = (CQGStrategyLegFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGStrategyLegFillsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGStrategyLegFills ItemByIndexObj = (CQGStrategyLegFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStrategyLegFill ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGStringCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGStringCollection CountObj = (CQGStringCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGStringCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGStringCollection ItemObj = (CQGStringCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
            }

            private void GetCQGSubMinuteBarClassAskVolume(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar AskVolumeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 AskVolumepropV = AskVolumeObj.AskVolume;
                var AskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumepropV));
            }

            private void GetCQGSubMinuteBarClassAvg(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar AvgObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AvgpropV = AvgObj.Avg;
                var AvgPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgpropV));
            }

            private void GetCQGSubMinuteBarClassBidVolume(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar BidVolumeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 BidVolumepropV = BidVolumeObj.BidVolume;
                var BidVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumepropV));
            }

            private void GetCQGSubMinuteBarClassClose(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar CloseObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ClosepropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
            }

            private void GetCQGSubMinuteBarClassHigh(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar HighObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HighpropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
            }

            private void GetCQGSubMinuteBarClassHLC3(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar HLC3Obj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HLC3propV = HLC3Obj.HLC3;
                var HLC3PropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3propV));
            }

            private void GetCQGSubMinuteBarClassLow(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar LowObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double LowpropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
            }

            private void GetCQGSubMinuteBarClassMid(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar MidObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MidpropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
            }

            private void GetCQGSubMinuteBarClassOpen(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar OpenObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double OpenpropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
            }

            private void GetCQGSubMinuteBarClassRange(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar RangeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double RangepropV = RangeObj.Range;
                var RangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangepropV));
            }

            private void GetCQGSubMinuteBarClassTickVolume(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TickVolumeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TickVolumepropV = TickVolumeObj.TickVolume;
                var TickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumepropV));
            }

            private void GetCQGSubMinuteBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TimestampObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGSubMinuteBarClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TimestampOffsetObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGSubMinuteBarClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TrueHighObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
            }

            private void GetCQGSubMinuteBarClassTrueLow(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TrueLowObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
            }

            private void GetCQGSubMinuteBarClassTrueRange(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TrueRangeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueRangepropV = TrueRangeObj.TrueRange;
                var TrueRangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangepropV));
            }

            private void GetCQGSubMinuteBarClassVolume(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar VolumeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 VolumepropV = VolumeObj.Volume;
                var VolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumepropV));
            }

            private void GetCQGSubMinuteBarsClassCount(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars CountObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGSubMinuteBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars EndTimestampObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGSubMinuteBarsClassId(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars IdObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGSubMinuteBarsClassItem(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars ItemObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSubMinuteBar ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGSubMinuteBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars LastErrorObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGSubMinuteBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars RequestObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSubMinuteBarsRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGSubMinuteBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars StartTimestampObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGSubMinuteBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars StatusObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGSubMinuteBarsClassTag(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars TagObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGSubMinuteBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection CountObj = (CQGSubMinuteBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGSubMinuteBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection ItemObj = (CQGSubMinuteBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSubMinuteBars ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGSubMinuteBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection ItemByIdObj = (CQGSubMinuteBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGSubMinuteBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGSubMinuteBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest ContinuationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest DaysBeforeExpirationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest EqualizeClosesObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGSubMinuteBarsRequestClassGapFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest GapFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eGapFilter GapFilterpropV = GapFilterObj.GapFilter;
                var GapFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GapFilterPropKey, value: GapFilterpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest IncludeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassInterval(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest IntervalObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IntervalpropV = IntervalObj.Interval;
                var IntervalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntervalPropKey, value: IntervalpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RangeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RangeStartObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RecalcPeriodObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SessionFlagsObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGSubMinuteBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SessionsFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SubscriptionLevelObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SymbolObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest TickFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTickFilter TickFilterpropV = TickFilterObj.TickFilter;
                var TickFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterpropV));
            }

            private void GetCQGSubMinuteBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest UpdatesEnabledObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGSummariesStatementClassCurrencySummaries(QueryInfo query, object[] args)
            {
                CQGSummariesStatement CurrencySummariesObj = (CQGSummariesStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccountSummaries CurrencySummariespropV = CurrencySummariesObj.CurrencySummaries;
                var CurrencySummariesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurrencySummariesPropKey, CurrencySummariespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencySummariesPropKey));
            }

            private void GetCQGSummariesStatementClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGSummariesStatement GWAccountIDObj = (CQGSummariesStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
            }

            private void GetCQGSummariesStatementClassStatementDate(QueryInfo query, object[] args)
            {
                CQGSummariesStatement StatementDateObj = (CQGSummariesStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
            }

            private void GetCQGSummariesStatementClassSummary(QueryInfo query, object[] args)
            {
                CQGSummariesStatement SummaryObj = (CQGSummariesStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGAccountSummary SummarypropV = SummaryObj.Summary;
                var SummaryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SummaryPropKey, SummarypropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SummaryPropKey));
            }

            private void GetCQGTFlowBarClassAskVolume(QueryInfo query, object[] args)
            {
                CQGTFlowBar AskVolumeObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 AskVolumepropV = AskVolumeObj.AskVolume;
                var AskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumepropV));
            }

            private void GetCQGTFlowBarClassBestAskPrice(QueryInfo query, object[] args)
            {
                CQGTFlowBar BestAskPriceObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double BestAskPricepropV = BestAskPriceObj.BestAskPrice;
                var BestAskPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BestAskPricePropKey, value: BestAskPricepropV));
            }

            private void GetCQGTFlowBarClassBestBidPrice(QueryInfo query, object[] args)
            {
                CQGTFlowBar BestBidPriceObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double BestBidPricepropV = BestBidPriceObj.BestBidPrice;
                var BestBidPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BestBidPricePropKey, value: BestBidPricepropV));
            }

            private void GetCQGTFlowBarClassBidVolume(QueryInfo query, object[] args)
            {
                CQGTFlowBar BidVolumeObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 BidVolumepropV = BidVolumeObj.BidVolume;
                var BidVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumepropV));
            }

            private void GetCQGTFlowBarClassClose(QueryInfo query, object[] args)
            {
                CQGTFlowBar CloseObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ClosepropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
            }

            private void GetCQGTFlowBarClassDomAskCount(QueryInfo query, object[] args)
            {
                CQGTFlowBar DomAskCountObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DomAskCountpropV = DomAskCountObj.DomAskCount;
                var DomAskCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskCountPropKey, value: DomAskCountpropV));
            }

            private void GetCQGTFlowBarClassDomAskVolume(QueryInfo query, object[] args)
            {
                CQGTFlowBar DomAskVolumeObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DomAskVolumepropV = DomAskVolumeObj.DomAskVolume[(System.Int32)args[0]];
                var DomAskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskVolumePropKey, value: DomAskVolumepropV));
            }

            private void GetCQGTFlowBarClassDomBidCount(QueryInfo query, object[] args)
            {
                CQGTFlowBar DomBidCountObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DomBidCountpropV = DomBidCountObj.DomBidCount;
                var DomBidCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomBidCountPropKey, value: DomBidCountpropV));
            }

            private void GetCQGTFlowBarClassHigh(QueryInfo query, object[] args)
            {
                CQGTFlowBar HighObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HighpropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
            }

            private void GetCQGTFlowBarClassLow(QueryInfo query, object[] args)
            {
                CQGTFlowBar LowObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double LowpropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
            }

            private void GetCQGTFlowBarClassMid(QueryInfo query, object[] args)
            {
                CQGTFlowBar MidObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MidpropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
            }

            private void GetCQGTFlowBarClassOpen(QueryInfo query, object[] args)
            {
                CQGTFlowBar OpenObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double OpenpropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
            }

            private void GetCQGTFlowBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTFlowBar TimestampObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGTFlowBarClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGTFlowBar TimestampOffsetObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGTFlowBarClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGTFlowBar TrueHighObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
            }

            private void GetCQGTFlowBarClassTrueLow(QueryInfo query, object[] args)
            {
                CQGTFlowBar TrueLowObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
            }

            private void GetCQGTFlowBarClassTrueMid(QueryInfo query, object[] args)
            {
                CQGTFlowBar TrueMidObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueMidpropV = TrueMidObj.TrueMid;
                var TrueMidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueMidPropKey, value: TrueMidpropV));
            }

            private void GetCQGTFlowBarsClassCount(QueryInfo query, object[] args)
            {
                CQGTFlowBars CountObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTFlowBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGTFlowBars EndTimestampObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGTFlowBarsClassId(QueryInfo query, object[] args)
            {
                CQGTFlowBars IdObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGTFlowBarsClassItem(QueryInfo query, object[] args)
            {
                CQGTFlowBars ItemObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTFlowBar ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTFlowBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGTFlowBars LastErrorObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGTFlowBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGTFlowBars RequestObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTFlowBarsRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGTFlowBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGTFlowBars StartTimestampObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGTFlowBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGTFlowBars StatusObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGTFlowBarsClassTag(QueryInfo query, object[] args)
            {
                CQGTFlowBars TagObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGTFlowBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection CountObj = (CQGTFlowBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTFlowBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection ItemObj = (CQGTFlowBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTFlowBars ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTFlowBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection ItemByIdObj = (CQGTFlowBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTFlowBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGTFlowBarsRequestClassAggregation(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest AggregationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTfAggregation AggregationpropV = AggregationObj.Aggregation;
                var AggregationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggregationPropKey, value: AggregationpropV));
            }

            private void GetCQGTFlowBarsRequestClassAggregationLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest AggregationLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 AggregationLevelpropV = AggregationLevelObj.AggregationLevel;
                var AggregationLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggregationLevelPropKey, value: AggregationLevelpropV));
            }

            private void GetCQGTFlowBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest ContinuationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGTFlowBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DaysBeforeExpirationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGTFlowBarsRequestClassDomAskVolumeLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DomAskVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTFlowRequestDomVolumeLevel DomAskVolumeLevelpropV = DomAskVolumeLevelObj.DomAskVolumeLevel;
                var DomAskVolumeLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskVolumeLevelPropKey, value: DomAskVolumeLevelpropV));
            }

            private void GetCQGTFlowBarsRequestClassDomBidVolumeLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DomBidVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTFlowRequestDomVolumeLevel DomBidVolumeLevelpropV = DomBidVolumeLevelObj.DomBidVolumeLevel;
                var DomBidVolumeLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomBidVolumeLevelPropKey, value: DomBidVolumeLevelpropV));
            }

            private void GetCQGTFlowBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest EqualizeClosesObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGTFlowBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest IncludeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGTFlowBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RangeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGTFlowBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RangeStartObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGTFlowBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RecalcPeriodObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGTFlowBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SessionFlagsObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGTFlowBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SessionsFilterObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGTFlowBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SubscriptionLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGTFlowBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SymbolObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGTFlowBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest UpdatesEnabledObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGTickClassContributorId(QueryInfo query, object[] args)
            {
                CQGTick ContributorIdObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ContributorIdpropV = ContributorIdObj.ContributorId;
                var ContributorIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContributorIdPropKey, value: ContributorIdpropV));
            }

            private void GetCQGTickClassContributorIdCode(QueryInfo query, object[] args)
            {
                CQGTick ContributorIdCodeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ContributorIdCodepropV = ContributorIdCodeObj.ContributorIdCode;
                var ContributorIdCodePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContributorIdCodePropKey, value: ContributorIdCodepropV));
            }

            private void GetCQGTickClassCorrectionType(QueryInfo query, object[] args)
            {
                CQGTick CorrectionTypeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTickCorrectionType CorrectionTypepropV = CorrectionTypeObj.CorrectionType;
                var CorrectionTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CorrectionTypePropKey, value: CorrectionTypepropV));
            }

            private void GetCQGTickClassMarketState(QueryInfo query, object[] args)
            {
                CQGTick MarketStateObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eMarketState MarketStatepropV = MarketStateObj.MarketState;
                var MarketStatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MarketStatePropKey, value: MarketStatepropV));
            }

            private void GetCQGTickClassPrice(QueryInfo query, object[] args)
            {
                CQGTick PriceObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGTickClassPriceType(QueryInfo query, object[] args)
            {
                CQGTick PriceTypeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTickPriceType PriceTypepropV = PriceTypeObj.PriceType;
                var PriceTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PriceTypePropKey, value: PriceTypepropV));
            }

            private void GetCQGTickClassSalesConditionCode(QueryInfo query, object[] args)
            {
                CQGTick SalesConditionCodeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 SalesConditionCodepropV = SalesConditionCodeObj.SalesConditionCode;
                var SalesConditionCodePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SalesConditionCodePropKey, value: SalesConditionCodepropV));
            }

            private void GetCQGTickClassSalesConditionLabel(QueryInfo query, object[] args)
            {
                CQGTick SalesConditionLabelObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SalesConditionLabelpropV = SalesConditionLabelObj.SalesConditionLabel;
                var SalesConditionLabelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SalesConditionLabelPropKey, value: SalesConditionLabelpropV));
            }

            private void GetCQGTickClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTick TimestampObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGTickClassVolume(QueryInfo query, object[] args)
            {
                CQGTick VolumeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 VolumepropV = VolumeObj.Volume;
                var VolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumepropV));
            }

            private void GetCQGTicksClassCount(QueryInfo query, object[] args)
            {
                CQGTicks CountObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTicksClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGTicks EndTimestampObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGTicksClassHasUpdates(QueryInfo query, object[] args)
            {
                CQGTicks HasUpdatesObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean HasUpdatespropV = HasUpdatesObj.HasUpdates;
                var HasUpdatesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HasUpdatesPropKey, value: HasUpdatespropV));
            }

            private void GetCQGTicksClassId(QueryInfo query, object[] args)
            {
                CQGTicks IdObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGTicksClassItem(QueryInfo query, object[] args)
            {
                CQGTicks ItemObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTick ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTicksClassLastError(QueryInfo query, object[] args)
            {
                CQGTicks LastErrorObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGTicksClassRequest(QueryInfo query, object[] args)
            {
                CQGTicks RequestObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTicksRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGTicksClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGTicks StartTimestampObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGTicksClassStatus(QueryInfo query, object[] args)
            {
                CQGTicks StatusObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGTicksClassTag(QueryInfo query, object[] args)
            {
                CQGTicks TagObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGTicksCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGTicksCollection CountObj = (CQGTicksCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTicksCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGTicksCollection ItemObj = (CQGTicksCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTicks ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTicksCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGTicksCollection ItemByIdObj = (CQGTicksCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTicks ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGTicksRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTicksRequest RangeEndObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGTicksRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTicksRequest RangeStartObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGTicksRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTicksRequest SessionsFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGTicksRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTicksRequest SymbolObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGTicksRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGTicksRequest TickFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTickFilter TickFilterpropV = TickFilterObj.TickFilter;
                var TickFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterpropV));
            }

            private void GetCQGTicksRequestClassType(QueryInfo query, object[] args)
            {
                CQGTicksRequest TypeObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTicksRequestType TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGTimedBarClassActualVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar ActualVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ActualVolumepropV = ActualVolumeObj.ActualVolume;
                var ActualVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActualVolumePropKey, value: ActualVolumepropV));
            }

            private void GetCQGTimedBarClassAskVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar AskVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 AskVolumepropV = AskVolumeObj.AskVolume;
                var AskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumepropV));
            }

            private void GetCQGTimedBarClassAvg(QueryInfo query, object[] args)
            {
                CQGTimedBar AvgObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AvgpropV = AvgObj.Avg;
                var AvgPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgpropV));
            }

            private void GetCQGTimedBarClassBidVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar BidVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 BidVolumepropV = BidVolumeObj.BidVolume;
                var BidVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumepropV));
            }

            private void GetCQGTimedBarClassClose(QueryInfo query, object[] args)
            {
                CQGTimedBar CloseObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ClosepropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
            }

            private void GetCQGTimedBarClassCommodityOpenInterest(QueryInfo query, object[] args)
            {
                CQGTimedBar CommodityOpenInterestObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CommodityOpenInterestpropV = CommodityOpenInterestObj.CommodityOpenInterest;
                var CommodityOpenInterestPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityOpenInterestPropKey, value: CommodityOpenInterestpropV));
            }

            private void GetCQGTimedBarClassCommodityTickVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar CommodityTickVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CommodityTickVolumepropV = CommodityTickVolumeObj.CommodityTickVolume;
                var CommodityTickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityTickVolumePropKey, value: CommodityTickVolumepropV));
            }

            private void GetCQGTimedBarClassCommodityVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar CommodityVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CommodityVolumepropV = CommodityVolumeObj.CommodityVolume;
                var CommodityVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityVolumePropKey, value: CommodityVolumepropV));
            }

            private void GetCQGTimedBarClassContractOpenInterest(QueryInfo query, object[] args)
            {
                CQGTimedBar ContractOpenInterestObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ContractOpenInterestpropV = ContractOpenInterestObj.ContractOpenInterest;
                var ContractOpenInterestPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractOpenInterestPropKey, value: ContractOpenInterestpropV));
            }

            private void GetCQGTimedBarClassContractTickVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar ContractTickVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ContractTickVolumepropV = ContractTickVolumeObj.ContractTickVolume;
                var ContractTickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractTickVolumePropKey, value: ContractTickVolumepropV));
            }

            private void GetCQGTimedBarClassContractVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar ContractVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ContractVolumepropV = ContractVolumeObj.ContractVolume;
                var ContractVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractVolumePropKey, value: ContractVolumepropV));
            }

            private void GetCQGTimedBarClassHigh(QueryInfo query, object[] args)
            {
                CQGTimedBar HighObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HighpropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
            }

            private void GetCQGTimedBarClassHLC3(QueryInfo query, object[] args)
            {
                CQGTimedBar HLC3Obj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HLC3propV = HLC3Obj.HLC3;
                var HLC3PropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3propV));
            }

            private void GetCQGTimedBarClassLow(QueryInfo query, object[] args)
            {
                CQGTimedBar LowObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double LowpropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
            }

            private void GetCQGTimedBarClassMid(QueryInfo query, object[] args)
            {
                CQGTimedBar MidObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MidpropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
            }

            private void GetCQGTimedBarClassOpen(QueryInfo query, object[] args)
            {
                CQGTimedBar OpenObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double OpenpropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
            }

            private void GetCQGTimedBarClassOpenInterest(QueryInfo query, object[] args)
            {
                CQGTimedBar OpenInterestObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 OpenInterestpropV = OpenInterestObj.OpenInterest;
                var OpenInterestPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenInterestPropKey, value: OpenInterestpropV));
            }

            private void GetCQGTimedBarClassRange(QueryInfo query, object[] args)
            {
                CQGTimedBar RangeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double RangepropV = RangeObj.Range;
                var RangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangepropV));
            }

            private void GetCQGTimedBarClassTickVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar TickVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TickVolumepropV = TickVolumeObj.TickVolume;
                var TickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumepropV));
            }

            private void GetCQGTimedBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTimedBar TimestampObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGTimedBarClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGTimedBar TrueHighObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
            }

            private void GetCQGTimedBarClassTrueLow(QueryInfo query, object[] args)
            {
                CQGTimedBar TrueLowObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
            }

            private void GetCQGTimedBarClassTrueRange(QueryInfo query, object[] args)
            {
                CQGTimedBar TrueRangeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueRangepropV = TrueRangeObj.TrueRange;
                var TrueRangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangepropV));
            }

            private void GetCQGTimedBarsClassCount(QueryInfo query, object[] args)
            {
                CQGTimedBars CountObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTimedBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGTimedBars EndTimestampObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGTimedBarsClassId(QueryInfo query, object[] args)
            {
                CQGTimedBars IdObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGTimedBarsClassItem(QueryInfo query, object[] args)
            {
                CQGTimedBars ItemObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTimedBar ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTimedBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGTimedBars LastErrorObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGTimedBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGTimedBars RequestObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTimedBarsRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGTimedBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGTimedBars StartTimestampObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGTimedBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGTimedBars StatusObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGTimedBarsClassTag(QueryInfo query, object[] args)
            {
                CQGTimedBars TagObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGTimedBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection CountObj = (CQGTimedBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTimedBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection ItemObj = (CQGTimedBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTimedBars ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTimedBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection ItemByIdObj = (CQGTimedBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTimedBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGTimedBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest ContinuationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGTimedBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest DaysBeforeExpirationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGTimedBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest EqualizeClosesObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGTimedBarsRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest HistoricalPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
            }

            private void GetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IgnoreEventsOnHistoricalBarsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IgnoreEventsOnHistoricalBarspropV = IgnoreEventsOnHistoricalBarsObj.IgnoreEventsOnHistoricalBars;
                var IgnoreEventsOnHistoricalBarsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IgnoreEventsOnHistoricalBarsPropKey, value: IgnoreEventsOnHistoricalBarspropV));
            }

            private void GetCQGTimedBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IncludeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGTimedBarsRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IntradayPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
            }

            private void GetCQGTimedBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest RangeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGTimedBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest RangeStartObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGTimedBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SessionFlagsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGTimedBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SessionsFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGTimedBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SymbolObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGTimedBarsRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest TickFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTickFilter TickFilterpropV = TickFilterObj.TickFilter;
                var TickFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterpropV));
            }

            private void GetCQGTimedBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest UpdatesEnabledObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void GetCQGTradeClassGroupID(QueryInfo query, object[] args)
            {
                CQGTrade GroupIDObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 GroupIDpropV = GroupIDObj.GroupID;
                var GroupIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GroupIDPropKey, value: GroupIDpropV));
            }

            private void GetCQGTradeClassIsMatched(QueryInfo query, object[] args)
            {
                CQGTrade IsMatchedObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsMatchedpropV = IsMatchedObj.IsMatched;
                var IsMatchedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsMatchedPropKey, value: IsMatchedpropV));
            }

            private void GetCQGTradeClassPrice(QueryInfo query, object[] args)
            {
                CQGTrade PriceObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGTradeClassQuantity(QueryInfo query, object[] args)
            {
                CQGTrade QuantityObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGTradeClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGTrade ServerTimestampObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGTradeClassSide(QueryInfo query, object[] args)
            {
                CQGTrade SideObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderSide SidepropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
            }

            private void GetCQGTradeClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTrade TimestampObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGTradeEntriesClassCount(QueryInfo query, object[] args)
            {
                CQGTradeEntries CountObj = (CQGTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradeEntriesClassItem(QueryInfo query, object[] args)
            {
                CQGTradeEntries ItemObj = (CQGTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeEntry ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradeEntryClassCanPlaceOrderSignal(QueryInfo query, object[] args)
            {
                CQGTradeEntry CanPlaceOrderSignalObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean CanPlaceOrderSignalpropV = CanPlaceOrderSignalObj.CanPlaceOrderSignal;
                var CanPlaceOrderSignalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanPlaceOrderSignalPropKey, value: CanPlaceOrderSignalpropV));
            }

            private void GetCQGTradeEntryClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradeEntry DefinitionObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeEntryDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradeEntryClassPrice(QueryInfo query, object[] args)
            {
                CQGTradeEntry PriceObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGTradeEntryClassQuantity(QueryInfo query, object[] args)
            {
                CQGTradeEntry QuantityObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGTradeEntryClassRelatedExits(QueryInfo query, object[] args)
            {
                CQGTradeEntry RelatedExitsObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExits RelatedExitspropV = RelatedExitsObj.RelatedExits;
                var RelatedExitsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RelatedExitsPropKey, RelatedExitspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RelatedExitsPropKey));
            }

            private void GetCQGTradeEntryClassSignal(QueryInfo query, object[] args)
            {
                CQGTradeEntry SignalObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean SignalpropV = SignalObj.Signal;
                var SignalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SignalPropKey, value: SignalpropV));
            }

            private void GetCQGTradeEntryClassStopLimitPrice(QueryInfo query, object[] args)
            {
                CQGTradeEntry StopLimitPriceObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double StopLimitPricepropV = StopLimitPriceObj.StopLimitPrice;
                var StopLimitPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricepropV));
            }

            private void GetCQGTradeEntryClassTrade(QueryInfo query, object[] args)
            {
                CQGTradeEntry TradeObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTrade TradepropV = TradeObj.Trade;
                var TradePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
            }

            private void GetCQGTradeEntryDefinitionClassAllowEntryOnExit(QueryInfo query, object[] args)
            {
                CQGTradeEntryDefinition AllowEntryOnExitObj = (CQGTradeEntryDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean AllowEntryOnExitpropV = AllowEntryOnExitObj.AllowEntryOnExit;
                var AllowEntryOnExitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowEntryOnExitPropKey, value: AllowEntryOnExitpropV));
            }

            private void GetCQGTradeEntryDefinitionClassAllowPyramids(QueryInfo query, object[] args)
            {
                CQGTradeEntryDefinition AllowPyramidsObj = (CQGTradeEntryDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean AllowPyramidspropV = AllowPyramidsObj.AllowPyramids;
                var AllowPyramidsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowPyramidsPropKey, value: AllowPyramidspropV));
            }

            private void GetCQGTradeEntryDefinitionClassOrderType(QueryInfo query, object[] args)
            {
                CQGTradeEntryDefinition OrderTypeObj = (CQGTradeEntryDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderType OrderTypepropV = OrderTypeObj.OrderType;
                var OrderTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderTypePropKey, value: OrderTypepropV));
            }

            private void GetCQGTradeExitClassCanPlaceOrderSignal(QueryInfo query, object[] args)
            {
                CQGTradeExit CanPlaceOrderSignalObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean CanPlaceOrderSignalpropV = CanPlaceOrderSignalObj.CanPlaceOrderSignal;
                var CanPlaceOrderSignalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanPlaceOrderSignalPropKey, value: CanPlaceOrderSignalpropV));
            }

            private void GetCQGTradeExitClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradeExit DefinitionObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExitDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradeExitClassPrice(QueryInfo query, object[] args)
            {
                CQGTradeExit PriceObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PricepropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
            }

            private void GetCQGTradeExitClassQuantity(QueryInfo query, object[] args)
            {
                CQGTradeExit QuantityObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 QuantitypropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
            }

            private void GetCQGTradeExitClassRelatedEntries(QueryInfo query, object[] args)
            {
                CQGTradeExit RelatedEntriesObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeEntries RelatedEntriespropV = RelatedEntriesObj.RelatedEntries;
                var RelatedEntriesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RelatedEntriesPropKey, RelatedEntriespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RelatedEntriesPropKey));
            }

            private void GetCQGTradeExitClassSignal(QueryInfo query, object[] args)
            {
                CQGTradeExit SignalObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean SignalpropV = SignalObj.Signal;
                var SignalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SignalPropKey, value: SignalpropV));
            }

            private void GetCQGTradeExitClassStopLimitPrice(QueryInfo query, object[] args)
            {
                CQGTradeExit StopLimitPriceObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double StopLimitPricepropV = StopLimitPriceObj.StopLimitPrice;
                var StopLimitPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricepropV));
            }

            private void GetCQGTradeExitClassTrade(QueryInfo query, object[] args)
            {
                CQGTradeExit TradeObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTrade TradepropV = TradeObj.Trade;
                var TradePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
            }

            private void GetCQGTradeExitDefinitionClassAllowExitOnEntry(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition AllowExitOnEntryObj = (CQGTradeExitDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean AllowExitOnEntrypropV = AllowExitOnEntryObj.AllowExitOnEntry;
                var AllowExitOnEntryPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowExitOnEntryPropKey, value: AllowExitOnEntrypropV));
            }

            private void GetCQGTradeExitDefinitionClassAllowMoreThanOnce(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition AllowMoreThanOnceObj = (CQGTradeExitDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean AllowMoreThanOncepropV = AllowMoreThanOnceObj.AllowMoreThanOnce;
                var AllowMoreThanOncePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowMoreThanOncePropKey, value: AllowMoreThanOncepropV));
            }

            private void GetCQGTradeExitDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition NameObj = (CQGTradeExitDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGTradeExitDefinitionClassOrderType(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition OrderTypeObj = (CQGTradeExitDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderType OrderTypepropV = OrderTypeObj.OrderType;
                var OrderTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderTypePropKey, value: OrderTypepropV));
            }

            private void GetCQGTradeExitDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions CountObj = (CQGTradeExitDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradeExitDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions ItemObj = (CQGTradeExitDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExitDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradeExitDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions ItemByNameObj = (CQGTradeExitDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExitDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGTradeExitsClassCount(QueryInfo query, object[] args)
            {
                CQGTradeExits CountObj = (CQGTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradeExitsClassItem(QueryInfo query, object[] args)
            {
                CQGTradeExits ItemObj = (CQGTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExit ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradeExitsClassItemByName(QueryInfo query, object[] args)
            {
                CQGTradeExits ItemByNameObj = (CQGTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExit ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGTradesClassCount(QueryInfo query, object[] args)
            {
                CQGTrades CountObj = (CQGTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradesClassItem(QueryInfo query, object[] args)
            {
                CQGTrades ItemObj = (CQGTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTrade ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemBaseBarParameterClassName(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter NameObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGTradingSystemBaseBarParameterClassType(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter TypeObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTradingSystemBaseBarParameter TypepropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
            }

            private void GetCQGTradingSystemBaseBarParameterClassValue(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter ValueObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object ValuepropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
            }

            private void GetCQGTradingSystemBaseBarParametersClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameters CountObj = (CQGTradingSystemBaseBarParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradingSystemBaseBarParametersClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameters ItemObj = (CQGTradingSystemBaseBarParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemBaseBarParameter ItempropV = ItemObj[(CQG.eTradingSystemBaseBarParameter)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradingSystem DefinitionObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradingSystemClassId(QueryInfo query, object[] args)
            {
                CQGTradingSystem IdObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGTradingSystemClassLastError(QueryInfo query, object[] args)
            {
                CQGTradingSystem LastErrorObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGTradingSystemClassRequest(QueryInfo query, object[] args)
            {
                CQGTradingSystem RequestObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGTradingSystemClassStatistics(QueryInfo query, object[] args)
            {
                CQGTradingSystem StatisticsObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemStatisticsCollection StatisticspropV = StatisticsObj.Statistics;
                var StatisticsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(StatisticsPropKey, StatisticspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsPropKey));
            }

            private void GetCQGTradingSystemClassStatus(QueryInfo query, object[] args)
            {
                CQGTradingSystem StatusObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGTradingSystemClassTag(QueryInfo query, object[] args)
            {
                CQGTradingSystem TagObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGTradingSystemClassTradesRows(QueryInfo query, object[] args)
            {
                CQGTradingSystem TradesRowsObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTradesRows TradesRowspropV = TradesRowsObj.TradesRows;
                var TradesRowsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradesRowsPropKey, TradesRowspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradesRowsPropKey));
            }

            private void GetCQGTradingSystemDefinitionClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition AbbreviationObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
            }

            private void GetCQGTradingSystemDefinitionClassCommission(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition CommissionObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double CommissionpropV = CommissionObj.Commission;
                var CommissionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommissionPropKey, value: CommissionpropV));
            }

            private void GetCQGTradingSystemDefinitionClassCommissionType(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition CommissionTypeObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTradingSystemCommissionType CommissionTypepropV = CommissionTypeObj.CommissionType;
                var CommissionTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommissionTypePropKey, value: CommissionTypepropV));
            }

            private void GetCQGTradingSystemDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition NameObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGTradingSystemDefinitionClassParameterDefinitions(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition ParameterDefinitionsObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGParameterDefinitions ParameterDefinitionspropV = ParameterDefinitionsObj.ParameterDefinitions;
                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
            }

            private void GetCQGTradingSystemDefinitionClassTradeDefinitions(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition TradeDefinitionsObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTradeDefinitions TradeDefinitionspropV = TradeDefinitionsObj.TradeDefinitions;
                var TradeDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeDefinitionsPropKey, TradeDefinitionspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeDefinitionsPropKey));
            }

            private void GetCQGTradingSystemDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions CountObj = (CQGTradingSystemDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradingSystemDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions ItemObj = (CQGTradingSystemDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemDefinitionsClassItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions ItemByAbbreviationObj = (CQGTradingSystemDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemDefinition ItemByAbbreviationpropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
            }

            private void GetCQGTradingSystemInsertInfoClassIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemInsertInfo IndexObj = (CQGTradingSystemInsertInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IndexpropV = IndexObj.Index;
                var IndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexpropV));
            }

            private void GetCQGTradingSystemRelationAddInfoClassEntry(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo EntryObj = (CQGTradingSystemRelationAddInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeEntry EntrypropV = EntryObj.Entry;
                var EntryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(EntryPropKey, EntrypropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryPropKey));
            }

            private void GetCQGTradingSystemRelationAddInfoClassEntryRowIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo EntryRowIndexObj = (CQGTradingSystemRelationAddInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 EntryRowIndexpropV = EntryRowIndexObj.EntryRowIndex;
                var EntryRowIndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryRowIndexPropKey, value: EntryRowIndexpropV));
            }

            private void GetCQGTradingSystemRelationAddInfoClassExit(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo ExitObj = (CQGTradingSystemRelationAddInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExit ExitpropV = ExitObj.Exit;
                var ExitPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ExitPropKey, ExitpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitPropKey));
            }

            private void GetCQGTradingSystemRelationAddInfoClassExitRowIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo ExitRowIndexObj = (CQGTradingSystemRelationAddInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 ExitRowIndexpropV = ExitRowIndexObj.ExitRowIndex;
                var ExitRowIndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitRowIndexPropKey, value: ExitRowIndexpropV));
            }

            private void GetCQGTradingSystemRemoveInfoClassIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemRemoveInfo IndexObj = (CQGTradingSystemRemoveInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IndexpropV = IndexObj.Index;
                var IndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexpropV));
            }

            private void GetCQGTradingSystemRequestClassBaseBarParameters(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseBarParametersObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemBaseBarParameters BaseBarParameterspropV = BaseBarParametersObj.BaseBarParameters;
                var BaseBarParametersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(BaseBarParametersPropKey, BaseBarParameterspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseBarParametersPropKey));
            }

            private void GetCQGTradingSystemRequestClassBaseBarType(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseBarTypeObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTradingSystemBaseBar BaseBarTypepropV = BaseBarTypeObj.BaseBarType;
                var BaseBarTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseBarTypePropKey, value: BaseBarTypepropV));
            }

            private void GetCQGTradingSystemRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseExpressionObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String BaseExpressionpropV = BaseExpressionObj.BaseExpression;
                var BaseExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionpropV));
            }

            private void GetCQGTradingSystemRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ContinuationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGTradingSystemRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest DaysBeforeExpirationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGTradingSystemRequestClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest DefinitionObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradingSystemRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest EqualizeClosesObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGTradingSystemRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest HistoricalPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
            }

            private void GetCQGTradingSystemRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IncludeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGTradingSystemRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IntradayPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
            }

            private void GetCQGTradingSystemRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ParameterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object ParameterpropV = ParameterObj.Parameter[(System.Object)args[0]];
                var ParameterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterpropV));
            }

            private void GetCQGTradingSystemRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RangeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGTradingSystemRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RangeStartObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGTradingSystemRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RecalcPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGTradingSystemRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SessionFlagsObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGTradingSystemRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SessionsFilterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGTradingSystemRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SubscriptionLevelObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGTradingSystemsClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystems CountObj = (CQGTradingSystems)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradingSystemsClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystems ItemObj = (CQGTradingSystems)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystem ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemsClassItemById(QueryInfo query, object[] args)
            {
                CQGTradingSystems ItemByIdObj = (CQGTradingSystems)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystem ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGTradingSystemStatisticsChangeInfoClassStatistics(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsChangeInfo StatisticsObj = (CQGTradingSystemStatisticsChangeInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemStatistics StatisticspropV = StatisticsObj.Statistics;
                var StatisticsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(StatisticsPropKey, StatisticspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsPropKey));
            }

            private void GetCQGTradingSystemStatisticsClassAverageDuration(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics AverageDurationObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AverageDurationpropV = AverageDurationObj.AverageDuration;
                var AverageDurationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageDurationPropKey, value: AverageDurationpropV));
            }

            private void GetCQGTradingSystemStatisticsClassAverageLoss(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics AverageLossObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AverageLosspropV = AverageLossObj.AverageLoss;
                var AverageLossPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageLossPropKey, value: AverageLosspropV));
            }

            private void GetCQGTradingSystemStatisticsClassAverageProfit(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics AverageProfitObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AverageProfitpropV = AverageProfitObj.AverageProfit;
                var AverageProfitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageProfitPropKey, value: AverageProfitpropV));
            }

            private void GetCQGTradingSystemStatisticsClassAverageWin(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics AverageWinObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AverageWinpropV = AverageWinObj.AverageWin;
                var AverageWinPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageWinPropKey, value: AverageWinpropV));
            }

            private void GetCQGTradingSystemStatisticsClassClosedNetProfit(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ClosedNetProfitObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ClosedNetProfitpropV = ClosedNetProfitObj.ClosedNetProfit;
                var ClosedNetProfitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosedNetProfitPropKey, value: ClosedNetProfitpropV));
            }

            private void GetCQGTradingSystemStatisticsClassCurConsecLosses(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics CurConsecLossesObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double CurConsecLossespropV = CurConsecLossesObj.CurConsecLosses;
                var CurConsecLossesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurConsecLossesPropKey, value: CurConsecLossespropV));
            }

            private void GetCQGTradingSystemStatisticsClassCurConsecWins(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics CurConsecWinsObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double CurConsecWinspropV = CurConsecWinsObj.CurConsecWins;
                var CurConsecWinsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurConsecWinsPropKey, value: CurConsecWinspropV));
            }

            private void GetCQGTradingSystemStatisticsClassCurDrawDown(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics CurDrawDownObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double CurDrawDownpropV = CurDrawDownObj.CurDrawDown;
                var CurDrawDownPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurDrawDownPropKey, value: CurDrawDownpropV));
            }

            private void GetCQGTradingSystemStatisticsClassLinearRegression(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics LinearRegressionObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double LinearRegressionpropV = LinearRegressionObj.LinearRegression;
                var LinearRegressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LinearRegressionPropKey, value: LinearRegressionpropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxClosedDraw(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxClosedDrawObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MaxClosedDrawpropV = MaxClosedDrawObj.MaxClosedDraw;
                var MaxClosedDrawPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxClosedDrawPropKey, value: MaxClosedDrawpropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxConsecLosses(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxConsecLossesObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MaxConsecLossespropV = MaxConsecLossesObj.MaxConsecLosses;
                var MaxConsecLossesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxConsecLossesPropKey, value: MaxConsecLossespropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxConsecWins(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxConsecWinsObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MaxConsecWinspropV = MaxConsecWinsObj.MaxConsecWins;
                var MaxConsecWinsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxConsecWinsPropKey, value: MaxConsecWinspropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxDrawAmount(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxDrawAmountObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MaxDrawAmountpropV = MaxDrawAmountObj.MaxDrawAmount;
                var MaxDrawAmountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxDrawAmountPropKey, value: MaxDrawAmountpropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxDrawDuration(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxDrawDurationObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MaxDrawDurationpropV = MaxDrawDurationObj.MaxDrawDuration;
                var MaxDrawDurationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxDrawDurationPropKey, value: MaxDrawDurationpropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaximumLoss(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaximumLossObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MaximumLosspropV = MaximumLossObj.MaximumLoss;
                var MaximumLossPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaximumLossPropKey, value: MaximumLosspropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaximumWin(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaximumWinObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MaximumWinpropV = MaximumWinObj.MaximumWin;
                var MaximumWinPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaximumWinPropKey, value: MaximumWinpropV));
            }

            private void GetCQGTradingSystemStatisticsClassOpenPosition(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics OpenPositionObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double OpenPositionpropV = OpenPositionObj.OpenPosition;
                var OpenPositionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPositionPropKey, value: OpenPositionpropV));
            }

            private void GetCQGTradingSystemStatisticsClassPercentLong(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics PercentLongObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PercentLongpropV = PercentLongObj.PercentLong;
                var PercentLongPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PercentLongPropKey, value: PercentLongpropV));
            }

            private void GetCQGTradingSystemStatisticsClassPercentWinners(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics PercentWinnersObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double PercentWinnerspropV = PercentWinnersObj.PercentWinners;
                var PercentWinnersPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PercentWinnersPropKey, value: PercentWinnerspropV));
            }

            private void GetCQGTradingSystemStatisticsClassProfitLossRatio(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ProfitLossRatioObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ProfitLossRatiopropV = ProfitLossRatioObj.ProfitLossRatio;
                var ProfitLossRatioPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitLossRatioPropKey, value: ProfitLossRatiopropV));
            }

            private void GetCQGTradingSystemStatisticsClassProfitToMaxDraw(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ProfitToMaxDrawObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ProfitToMaxDrawpropV = ProfitToMaxDrawObj.ProfitToMaxDraw;
                var ProfitToMaxDrawPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitToMaxDrawPropKey, value: ProfitToMaxDrawpropV));
            }

            private void GetCQGTradingSystemStatisticsClassRemoveToNeutral(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics RemoveToNeutralObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double RemoveToNeutralpropV = RemoveToNeutralObj.RemoveToNeutral;
                var RemoveToNeutralPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoveToNeutralPropKey, value: RemoveToNeutralpropV));
            }

            private void GetCQGTradingSystemStatisticsClassReturnRetracement(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ReturnRetracementObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ReturnRetracementpropV = ReturnRetracementObj.ReturnRetracement;
                var ReturnRetracementPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReturnRetracementPropKey, value: ReturnRetracementpropV));
            }

            private void GetCQGTradingSystemStatisticsClassTimePercentage(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TimePercentageObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TimePercentagepropV = TimePercentageObj.TimePercentage;
                var TimePercentagePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimePercentagePropKey, value: TimePercentagepropV));
            }

            private void GetCQGTradingSystemStatisticsClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TimestampObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGTradingSystemStatisticsClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TimestampOffsetObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGTradingSystemStatisticsClassTotalNetProfit(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TotalNetProfitObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TotalNetProfitpropV = TotalNetProfitObj.TotalNetProfit;
                var TotalNetProfitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalNetProfitPropKey, value: TotalNetProfitpropV));
            }

            private void GetCQGTradingSystemStatisticsClassTotalTradeCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TotalTradeCountObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TotalTradeCountpropV = TotalTradeCountObj.TotalTradeCount;
                var TotalTradeCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalTradeCountPropKey, value: TotalTradeCountpropV));
            }

            private void GetCQGTradingSystemStatisticsClassValue(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ValueObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ValuepropV = ValueObj[(CQG.eTradingSystemStatistic)args[0]];
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
            }

            private void GetCQGTradingSystemStatisticsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsCollection CountObj = (CQGTradingSystemStatisticsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradingSystemStatisticsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsCollection ItemObj = (CQGTradingSystemStatisticsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemStatistics ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemTradeClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade DefinitionObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTradeDefinition DefinitionpropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradingSystemTradeClassIsActive(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade IsActiveObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IsActivepropV = IsActiveObj.IsActive;
                var IsActivePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsActivePropKey, value: IsActivepropV));
            }

            private void GetCQGTradingSystemTradeClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TimestampObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGTradingSystemTradeClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TimestampOffsetObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGTradingSystemTradeClassTradeEntry(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TradeEntryObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeEntry TradeEntrypropV = TradeEntryObj.TradeEntry;
                var TradeEntryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeEntryPropKey, TradeEntrypropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeEntryPropKey));
            }

            private void GetCQGTradingSystemTradeClassTradeExits(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TradeExitsObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExits TradeExitspropV = TradeExitsObj.TradeExits;
                var TradeExitsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeExitsPropKey, TradeExitspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeExitsPropKey));
            }

            private void GetCQGTradingSystemTradeClassTradesRow(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TradesRowObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTradesRow TradesRowpropV = TradesRowObj.TradesRow;
                var TradesRowPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradesRowPropKey, TradesRowpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradesRowPropKey));
            }

            private void GetCQGTradingSystemTradeDefinitionClassEntry(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition EntryObj = (CQGTradingSystemTradeDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeEntryDefinition EntrypropV = EntryObj.Entry;
                var EntryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(EntryPropKey, EntrypropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryPropKey));
            }

            private void GetCQGTradingSystemTradeDefinitionClassExits(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition ExitsObj = (CQGTradingSystemTradeDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradeExitDefinitions ExitspropV = ExitsObj.Exits;
                var ExitsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ExitsPropKey, ExitspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitsPropKey));
            }

            private void GetCQGTradingSystemTradeDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition NameObj = (CQGTradingSystemTradeDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String NamepropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
            }

            private void GetCQGTradingSystemTradeDefinitionClassSide(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition SideObj = (CQGTradingSystemTradeDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTradeSide SidepropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
            }

            private void GetCQGTradingSystemTradeDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions CountObj = (CQGTradingSystemTradeDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradingSystemTradeDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions ItemObj = (CQGTradingSystemTradeDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTradeDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemTradeDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions ItemByNameObj = (CQGTradingSystemTradeDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTradeDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGTradingSystemTradesRowClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow CountObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradingSystemTradesRowClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow ItemObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTrade ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemTradesRowClassItemByName(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow ItemByNameObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTrade ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGTradingSystemTradesRowClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow TimestampObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGTradingSystemTradesRowClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow TimestampOffsetObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
            }

            private void GetCQGTradingSystemTradesRowsClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRows CountObj = (CQGTradingSystemTradesRows)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTradingSystemTradesRowsClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRows ItemObj = (CQGTradingSystemTradesRows)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemTradesRow ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemUpdateInfoClassIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemUpdateInfo IndexObj = (CQGTradingSystemUpdateInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 IndexpropV = IndexObj.Index;
                var IndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexpropV));
            }

            private void GetCQGTradingSystemUpdateInfoClassStatisticsChangeInfo(QueryInfo query, object[] args)
            {
                CQGTradingSystemUpdateInfo StatisticsChangeInfoObj = (CQGTradingSystemUpdateInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTradingSystemStatisticsChangeInfo StatisticsChangeInfopropV = StatisticsChangeInfoObj.StatisticsChangeInfo;
                var StatisticsChangeInfoPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(StatisticsChangeInfoPropKey, StatisticsChangeInfopropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsChangeInfoPropKey));
            }

            private void GetCQGTransactionClassExecutionId(QueryInfo query, object[] args)
            {
                CQGTransaction ExecutionIdObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String ExecutionIdpropV = ExecutionIdObj.ExecutionId;
                var ExecutionIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionIdPropKey, value: ExecutionIdpropV));
            }

            private void GetCQGTransactionClassFill(QueryInfo query, object[] args)
            {
                CQGTransaction FillObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGFill FillpropV = FillObj.Fill;
                var FillPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(FillPropKey, FillpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillPropKey));
            }

            private void GetCQGTransactionClassHangOrderIds(QueryInfo query, object[] args)
            {
                CQGTransaction HangOrderIdsObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStringCollection HangOrderIdspropV = HangOrderIdsObj.HangOrderIds;
                var HangOrderIdsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(HangOrderIdsPropKey, HangOrderIdspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HangOrderIdsPropKey));
            }

            private void GetCQGTransactionClassHangQuantity(QueryInfo query, object[] args)
            {
                CQGTransaction HangQuantityObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 HangQuantitypropV = HangQuantityObj.HangQuantity;
                var HangQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HangQuantityPropKey, value: HangQuantitypropV));
            }

            private void GetCQGTransactionClassId(QueryInfo query, object[] args)
            {
                CQGTransaction IdObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGTransactionClassOrder(QueryInfo query, object[] args)
            {
                CQGTransaction OrderObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGOrder OrderpropV = OrderObj.Order;
                var OrderPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
            }

            private void GetCQGTransactionClassProperties(QueryInfo query, object[] args)
            {
                CQGTransaction PropertiesObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGModifiedProperties PropertiespropV = PropertiesObj.Properties;
                var PropertiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiespropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
            }

            private void GetCQGTransactionClassRejectReason(QueryInfo query, object[] args)
            {
                CQGTransaction RejectReasonObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String RejectReasonpropV = RejectReasonObj.RejectReason;
                var RejectReasonPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RejectReasonPropKey, value: RejectReasonpropV));
            }

            private void GetCQGTransactionClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGTransaction ServerTimestampObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
            }

            private void GetCQGTransactionClassStatus(QueryInfo query, object[] args)
            {
                CQGTransaction StatusObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eOrderEvent StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGTransactionClassStrategyLegFills(QueryInfo query, object[] args)
            {
                CQGTransaction StrategyLegFillsObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGStrategyLegFills StrategyLegFillspropV = StrategyLegFillsObj.StrategyLegFills;
                var StrategyLegFillsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(StrategyLegFillsPropKey, StrategyLegFillspropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrategyLegFillsPropKey));
            }

            private void GetCQGTransactionClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTransaction TimestampObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGTransactionsClassCount(QueryInfo query, object[] args)
            {
                CQGTransactions CountObj = (CQGTransactions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGTransactionsClassItem(QueryInfo query, object[] args)
            {
                CQGTransactions ItemObj = (CQGTransactions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTransaction ItempropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTransactionsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGTransactions ItemByIndexObj = (CQGTransactions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGTransaction ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGYieldClassAvg(QueryInfo query, object[] args)
            {
                CQGYield AvgObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double AvgpropV = AvgObj.Avg;
                var AvgPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgpropV));
            }

            private void GetCQGYieldClassClose(QueryInfo query, object[] args)
            {
                CQGYield CloseObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double ClosepropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
            }

            private void GetCQGYieldClassHigh(QueryInfo query, object[] args)
            {
                CQGYield HighObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HighpropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
            }

            private void GetCQGYieldClassHLC3(QueryInfo query, object[] args)
            {
                CQGYield HLC3Obj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double HLC3propV = HLC3Obj.HLC3;
                var HLC3PropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3propV));
            }

            private void GetCQGYieldClassLow(QueryInfo query, object[] args)
            {
                CQGYield LowObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double LowpropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
            }

            private void GetCQGYieldClassMid(QueryInfo query, object[] args)
            {
                CQGYield MidObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double MidpropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
            }

            private void GetCQGYieldClassOpen(QueryInfo query, object[] args)
            {
                CQGYield OpenObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double OpenpropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
            }

            private void GetCQGYieldClassRange(QueryInfo query, object[] args)
            {
                CQGYield RangeObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double RangepropV = RangeObj.Range;
                var RangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangepropV));
            }

            private void GetCQGYieldClassTimestamp(QueryInfo query, object[] args)
            {
                CQGYield TimestampObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
            }

            private void GetCQGYieldClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGYield TrueHighObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
            }

            private void GetCQGYieldClassTrueLow(QueryInfo query, object[] args)
            {
                CQGYield TrueLowObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
            }

            private void GetCQGYieldClassTrueRange(QueryInfo query, object[] args)
            {
                CQGYield TrueRangeObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Double TrueRangepropV = TrueRangeObj.TrueRange;
                var TrueRangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangepropV));
            }

            private void GetCQGYieldsClassCount(QueryInfo query, object[] args)
            {
                CQGYields CountObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGYieldsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGYields EndTimestampObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
            }

            private void GetCQGYieldsClassId(QueryInfo query, object[] args)
            {
                CQGYields IdObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String IdpropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
            }

            private void GetCQGYieldsClassItem(QueryInfo query, object[] args)
            {
                CQGYields ItemObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGYield ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGYieldsClassLastError(QueryInfo query, object[] args)
            {
                CQGYields LastErrorObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGYieldsClassRequest(QueryInfo query, object[] args)
            {
                CQGYields RequestObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGYieldsRequest RequestpropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGYieldsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGYields StartTimestampObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
            }

            private void GetCQGYieldsClassStatus(QueryInfo query, object[] args)
            {
                CQGYields StatusObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
            }

            private void GetCQGYieldsClassTag(QueryInfo query, object[] args)
            {
                CQGYields TagObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
            }

            private void GetCQGYieldsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGYieldsCollection CountObj = (CQGYieldsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 CountpropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
            }

            private void GetCQGYieldsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGYieldsCollection ItemObj = (CQGYieldsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGYields ItempropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGYieldsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGYieldsCollection ItemByIdObj = (CQGYieldsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.CQGYields ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGYieldsRequestClassCompound(QueryInfo query, object[] args)
            {
                CQGYieldsRequest CompoundObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eYieldCompound CompoundpropV = CompoundObj.Compound;
                var CompoundPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CompoundPropKey, value: CompoundpropV));
            }

            private void GetCQGYieldsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ContinuationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
            }

            private void GetCQGYieldsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGYieldsRequest DaysBeforeExpirationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
            }

            private void GetCQGYieldsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGYieldsRequest EqualizeClosesObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
            }

            private void GetCQGYieldsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGYieldsRequest IncludeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
            }

            private void GetCQGYieldsRequestClassModel(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ModelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eYieldModel ModelpropV = ModelObj.Model;
                var ModelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ModelPropKey, value: ModelpropV));
            }

            private void GetCQGYieldsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RangeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
            }

            private void GetCQGYieldsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RangeStartObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
            }

            private void GetCQGYieldsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RecalcPeriodObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
            }

            private void GetCQGYieldsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SessionFlagsObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
            }

            private void GetCQGYieldsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SessionsFilterObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
            }

            private void GetCQGYieldsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SubscriptionLevelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
            }

            private void GetCQGYieldsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SymbolObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.String SymbolpropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
            }

            private void GetCQGYieldsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGYieldsRequest UpdatesEnabledObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
            }

            private void SetCQGAccountClassAccountMarginDetailing(QueryInfo query, object[] args)
            {
                CQGAccount AccountMarginDetailingObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AccountMarginDetailingval = (CQG.eAccountMarginDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountMarginDetailingObj.AccountMarginDetailing = AccountMarginDetailingval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAccountClassAutoSubscribeInstruments(QueryInfo query, object[] args)
            {
                CQGAccount AutoSubscribeInstrumentsObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AutoSubscribeInstrumentsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AutoSubscribeInstrumentsObj.AutoSubscribeInstruments = AutoSubscribeInstrumentsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAccountClassPositionSubcriptionLevel(QueryInfo query, object[] args)
            {
                CQGAccount PositionSubcriptionLevelObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PositionSubcriptionLevelval = (CQG.ePositionSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PositionSubcriptionLevelObj.PositionSubcriptionLevel = PositionSubcriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyClassTag(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy TagObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest BaseExpressionObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseExpressionObj.BaseExpression = BaseExpressionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ContinuationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest DaysBeforeExpirationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest EqualizeClosesObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest HistoricalPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IncludeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IntradayPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ParameterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RangeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RangeStartObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RecalcPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SessionFlagsObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SessionsFilterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SubscriptionLevelObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest UpdatesEnabledObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassDefaultValue(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition DefaultValueObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultValueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultValueObj.DefaultValue = DefaultValueval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition DefaultValueIndexObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultValueIndexval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultValueIndexObj.DefaultValueIndex = DefaultValueIndexval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition NameObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Nameval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NameObj.Name = Nameval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassType(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition TypeObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Typeval = (CQG.eAlgorithmicOrderPropertyType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TypeObj.Type = Typeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassUnit(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition UnitObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Unitval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UnitObj.Unit = Unitval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval(QueryInfo query, object[] args)
            {
                CQGAPIConfig AccountMarginAndPositionsThrottleIntervalObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AccountMarginAndPositionsThrottleIntervalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountMarginAndPositionsThrottleIntervalObj.AccountMarginAndPositionsThrottleInterval = AccountMarginAndPositionsThrottleIntervalval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassAgeToDeleteLogFileDays(QueryInfo query, object[] args)
            {
                CQGAPIConfig AgeToDeleteLogFileDaysObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AgeToDeleteLogFileDaysval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AgeToDeleteLogFileDaysObj.AgeToDeleteLogFileDays = AgeToDeleteLogFileDaysval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassApplyDaylightSavingChanges(QueryInfo query, object[] args)
            {
                CQGAPIConfig ApplyDaylightSavingChangesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var ApplyDaylightSavingChangesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ApplyDaylightSavingChangesObj.ApplyDaylightSavingChanges = ApplyDaylightSavingChangesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassCollectionsThrowException(QueryInfo query, object[] args)
            {
                CQGAPIConfig CollectionsThrowExceptionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var CollectionsThrowExceptionval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                CollectionsThrowExceptionObj.CollectionsThrowException = CollectionsThrowExceptionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDefaultAccountMarginDetailing(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultAccountMarginDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultAccountMarginDetailingval = (CQG.eAccountMarginDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultAccountMarginDetailingObj.DefaultAccountMarginDetailing = DefaultAccountMarginDetailingval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDefaultInstrumentBBAType(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultInstrumentBBATypeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultInstrumentBBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultInstrumentBBATypeObj.DefaultInstrumentBBAType = DefaultInstrumentBBATypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultInstrumentSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultInstrumentSubscriptionLevelval = (CQG.eDataSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultInstrumentSubscriptionLevelObj.DefaultInstrumentSubscriptionLevel = DefaultInstrumentSubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDefPositionSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefPositionSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefPositionSubscriptionLevelval = (CQG.ePositionSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefPositionSubscriptionLevelObj.DefPositionSubscriptionLevel = DefPositionSubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDOMUpdatesMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig DOMUpdatesModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMUpdatesModeval = (CQG.eDOMUpdatesMode)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMUpdatesModeObj.DOMUpdatesMode = DOMUpdatesModeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDOMUpdatesPeriod(QueryInfo query, object[] args)
            {
                CQGAPIConfig DOMUpdatesPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMUpdatesPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMUpdatesPeriodObj.DOMUpdatesPeriod = DOMUpdatesPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassFireEventOnChangedPrices(QueryInfo query, object[] args)
            {
                CQGAPIConfig FireEventOnChangedPricesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var FireEventOnChangedPricesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                FireEventOnChangedPricesObj.FireEventOnChangedPrices = FireEventOnChangedPricesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassGatewayEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig GatewayEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var GatewayEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                GatewayEnabledObj.GatewayEnabled = GatewayEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassIncludeOrderTransactions(QueryInfo query, object[] args)
            {
                CQGAPIConfig IncludeOrderTransactionsObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeOrderTransactionsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeOrderTransactionsObj.IncludeOrderTransactions = IncludeOrderTransactionsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassLogSeverity(QueryInfo query, object[] args)
            {
                CQGAPIConfig LogSeverityObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var LogSeverityval = (CQG.eLogSeverity)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                LogSeverityObj.LogSeverity = LogSeverityval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMaxLogFileCount(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileCountObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MaxLogFileCountval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MaxLogFileCountObj.MaxLogFileCount = MaxLogFileCountval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMaxLogFileDuration(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileDurationObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MaxLogFileDurationval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MaxLogFileDurationObj.MaxLogFileDuration = MaxLogFileDurationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMaxLogFileSize(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileSizeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MaxLogFileSizeval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MaxLogFileSizeObj.MaxLogFileSize = MaxLogFileSizeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMessageProcessingTimeout(QueryInfo query, object[] args)
            {
                CQGAPIConfig MessageProcessingTimeoutObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MessageProcessingTimeoutval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MessageProcessingTimeoutObj.MessageProcessingTimeout = MessageProcessingTimeoutval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMetaDataEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig MetaDataEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MetaDataEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MetaDataEnabledObj.MetaDataEnabled = MetaDataEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassNewInstrumentChangeMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig NewInstrumentChangeModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var NewInstrumentChangeModeval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NewInstrumentChangeModeObj.NewInstrumentChangeMode = NewInstrumentChangeModeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassNewInstrumentMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig NewInstrumentModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var NewInstrumentModeval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NewInstrumentModeObj.NewInstrumentMode = NewInstrumentModeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassNonsynchronizedData(QueryInfo query, object[] args)
            {
                CQGAPIConfig NonsynchronizedDataObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var NonsynchronizedDataval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NonsynchronizedDataObj.NonsynchronizedData = NonsynchronizedDataval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassPendingOrderActionEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig PendingOrderActionEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PendingOrderActionEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PendingOrderActionEnabledObj.PendingOrderActionEnabled = PendingOrderActionEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassPositionDetailing(QueryInfo query, object[] args)
            {
                CQGAPIConfig PositionDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PositionDetailingval = (CQG.ePositionDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PositionDetailingObj.PositionDetailing = PositionDetailingval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassPriceMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig PriceModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PriceModeval = (CQG.ePriceMode)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PriceModeObj.PriceMode = PriceModeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassProviderPassword(QueryInfo query, object[] args)
            {
                CQGAPIConfig ProviderPasswordObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var ProviderPasswordval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ProviderPasswordObj.ProviderPassword = ProviderPasswordval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassQueryAllAuthorizedTraders(QueryInfo query, object[] args)
            {
                CQGAPIConfig QueryAllAuthorizedTradersObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var QueryAllAuthorizedTradersval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                QueryAllAuthorizedTradersObj.QueryAllAuthorizedTraders = QueryAllAuthorizedTradersval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassReadyStatusCheck(QueryInfo query, object[] args)
            {
                CQGAPIConfig ReadyStatusCheckObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var ReadyStatusCheckval = (CQG.eReadyStatusCheck)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ReadyStatusCheckObj.ReadyStatusCheck = ReadyStatusCheckval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassRemoteOpenAPILoginService(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPILoginServiceObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RemoteOpenAPILoginServiceval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RemoteOpenAPILoginServiceObj.RemoteOpenAPILoginService = RemoteOpenAPILoginServiceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassRemoteOpenAPIServer(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPIServerObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RemoteOpenAPIServerval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RemoteOpenAPIServerObj.RemoteOpenAPIServer = RemoteOpenAPIServerval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassReplaceLoginSession(QueryInfo query, object[] args)
            {
                CQGAPIConfig ReplaceLoginSessionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var ReplaceLoginSessionval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ReplaceLoginSessionObj.ReplaceLoginSession = ReplaceLoginSessionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassSnapshotPeriod(QueryInfo query, object[] args)
            {
                CQGAPIConfig SnapshotPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SnapshotPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SnapshotPeriodObj.SnapshotPeriod = SnapshotPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassStrategyManagerEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig StrategyManagerEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var StrategyManagerEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                StrategyManagerEnabledObj.StrategyManagerEnabled = StrategyManagerEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassTimeZoneCode(QueryInfo query, object[] args)
            {
                CQGAPIConfig TimeZoneCodeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TimeZoneCodeval = (CQG.eTimeZone)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TimeZoneCodeObj.TimeZoneCode = TimeZoneCodeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassUsedFromATLClient(QueryInfo query, object[] args)
            {
                CQGAPIConfig UsedFromATLClientObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UsedFromATLClientval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UsedFromATLClientObj.UsedFromATLClient = UsedFromATLClientval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassUseOrderSide(QueryInfo query, object[] args)
            {
                CQGAPIConfig UseOrderSideObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UseOrderSideval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UseOrderSideObj.UseOrderSide = UseOrderSideval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCELClassAccountSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGCEL AccountSubscriptionLevelObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AccountSubscriptionLevelval = (CQG.eAccountSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountSubscriptionLevelObj.AccountSubscriptionLevel = AccountSubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCELClassConfiguration(QueryInfo query, object[] args)
            {
                CQGCEL ConfigurationObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Configurationval = (CQG.CQGCELConfiguration)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ConfigurationObj.set_Configuration(ref Configurationval);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionClassTag(QueryInfo query, object[] args)
            {
                CQGCondition TagObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGConditionRequest BaseExpressionObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseExpressionObj.BaseExpression = BaseExpressionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGConditionRequest ContinuationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGConditionRequest DaysBeforeExpirationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGConditionRequest EqualizeClosesObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest HistoricalPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGConditionRequest IncludeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest IntradayPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGConditionRequest ParameterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGConditionRequest RangeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGConditionRequest RangeStartObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest RecalcPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGConditionRequest SessionFlagsObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGConditionRequest SessionsFilterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGConditionRequest SubscriptionLevelObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGConditionRequest UpdatesEnabledObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsClassTag(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars TagObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest ContinuationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest DaysBeforeExpirationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest EqualizeClosesObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest IncludeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassIncludeFlatTicks(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest IncludeFlatTicksObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeFlatTicksval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeFlatTicksObj.IncludeFlatTicks = IncludeFlatTicksval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RangeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RangeStartObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RecalcPeriodObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SessionFlagsObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SessionsFilterObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SubscriptionLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SymbolObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest UpdatesEnabledObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassVolumeLevel(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest VolumeLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var VolumeLevelval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                VolumeLevelObj.VolumeLevel = VolumeLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassVolumeType(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest VolumeTypeObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var VolumeTypeval = (CQG.eCvbVolumeType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                VolumeTypeObj.VolumeType = VolumeTypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyClassTag(QueryInfo query, object[] args)
            {
                CQGCustomStudy TagObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest BaseExpressionObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseExpressionObj.BaseExpression = BaseExpressionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ContinuationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest DaysBeforeExpirationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest EqualizeClosesObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest HistoricalPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IncludeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IntradayPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ParameterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RangeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RangeStartObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RecalcPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SessionFlagsObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SessionsFilterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SubscriptionLevelObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest UpdatesEnabledObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExecutionPatternParameterClassValue(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter ValueObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Valueval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ValueObj.Value = Valueval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionClassTag(QueryInfo query, object[] args)
            {
                CQGExpression TagObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGExpressionRequest ContinuationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGExpressionRequest DaysBeforeExpirationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGExpressionRequest EqualizeClosesObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest HistoricalPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGExpressionRequest IncludeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest IntradayPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RangeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RangeStartObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RecalcPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SessionFlagsObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SessionsFilterObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SubscriptionLevelObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGExpressionRequest UpdatesEnabledObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGHistoricalSessionsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest RangeEndObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGHistoricalSessionsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest RangeStartObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGHistoricalSessionsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest SymbolObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGHistoricalSessionsRequestClassType(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest TypeObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Typeval = (CQG.eHistoricalSessionsRequestType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TypeObj.Type = Typeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassBBAType(QueryInfo query, object[] args)
            {
                CQGInstrument BBATypeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BBATypeObj.BBAType = BBATypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassDataSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGInstrument DataSubscriptionLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DataSubscriptionLevelval = (CQG.eDataSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DataSubscriptionLevelObj.DataSubscriptionLevel = DataSubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassDOMBookLimit(QueryInfo query, object[] args)
            {
                CQGInstrument DOMBookLimitObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMBookLimitval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMBookLimitObj.DOMBookLimit = DOMBookLimitval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassDOMStatus(QueryInfo query, object[] args)
            {
                CQGInstrument DOMStatusObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMStatusval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMStatusObj.DOMStatus = DOMStatusval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassTag(QueryInfo query, object[] args)
            {
                CQGInstrument TagObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassCommodity(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest CommodityObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Commodityval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                CommodityObj.Commodity = Commodityval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassInstrumentTypes(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest InstrumentTypesObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var InstrumentTypesval = (CQG.eInstrumentType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                InstrumentTypesObj.InstrumentTypes = InstrumentTypesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest RangeEndObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest RangeStartObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest SubscriptionLevelObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eGroupSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassDOMBBAType(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest DOMBBATypeObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMBBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMBBATypeObj.DOMBBAType = DOMBBATypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassDOMStatus(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest DOMStatusObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMStatusval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMStatusObj.DOMStatus = DOMStatusval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassPropertyLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest PropertyLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PropertyLevelval = (CQG.ePropertySubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PropertyLevelObj.PropertyLevel = PropertyLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassQuoteLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest QuoteLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var QuoteLevelval = (CQG.eQuoteSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                QuoteLevelObj.QuoteLevel = QuoteLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest SymbolObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGManualFillRequest GWAccountIDObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var GWAccountIDval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                GWAccountIDObj.GWAccountID = GWAccountIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGManualFillRequest InstrumentNameObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var InstrumentNameval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                InstrumentNameObj.InstrumentName = InstrumentNameval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassNote(QueryInfo query, object[] args)
            {
                CQGManualFillRequest NoteObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Noteval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NoteObj.Note = Noteval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassPrice(QueryInfo query, object[] args)
            {
                CQGManualFillRequest PriceObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Priceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PriceObj.Price = Priceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassQuantity(QueryInfo query, object[] args)
            {
                CQGManualFillRequest QuantityObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Quantityval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                QuantityObj.Quantity = Quantityval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassSide(QueryInfo query, object[] args)
            {
                CQGManualFillRequest SideObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Sideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SideObj.Side = Sideval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassStatementDate(QueryInfo query, object[] args)
            {
                CQGManualFillRequest StatementDateObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var StatementDateval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                StatementDateObj.StatementDate = StatementDateval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassTradeId(QueryInfo query, object[] args)
            {
                CQGManualFillRequest TradeIdObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TradeIdval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TradeIdObj.TradeId = TradeIdval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassTradeTimestamp(QueryInfo query, object[] args)
            {
                CQGManualFillRequest TradeTimestampObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TradeTimestampval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TradeTimestampObj.TradeTimestamp = TradeTimestampval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassAccount(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AccountObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Accountval = (CQG.CQGAccount)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountObj.Account = Accountval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AlgorithmIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AlgorithmStringIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassFromAllTraders(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest FromAllTradersObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var FromAllTradersval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                FromAllTradersObj.FromAllTraders = FromAllTradersval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassInstrument(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest InstrumentObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Instrumentval = (CQG.CQGInstrument)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                InstrumentObj.Instrument = Instrumentval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassOrderSide(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest OrderSideObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var OrderSideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                OrderSideObj.OrderSide = OrderSideval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassParked(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest ParkedObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parkedval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParkedObj.Parked = Parkedval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderChainClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrderChain AlgorithmIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderChainClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrderChain AlgorithmStringIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassAccount(QueryInfo query, object[] args)
            {
                CQGOrder AccountObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Accountval = (CQG.CQGAccount)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountObj.Account = Accountval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrder AlgorithmIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrder AlgorithmStringIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassCancelationInstruction(QueryInfo query, object[] args)
            {
                CQGOrder CancelationInstructionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var CancelationInstructionval = (CQG.eOrderCancelationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                CancelationInstructionObj.CancelationInstruction = CancelationInstructionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassDescription(QueryInfo query, object[] args)
            {
                CQGOrder DescriptionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Descriptionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DescriptionObj.Description = Descriptionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassDurationType(QueryInfo query, object[] args)
            {
                CQGOrder DurationTypeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DurationTypeval = (CQG.eOrderDuration)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DurationTypeObj.DurationType = DurationTypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassInstrument(QueryInfo query, object[] args)
            {
                CQGOrder InstrumentObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Instrumentval = (CQG.CQGInstrument)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                InstrumentObj.Instrument = Instrumentval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassLimitPrice(QueryInfo query, object[] args)
            {
                CQGOrder LimitPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var LimitPriceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                LimitPriceObj.LimitPrice = LimitPriceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassOrderCheckMark(QueryInfo query, object[] args)
            {
                CQGOrder OrderCheckMarkObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var OrderCheckMarkval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                OrderCheckMarkObj.OrderCheckMark = OrderCheckMarkval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassQuantity(QueryInfo query, object[] args)
            {
                CQGOrder QuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Quantityval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                QuantityObj.Quantity = Quantityval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassSide(QueryInfo query, object[] args)
            {
                CQGOrder SideObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Sideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SideObj.Side = Sideval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassStopPrice(QueryInfo query, object[] args)
            {
                CQGOrder StopPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var StopPriceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                StopPriceObj.StopPrice = StopPriceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassTag(QueryInfo query, object[] args)
            {
                CQGOrder TagObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderPropertyClassValue(QueryInfo query, object[] args)
            {
                CQGOrderProperty ValueObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Valueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ValueObj.Value = Valueval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderStatisticsClassSwitch(QueryInfo query, object[] args)
            {
                CQGOrderStatistics SwitchObj = (CQGOrderStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Switchval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SwitchObj.Switch = Switchval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsClassTag(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars TagObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassBoxSize(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest BoxSizeObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BoxSizeval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BoxSizeObj.BoxSize = BoxSizeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassBoxUnits(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest BoxUnitsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BoxUnitsval = (CQG.ePfBoxUnits)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BoxUnitsObj.BoxUnits = BoxUnitsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ContinuationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassDataSource(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest DataSourceObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DataSourceval = (CQG.ePfDataSource)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DataSourceObj.DataSource = DataSourceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest DaysBeforeExpirationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest EqualizeClosesObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest IncludeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RangeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RangeStartObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RecalcPeriodObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassReversal(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ReversalObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Reversalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ReversalObj.Reversal = Reversalval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SessionFlagsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SessionsFilterObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SubscriptionLevelObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SymbolObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest UpdatesEnabledObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsClassTag(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars TagObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest ContinuationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest DaysBeforeExpirationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest EqualizeClosesObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassGapFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest GapFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var GapFilterval = (CQG.eGapFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                GapFilterObj.GapFilter = GapFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest IncludeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassInterval(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest IntervalObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Intervalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntervalObj.Interval = Intervalval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RangeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RangeStartObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RecalcPeriodObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SessionFlagsObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SessionsFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SubscriptionLevelObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SymbolObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest TickFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TickFilterObj.TickFilter = TickFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest UpdatesEnabledObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsClassTag(QueryInfo query, object[] args)
            {
                CQGTFlowBars TagObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassAggregation(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest AggregationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Aggregationval = (CQG.eTfAggregation)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AggregationObj.Aggregation = Aggregationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassAggregationLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest AggregationLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AggregationLevelval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AggregationLevelObj.AggregationLevel = AggregationLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest ContinuationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DaysBeforeExpirationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassDomAskVolumeLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DomAskVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DomAskVolumeLevelval = (CQG.eTFlowRequestDomVolumeLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DomAskVolumeLevelObj.DomAskVolumeLevel = DomAskVolumeLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassDomBidVolumeLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DomBidVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DomBidVolumeLevelval = (CQG.eTFlowRequestDomVolumeLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DomBidVolumeLevelObj.DomBidVolumeLevel = DomBidVolumeLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest EqualizeClosesObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest IncludeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RangeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RangeStartObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RecalcPeriodObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SessionFlagsObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SessionsFilterObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SubscriptionLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SymbolObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest UpdatesEnabledObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksClassTag(QueryInfo query, object[] args)
            {
                CQGTicks TagObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTicksRequest RangeEndObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTicksRequest RangeStartObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTicksRequest SessionsFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTicksRequest SymbolObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGTicksRequest TickFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TickFilterObj.TickFilter = TickFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassType(QueryInfo query, object[] args)
            {
                CQGTicksRequest TypeObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Typeval = (CQG.eTicksRequestType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TypeObj.Type = Typeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsClassTag(QueryInfo query, object[] args)
            {
                CQGTimedBars TagObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest ContinuationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest DaysBeforeExpirationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest EqualizeClosesObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest HistoricalPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IgnoreEventsOnHistoricalBarsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IgnoreEventsOnHistoricalBarsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IgnoreEventsOnHistoricalBarsObj.IgnoreEventsOnHistoricalBars = IgnoreEventsOnHistoricalBarsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IncludeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IntradayPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest RangeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest RangeStartObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SessionFlagsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SessionsFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SymbolObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest TickFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TickFilterObj.TickFilter = TickFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest UpdatesEnabledObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemBaseBarParameterClassValue(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter ValueObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Valueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ValueObj.Value = Valueval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemClassTag(QueryInfo query, object[] args)
            {
                CQGTradingSystem TagObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassBaseBarType(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseBarTypeObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseBarTypeval = (CQG.eTradingSystemBaseBar)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseBarTypeObj.BaseBarType = BaseBarTypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseExpressionObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseExpressionObj.BaseExpression = BaseExpressionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ContinuationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest DaysBeforeExpirationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest EqualizeClosesObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest HistoricalPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IncludeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IntradayPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ParameterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RangeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RangeStartObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RecalcPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SessionFlagsObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SessionsFilterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SubscriptionLevelObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsClassTag(QueryInfo query, object[] args)
            {
                CQGYields TagObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassCompound(QueryInfo query, object[] args)
            {
                CQGYieldsRequest CompoundObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Compoundval = (CQG.eYieldCompound)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                CompoundObj.Compound = Compoundval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ContinuationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGYieldsRequest DaysBeforeExpirationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGYieldsRequest EqualizeClosesObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGYieldsRequest IncludeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassModel(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ModelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Modelval = (CQG.eYieldModel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ModelObj.Model = Modelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RangeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RangeStartObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RecalcPeriodObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SessionFlagsObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SessionsFilterObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SubscriptionLevelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SymbolObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGYieldsRequest UpdatesEnabledObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

    }
}
