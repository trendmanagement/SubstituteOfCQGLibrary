// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
// WARNING                                                                         WARNING
// WARNING    THIS .CS FILE WAS AUTOGENERATED!                                     WARNING
// WARNING    DO NOT EDIT IT BY HAND, BECAUSE ALL YOUR CHANGES WILL BE LOST!       WARNING
// WARNING    MAKE ALL CHANGES DIRECTLY TO THE FILE GENERATOR CODE!                WARNING
// WARNING                                                                         WARNING
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

// Disable two warnings caused by CQG API specific:
// CS3003: Type of 'variable' is not CLS-compliant
// CS3008: Identifier 'identifier' differing only in case is not CLS-compliant
#pragma warning disable 3003, 3008

using CQG;
using FakeCQG.Internal;
using FakeCQG.Internal.Models;
using MongoDB.Driver;
using System.Collections.Generic;
using System.Reflection;

namespace DataCollectionForRealtime
{
    partial class QueryHandler
    {
        private object qObj;
        private delegate void PropDel(QueryInfo query, object[] args);

        private Dictionary<string, PropDel> hMethods; 


        public void InitHMethodDict()
        {
            hMethods = new Dictionary<string, PropDel> 
            {

                    { "Event_ICQGCELEvents_EventAccountChanged", this.Event_ICQGCELEvents_EventAccountChanged},
                    { "Event_ICQGCELEvents_EventAdvancedStudyAdded", this.Event_ICQGCELEvents_EventAdvancedStudyAdded},
                    { "Event_ICQGCELEvents_EventAdvancedStudyDefinitionsResolved", this.Event_ICQGCELEvents_EventAdvancedStudyDefinitionsResolved},
                    { "Event_ICQGCELEvents_EventAdvancedStudyInserted", this.Event_ICQGCELEvents_EventAdvancedStudyInserted},
                    { "Event_ICQGCELEvents_EventAdvancedStudyRemoved", this.Event_ICQGCELEvents_EventAdvancedStudyRemoved},
                    { "Event_ICQGCELEvents_EventAdvancedStudyResolved", this.Event_ICQGCELEvents_EventAdvancedStudyResolved},
                    { "Event_ICQGCELEvents_EventAdvancedStudyUpdated", this.Event_ICQGCELEvents_EventAdvancedStudyUpdated},
                    { "Event_ICQGCELEvents_EventAlgorithmicOrderPlaced", this.Event_ICQGCELEvents_EventAlgorithmicOrderPlaced},
                    { "Event_ICQGCELEvents_EventAlgorithmicOrderRegistrationComplete", this.Event_ICQGCELEvents_EventAlgorithmicOrderRegistrationComplete},
                    { "Event_ICQGCELEvents_EventAllOrdersCanceled", this.Event_ICQGCELEvents_EventAllOrdersCanceled},
                    { "Event_ICQGCELEvents_EventAuthenticationStatusChanged", this.Event_ICQGCELEvents_EventAuthenticationStatusChanged},
                    { "Event_ICQGCELEvents_EventBarsTimestampsResolved", this.Event_ICQGCELEvents_EventBarsTimestampsResolved},
                    { "Event_ICQGCELEvents_EventCELStarted", this.Event_ICQGCELEvents_EventCELStarted},
                    { "Event_ICQGCELEvents_EventCommodityInstrumentsResolved", this.Event_ICQGCELEvents_EventCommodityInstrumentsResolved},
                    { "Event_ICQGCELEvents_EventConditionAdded", this.Event_ICQGCELEvents_EventConditionAdded},
                    { "Event_ICQGCELEvents_EventConditionDefinitionsResolved", this.Event_ICQGCELEvents_EventConditionDefinitionsResolved},
                    { "Event_ICQGCELEvents_EventConditionInserted", this.Event_ICQGCELEvents_EventConditionInserted},
                    { "Event_ICQGCELEvents_EventConditionRemoved", this.Event_ICQGCELEvents_EventConditionRemoved},
                    { "Event_ICQGCELEvents_EventConditionResolved", this.Event_ICQGCELEvents_EventConditionResolved},
                    { "Event_ICQGCELEvents_EventConditionUpdated", this.Event_ICQGCELEvents_EventConditionUpdated},
                    { "Event_ICQGCELEvents_EventConstantVolumeBarsAdded", this.Event_ICQGCELEvents_EventConstantVolumeBarsAdded},
                    { "Event_ICQGCELEvents_EventConstantVolumeBarsInserted", this.Event_ICQGCELEvents_EventConstantVolumeBarsInserted},
                    { "Event_ICQGCELEvents_EventConstantVolumeBarsRemoved", this.Event_ICQGCELEvents_EventConstantVolumeBarsRemoved},
                    { "Event_ICQGCELEvents_EventConstantVolumeBarsResolved", this.Event_ICQGCELEvents_EventConstantVolumeBarsResolved},
                    { "Event_ICQGCELEvents_EventConstantVolumeBarsUpdated", this.Event_ICQGCELEvents_EventConstantVolumeBarsUpdated},
                    { "Event_ICQGCELEvents_EventCurrencyRatesChanged", this.Event_ICQGCELEvents_EventCurrencyRatesChanged},
                    { "Event_ICQGCELEvents_EventCustomSessionsResolved", this.Event_ICQGCELEvents_EventCustomSessionsResolved},
                    { "Event_ICQGCELEvents_EventCustomStudyAdded", this.Event_ICQGCELEvents_EventCustomStudyAdded},
                    { "Event_ICQGCELEvents_EventCustomStudyDefinitionsResolved", this.Event_ICQGCELEvents_EventCustomStudyDefinitionsResolved},
                    { "Event_ICQGCELEvents_EventCustomStudyInserted", this.Event_ICQGCELEvents_EventCustomStudyInserted},
                    { "Event_ICQGCELEvents_EventCustomStudyRemoved", this.Event_ICQGCELEvents_EventCustomStudyRemoved},
                    { "Event_ICQGCELEvents_EventCustomStudyResolved", this.Event_ICQGCELEvents_EventCustomStudyResolved},
                    { "Event_ICQGCELEvents_EventCustomStudyUpdated", this.Event_ICQGCELEvents_EventCustomStudyUpdated},
                    { "Event_ICQGCELEvents_EventDataConnectionStatusChanged", this.Event_ICQGCELEvents_EventDataConnectionStatusChanged},
                    { "Event_ICQGCELEvents_EventDataError", this.Event_ICQGCELEvents_EventDataError},
                    { "Event_ICQGCELEvents_EventDataSourcesResolved", this.Event_ICQGCELEvents_EventDataSourcesResolved},
                    { "Event_ICQGCELEvents_EventDataSourceSymbolsResolved", this.Event_ICQGCELEvents_EventDataSourceSymbolsResolved},
                    { "Event_ICQGCELEvents_EventExpressionAdded", this.Event_ICQGCELEvents_EventExpressionAdded},
                    { "Event_ICQGCELEvents_EventExpressionInserted", this.Event_ICQGCELEvents_EventExpressionInserted},
                    { "Event_ICQGCELEvents_EventExpressionRemoved", this.Event_ICQGCELEvents_EventExpressionRemoved},
                    { "Event_ICQGCELEvents_EventExpressionResolved", this.Event_ICQGCELEvents_EventExpressionResolved},
                    { "Event_ICQGCELEvents_EventExpressionUpdated", this.Event_ICQGCELEvents_EventExpressionUpdated},
                    { "Event_ICQGCELEvents_EventGWConnectionStatusChanged", this.Event_ICQGCELEvents_EventGWConnectionStatusChanged},
                    { "Event_ICQGCELEvents_EventGWEnvironmentChanged", this.Event_ICQGCELEvents_EventGWEnvironmentChanged},
                    { "Event_ICQGCELEvents_EventHistoricalSessionsResolved", this.Event_ICQGCELEvents_EventHistoricalSessionsResolved},
                    { "Event_ICQGCELEvents_EventICConnectionStatusChanged", this.Event_ICQGCELEvents_EventICConnectionStatusChanged},
                    { "Event_ICQGCELEvents_EventIncorrectSymbol", this.Event_ICQGCELEvents_EventIncorrectSymbol},
                    { "Event_ICQGCELEvents_EventInstrumentChanged", this.Event_ICQGCELEvents_EventInstrumentChanged},
                    { "Event_ICQGCELEvents_EventInstrumentDOMChanged", this.Event_ICQGCELEvents_EventInstrumentDOMChanged},
                    { "Event_ICQGCELEvents_EventInstrumentsGroupChanged", this.Event_ICQGCELEvents_EventInstrumentsGroupChanged},
                    { "Event_ICQGCELEvents_EventInstrumentsGroupResolved", this.Event_ICQGCELEvents_EventInstrumentsGroupResolved},
                    { "Event_ICQGCELEvents_EventInstrumentSubscribed", this.Event_ICQGCELEvents_EventInstrumentSubscribed},
                    { "Event_ICQGCELEvents_EventLineTimeChanged", this.Event_ICQGCELEvents_EventLineTimeChanged},
                    { "Event_ICQGCELEvents_EventManualFillChanged", this.Event_ICQGCELEvents_EventManualFillChanged},
                    { "Event_ICQGCELEvents_EventManualFillsResolved", this.Event_ICQGCELEvents_EventManualFillsResolved},
                    { "Event_ICQGCELEvents_EventManualFillUpdateResolved", this.Event_ICQGCELEvents_EventManualFillUpdateResolved},
                    { "Event_ICQGCELEvents_EventOnIdle", this.Event_ICQGCELEvents_EventOnIdle},
                    { "Event_ICQGCELEvents_EventOnQueryProgress", this.Event_ICQGCELEvents_EventOnQueryProgress},
                    { "Event_ICQGCELEvents_EventOrderChanged", this.Event_ICQGCELEvents_EventOrderChanged},
                    { "Event_ICQGCELEvents_EventPasswordChanged", this.Event_ICQGCELEvents_EventPasswordChanged},
                    { "Event_ICQGCELEvents_EventPointAndFigureBarsAdded", this.Event_ICQGCELEvents_EventPointAndFigureBarsAdded},
                    { "Event_ICQGCELEvents_EventPointAndFigureBarsInserted", this.Event_ICQGCELEvents_EventPointAndFigureBarsInserted},
                    { "Event_ICQGCELEvents_EventPointAndFigureBarsRemoved", this.Event_ICQGCELEvents_EventPointAndFigureBarsRemoved},
                    { "Event_ICQGCELEvents_EventPointAndFigureBarsResolved", this.Event_ICQGCELEvents_EventPointAndFigureBarsResolved},
                    { "Event_ICQGCELEvents_EventPointAndFigureBarsUpdated", this.Event_ICQGCELEvents_EventPointAndFigureBarsUpdated},
                    { "Event_ICQGCELEvents_EventPositionsStatementResolved", this.Event_ICQGCELEvents_EventPositionsStatementResolved},
                    { "Event_ICQGCELEvents_EventQFormulaDefinitionsResolved", this.Event_ICQGCELEvents_EventQFormulaDefinitionsResolved},
                    { "Event_ICQGCELEvents_EventStrategyDefinitionProgress", this.Event_ICQGCELEvents_EventStrategyDefinitionProgress},
                    { "Event_ICQGCELEvents_EventSubMinuteBarsAdded", this.Event_ICQGCELEvents_EventSubMinuteBarsAdded},
                    { "Event_ICQGCELEvents_EventSubMinuteBarsInserted", this.Event_ICQGCELEvents_EventSubMinuteBarsInserted},
                    { "Event_ICQGCELEvents_EventSubMinuteBarsRemoved", this.Event_ICQGCELEvents_EventSubMinuteBarsRemoved},
                    { "Event_ICQGCELEvents_EventSubMinuteBarsResolved", this.Event_ICQGCELEvents_EventSubMinuteBarsResolved},
                    { "Event_ICQGCELEvents_EventSubMinuteBarsUpdated", this.Event_ICQGCELEvents_EventSubMinuteBarsUpdated},
                    { "Event_ICQGCELEvents_EventSummariesStatementResolved", this.Event_ICQGCELEvents_EventSummariesStatementResolved},
                    { "Event_ICQGCELEvents_EventTFlowBarsAdded", this.Event_ICQGCELEvents_EventTFlowBarsAdded},
                    { "Event_ICQGCELEvents_EventTFlowBarsInserted", this.Event_ICQGCELEvents_EventTFlowBarsInserted},
                    { "Event_ICQGCELEvents_EventTFlowBarsRemoved", this.Event_ICQGCELEvents_EventTFlowBarsRemoved},
                    { "Event_ICQGCELEvents_EventTFlowBarsResolved", this.Event_ICQGCELEvents_EventTFlowBarsResolved},
                    { "Event_ICQGCELEvents_EventTFlowBarsUpdated", this.Event_ICQGCELEvents_EventTFlowBarsUpdated},
                    { "Event_ICQGCELEvents_EventTicksAdded", this.Event_ICQGCELEvents_EventTicksAdded},
                    { "Event_ICQGCELEvents_EventTicksResolved", this.Event_ICQGCELEvents_EventTicksResolved},
                    { "Event_ICQGCELEvents_EventTimedBarsAdded", this.Event_ICQGCELEvents_EventTimedBarsAdded},
                    { "Event_ICQGCELEvents_EventTimedBarsInserted", this.Event_ICQGCELEvents_EventTimedBarsInserted},
                    { "Event_ICQGCELEvents_EventTimedBarsRemoved", this.Event_ICQGCELEvents_EventTimedBarsRemoved},
                    { "Event_ICQGCELEvents_EventTimedBarsResolved", this.Event_ICQGCELEvents_EventTimedBarsResolved},
                    { "Event_ICQGCELEvents_EventTimedBarsUpdated", this.Event_ICQGCELEvents_EventTimedBarsUpdated},
                    { "Event_ICQGCELEvents_EventTradableCommoditiesResolved", this.Event_ICQGCELEvents_EventTradableCommoditiesResolved},
                    { "Event_ICQGCELEvents_EventTradableExchangesResolved", this.Event_ICQGCELEvents_EventTradableExchangesResolved},
                    { "Event_ICQGCELEvents_EventTradingSystemAddNotification", this.Event_ICQGCELEvents_EventTradingSystemAddNotification},
                    { "Event_ICQGCELEvents_EventTradingSystemDefinitionsResolved", this.Event_ICQGCELEvents_EventTradingSystemDefinitionsResolved},
                    { "Event_ICQGCELEvents_EventTradingSystemInsertNotification", this.Event_ICQGCELEvents_EventTradingSystemInsertNotification},
                    { "Event_ICQGCELEvents_EventTradingSystemRemoveNotification", this.Event_ICQGCELEvents_EventTradingSystemRemoveNotification},
                    { "Event_ICQGCELEvents_EventTradingSystemResolved", this.Event_ICQGCELEvents_EventTradingSystemResolved},
                    { "Event_ICQGCELEvents_EventTradingSystemTradeRelationAddNotification", this.Event_ICQGCELEvents_EventTradingSystemTradeRelationAddNotification},
                    { "Event_ICQGCELEvents_EventTradingSystemUpdateNotification", this.Event_ICQGCELEvents_EventTradingSystemUpdateNotification},
                    { "Event_ICQGCELEvents_EventYieldsAdded", this.Event_ICQGCELEvents_EventYieldsAdded},
                    { "Event_ICQGCELEvents_EventYieldsInserted", this.Event_ICQGCELEvents_EventYieldsInserted},
                    { "Event_ICQGCELEvents_EventYieldsRemoved", this.Event_ICQGCELEvents_EventYieldsRemoved},
                    { "Event_ICQGCELEvents_EventYieldsResolved", this.Event_ICQGCELEvents_EventYieldsResolved},
                    { "Event_ICQGCELEvents_EventYieldsUpdated", this.Event_ICQGCELEvents_EventYieldsUpdated},
                    { "Event_ICQGCELGeneralEvents_EventCELStarted", this.Event_ICQGCELGeneralEvents_EventCELStarted},
                    { "Event_ICQGCELGeneralEvents_EventCurrencyRatesChanged", this.Event_ICQGCELGeneralEvents_EventCurrencyRatesChanged},
                    { "Event_ICQGCELGeneralEvents_EventDataConnectionStatusChanged", this.Event_ICQGCELGeneralEvents_EventDataConnectionStatusChanged},
                    { "Event_ICQGCELGeneralEvents_EventDataError", this.Event_ICQGCELGeneralEvents_EventDataError},
                    { "Event_ICQGCELGeneralEvents_EventGWConnectionStatusChanged", this.Event_ICQGCELGeneralEvents_EventGWConnectionStatusChanged},
                    { "Event_ICQGCELGeneralEvents_EventLineTimeChanged", this.Event_ICQGCELGeneralEvents_EventLineTimeChanged},
                    { "Event_ICQGCELGeneralEvents_EventOnIdle", this.Event_ICQGCELGeneralEvents_EventOnIdle},
                    { "Event_ICQGCELInstrumentEvents_EventCommodityInstrumentsResolved", this.Event_ICQGCELInstrumentEvents_EventCommodityInstrumentsResolved},
                    { "Event_ICQGCELInstrumentEvents_EventIncorrectSymbol", this.Event_ICQGCELInstrumentEvents_EventIncorrectSymbol},
                    { "Event_ICQGCELInstrumentEvents_EventInstrumentChanged", this.Event_ICQGCELInstrumentEvents_EventInstrumentChanged},
                    { "Event_ICQGCELInstrumentEvents_EventInstrumentDOMChanged", this.Event_ICQGCELInstrumentEvents_EventInstrumentDOMChanged},
                    { "Event_ICQGCELInstrumentEvents_EventInstrumentsGroupChanged", this.Event_ICQGCELInstrumentEvents_EventInstrumentsGroupChanged},
                    { "Event_ICQGCELInstrumentEvents_EventInstrumentsGroupResolved", this.Event_ICQGCELInstrumentEvents_EventInstrumentsGroupResolved},
                    { "Event_ICQGCELInstrumentEvents_EventInstrumentSubscribed", this.Event_ICQGCELInstrumentEvents_EventInstrumentSubscribed},
                    { "Method_ICQGCELEvents_SinkHelperAccountChanged", this.Method_ICQGCELEvents_SinkHelperAccountChanged},
                    { "Method_ICQGCELEvents_SinkHelperAdvancedStudyAdded", this.Method_ICQGCELEvents_SinkHelperAdvancedStudyAdded},
                    { "Method_ICQGCELEvents_SinkHelperAdvancedStudyDefinitionsResolved", this.Method_ICQGCELEvents_SinkHelperAdvancedStudyDefinitionsResolved},
                    { "Method_ICQGCELEvents_SinkHelperAdvancedStudyInserted", this.Method_ICQGCELEvents_SinkHelperAdvancedStudyInserted},
                    { "Method_ICQGCELEvents_SinkHelperAdvancedStudyRemoved", this.Method_ICQGCELEvents_SinkHelperAdvancedStudyRemoved},
                    { "Method_ICQGCELEvents_SinkHelperAdvancedStudyResolved", this.Method_ICQGCELEvents_SinkHelperAdvancedStudyResolved},
                    { "Method_ICQGCELEvents_SinkHelperAdvancedStudyUpdated", this.Method_ICQGCELEvents_SinkHelperAdvancedStudyUpdated},
                    { "Method_ICQGCELEvents_SinkHelperAlgorithmicOrderPlaced", this.Method_ICQGCELEvents_SinkHelperAlgorithmicOrderPlaced},
                    { "Method_ICQGCELEvents_SinkHelperAlgorithmicOrderRegistrationComplete", this.Method_ICQGCELEvents_SinkHelperAlgorithmicOrderRegistrationComplete},
                    { "Method_ICQGCELEvents_SinkHelperAllOrdersCanceled", this.Method_ICQGCELEvents_SinkHelperAllOrdersCanceled},
                    { "Method_ICQGCELEvents_SinkHelperAuthenticationStatusChanged", this.Method_ICQGCELEvents_SinkHelperAuthenticationStatusChanged},
                    { "Method_ICQGCELEvents_SinkHelperBarsTimestampsResolved", this.Method_ICQGCELEvents_SinkHelperBarsTimestampsResolved},
                    { "Method_ICQGCELEvents_SinkHelperCELStarted", this.Method_ICQGCELEvents_SinkHelperCELStarted},
                    { "Method_ICQGCELEvents_SinkHelperCommodityInstrumentsResolved", this.Method_ICQGCELEvents_SinkHelperCommodityInstrumentsResolved},
                    { "Method_ICQGCELEvents_SinkHelperConditionAdded", this.Method_ICQGCELEvents_SinkHelperConditionAdded},
                    { "Method_ICQGCELEvents_SinkHelperConditionDefinitionsResolved", this.Method_ICQGCELEvents_SinkHelperConditionDefinitionsResolved},
                    { "Method_ICQGCELEvents_SinkHelperConditionInserted", this.Method_ICQGCELEvents_SinkHelperConditionInserted},
                    { "Method_ICQGCELEvents_SinkHelperConditionRemoved", this.Method_ICQGCELEvents_SinkHelperConditionRemoved},
                    { "Method_ICQGCELEvents_SinkHelperConditionResolved", this.Method_ICQGCELEvents_SinkHelperConditionResolved},
                    { "Method_ICQGCELEvents_SinkHelperConditionUpdated", this.Method_ICQGCELEvents_SinkHelperConditionUpdated},
                    { "Method_ICQGCELEvents_SinkHelperConstantVolumeBarsAdded", this.Method_ICQGCELEvents_SinkHelperConstantVolumeBarsAdded},
                    { "Method_ICQGCELEvents_SinkHelperConstantVolumeBarsInserted", this.Method_ICQGCELEvents_SinkHelperConstantVolumeBarsInserted},
                    { "Method_ICQGCELEvents_SinkHelperConstantVolumeBarsRemoved", this.Method_ICQGCELEvents_SinkHelperConstantVolumeBarsRemoved},
                    { "Method_ICQGCELEvents_SinkHelperConstantVolumeBarsResolved", this.Method_ICQGCELEvents_SinkHelperConstantVolumeBarsResolved},
                    { "Method_ICQGCELEvents_SinkHelperConstantVolumeBarsUpdated", this.Method_ICQGCELEvents_SinkHelperConstantVolumeBarsUpdated},
                    { "Method_ICQGCELEvents_SinkHelperCurrencyRatesChanged", this.Method_ICQGCELEvents_SinkHelperCurrencyRatesChanged},
                    { "Method_ICQGCELEvents_SinkHelperCustomSessionsResolved", this.Method_ICQGCELEvents_SinkHelperCustomSessionsResolved},
                    { "Method_ICQGCELEvents_SinkHelperCustomStudyAdded", this.Method_ICQGCELEvents_SinkHelperCustomStudyAdded},
                    { "Method_ICQGCELEvents_SinkHelperCustomStudyDefinitionsResolved", this.Method_ICQGCELEvents_SinkHelperCustomStudyDefinitionsResolved},
                    { "Method_ICQGCELEvents_SinkHelperCustomStudyInserted", this.Method_ICQGCELEvents_SinkHelperCustomStudyInserted},
                    { "Method_ICQGCELEvents_SinkHelperCustomStudyRemoved", this.Method_ICQGCELEvents_SinkHelperCustomStudyRemoved},
                    { "Method_ICQGCELEvents_SinkHelperCustomStudyResolved", this.Method_ICQGCELEvents_SinkHelperCustomStudyResolved},
                    { "Method_ICQGCELEvents_SinkHelperCustomStudyUpdated", this.Method_ICQGCELEvents_SinkHelperCustomStudyUpdated},
                    { "Method_ICQGCELEvents_SinkHelperDataConnectionStatusChanged", this.Method_ICQGCELEvents_SinkHelperDataConnectionStatusChanged},
                    { "Method_ICQGCELEvents_SinkHelperDataError", this.Method_ICQGCELEvents_SinkHelperDataError},
                    { "Method_ICQGCELEvents_SinkHelperDataSourcesResolved", this.Method_ICQGCELEvents_SinkHelperDataSourcesResolved},
                    { "Method_ICQGCELEvents_SinkHelperDataSourceSymbolsResolved", this.Method_ICQGCELEvents_SinkHelperDataSourceSymbolsResolved},
                    { "Method_ICQGCELEvents_SinkHelperExpressionAdded", this.Method_ICQGCELEvents_SinkHelperExpressionAdded},
                    { "Method_ICQGCELEvents_SinkHelperExpressionInserted", this.Method_ICQGCELEvents_SinkHelperExpressionInserted},
                    { "Method_ICQGCELEvents_SinkHelperExpressionRemoved", this.Method_ICQGCELEvents_SinkHelperExpressionRemoved},
                    { "Method_ICQGCELEvents_SinkHelperExpressionResolved", this.Method_ICQGCELEvents_SinkHelperExpressionResolved},
                    { "Method_ICQGCELEvents_SinkHelperExpressionUpdated", this.Method_ICQGCELEvents_SinkHelperExpressionUpdated},
                    { "Method_ICQGCELEvents_SinkHelperGetHashCode", this.Method_ICQGCELEvents_SinkHelperGetHashCode},
                    { "Method_ICQGCELEvents_SinkHelperGWConnectionStatusChanged", this.Method_ICQGCELEvents_SinkHelperGWConnectionStatusChanged},
                    { "Method_ICQGCELEvents_SinkHelperGWEnvironmentChanged", this.Method_ICQGCELEvents_SinkHelperGWEnvironmentChanged},
                    { "Method_ICQGCELEvents_SinkHelperHistoricalSessionsResolved", this.Method_ICQGCELEvents_SinkHelperHistoricalSessionsResolved},
                    { "Method_ICQGCELEvents_SinkHelperICConnectionStatusChanged", this.Method_ICQGCELEvents_SinkHelperICConnectionStatusChanged},
                    { "Method_ICQGCELEvents_SinkHelperIncorrectSymbol", this.Method_ICQGCELEvents_SinkHelperIncorrectSymbol},
                    { "Method_ICQGCELEvents_SinkHelperInstrumentChanged", this.Method_ICQGCELEvents_SinkHelperInstrumentChanged},
                    { "Method_ICQGCELEvents_SinkHelperInstrumentDOMChanged", this.Method_ICQGCELEvents_SinkHelperInstrumentDOMChanged},
                    { "Method_ICQGCELEvents_SinkHelperInstrumentsGroupChanged", this.Method_ICQGCELEvents_SinkHelperInstrumentsGroupChanged},
                    { "Method_ICQGCELEvents_SinkHelperInstrumentsGroupResolved", this.Method_ICQGCELEvents_SinkHelperInstrumentsGroupResolved},
                    { "Method_ICQGCELEvents_SinkHelperInstrumentSubscribed", this.Method_ICQGCELEvents_SinkHelperInstrumentSubscribed},
                    { "Method_ICQGCELEvents_SinkHelperIsReady", this.Method_ICQGCELEvents_SinkHelperIsReady},
                    { "Method_ICQGCELEvents_SinkHelperLineTimeChanged", this.Method_ICQGCELEvents_SinkHelperLineTimeChanged},
                    { "Method_ICQGCELEvents_SinkHelperManualFillChanged", this.Method_ICQGCELEvents_SinkHelperManualFillChanged},
                    { "Method_ICQGCELEvents_SinkHelperManualFillsResolved", this.Method_ICQGCELEvents_SinkHelperManualFillsResolved},
                    { "Method_ICQGCELEvents_SinkHelperManualFillUpdateResolved", this.Method_ICQGCELEvents_SinkHelperManualFillUpdateResolved},
                    { "Method_ICQGCELEvents_SinkHelperOnIdle", this.Method_ICQGCELEvents_SinkHelperOnIdle},
                    { "Method_ICQGCELEvents_SinkHelperOnQueryProgress", this.Method_ICQGCELEvents_SinkHelperOnQueryProgress},
                    { "Method_ICQGCELEvents_SinkHelperOrderChanged", this.Method_ICQGCELEvents_SinkHelperOrderChanged},
                    { "Method_ICQGCELEvents_SinkHelperPasswordChanged", this.Method_ICQGCELEvents_SinkHelperPasswordChanged},
                    { "Method_ICQGCELEvents_SinkHelperPointAndFigureBarsAdded", this.Method_ICQGCELEvents_SinkHelperPointAndFigureBarsAdded},
                    { "Method_ICQGCELEvents_SinkHelperPointAndFigureBarsInserted", this.Method_ICQGCELEvents_SinkHelperPointAndFigureBarsInserted},
                    { "Method_ICQGCELEvents_SinkHelperPointAndFigureBarsRemoved", this.Method_ICQGCELEvents_SinkHelperPointAndFigureBarsRemoved},
                    { "Method_ICQGCELEvents_SinkHelperPointAndFigureBarsResolved", this.Method_ICQGCELEvents_SinkHelperPointAndFigureBarsResolved},
                    { "Method_ICQGCELEvents_SinkHelperPointAndFigureBarsUpdated", this.Method_ICQGCELEvents_SinkHelperPointAndFigureBarsUpdated},
                    { "Method_ICQGCELEvents_SinkHelperPositionsStatementResolved", this.Method_ICQGCELEvents_SinkHelperPositionsStatementResolved},
                    { "Method_ICQGCELEvents_SinkHelperQFormulaDefinitionsResolved", this.Method_ICQGCELEvents_SinkHelperQFormulaDefinitionsResolved},
                    { "Method_ICQGCELEvents_SinkHelperStrategyDefinitionProgress", this.Method_ICQGCELEvents_SinkHelperStrategyDefinitionProgress},
                    { "Method_ICQGCELEvents_SinkHelperSubMinuteBarsAdded", this.Method_ICQGCELEvents_SinkHelperSubMinuteBarsAdded},
                    { "Method_ICQGCELEvents_SinkHelperSubMinuteBarsInserted", this.Method_ICQGCELEvents_SinkHelperSubMinuteBarsInserted},
                    { "Method_ICQGCELEvents_SinkHelperSubMinuteBarsRemoved", this.Method_ICQGCELEvents_SinkHelperSubMinuteBarsRemoved},
                    { "Method_ICQGCELEvents_SinkHelperSubMinuteBarsResolved", this.Method_ICQGCELEvents_SinkHelperSubMinuteBarsResolved},
                    { "Method_ICQGCELEvents_SinkHelperSubMinuteBarsUpdated", this.Method_ICQGCELEvents_SinkHelperSubMinuteBarsUpdated},
                    { "Method_ICQGCELEvents_SinkHelperSummariesStatementResolved", this.Method_ICQGCELEvents_SinkHelperSummariesStatementResolved},
                    { "Method_ICQGCELEvents_SinkHelperTFlowBarsAdded", this.Method_ICQGCELEvents_SinkHelperTFlowBarsAdded},
                    { "Method_ICQGCELEvents_SinkHelperTFlowBarsInserted", this.Method_ICQGCELEvents_SinkHelperTFlowBarsInserted},
                    { "Method_ICQGCELEvents_SinkHelperTFlowBarsRemoved", this.Method_ICQGCELEvents_SinkHelperTFlowBarsRemoved},
                    { "Method_ICQGCELEvents_SinkHelperTFlowBarsResolved", this.Method_ICQGCELEvents_SinkHelperTFlowBarsResolved},
                    { "Method_ICQGCELEvents_SinkHelperTFlowBarsUpdated", this.Method_ICQGCELEvents_SinkHelperTFlowBarsUpdated},
                    { "Method_ICQGCELEvents_SinkHelperTicksAdded", this.Method_ICQGCELEvents_SinkHelperTicksAdded},
                    { "Method_ICQGCELEvents_SinkHelperTicksResolved", this.Method_ICQGCELEvents_SinkHelperTicksResolved},
                    { "Method_ICQGCELEvents_SinkHelperTimedBarsAdded", this.Method_ICQGCELEvents_SinkHelperTimedBarsAdded},
                    { "Method_ICQGCELEvents_SinkHelperTimedBarsInserted", this.Method_ICQGCELEvents_SinkHelperTimedBarsInserted},
                    { "Method_ICQGCELEvents_SinkHelperTimedBarsRemoved", this.Method_ICQGCELEvents_SinkHelperTimedBarsRemoved},
                    { "Method_ICQGCELEvents_SinkHelperTimedBarsResolved", this.Method_ICQGCELEvents_SinkHelperTimedBarsResolved},
                    { "Method_ICQGCELEvents_SinkHelperTimedBarsUpdated", this.Method_ICQGCELEvents_SinkHelperTimedBarsUpdated},
                    { "Method_ICQGCELEvents_SinkHelperToString", this.Method_ICQGCELEvents_SinkHelperToString},
                    { "Method_ICQGCELEvents_SinkHelperTradableCommoditiesResolved", this.Method_ICQGCELEvents_SinkHelperTradableCommoditiesResolved},
                    { "Method_ICQGCELEvents_SinkHelperTradableExchangesResolved", this.Method_ICQGCELEvents_SinkHelperTradableExchangesResolved},
                    { "Method_ICQGCELEvents_SinkHelperTradingSystemAddNotification", this.Method_ICQGCELEvents_SinkHelperTradingSystemAddNotification},
                    { "Method_ICQGCELEvents_SinkHelperTradingSystemDefinitionsResolved", this.Method_ICQGCELEvents_SinkHelperTradingSystemDefinitionsResolved},
                    { "Method_ICQGCELEvents_SinkHelperTradingSystemInsertNotification", this.Method_ICQGCELEvents_SinkHelperTradingSystemInsertNotification},
                    { "Method_ICQGCELEvents_SinkHelperTradingSystemRemoveNotification", this.Method_ICQGCELEvents_SinkHelperTradingSystemRemoveNotification},
                    { "Method_ICQGCELEvents_SinkHelperTradingSystemResolved", this.Method_ICQGCELEvents_SinkHelperTradingSystemResolved},
                    { "Method_ICQGCELEvents_SinkHelperTradingSystemTradeRelationAddNotification", this.Method_ICQGCELEvents_SinkHelperTradingSystemTradeRelationAddNotification},
                    { "Method_ICQGCELEvents_SinkHelperTradingSystemUpdateNotification", this.Method_ICQGCELEvents_SinkHelperTradingSystemUpdateNotification},
                    { "Method_ICQGCELEvents_SinkHelperYieldsAdded", this.Method_ICQGCELEvents_SinkHelperYieldsAdded},
                    { "Method_ICQGCELEvents_SinkHelperYieldsInserted", this.Method_ICQGCELEvents_SinkHelperYieldsInserted},
                    { "Method_ICQGCELEvents_SinkHelperYieldsRemoved", this.Method_ICQGCELEvents_SinkHelperYieldsRemoved},
                    { "Method_ICQGCELEvents_SinkHelperYieldsResolved", this.Method_ICQGCELEvents_SinkHelperYieldsResolved},
                    { "Method_ICQGCELEvents_SinkHelperYieldsUpdated", this.Method_ICQGCELEvents_SinkHelperYieldsUpdated},
                    { "Method_ICQGCELGeneralEvents_SinkHelperCELStarted", this.Method_ICQGCELGeneralEvents_SinkHelperCELStarted},
                    { "Method_ICQGCELGeneralEvents_SinkHelperCurrencyRatesChanged", this.Method_ICQGCELGeneralEvents_SinkHelperCurrencyRatesChanged},
                    { "Method_ICQGCELGeneralEvents_SinkHelperDataConnectionStatusChanged", this.Method_ICQGCELGeneralEvents_SinkHelperDataConnectionStatusChanged},
                    { "Method_ICQGCELGeneralEvents_SinkHelperDataError", this.Method_ICQGCELGeneralEvents_SinkHelperDataError},
                    { "Method_ICQGCELGeneralEvents_SinkHelperGetHashCode", this.Method_ICQGCELGeneralEvents_SinkHelperGetHashCode},
                    { "Method_ICQGCELGeneralEvents_SinkHelperGWConnectionStatusChanged", this.Method_ICQGCELGeneralEvents_SinkHelperGWConnectionStatusChanged},
                    { "Method_ICQGCELGeneralEvents_SinkHelperIsReady", this.Method_ICQGCELGeneralEvents_SinkHelperIsReady},
                    { "Method_ICQGCELGeneralEvents_SinkHelperLineTimeChanged", this.Method_ICQGCELGeneralEvents_SinkHelperLineTimeChanged},
                    { "Method_ICQGCELGeneralEvents_SinkHelperOnIdle", this.Method_ICQGCELGeneralEvents_SinkHelperOnIdle},
                    { "Method_ICQGCELGeneralEvents_SinkHelperToString", this.Method_ICQGCELGeneralEvents_SinkHelperToString},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperCommodityInstrumentsResolved", this.Method_ICQGCELInstrumentEvents_SinkHelperCommodityInstrumentsResolved},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperGetHashCode", this.Method_ICQGCELInstrumentEvents_SinkHelperGetHashCode},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperIncorrectSymbol", this.Method_ICQGCELInstrumentEvents_SinkHelperIncorrectSymbol},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperInstrumentChanged", this.Method_ICQGCELInstrumentEvents_SinkHelperInstrumentChanged},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperInstrumentDOMChanged", this.Method_ICQGCELInstrumentEvents_SinkHelperInstrumentDOMChanged},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperInstrumentsGroupChanged", this.Method_ICQGCELInstrumentEvents_SinkHelperInstrumentsGroupChanged},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperInstrumentsGroupResolved", this.Method_ICQGCELInstrumentEvents_SinkHelperInstrumentsGroupResolved},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperInstrumentSubscribed", this.Method_ICQGCELInstrumentEvents_SinkHelperInstrumentSubscribed},
                    { "Method_ICQGCELInstrumentEvents_SinkHelperToString", this.Method_ICQGCELInstrumentEvents_SinkHelperToString},
                    { "GetCQGAccountClassAccountMarginDetailing", this.GetCQGAccountClassAccountMarginDetailing},
                    { "SetCQGAccountClassAccountMarginDetailing", this.SetCQGAccountClassAccountMarginDetailing},
                    { "GetCQGAccountClassAuthorizedTraders", this.GetCQGAccountClassAuthorizedTraders},
                    { "GetCQGAccountClassAutoSubscribeInstruments", this.GetCQGAccountClassAutoSubscribeInstruments},
                    { "SetCQGAccountClassAutoSubscribeInstruments", this.SetCQGAccountClassAutoSubscribeInstruments},
                    { "GetCQGAccountClassCEL", this.GetCQGAccountClassCEL},
                    { "GetCQGAccountClassCurrencySummaries", this.GetCQGAccountClassCurrencySummaries},
                    { "GetCQGAccountClassDateOfLastStatement", this.GetCQGAccountClassDateOfLastStatement},
                    { "GetCQGAccountClassFcmAccountID", this.GetCQGAccountClassFcmAccountID},
                    { "GetCQGAccountClassFcmClass", this.GetCQGAccountClassFcmClass},
                    { "GetCQGAccountClassFcmID", this.GetCQGAccountClassFcmID},
                    { "GetCQGAccountClassFcmName", this.GetCQGAccountClassFcmName},
                    { "GetCQGAccountClassGWAccountID", this.GetCQGAccountClassGWAccountID},
                    { "GetCQGAccountClassGWAccountName", this.GetCQGAccountClassGWAccountName},
                    { "GetCQGAccountClassInternalOrders", this.GetCQGAccountClassInternalOrders},
                    { "GetCQGAccountClassOrders", this.GetCQGAccountClassOrders},
                    { "GetCQGAccountClassPositions", this.GetCQGAccountClassPositions},
                    { "GetCQGAccountClassPositionSubcriptionLevel", this.GetCQGAccountClassPositionSubcriptionLevel},
                    { "SetCQGAccountClassPositionSubcriptionLevel", this.SetCQGAccountClassPositionSubcriptionLevel},
                    { "GetCQGAccountClassReportingCurrency", this.GetCQGAccountClassReportingCurrency},
                    { "GetCQGAccountClassServerTimestamp", this.GetCQGAccountClassServerTimestamp},
                    { "GetCQGAccountClassSummary", this.GetCQGAccountClassSummary},
                    { "GetCQGAccountClassTimestamp", this.GetCQGAccountClassTimestamp},
                    { "GetCQGAccountClassTotalMarginValue", this.GetCQGAccountClassTotalMarginValue},
                    { "GetCQGAccountClassTotalPurchasingPower", this.GetCQGAccountClassTotalPurchasingPower},
                    { "MethodCQGAccountClassGetHashCode", this.MethodCQGAccountClassGetHashCode},
                    { "MethodCQGAccountClassToString", this.MethodCQGAccountClassToString},
                    { "GetCQGAccountsClassCount", this.GetCQGAccountsClassCount},
                    { "GetCQGAccountsClassItem", this.GetCQGAccountsClassItem},
                    { "GetCQGAccountsClassItemByFCM", this.GetCQGAccountsClassItemByFCM},
                    { "MethodCQGAccountsClassAdd", this.MethodCQGAccountsClassAdd},
                    { "MethodCQGAccountsClassget_ItemByFCM", this.MethodCQGAccountsClassget_ItemByFCM},
                    { "MethodCQGAccountsClassget_ItemByIndex", this.MethodCQGAccountsClassget_ItemByIndex},
                    { "MethodCQGAccountsClassGetEnumerator", this.MethodCQGAccountsClassGetEnumerator},
                    { "MethodCQGAccountsClassGetHashCode", this.MethodCQGAccountsClassGetHashCode},
                    { "MethodCQGAccountsClassToString", this.MethodCQGAccountsClassToString},
                    { "GetCQGAccountSummariesClassCount", this.GetCQGAccountSummariesClassCount},
                    { "GetCQGAccountSummariesClassItem", this.GetCQGAccountSummariesClassItem},
                    { "MethodCQGAccountSummariesClassGetEnumerator", this.MethodCQGAccountSummariesClassGetEnumerator},
                    { "MethodCQGAccountSummariesClassGetHashCode", this.MethodCQGAccountSummariesClassGetHashCode},
                    { "MethodCQGAccountSummariesClassToString", this.MethodCQGAccountSummariesClassToString},
                    { "GetCQGAccountSummaryClassAccount", this.GetCQGAccountSummaryClassAccount},
                    { "GetCQGAccountSummaryClassCurrencyName", this.GetCQGAccountSummaryClassCurrencyName},
                    { "GetCQGAccountSummaryClassManualFillsInvolved", this.GetCQGAccountSummaryClassManualFillsInvolved},
                    { "MethodCQGAccountSummaryClassBalance", this.MethodCQGAccountSummaryClassBalance},
                    { "MethodCQGAccountSummaryClassCashExcess", this.MethodCQGAccountSummaryClassCashExcess},
                    { "MethodCQGAccountSummaryClassCollaterals", this.MethodCQGAccountSummaryClassCollaterals},
                    { "MethodCQGAccountSummaryClassGetHashCode", this.MethodCQGAccountSummaryClassGetHashCode},
                    { "MethodCQGAccountSummaryClassInitialMargin", this.MethodCQGAccountSummaryClassInitialMargin},
                    { "MethodCQGAccountSummaryClassMaintenanceMargin", this.MethodCQGAccountSummaryClassMaintenanceMargin},
                    { "MethodCQGAccountSummaryClassMVO", this.MethodCQGAccountSummaryClassMVO},
                    { "MethodCQGAccountSummaryClassNLV", this.MethodCQGAccountSummaryClassNLV},
                    { "MethodCQGAccountSummaryClassOTE", this.MethodCQGAccountSummaryClassOTE},
                    { "MethodCQGAccountSummaryClassProfitLoss", this.MethodCQGAccountSummaryClassProfitLoss},
                    { "MethodCQGAccountSummaryClassToString", this.MethodCQGAccountSummaryClassToString},
                    { "MethodCQGAccountSummaryClassUPL", this.MethodCQGAccountSummaryClassUPL},
                    { "GetCQGAdvancedStudiesClassCount", this.GetCQGAdvancedStudiesClassCount},
                    { "GetCQGAdvancedStudiesClassItem", this.GetCQGAdvancedStudiesClassItem},
                    { "GetCQGAdvancedStudiesClassItemById", this.GetCQGAdvancedStudiesClassItemById},
                    { "MethodCQGAdvancedStudiesClassget_ItemById", this.MethodCQGAdvancedStudiesClassget_ItemById},
                    { "MethodCQGAdvancedStudiesClassGetEnumerator", this.MethodCQGAdvancedStudiesClassGetEnumerator},
                    { "MethodCQGAdvancedStudiesClassGetHashCode", this.MethodCQGAdvancedStudiesClassGetHashCode},
                    { "MethodCQGAdvancedStudiesClassToString", this.MethodCQGAdvancedStudiesClassToString},
                    { "GetCQGAdvancedStudyClassCount", this.GetCQGAdvancedStudyClassCount},
                    { "GetCQGAdvancedStudyClassCurveHeaders", this.GetCQGAdvancedStudyClassCurveHeaders},
                    { "GetCQGAdvancedStudyClassDefinition", this.GetCQGAdvancedStudyClassDefinition},
                    { "GetCQGAdvancedStudyClassEndTimestamp", this.GetCQGAdvancedStudyClassEndTimestamp},
                    { "GetCQGAdvancedStudyClassId", this.GetCQGAdvancedStudyClassId},
                    { "GetCQGAdvancedStudyClassItem", this.GetCQGAdvancedStudyClassItem},
                    { "GetCQGAdvancedStudyClassLastError", this.GetCQGAdvancedStudyClassLastError},
                    { "GetCQGAdvancedStudyClassRequest", this.GetCQGAdvancedStudyClassRequest},
                    { "GetCQGAdvancedStudyClassStartTimestamp", this.GetCQGAdvancedStudyClassStartTimestamp},
                    { "GetCQGAdvancedStudyClassStatus", this.GetCQGAdvancedStudyClassStatus},
                    { "GetCQGAdvancedStudyClassTag", this.GetCQGAdvancedStudyClassTag},
                    { "SetCQGAdvancedStudyClassTag", this.SetCQGAdvancedStudyClassTag},
                    { "MethodCQGAdvancedStudyClassget_Tag", this.MethodCQGAdvancedStudyClassget_Tag},
                    { "MethodCQGAdvancedStudyClassGetEnumerator", this.MethodCQGAdvancedStudyClassGetEnumerator},
                    { "MethodCQGAdvancedStudyClassGetHashCode", this.MethodCQGAdvancedStudyClassGetHashCode},
                    { "MethodCQGAdvancedStudyClassIndexForDate", this.MethodCQGAdvancedStudyClassIndexForDate},
                    { "MethodCQGAdvancedStudyClassset_Tag", this.MethodCQGAdvancedStudyClassset_Tag},
                    { "MethodCQGAdvancedStudyClassToString", this.MethodCQGAdvancedStudyClassToString},
                    { "GetCQGAdvancedStudyDefinitionClassAbbreviation", this.GetCQGAdvancedStudyDefinitionClassAbbreviation},
                    { "GetCQGAdvancedStudyDefinitionClassCurveDefinitions", this.GetCQGAdvancedStudyDefinitionClassCurveDefinitions},
                    { "GetCQGAdvancedStudyDefinitionClassName", this.GetCQGAdvancedStudyDefinitionClassName},
                    { "GetCQGAdvancedStudyDefinitionClassParameterDefinitions", this.GetCQGAdvancedStudyDefinitionClassParameterDefinitions},
                    { "MethodCQGAdvancedStudyDefinitionClassGetHashCode", this.MethodCQGAdvancedStudyDefinitionClassGetHashCode},
                    { "MethodCQGAdvancedStudyDefinitionClassToString", this.MethodCQGAdvancedStudyDefinitionClassToString},
                    { "GetCQGAdvancedStudyDefinitionsClassCount", this.GetCQGAdvancedStudyDefinitionsClassCount},
                    { "GetCQGAdvancedStudyDefinitionsClassItem", this.GetCQGAdvancedStudyDefinitionsClassItem},
                    { "GetCQGAdvancedStudyDefinitionsClassItemByAbbreviation", this.GetCQGAdvancedStudyDefinitionsClassItemByAbbreviation},
                    { "MethodCQGAdvancedStudyDefinitionsClassget_ItemByAbbreviation", this.MethodCQGAdvancedStudyDefinitionsClassget_ItemByAbbreviation},
                    { "MethodCQGAdvancedStudyDefinitionsClassget_ItemByName", this.MethodCQGAdvancedStudyDefinitionsClassget_ItemByName},
                    { "MethodCQGAdvancedStudyDefinitionsClassGetEnumerator", this.MethodCQGAdvancedStudyDefinitionsClassGetEnumerator},
                    { "MethodCQGAdvancedStudyDefinitionsClassGetHashCode", this.MethodCQGAdvancedStudyDefinitionsClassGetHashCode},
                    { "MethodCQGAdvancedStudyDefinitionsClassToString", this.MethodCQGAdvancedStudyDefinitionsClassToString},
                    { "GetCQGAdvancedStudyRequestClassBaseExpression", this.GetCQGAdvancedStudyRequestClassBaseExpression},
                    { "SetCQGAdvancedStudyRequestClassBaseExpression", this.SetCQGAdvancedStudyRequestClassBaseExpression},
                    { "GetCQGAdvancedStudyRequestClassContinuation", this.GetCQGAdvancedStudyRequestClassContinuation},
                    { "SetCQGAdvancedStudyRequestClassContinuation", this.SetCQGAdvancedStudyRequestClassContinuation},
                    { "GetCQGAdvancedStudyRequestClassDaysBeforeExpiration", this.GetCQGAdvancedStudyRequestClassDaysBeforeExpiration},
                    { "SetCQGAdvancedStudyRequestClassDaysBeforeExpiration", this.SetCQGAdvancedStudyRequestClassDaysBeforeExpiration},
                    { "GetCQGAdvancedStudyRequestClassDefinition", this.GetCQGAdvancedStudyRequestClassDefinition},
                    { "GetCQGAdvancedStudyRequestClassEqualizeCloses", this.GetCQGAdvancedStudyRequestClassEqualizeCloses},
                    { "SetCQGAdvancedStudyRequestClassEqualizeCloses", this.SetCQGAdvancedStudyRequestClassEqualizeCloses},
                    { "GetCQGAdvancedStudyRequestClassHistoricalPeriod", this.GetCQGAdvancedStudyRequestClassHistoricalPeriod},
                    { "SetCQGAdvancedStudyRequestClassHistoricalPeriod", this.SetCQGAdvancedStudyRequestClassHistoricalPeriod},
                    { "GetCQGAdvancedStudyRequestClassIncludeEnd", this.GetCQGAdvancedStudyRequestClassIncludeEnd},
                    { "SetCQGAdvancedStudyRequestClassIncludeEnd", this.SetCQGAdvancedStudyRequestClassIncludeEnd},
                    { "GetCQGAdvancedStudyRequestClassIntradayPeriod", this.GetCQGAdvancedStudyRequestClassIntradayPeriod},
                    { "SetCQGAdvancedStudyRequestClassIntradayPeriod", this.SetCQGAdvancedStudyRequestClassIntradayPeriod},
                    { "GetCQGAdvancedStudyRequestClassParameter", this.GetCQGAdvancedStudyRequestClassParameter},
                    { "SetCQGAdvancedStudyRequestClassParameter", this.SetCQGAdvancedStudyRequestClassParameter},
                    { "GetCQGAdvancedStudyRequestClassRangeEnd", this.GetCQGAdvancedStudyRequestClassRangeEnd},
                    { "SetCQGAdvancedStudyRequestClassRangeEnd", this.SetCQGAdvancedStudyRequestClassRangeEnd},
                    { "GetCQGAdvancedStudyRequestClassRangeStart", this.GetCQGAdvancedStudyRequestClassRangeStart},
                    { "SetCQGAdvancedStudyRequestClassRangeStart", this.SetCQGAdvancedStudyRequestClassRangeStart},
                    { "GetCQGAdvancedStudyRequestClassRecalcPeriod", this.GetCQGAdvancedStudyRequestClassRecalcPeriod},
                    { "SetCQGAdvancedStudyRequestClassRecalcPeriod", this.SetCQGAdvancedStudyRequestClassRecalcPeriod},
                    { "GetCQGAdvancedStudyRequestClassSessionFlags", this.GetCQGAdvancedStudyRequestClassSessionFlags},
                    { "SetCQGAdvancedStudyRequestClassSessionFlags", this.SetCQGAdvancedStudyRequestClassSessionFlags},
                    { "GetCQGAdvancedStudyRequestClassSessionsFilter", this.GetCQGAdvancedStudyRequestClassSessionsFilter},
                    { "SetCQGAdvancedStudyRequestClassSessionsFilter", this.SetCQGAdvancedStudyRequestClassSessionsFilter},
                    { "GetCQGAdvancedStudyRequestClassSubscriptionLevel", this.GetCQGAdvancedStudyRequestClassSubscriptionLevel},
                    { "SetCQGAdvancedStudyRequestClassSubscriptionLevel", this.SetCQGAdvancedStudyRequestClassSubscriptionLevel},
                    { "GetCQGAdvancedStudyRequestClassUpdatesEnabled", this.GetCQGAdvancedStudyRequestClassUpdatesEnabled},
                    { "SetCQGAdvancedStudyRequestClassUpdatesEnabled", this.SetCQGAdvancedStudyRequestClassUpdatesEnabled},
                    { "MethodCQGAdvancedStudyRequestClassget_Parameter", this.MethodCQGAdvancedStudyRequestClassget_Parameter},
                    { "MethodCQGAdvancedStudyRequestClassGetHashCode", this.MethodCQGAdvancedStudyRequestClassGetHashCode},
                    { "MethodCQGAdvancedStudyRequestClassIncludeCurve", this.MethodCQGAdvancedStudyRequestClassIncludeCurve},
                    { "MethodCQGAdvancedStudyRequestClassIsCurveIncluded", this.MethodCQGAdvancedStudyRequestClassIsCurveIncluded},
                    { "MethodCQGAdvancedStudyRequestClassset_Parameter", this.MethodCQGAdvancedStudyRequestClassset_Parameter},
                    { "MethodCQGAdvancedStudyRequestClassToString", this.MethodCQGAdvancedStudyRequestClassToString},
                    { "GetCQGAlgorithmicOrderDefinitionClassDefaultValue", this.GetCQGAlgorithmicOrderDefinitionClassDefaultValue},
                    { "SetCQGAlgorithmicOrderDefinitionClassDefaultValue", this.SetCQGAlgorithmicOrderDefinitionClassDefaultValue},
                    { "GetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex", this.GetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex},
                    { "SetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex", this.SetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex},
                    { "GetCQGAlgorithmicOrderDefinitionClassName", this.GetCQGAlgorithmicOrderDefinitionClassName},
                    { "SetCQGAlgorithmicOrderDefinitionClassName", this.SetCQGAlgorithmicOrderDefinitionClassName},
                    { "GetCQGAlgorithmicOrderDefinitionClassType", this.GetCQGAlgorithmicOrderDefinitionClassType},
                    { "SetCQGAlgorithmicOrderDefinitionClassType", this.SetCQGAlgorithmicOrderDefinitionClassType},
                    { "GetCQGAlgorithmicOrderDefinitionClassUnit", this.GetCQGAlgorithmicOrderDefinitionClassUnit},
                    { "SetCQGAlgorithmicOrderDefinitionClassUnit", this.SetCQGAlgorithmicOrderDefinitionClassUnit},
                    { "GetCQGAlgorithmicOrderDefinitionClassValues", this.GetCQGAlgorithmicOrderDefinitionClassValues},
                    { "MethodCQGAlgorithmicOrderDefinitionClassAddValue", this.MethodCQGAlgorithmicOrderDefinitionClassAddValue},
                    { "MethodCQGAlgorithmicOrderDefinitionClassGetHashCode", this.MethodCQGAlgorithmicOrderDefinitionClassGetHashCode},
                    { "MethodCQGAlgorithmicOrderDefinitionClassToString", this.MethodCQGAlgorithmicOrderDefinitionClassToString},
                    { "GetCQGAlgorithmicOrderDefinitionsClassCount", this.GetCQGAlgorithmicOrderDefinitionsClassCount},
                    { "GetCQGAlgorithmicOrderDefinitionsClassItem", this.GetCQGAlgorithmicOrderDefinitionsClassItem},
                    { "MethodCQGAlgorithmicOrderDefinitionsClassAdd", this.MethodCQGAlgorithmicOrderDefinitionsClassAdd},
                    { "MethodCQGAlgorithmicOrderDefinitionsClassCreateDefinition", this.MethodCQGAlgorithmicOrderDefinitionsClassCreateDefinition},
                    { "MethodCQGAlgorithmicOrderDefinitionsClassGetEnumerator", this.MethodCQGAlgorithmicOrderDefinitionsClassGetEnumerator},
                    { "MethodCQGAlgorithmicOrderDefinitionsClassGetHashCode", this.MethodCQGAlgorithmicOrderDefinitionsClassGetHashCode},
                    { "MethodCQGAlgorithmicOrderDefinitionsClassToString", this.MethodCQGAlgorithmicOrderDefinitionsClassToString},
                    { "GetCQGAlgorithmicOrderParametersClassDurationType", this.GetCQGAlgorithmicOrderParametersClassDurationType},
                    { "GetCQGAlgorithmicOrderParametersClassExecutionInstructions", this.GetCQGAlgorithmicOrderParametersClassExecutionInstructions},
                    { "GetCQGAlgorithmicOrderParametersClassExecutionPattern", this.GetCQGAlgorithmicOrderParametersClassExecutionPattern},
                    { "GetCQGAlgorithmicOrderParametersClassGTD", this.GetCQGAlgorithmicOrderParametersClassGTD},
                    { "GetCQGAlgorithmicOrderParametersClassGWAccountID", this.GetCQGAlgorithmicOrderParametersClassGWAccountID},
                    { "GetCQGAlgorithmicOrderParametersClassInstrumentName", this.GetCQGAlgorithmicOrderParametersClassInstrumentName},
                    { "GetCQGAlgorithmicOrderParametersClassParked", this.GetCQGAlgorithmicOrderParametersClassParked},
                    { "GetCQGAlgorithmicOrderParametersClassPreferredTrailingPeg", this.GetCQGAlgorithmicOrderParametersClassPreferredTrailingPeg},
                    { "GetCQGAlgorithmicOrderParametersClassPrice", this.GetCQGAlgorithmicOrderParametersClassPrice},
                    { "GetCQGAlgorithmicOrderParametersClassQuantity", this.GetCQGAlgorithmicOrderParametersClassQuantity},
                    { "GetCQGAlgorithmicOrderParametersClassSide", this.GetCQGAlgorithmicOrderParametersClassSide},
                    { "GetCQGAlgorithmicOrderParametersClassStopLimitPrice", this.GetCQGAlgorithmicOrderParametersClassStopLimitPrice},
                    { "GetCQGAlgorithmicOrderParametersClassTrailingOffset", this.GetCQGAlgorithmicOrderParametersClassTrailingOffset},
                    { "GetCQGAlgorithmicOrderParametersClassTriggerQuantity", this.GetCQGAlgorithmicOrderParametersClassTriggerQuantity},
                    { "GetCQGAlgorithmicOrderParametersClassType", this.GetCQGAlgorithmicOrderParametersClassType},
                    { "GetCQGAlgorithmicOrderParametersClassVisibleQuantity", this.GetCQGAlgorithmicOrderParametersClassVisibleQuantity},
                    { "MethodCQGAlgorithmicOrderParametersClassGetHashCode", this.MethodCQGAlgorithmicOrderParametersClassGetHashCode},
                    { "MethodCQGAlgorithmicOrderParametersClassToString", this.MethodCQGAlgorithmicOrderParametersClassToString},
                    { "GetCQGAlgorithmicOrderPropertiesClassCount", this.GetCQGAlgorithmicOrderPropertiesClassCount},
                    { "GetCQGAlgorithmicOrderPropertiesClassItem", this.GetCQGAlgorithmicOrderPropertiesClassItem},
                    { "MethodCQGAlgorithmicOrderPropertiesClassGetEnumerator", this.MethodCQGAlgorithmicOrderPropertiesClassGetEnumerator},
                    { "MethodCQGAlgorithmicOrderPropertiesClassGetHashCode", this.MethodCQGAlgorithmicOrderPropertiesClassGetHashCode},
                    { "MethodCQGAlgorithmicOrderPropertiesClassToString", this.MethodCQGAlgorithmicOrderPropertiesClassToString},
                    { "GetCQGAlgorithmicOrderPropertyClassName", this.GetCQGAlgorithmicOrderPropertyClassName},
                    { "GetCQGAlgorithmicOrderPropertyClassValue", this.GetCQGAlgorithmicOrderPropertyClassValue},
                    { "MethodCQGAlgorithmicOrderPropertyClassGetHashCode", this.MethodCQGAlgorithmicOrderPropertyClassGetHashCode},
                    { "MethodCQGAlgorithmicOrderPropertyClassToString", this.MethodCQGAlgorithmicOrderPropertyClassToString},
                    { "GetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval", this.GetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval},
                    { "SetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval", this.SetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval},
                    { "GetCQGAPIConfigClassAgeToDeleteLogFileDays", this.GetCQGAPIConfigClassAgeToDeleteLogFileDays},
                    { "SetCQGAPIConfigClassAgeToDeleteLogFileDays", this.SetCQGAPIConfigClassAgeToDeleteLogFileDays},
                    { "GetCQGAPIConfigClassApplyDaylightSavingChanges", this.GetCQGAPIConfigClassApplyDaylightSavingChanges},
                    { "SetCQGAPIConfigClassApplyDaylightSavingChanges", this.SetCQGAPIConfigClassApplyDaylightSavingChanges},
                    { "GetCQGAPIConfigClassCollectionsThrowException", this.GetCQGAPIConfigClassCollectionsThrowException},
                    { "SetCQGAPIConfigClassCollectionsThrowException", this.SetCQGAPIConfigClassCollectionsThrowException},
                    { "GetCQGAPIConfigClassDefaultAccountMarginDetailing", this.GetCQGAPIConfigClassDefaultAccountMarginDetailing},
                    { "SetCQGAPIConfigClassDefaultAccountMarginDetailing", this.SetCQGAPIConfigClassDefaultAccountMarginDetailing},
                    { "GetCQGAPIConfigClassDefaultInstrumentBBAType", this.GetCQGAPIConfigClassDefaultInstrumentBBAType},
                    { "SetCQGAPIConfigClassDefaultInstrumentBBAType", this.SetCQGAPIConfigClassDefaultInstrumentBBAType},
                    { "GetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel", this.GetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel},
                    { "SetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel", this.SetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel},
                    { "GetCQGAPIConfigClassDefPositionSubscriptionLevel", this.GetCQGAPIConfigClassDefPositionSubscriptionLevel},
                    { "SetCQGAPIConfigClassDefPositionSubscriptionLevel", this.SetCQGAPIConfigClassDefPositionSubscriptionLevel},
                    { "GetCQGAPIConfigClassDOMUpdatesMode", this.GetCQGAPIConfigClassDOMUpdatesMode},
                    { "SetCQGAPIConfigClassDOMUpdatesMode", this.SetCQGAPIConfigClassDOMUpdatesMode},
                    { "GetCQGAPIConfigClassDOMUpdatesPeriod", this.GetCQGAPIConfigClassDOMUpdatesPeriod},
                    { "SetCQGAPIConfigClassDOMUpdatesPeriod", this.SetCQGAPIConfigClassDOMUpdatesPeriod},
                    { "GetCQGAPIConfigClassFireEventOnChangedPrices", this.GetCQGAPIConfigClassFireEventOnChangedPrices},
                    { "SetCQGAPIConfigClassFireEventOnChangedPrices", this.SetCQGAPIConfigClassFireEventOnChangedPrices},
                    { "GetCQGAPIConfigClassGatewayEnabled", this.GetCQGAPIConfigClassGatewayEnabled},
                    { "SetCQGAPIConfigClassGatewayEnabled", this.SetCQGAPIConfigClassGatewayEnabled},
                    { "GetCQGAPIConfigClassIncludeOrderTransactions", this.GetCQGAPIConfigClassIncludeOrderTransactions},
                    { "SetCQGAPIConfigClassIncludeOrderTransactions", this.SetCQGAPIConfigClassIncludeOrderTransactions},
                    { "GetCQGAPIConfigClassLogSeverity", this.GetCQGAPIConfigClassLogSeverity},
                    { "SetCQGAPIConfigClassLogSeverity", this.SetCQGAPIConfigClassLogSeverity},
                    { "GetCQGAPIConfigClassMaxLogFileCount", this.GetCQGAPIConfigClassMaxLogFileCount},
                    { "SetCQGAPIConfigClassMaxLogFileCount", this.SetCQGAPIConfigClassMaxLogFileCount},
                    { "GetCQGAPIConfigClassMaxLogFileDuration", this.GetCQGAPIConfigClassMaxLogFileDuration},
                    { "SetCQGAPIConfigClassMaxLogFileDuration", this.SetCQGAPIConfigClassMaxLogFileDuration},
                    { "GetCQGAPIConfigClassMaxLogFileSize", this.GetCQGAPIConfigClassMaxLogFileSize},
                    { "SetCQGAPIConfigClassMaxLogFileSize", this.SetCQGAPIConfigClassMaxLogFileSize},
                    { "GetCQGAPIConfigClassMessageProcessingTimeout", this.GetCQGAPIConfigClassMessageProcessingTimeout},
                    { "SetCQGAPIConfigClassMessageProcessingTimeout", this.SetCQGAPIConfigClassMessageProcessingTimeout},
                    { "GetCQGAPIConfigClassMetaDataEnabled", this.GetCQGAPIConfigClassMetaDataEnabled},
                    { "SetCQGAPIConfigClassMetaDataEnabled", this.SetCQGAPIConfigClassMetaDataEnabled},
                    { "GetCQGAPIConfigClassNewInstrumentChangeMode", this.GetCQGAPIConfigClassNewInstrumentChangeMode},
                    { "SetCQGAPIConfigClassNewInstrumentChangeMode", this.SetCQGAPIConfigClassNewInstrumentChangeMode},
                    { "GetCQGAPIConfigClassNewInstrumentMode", this.GetCQGAPIConfigClassNewInstrumentMode},
                    { "SetCQGAPIConfigClassNewInstrumentMode", this.SetCQGAPIConfigClassNewInstrumentMode},
                    { "GetCQGAPIConfigClassNonsynchronizedData", this.GetCQGAPIConfigClassNonsynchronizedData},
                    { "SetCQGAPIConfigClassNonsynchronizedData", this.SetCQGAPIConfigClassNonsynchronizedData},
                    { "GetCQGAPIConfigClassPendingOrderActionEnabled", this.GetCQGAPIConfigClassPendingOrderActionEnabled},
                    { "SetCQGAPIConfigClassPendingOrderActionEnabled", this.SetCQGAPIConfigClassPendingOrderActionEnabled},
                    { "GetCQGAPIConfigClassPositionDetailing", this.GetCQGAPIConfigClassPositionDetailing},
                    { "SetCQGAPIConfigClassPositionDetailing", this.SetCQGAPIConfigClassPositionDetailing},
                    { "GetCQGAPIConfigClassPriceMode", this.GetCQGAPIConfigClassPriceMode},
                    { "SetCQGAPIConfigClassPriceMode", this.SetCQGAPIConfigClassPriceMode},
                    { "GetCQGAPIConfigClassProviderPassword", this.GetCQGAPIConfigClassProviderPassword},
                    { "SetCQGAPIConfigClassProviderPassword", this.SetCQGAPIConfigClassProviderPassword},
                    { "GetCQGAPIConfigClassQueryAllAuthorizedTraders", this.GetCQGAPIConfigClassQueryAllAuthorizedTraders},
                    { "SetCQGAPIConfigClassQueryAllAuthorizedTraders", this.SetCQGAPIConfigClassQueryAllAuthorizedTraders},
                    { "GetCQGAPIConfigClassReadyStatusCheck", this.GetCQGAPIConfigClassReadyStatusCheck},
                    { "SetCQGAPIConfigClassReadyStatusCheck", this.SetCQGAPIConfigClassReadyStatusCheck},
                    { "GetCQGAPIConfigClassRemoteOpenAPILoginService", this.GetCQGAPIConfigClassRemoteOpenAPILoginService},
                    { "SetCQGAPIConfigClassRemoteOpenAPILoginService", this.SetCQGAPIConfigClassRemoteOpenAPILoginService},
                    { "GetCQGAPIConfigClassRemoteOpenAPIServer", this.GetCQGAPIConfigClassRemoteOpenAPIServer},
                    { "SetCQGAPIConfigClassRemoteOpenAPIServer", this.SetCQGAPIConfigClassRemoteOpenAPIServer},
                    { "GetCQGAPIConfigClassRemoteOpenAPIServers", this.GetCQGAPIConfigClassRemoteOpenAPIServers},
                    { "GetCQGAPIConfigClassReplaceLoginSession", this.GetCQGAPIConfigClassReplaceLoginSession},
                    { "SetCQGAPIConfigClassReplaceLoginSession", this.SetCQGAPIConfigClassReplaceLoginSession},
                    { "GetCQGAPIConfigClassSnapshotPeriod", this.GetCQGAPIConfigClassSnapshotPeriod},
                    { "SetCQGAPIConfigClassSnapshotPeriod", this.SetCQGAPIConfigClassSnapshotPeriod},
                    { "GetCQGAPIConfigClassStrategyManagerEnabled", this.GetCQGAPIConfigClassStrategyManagerEnabled},
                    { "SetCQGAPIConfigClassStrategyManagerEnabled", this.SetCQGAPIConfigClassStrategyManagerEnabled},
                    { "GetCQGAPIConfigClassTimeZoneCode", this.GetCQGAPIConfigClassTimeZoneCode},
                    { "SetCQGAPIConfigClassTimeZoneCode", this.SetCQGAPIConfigClassTimeZoneCode},
                    { "GetCQGAPIConfigClassUsedFromATLClient", this.GetCQGAPIConfigClassUsedFromATLClient},
                    { "SetCQGAPIConfigClassUsedFromATLClient", this.SetCQGAPIConfigClassUsedFromATLClient},
                    { "GetCQGAPIConfigClassUseOrderSide", this.GetCQGAPIConfigClassUseOrderSide},
                    { "SetCQGAPIConfigClassUseOrderSide", this.SetCQGAPIConfigClassUseOrderSide},
                    { "MethodCQGAPIConfigClassAddRemoteOpenAPIServer", this.MethodCQGAPIConfigClassAddRemoteOpenAPIServer},
                    { "MethodCQGAPIConfigClassClearRemoteOpenAPIServers", this.MethodCQGAPIConfigClassClearRemoteOpenAPIServers},
                    { "MethodCQGAPIConfigClassGetHashCode", this.MethodCQGAPIConfigClassGetHashCode},
                    { "MethodCQGAPIConfigClassToString", this.MethodCQGAPIConfigClassToString},
                    { "GetCQGBarsTimestampsClassCount", this.GetCQGBarsTimestampsClassCount},
                    { "GetCQGBarsTimestampsClassId", this.GetCQGBarsTimestampsClassId},
                    { "GetCQGBarsTimestampsClassItem", this.GetCQGBarsTimestampsClassItem},
                    { "GetCQGBarsTimestampsClassLastError", this.GetCQGBarsTimestampsClassLastError},
                    { "GetCQGBarsTimestampsClassStatus", this.GetCQGBarsTimestampsClassStatus},
                    { "MethodCQGBarsTimestampsClassGetEnumerator", this.MethodCQGBarsTimestampsClassGetEnumerator},
                    { "MethodCQGBarsTimestampsClassGetHashCode", this.MethodCQGBarsTimestampsClassGetHashCode},
                    { "MethodCQGBarsTimestampsClassToString", this.MethodCQGBarsTimestampsClassToString},
                    { "GetCQGCELClassAccounts", this.GetCQGCELClassAccounts},
                    { "GetCQGCELClassAccountSubscriptionLevel", this.GetCQGCELClassAccountSubscriptionLevel},
                    { "SetCQGCELClassAccountSubscriptionLevel", this.SetCQGCELClassAccountSubscriptionLevel},
                    { "GetCQGCELClassAllAdvancedStudies", this.GetCQGCELClassAllAdvancedStudies},
                    { "GetCQGCELClassAllConditions", this.GetCQGCELClassAllConditions},
                    { "GetCQGCELClassAllConstantVolumeBars", this.GetCQGCELClassAllConstantVolumeBars},
                    { "GetCQGCELClassAllCustomStudies", this.GetCQGCELClassAllCustomStudies},
                    { "GetCQGCELClassAllExpressions", this.GetCQGCELClassAllExpressions},
                    { "GetCQGCELClassAllInstrumentsGroups", this.GetCQGCELClassAllInstrumentsGroups},
                    { "GetCQGCELClassAllManualFills", this.GetCQGCELClassAllManualFills},
                    { "GetCQGCELClassAllPointAndFigureBars", this.GetCQGCELClassAllPointAndFigureBars},
                    { "GetCQGCELClassAllStrategyDefinitions", this.GetCQGCELClassAllStrategyDefinitions},
                    { "GetCQGCELClassAllSubMinuteBars", this.GetCQGCELClassAllSubMinuteBars},
                    { "GetCQGCELClassAllTFlowBars", this.GetCQGCELClassAllTFlowBars},
                    { "GetCQGCELClassAllTicks", this.GetCQGCELClassAllTicks},
                    { "GetCQGCELClassAllTimedBars", this.GetCQGCELClassAllTimedBars},
                    { "GetCQGCELClassAllTradingSystems", this.GetCQGCELClassAllTradingSystems},
                    { "GetCQGCELClassAllYields", this.GetCQGCELClassAllYields},
                    { "GetCQGCELClassAPIConfiguration", this.GetCQGCELClassAPIConfiguration},
                    { "GetCQGCELClassConfiguration", this.GetCQGCELClassConfiguration},
                    { "SetCQGCELClassConfiguration", this.SetCQGCELClassConfiguration},
                    { "GetCQGCELClassCurrencyRates", this.GetCQGCELClassCurrencyRates},
                    { "GetCQGCELClassDirectEventsAccessor", this.GetCQGCELClassDirectEventsAccessor},
                    { "GetCQGCELClassEnvironment", this.GetCQGCELClassEnvironment},
                    { "GetCQGCELClassInstruments", this.GetCQGCELClassInstruments},
                    { "GetCQGCELClassInternalOrders", this.GetCQGCELClassInternalOrders},
                    { "GetCQGCELClassIsStarted", this.GetCQGCELClassIsStarted},
                    { "GetCQGCELClassLogger", this.GetCQGCELClassLogger},
                    { "GetCQGCELClassOrders", this.GetCQGCELClassOrders},
                    { "GetCQGCELClassOTPRequired", this.GetCQGCELClassOTPRequired},
                    { "EventCQGCELClassAccountChanged", this.EventCQGCELClassAccountChanged},
                    { "EventCQGCELClassAdvancedStudyAdded", this.EventCQGCELClassAdvancedStudyAdded},
                    { "EventCQGCELClassAdvancedStudyDefinitionsResolved", this.EventCQGCELClassAdvancedStudyDefinitionsResolved},
                    { "EventCQGCELClassAdvancedStudyInserted", this.EventCQGCELClassAdvancedStudyInserted},
                    { "EventCQGCELClassAdvancedStudyRemoved", this.EventCQGCELClassAdvancedStudyRemoved},
                    { "EventCQGCELClassAdvancedStudyResolved", this.EventCQGCELClassAdvancedStudyResolved},
                    { "EventCQGCELClassAdvancedStudyUpdated", this.EventCQGCELClassAdvancedStudyUpdated},
                    { "EventCQGCELClassAlgorithmicOrderPlaced", this.EventCQGCELClassAlgorithmicOrderPlaced},
                    { "EventCQGCELClassAlgorithmicOrderRegistrationComplete", this.EventCQGCELClassAlgorithmicOrderRegistrationComplete},
                    { "EventCQGCELClassAllOrdersCanceled", this.EventCQGCELClassAllOrdersCanceled},
                    { "EventCQGCELClassAuthenticationStatusChanged", this.EventCQGCELClassAuthenticationStatusChanged},
                    { "EventCQGCELClassBarsTimestampsResolved", this.EventCQGCELClassBarsTimestampsResolved},
                    { "EventCQGCELClassCELStarted", this.EventCQGCELClassCELStarted},
                    { "EventCQGCELClassCommodityInstrumentsResolved", this.EventCQGCELClassCommodityInstrumentsResolved},
                    { "EventCQGCELClassConditionAdded", this.EventCQGCELClassConditionAdded},
                    { "EventCQGCELClassConditionDefinitionsResolved", this.EventCQGCELClassConditionDefinitionsResolved},
                    { "EventCQGCELClassConditionInserted", this.EventCQGCELClassConditionInserted},
                    { "EventCQGCELClassConditionRemoved", this.EventCQGCELClassConditionRemoved},
                    { "EventCQGCELClassConditionResolved", this.EventCQGCELClassConditionResolved},
                    { "EventCQGCELClassConditionUpdated", this.EventCQGCELClassConditionUpdated},
                    { "EventCQGCELClassConstantVolumeBarsAdded", this.EventCQGCELClassConstantVolumeBarsAdded},
                    { "EventCQGCELClassConstantVolumeBarsInserted", this.EventCQGCELClassConstantVolumeBarsInserted},
                    { "EventCQGCELClassConstantVolumeBarsRemoved", this.EventCQGCELClassConstantVolumeBarsRemoved},
                    { "EventCQGCELClassConstantVolumeBarsResolved", this.EventCQGCELClassConstantVolumeBarsResolved},
                    { "EventCQGCELClassConstantVolumeBarsUpdated", this.EventCQGCELClassConstantVolumeBarsUpdated},
                    { "EventCQGCELClassCurrencyRatesChanged", this.EventCQGCELClassCurrencyRatesChanged},
                    { "EventCQGCELClassCustomSessionsResolved", this.EventCQGCELClassCustomSessionsResolved},
                    { "EventCQGCELClassCustomStudyAdded", this.EventCQGCELClassCustomStudyAdded},
                    { "EventCQGCELClassCustomStudyDefinitionsResolved", this.EventCQGCELClassCustomStudyDefinitionsResolved},
                    { "EventCQGCELClassCustomStudyInserted", this.EventCQGCELClassCustomStudyInserted},
                    { "EventCQGCELClassCustomStudyRemoved", this.EventCQGCELClassCustomStudyRemoved},
                    { "EventCQGCELClassCustomStudyResolved", this.EventCQGCELClassCustomStudyResolved},
                    { "EventCQGCELClassCustomStudyUpdated", this.EventCQGCELClassCustomStudyUpdated},
                    { "EventCQGCELClassDataConnectionStatusChanged", this.EventCQGCELClassDataConnectionStatusChanged},
                    { "EventCQGCELClassDataError", this.EventCQGCELClassDataError},
                    { "EventCQGCELClassDataSourcesResolved", this.EventCQGCELClassDataSourcesResolved},
                    { "EventCQGCELClassDataSourceSymbolsResolved", this.EventCQGCELClassDataSourceSymbolsResolved},
                    { "EventCQGCELClassExpressionAdded", this.EventCQGCELClassExpressionAdded},
                    { "EventCQGCELClassExpressionInserted", this.EventCQGCELClassExpressionInserted},
                    { "EventCQGCELClassExpressionRemoved", this.EventCQGCELClassExpressionRemoved},
                    { "EventCQGCELClassExpressionResolved", this.EventCQGCELClassExpressionResolved},
                    { "EventCQGCELClassExpressionUpdated", this.EventCQGCELClassExpressionUpdated},
                    { "EventCQGCELClassGWConnectionStatusChanged", this.EventCQGCELClassGWConnectionStatusChanged},
                    { "EventCQGCELClassGWEnvironmentChanged", this.EventCQGCELClassGWEnvironmentChanged},
                    { "EventCQGCELClassHistoricalSessionsResolved", this.EventCQGCELClassHistoricalSessionsResolved},
                    { "EventCQGCELClassICConnectionStatusChanged", this.EventCQGCELClassICConnectionStatusChanged},
                    { "EventCQGCELClassIncorrectSymbol", this.EventCQGCELClassIncorrectSymbol},
                    { "EventCQGCELClassInstrumentChanged", this.EventCQGCELClassInstrumentChanged},
                    { "EventCQGCELClassInstrumentDOMChanged", this.EventCQGCELClassInstrumentDOMChanged},
                    { "EventCQGCELClassInstrumentsGroupChanged", this.EventCQGCELClassInstrumentsGroupChanged},
                    { "EventCQGCELClassInstrumentsGroupResolved", this.EventCQGCELClassInstrumentsGroupResolved},
                    { "EventCQGCELClassInstrumentSubscribed", this.EventCQGCELClassInstrumentSubscribed},
                    { "EventCQGCELClassLineTimeChanged", this.EventCQGCELClassLineTimeChanged},
                    { "EventCQGCELClassManualFillChanged", this.EventCQGCELClassManualFillChanged},
                    { "EventCQGCELClassManualFillsResolved", this.EventCQGCELClassManualFillsResolved},
                    { "EventCQGCELClassManualFillUpdateResolved", this.EventCQGCELClassManualFillUpdateResolved},
                    { "EventCQGCELClassOnIdle", this.EventCQGCELClassOnIdle},
                    { "EventCQGCELClassOnQueryProgress", this.EventCQGCELClassOnQueryProgress},
                    { "EventCQGCELClassOrderChanged", this.EventCQGCELClassOrderChanged},
                    { "EventCQGCELClassPasswordChanged", this.EventCQGCELClassPasswordChanged},
                    { "EventCQGCELClassPointAndFigureBarsAdded", this.EventCQGCELClassPointAndFigureBarsAdded},
                    { "EventCQGCELClassPointAndFigureBarsInserted", this.EventCQGCELClassPointAndFigureBarsInserted},
                    { "EventCQGCELClassPointAndFigureBarsRemoved", this.EventCQGCELClassPointAndFigureBarsRemoved},
                    { "EventCQGCELClassPointAndFigureBarsResolved", this.EventCQGCELClassPointAndFigureBarsResolved},
                    { "EventCQGCELClassPointAndFigureBarsUpdated", this.EventCQGCELClassPointAndFigureBarsUpdated},
                    { "EventCQGCELClassPositionsStatementResolved", this.EventCQGCELClassPositionsStatementResolved},
                    { "EventCQGCELClassQFormulaDefinitionsResolved", this.EventCQGCELClassQFormulaDefinitionsResolved},
                    { "EventCQGCELClassStrategyDefinitionProgress", this.EventCQGCELClassStrategyDefinitionProgress},
                    { "EventCQGCELClassSubMinuteBarsAdded", this.EventCQGCELClassSubMinuteBarsAdded},
                    { "EventCQGCELClassSubMinuteBarsInserted", this.EventCQGCELClassSubMinuteBarsInserted},
                    { "EventCQGCELClassSubMinuteBarsRemoved", this.EventCQGCELClassSubMinuteBarsRemoved},
                    { "EventCQGCELClassSubMinuteBarsResolved", this.EventCQGCELClassSubMinuteBarsResolved},
                    { "EventCQGCELClassSubMinuteBarsUpdated", this.EventCQGCELClassSubMinuteBarsUpdated},
                    { "EventCQGCELClassSummariesStatementResolved", this.EventCQGCELClassSummariesStatementResolved},
                    { "EventCQGCELClassTFlowBarsAdded", this.EventCQGCELClassTFlowBarsAdded},
                    { "EventCQGCELClassTFlowBarsInserted", this.EventCQGCELClassTFlowBarsInserted},
                    { "EventCQGCELClassTFlowBarsRemoved", this.EventCQGCELClassTFlowBarsRemoved},
                    { "EventCQGCELClassTFlowBarsResolved", this.EventCQGCELClassTFlowBarsResolved},
                    { "EventCQGCELClassTFlowBarsUpdated", this.EventCQGCELClassTFlowBarsUpdated},
                    { "EventCQGCELClassTicksAdded", this.EventCQGCELClassTicksAdded},
                    { "EventCQGCELClassTicksResolved", this.EventCQGCELClassTicksResolved},
                    { "EventCQGCELClassTimedBarsAdded", this.EventCQGCELClassTimedBarsAdded},
                    { "EventCQGCELClassTimedBarsInserted", this.EventCQGCELClassTimedBarsInserted},
                    { "EventCQGCELClassTimedBarsRemoved", this.EventCQGCELClassTimedBarsRemoved},
                    { "EventCQGCELClassTimedBarsResolved", this.EventCQGCELClassTimedBarsResolved},
                    { "EventCQGCELClassTimedBarsUpdated", this.EventCQGCELClassTimedBarsUpdated},
                    { "EventCQGCELClassTradableCommoditiesResolved", this.EventCQGCELClassTradableCommoditiesResolved},
                    { "EventCQGCELClassTradableExchangesResolved", this.EventCQGCELClassTradableExchangesResolved},
                    { "EventCQGCELClassTradingSystemAddNotification", this.EventCQGCELClassTradingSystemAddNotification},
                    { "EventCQGCELClassTradingSystemDefinitionsResolved", this.EventCQGCELClassTradingSystemDefinitionsResolved},
                    { "EventCQGCELClassTradingSystemInsertNotification", this.EventCQGCELClassTradingSystemInsertNotification},
                    { "EventCQGCELClassTradingSystemRemoveNotification", this.EventCQGCELClassTradingSystemRemoveNotification},
                    { "EventCQGCELClassTradingSystemResolved", this.EventCQGCELClassTradingSystemResolved},
                    { "EventCQGCELClassTradingSystemTradeRelationAddNotification", this.EventCQGCELClassTradingSystemTradeRelationAddNotification},
                    { "EventCQGCELClassTradingSystemUpdateNotification", this.EventCQGCELClassTradingSystemUpdateNotification},
                    { "EventCQGCELClassYieldsAdded", this.EventCQGCELClassYieldsAdded},
                    { "EventCQGCELClassYieldsInserted", this.EventCQGCELClassYieldsInserted},
                    { "EventCQGCELClassYieldsRemoved", this.EventCQGCELClassYieldsRemoved},
                    { "EventCQGCELClassYieldsResolved", this.EventCQGCELClassYieldsResolved},
                    { "EventCQGCELClassYieldsUpdated", this.EventCQGCELClassYieldsUpdated},
                    { "MethodCQGCELClassActivateAllOrders", this.MethodCQGCELClassActivateAllOrders},
                    { "MethodCQGCELClassActivateAllOrdersEx", this.MethodCQGCELClassActivateAllOrdersEx},
                    { "MethodCQGCELClassCancelAllOrders", this.MethodCQGCELClassCancelAllOrders},
                    { "MethodCQGCELClassCancelAllOrdersEx", this.MethodCQGCELClassCancelAllOrdersEx},
                    { "MethodCQGCELClassChangePassword", this.MethodCQGCELClassChangePassword},
                    { "MethodCQGCELClassChangeRemoteOpenAPIServer", this.MethodCQGCELClassChangeRemoteOpenAPIServer},
                    { "MethodCQGCELClassCreateAccountsCollection", this.MethodCQGCELClassCreateAccountsCollection},
                    { "MethodCQGCELClassCreateAdvancedStudyRequest", this.MethodCQGCELClassCreateAdvancedStudyRequest},
                    { "MethodCQGCELClassCreateAlgorithmicOrderDefinitions", this.MethodCQGCELClassCreateAlgorithmicOrderDefinitions},
                    { "MethodCQGCELClassCreateConditionRequest", this.MethodCQGCELClassCreateConditionRequest},
                    { "MethodCQGCELClassCreateConstantVolumeBarsRequest", this.MethodCQGCELClassCreateConstantVolumeBarsRequest},
                    { "MethodCQGCELClassCreateCustomStudyRequest", this.MethodCQGCELClassCreateCustomStudyRequest},
                    { "MethodCQGCELClassCreateExecutionPattern", this.MethodCQGCELClassCreateExecutionPattern},
                    { "MethodCQGCELClassCreateExpressionRequest", this.MethodCQGCELClassCreateExpressionRequest},
                    { "MethodCQGCELClassCreateHistoricalSessionsRequest", this.MethodCQGCELClassCreateHistoricalSessionsRequest},
                    { "MethodCQGCELClassCreateInstrumentRequest", this.MethodCQGCELClassCreateInstrumentRequest},
                    { "MethodCQGCELClassCreateInstrumentsGroupRequest", this.MethodCQGCELClassCreateInstrumentsGroupRequest},
                    { "MethodCQGCELClassCreateManualFillRequest", this.MethodCQGCELClassCreateManualFillRequest},
                    { "MethodCQGCELClassCreateOrder", this.MethodCQGCELClassCreateOrder},
                    { "MethodCQGCELClassCreateOrderActionRequest", this.MethodCQGCELClassCreateOrderActionRequest},
                    { "MethodCQGCELClassCreateOrderByInstrumentName", this.MethodCQGCELClassCreateOrderByInstrumentName},
                    { "MethodCQGCELClassCreateOrderChain", this.MethodCQGCELClassCreateOrderChain},
                    { "MethodCQGCELClassCreatePointAndFigureBarsRequest", this.MethodCQGCELClassCreatePointAndFigureBarsRequest},
                    { "MethodCQGCELClassCreateStrategyOrder", this.MethodCQGCELClassCreateStrategyOrder},
                    { "MethodCQGCELClassCreateStrategyOrderByExpression", this.MethodCQGCELClassCreateStrategyOrderByExpression},
                    { "MethodCQGCELClassCreateSubMinuteBarsRequest", this.MethodCQGCELClassCreateSubMinuteBarsRequest},
                    { "MethodCQGCELClassCreateTFlowBarsRequest", this.MethodCQGCELClassCreateTFlowBarsRequest},
                    { "MethodCQGCELClassCreateTicksRequest", this.MethodCQGCELClassCreateTicksRequest},
                    { "MethodCQGCELClassCreateTimedBarsRequest", this.MethodCQGCELClassCreateTimedBarsRequest},
                    { "MethodCQGCELClassCreateTradingSystemRequest", this.MethodCQGCELClassCreateTradingSystemRequest},
                    { "MethodCQGCELClassCreateYieldsRequest", this.MethodCQGCELClassCreateYieldsRequest},
                    { "MethodCQGCELClassDefineStrategy", this.MethodCQGCELClassDefineStrategy},
                    { "MethodCQGCELClassGetHashCode", this.MethodCQGCELClassGetHashCode},
                    { "MethodCQGCELClassGWLogoff", this.MethodCQGCELClassGWLogoff},
                    { "MethodCQGCELClassGWLogon", this.MethodCQGCELClassGWLogon},
                    { "MethodCQGCELClassGWOTPLogon", this.MethodCQGCELClassGWOTPLogon},
                    { "MethodCQGCELClassIsValid", this.MethodCQGCELClassIsValid},
                    { "MethodCQGCELClassLogOn", this.MethodCQGCELClassLogOn},
                    { "MethodCQGCELClassModifyCompoundOrder", this.MethodCQGCELClassModifyCompoundOrder},
                    { "MethodCQGCELClassNewInstrument", this.MethodCQGCELClassNewInstrument},
                    { "MethodCQGCELClassPlaceCompoundOrder", this.MethodCQGCELClassPlaceCompoundOrder},
                    { "MethodCQGCELClassQueryOrders", this.MethodCQGCELClassQueryOrders},
                    { "MethodCQGCELClassQueryPositionsStatement", this.MethodCQGCELClassQueryPositionsStatement},
                    { "MethodCQGCELClassQuerySummariesStatement", this.MethodCQGCELClassQuerySummariesStatement},
                    { "MethodCQGCELClassRegisterAlgorithmicOrder", this.MethodCQGCELClassRegisterAlgorithmicOrder},
                    { "MethodCQGCELClassRemoveAdvancedStudy", this.MethodCQGCELClassRemoveAdvancedStudy},
                    { "MethodCQGCELClassRemoveAllAdvancedStudies", this.MethodCQGCELClassRemoveAllAdvancedStudies},
                    { "MethodCQGCELClassRemoveAllConditions", this.MethodCQGCELClassRemoveAllConditions},
                    { "MethodCQGCELClassRemoveAllConstantVolumeBars", this.MethodCQGCELClassRemoveAllConstantVolumeBars},
                    { "MethodCQGCELClassRemoveAllCustomStudies", this.MethodCQGCELClassRemoveAllCustomStudies},
                    { "MethodCQGCELClassRemoveAllExpressions", this.MethodCQGCELClassRemoveAllExpressions},
                    { "MethodCQGCELClassRemoveAllInstruments", this.MethodCQGCELClassRemoveAllInstruments},
                    { "MethodCQGCELClassRemoveAllPointAndFigureBars", this.MethodCQGCELClassRemoveAllPointAndFigureBars},
                    { "MethodCQGCELClassRemoveAllSubMinuteBars", this.MethodCQGCELClassRemoveAllSubMinuteBars},
                    { "MethodCQGCELClassRemoveAllTFlowBars", this.MethodCQGCELClassRemoveAllTFlowBars},
                    { "MethodCQGCELClassRemoveAllTicks", this.MethodCQGCELClassRemoveAllTicks},
                    { "MethodCQGCELClassRemoveAllTimedBars", this.MethodCQGCELClassRemoveAllTimedBars},
                    { "MethodCQGCELClassRemoveAllTradingSystems", this.MethodCQGCELClassRemoveAllTradingSystems},
                    { "MethodCQGCELClassRemoveAllYields", this.MethodCQGCELClassRemoveAllYields},
                    { "MethodCQGCELClassRemoveCondition", this.MethodCQGCELClassRemoveCondition},
                    { "MethodCQGCELClassRemoveConstantVolumeBars", this.MethodCQGCELClassRemoveConstantVolumeBars},
                    { "MethodCQGCELClassRemoveCustomStudy", this.MethodCQGCELClassRemoveCustomStudy},
                    { "MethodCQGCELClassRemoveExpression", this.MethodCQGCELClassRemoveExpression},
                    { "MethodCQGCELClassRemoveInstrument", this.MethodCQGCELClassRemoveInstrument},
                    { "MethodCQGCELClassRemoveInstrumentsGroup", this.MethodCQGCELClassRemoveInstrumentsGroup},
                    { "MethodCQGCELClassRemovePointAndFigureBars", this.MethodCQGCELClassRemovePointAndFigureBars},
                    { "MethodCQGCELClassRemoveSubMinuteBars", this.MethodCQGCELClassRemoveSubMinuteBars},
                    { "MethodCQGCELClassRemoveTFlowBars", this.MethodCQGCELClassRemoveTFlowBars},
                    { "MethodCQGCELClassRemoveTicks", this.MethodCQGCELClassRemoveTicks},
                    { "MethodCQGCELClassRemoveTimedBars", this.MethodCQGCELClassRemoveTimedBars},
                    { "MethodCQGCELClassRemoveTradingSystem", this.MethodCQGCELClassRemoveTradingSystem},
                    { "MethodCQGCELClassRemoveYields", this.MethodCQGCELClassRemoveYields},
                    { "MethodCQGCELClassRequestAdvancedStudy", this.MethodCQGCELClassRequestAdvancedStudy},
                    { "MethodCQGCELClassRequestAdvancedStudyDefinitions", this.MethodCQGCELClassRequestAdvancedStudyDefinitions},
                    { "MethodCQGCELClassRequestBarsTimestamps", this.MethodCQGCELClassRequestBarsTimestamps},
                    { "MethodCQGCELClassRequestCommodityInstruments", this.MethodCQGCELClassRequestCommodityInstruments},
                    { "MethodCQGCELClassRequestCondition", this.MethodCQGCELClassRequestCondition},
                    { "MethodCQGCELClassRequestConditionDefinitions", this.MethodCQGCELClassRequestConditionDefinitions},
                    { "MethodCQGCELClassRequestConstantVolumeBars", this.MethodCQGCELClassRequestConstantVolumeBars},
                    { "MethodCQGCELClassRequestCustomSessions", this.MethodCQGCELClassRequestCustomSessions},
                    { "MethodCQGCELClassRequestCustomStudy", this.MethodCQGCELClassRequestCustomStudy},
                    { "MethodCQGCELClassRequestCustomStudyDefinitions", this.MethodCQGCELClassRequestCustomStudyDefinitions},
                    { "MethodCQGCELClassRequestDataSources", this.MethodCQGCELClassRequestDataSources},
                    { "MethodCQGCELClassRequestDataSourceSymbols", this.MethodCQGCELClassRequestDataSourceSymbols},
                    { "MethodCQGCELClassRequestExpression", this.MethodCQGCELClassRequestExpression},
                    { "MethodCQGCELClassRequestHistoricalSessions", this.MethodCQGCELClassRequestHistoricalSessions},
                    { "MethodCQGCELClassRequestInstrumentsGroup", this.MethodCQGCELClassRequestInstrumentsGroup},
                    { "MethodCQGCELClassRequestManualFills", this.MethodCQGCELClassRequestManualFills},
                    { "MethodCQGCELClassRequestManualFillUpdate", this.MethodCQGCELClassRequestManualFillUpdate},
                    { "MethodCQGCELClassRequestPointAndFigureBars", this.MethodCQGCELClassRequestPointAndFigureBars},
                    { "MethodCQGCELClassRequestQFormulaDefinitions", this.MethodCQGCELClassRequestQFormulaDefinitions},
                    { "MethodCQGCELClassRequestSubMinuteBars", this.MethodCQGCELClassRequestSubMinuteBars},
                    { "MethodCQGCELClassRequestTFlowBars", this.MethodCQGCELClassRequestTFlowBars},
                    { "MethodCQGCELClassRequestTicks", this.MethodCQGCELClassRequestTicks},
                    { "MethodCQGCELClassRequestTimedBars", this.MethodCQGCELClassRequestTimedBars},
                    { "MethodCQGCELClassRequestTradableCommodities", this.MethodCQGCELClassRequestTradableCommodities},
                    { "MethodCQGCELClassRequestTradableExchanges", this.MethodCQGCELClassRequestTradableExchanges},
                    { "MethodCQGCELClassRequestTradingSystem", this.MethodCQGCELClassRequestTradingSystem},
                    { "MethodCQGCELClassRequestTradingSystemDefinitions", this.MethodCQGCELClassRequestTradingSystemDefinitions},
                    { "MethodCQGCELClassRequestYields", this.MethodCQGCELClassRequestYields},
                    { "MethodCQGCELClassShutdown", this.MethodCQGCELClassShutdown},
                    { "MethodCQGCELClassStartup", this.MethodCQGCELClassStartup},
                    { "MethodCQGCELClassSubscribeNewInstrument", this.MethodCQGCELClassSubscribeNewInstrument},
                    { "MethodCQGCELClassTerminateCQGIC", this.MethodCQGCELClassTerminateCQGIC},
                    { "MethodCQGCELClassToString", this.MethodCQGCELClassToString},
                    { "MethodCQGCELClassUnregisterAlgorithmicOrder", this.MethodCQGCELClassUnregisterAlgorithmicOrder},
                    { "GetCQGChangedTradeEntriesClassChangeFilter", this.GetCQGChangedTradeEntriesClassChangeFilter},
                    { "GetCQGChangedTradeEntriesClassCount", this.GetCQGChangedTradeEntriesClassCount},
                    { "GetCQGChangedTradeEntriesClassItem", this.GetCQGChangedTradeEntriesClassItem},
                    { "MethodCQGChangedTradeEntriesClassGetEnumerator", this.MethodCQGChangedTradeEntriesClassGetEnumerator},
                    { "MethodCQGChangedTradeEntriesClassGetHashCode", this.MethodCQGChangedTradeEntriesClassGetHashCode},
                    { "MethodCQGChangedTradeEntriesClassToString", this.MethodCQGChangedTradeEntriesClassToString},
                    { "GetCQGChangedTradeEntryClassChangeCategory", this.GetCQGChangedTradeEntryClassChangeCategory},
                    { "GetCQGChangedTradeEntryClassTradeEntry", this.GetCQGChangedTradeEntryClassTradeEntry},
                    { "MethodCQGChangedTradeEntryClassGetHashCode", this.MethodCQGChangedTradeEntryClassGetHashCode},
                    { "MethodCQGChangedTradeEntryClassToString", this.MethodCQGChangedTradeEntryClassToString},
                    { "GetCQGChangedTradeExitClassChangeCategory", this.GetCQGChangedTradeExitClassChangeCategory},
                    { "GetCQGChangedTradeExitClassTradeExit", this.GetCQGChangedTradeExitClassTradeExit},
                    { "MethodCQGChangedTradeExitClassGetHashCode", this.MethodCQGChangedTradeExitClassGetHashCode},
                    { "MethodCQGChangedTradeExitClassToString", this.MethodCQGChangedTradeExitClassToString},
                    { "GetCQGChangedTradeExitsClassChangeFilter", this.GetCQGChangedTradeExitsClassChangeFilter},
                    { "GetCQGChangedTradeExitsClassCount", this.GetCQGChangedTradeExitsClassCount},
                    { "GetCQGChangedTradeExitsClassItem", this.GetCQGChangedTradeExitsClassItem},
                    { "MethodCQGChangedTradeExitsClassGetEnumerator", this.MethodCQGChangedTradeExitsClassGetEnumerator},
                    { "MethodCQGChangedTradeExitsClassGetHashCode", this.MethodCQGChangedTradeExitsClassGetHashCode},
                    { "MethodCQGChangedTradeExitsClassToString", this.MethodCQGChangedTradeExitsClassToString},
                    { "GetCQGCommoditiesClassCount", this.GetCQGCommoditiesClassCount},
                    { "GetCQGCommoditiesClassGWAccountID", this.GetCQGCommoditiesClassGWAccountID},
                    { "GetCQGCommoditiesClassItem", this.GetCQGCommoditiesClassItem},
                    { "MethodCQGCommoditiesClassGetEnumerator", this.MethodCQGCommoditiesClassGetEnumerator},
                    { "MethodCQGCommoditiesClassGetHashCode", this.MethodCQGCommoditiesClassGetHashCode},
                    { "MethodCQGCommoditiesClassToString", this.MethodCQGCommoditiesClassToString},
                    { "GetCQGCommodityInstrumentsClassCount", this.GetCQGCommodityInstrumentsClassCount},
                    { "GetCQGCommodityInstrumentsClassIsTradableOnly", this.GetCQGCommodityInstrumentsClassIsTradableOnly},
                    { "GetCQGCommodityInstrumentsClassItem", this.GetCQGCommodityInstrumentsClassItem},
                    { "MethodCQGCommodityInstrumentsClassGetEnumerator", this.MethodCQGCommodityInstrumentsClassGetEnumerator},
                    { "MethodCQGCommodityInstrumentsClassGetHashCode", this.MethodCQGCommodityInstrumentsClassGetHashCode},
                    { "MethodCQGCommodityInstrumentsClassToString", this.MethodCQGCommodityInstrumentsClassToString},
                    { "GetCQGConditionClassCount", this.GetCQGConditionClassCount},
                    { "GetCQGConditionClassDefinition", this.GetCQGConditionClassDefinition},
                    { "GetCQGConditionClassEndTimestamp", this.GetCQGConditionClassEndTimestamp},
                    { "GetCQGConditionClassId", this.GetCQGConditionClassId},
                    { "GetCQGConditionClassItem", this.GetCQGConditionClassItem},
                    { "GetCQGConditionClassLastError", this.GetCQGConditionClassLastError},
                    { "GetCQGConditionClassRequest", this.GetCQGConditionClassRequest},
                    { "GetCQGConditionClassStartTimestamp", this.GetCQGConditionClassStartTimestamp},
                    { "GetCQGConditionClassStatus", this.GetCQGConditionClassStatus},
                    { "GetCQGConditionClassTag", this.GetCQGConditionClassTag},
                    { "SetCQGConditionClassTag", this.SetCQGConditionClassTag},
                    { "MethodCQGConditionClassget_Tag", this.MethodCQGConditionClassget_Tag},
                    { "MethodCQGConditionClassGetEnumerator", this.MethodCQGConditionClassGetEnumerator},
                    { "MethodCQGConditionClassGetHashCode", this.MethodCQGConditionClassGetHashCode},
                    { "MethodCQGConditionClassIndexForDate", this.MethodCQGConditionClassIndexForDate},
                    { "MethodCQGConditionClassset_Tag", this.MethodCQGConditionClassset_Tag},
                    { "MethodCQGConditionClassToString", this.MethodCQGConditionClassToString},
                    { "GetCQGConditionDefinitionClassName", this.GetCQGConditionDefinitionClassName},
                    { "GetCQGConditionDefinitionClassParameterDefinitions", this.GetCQGConditionDefinitionClassParameterDefinitions},
                    { "MethodCQGConditionDefinitionClassGetHashCode", this.MethodCQGConditionDefinitionClassGetHashCode},
                    { "MethodCQGConditionDefinitionClassToString", this.MethodCQGConditionDefinitionClassToString},
                    { "GetCQGConditionDefinitionsClassCount", this.GetCQGConditionDefinitionsClassCount},
                    { "GetCQGConditionDefinitionsClassItem", this.GetCQGConditionDefinitionsClassItem},
                    { "GetCQGConditionDefinitionsClassItemByName", this.GetCQGConditionDefinitionsClassItemByName},
                    { "MethodCQGConditionDefinitionsClassget_ItemByName", this.MethodCQGConditionDefinitionsClassget_ItemByName},
                    { "MethodCQGConditionDefinitionsClassGetEnumerator", this.MethodCQGConditionDefinitionsClassGetEnumerator},
                    { "MethodCQGConditionDefinitionsClassGetHashCode", this.MethodCQGConditionDefinitionsClassGetHashCode},
                    { "MethodCQGConditionDefinitionsClassToString", this.MethodCQGConditionDefinitionsClassToString},
                    { "GetCQGConditionRequestClassBaseExpression", this.GetCQGConditionRequestClassBaseExpression},
                    { "SetCQGConditionRequestClassBaseExpression", this.SetCQGConditionRequestClassBaseExpression},
                    { "GetCQGConditionRequestClassContinuation", this.GetCQGConditionRequestClassContinuation},
                    { "SetCQGConditionRequestClassContinuation", this.SetCQGConditionRequestClassContinuation},
                    { "GetCQGConditionRequestClassDaysBeforeExpiration", this.GetCQGConditionRequestClassDaysBeforeExpiration},
                    { "SetCQGConditionRequestClassDaysBeforeExpiration", this.SetCQGConditionRequestClassDaysBeforeExpiration},
                    { "GetCQGConditionRequestClassDefinition", this.GetCQGConditionRequestClassDefinition},
                    { "GetCQGConditionRequestClassEqualizeCloses", this.GetCQGConditionRequestClassEqualizeCloses},
                    { "SetCQGConditionRequestClassEqualizeCloses", this.SetCQGConditionRequestClassEqualizeCloses},
                    { "GetCQGConditionRequestClassHistoricalPeriod", this.GetCQGConditionRequestClassHistoricalPeriod},
                    { "SetCQGConditionRequestClassHistoricalPeriod", this.SetCQGConditionRequestClassHistoricalPeriod},
                    { "GetCQGConditionRequestClassIncludeEnd", this.GetCQGConditionRequestClassIncludeEnd},
                    { "SetCQGConditionRequestClassIncludeEnd", this.SetCQGConditionRequestClassIncludeEnd},
                    { "GetCQGConditionRequestClassIntradayPeriod", this.GetCQGConditionRequestClassIntradayPeriod},
                    { "SetCQGConditionRequestClassIntradayPeriod", this.SetCQGConditionRequestClassIntradayPeriod},
                    { "GetCQGConditionRequestClassParameter", this.GetCQGConditionRequestClassParameter},
                    { "SetCQGConditionRequestClassParameter", this.SetCQGConditionRequestClassParameter},
                    { "GetCQGConditionRequestClassRangeEnd", this.GetCQGConditionRequestClassRangeEnd},
                    { "SetCQGConditionRequestClassRangeEnd", this.SetCQGConditionRequestClassRangeEnd},
                    { "GetCQGConditionRequestClassRangeStart", this.GetCQGConditionRequestClassRangeStart},
                    { "SetCQGConditionRequestClassRangeStart", this.SetCQGConditionRequestClassRangeStart},
                    { "GetCQGConditionRequestClassRecalcPeriod", this.GetCQGConditionRequestClassRecalcPeriod},
                    { "SetCQGConditionRequestClassRecalcPeriod", this.SetCQGConditionRequestClassRecalcPeriod},
                    { "GetCQGConditionRequestClassSessionFlags", this.GetCQGConditionRequestClassSessionFlags},
                    { "SetCQGConditionRequestClassSessionFlags", this.SetCQGConditionRequestClassSessionFlags},
                    { "GetCQGConditionRequestClassSessionsFilter", this.GetCQGConditionRequestClassSessionsFilter},
                    { "SetCQGConditionRequestClassSessionsFilter", this.SetCQGConditionRequestClassSessionsFilter},
                    { "GetCQGConditionRequestClassSubscriptionLevel", this.GetCQGConditionRequestClassSubscriptionLevel},
                    { "SetCQGConditionRequestClassSubscriptionLevel", this.SetCQGConditionRequestClassSubscriptionLevel},
                    { "GetCQGConditionRequestClassUpdatesEnabled", this.GetCQGConditionRequestClassUpdatesEnabled},
                    { "SetCQGConditionRequestClassUpdatesEnabled", this.SetCQGConditionRequestClassUpdatesEnabled},
                    { "MethodCQGConditionRequestClassget_Parameter", this.MethodCQGConditionRequestClassget_Parameter},
                    { "MethodCQGConditionRequestClassGetHashCode", this.MethodCQGConditionRequestClassGetHashCode},
                    { "MethodCQGConditionRequestClassset_Parameter", this.MethodCQGConditionRequestClassset_Parameter},
                    { "MethodCQGConditionRequestClassToString", this.MethodCQGConditionRequestClassToString},
                    { "GetCQGConditionResultClassTimestamp", this.GetCQGConditionResultClassTimestamp},
                    { "GetCQGConditionResultClassValue", this.GetCQGConditionResultClassValue},
                    { "MethodCQGConditionResultClassGetHashCode", this.MethodCQGConditionResultClassGetHashCode},
                    { "MethodCQGConditionResultClassToString", this.MethodCQGConditionResultClassToString},
                    { "GetCQGConditionsClassCount", this.GetCQGConditionsClassCount},
                    { "GetCQGConditionsClassItem", this.GetCQGConditionsClassItem},
                    { "GetCQGConditionsClassItemById", this.GetCQGConditionsClassItemById},
                    { "MethodCQGConditionsClassget_ItemById", this.MethodCQGConditionsClassget_ItemById},
                    { "MethodCQGConditionsClassGetEnumerator", this.MethodCQGConditionsClassGetEnumerator},
                    { "MethodCQGConditionsClassGetHashCode", this.MethodCQGConditionsClassGetHashCode},
                    { "MethodCQGConditionsClassToString", this.MethodCQGConditionsClassToString},
                    { "GetCQGConstantVolumeBarClassActualVolume", this.GetCQGConstantVolumeBarClassActualVolume},
                    { "GetCQGConstantVolumeBarClassAskVolume", this.GetCQGConstantVolumeBarClassAskVolume},
                    { "GetCQGConstantVolumeBarClassAvg", this.GetCQGConstantVolumeBarClassAvg},
                    { "GetCQGConstantVolumeBarClassBidVolume", this.GetCQGConstantVolumeBarClassBidVolume},
                    { "GetCQGConstantVolumeBarClassClose", this.GetCQGConstantVolumeBarClassClose},
                    { "GetCQGConstantVolumeBarClassHigh", this.GetCQGConstantVolumeBarClassHigh},
                    { "GetCQGConstantVolumeBarClassHLC3", this.GetCQGConstantVolumeBarClassHLC3},
                    { "GetCQGConstantVolumeBarClassLow", this.GetCQGConstantVolumeBarClassLow},
                    { "GetCQGConstantVolumeBarClassMid", this.GetCQGConstantVolumeBarClassMid},
                    { "GetCQGConstantVolumeBarClassOpen", this.GetCQGConstantVolumeBarClassOpen},
                    { "GetCQGConstantVolumeBarClassRange", this.GetCQGConstantVolumeBarClassRange},
                    { "GetCQGConstantVolumeBarClassTickVolume", this.GetCQGConstantVolumeBarClassTickVolume},
                    { "GetCQGConstantVolumeBarClassTimestamp", this.GetCQGConstantVolumeBarClassTimestamp},
                    { "GetCQGConstantVolumeBarClassTimestampOffset", this.GetCQGConstantVolumeBarClassTimestampOffset},
                    { "GetCQGConstantVolumeBarClassTrueHigh", this.GetCQGConstantVolumeBarClassTrueHigh},
                    { "GetCQGConstantVolumeBarClassTrueLow", this.GetCQGConstantVolumeBarClassTrueLow},
                    { "GetCQGConstantVolumeBarClassTrueRange", this.GetCQGConstantVolumeBarClassTrueRange},
                    { "MethodCQGConstantVolumeBarClassGetHashCode", this.MethodCQGConstantVolumeBarClassGetHashCode},
                    { "MethodCQGConstantVolumeBarClassToString", this.MethodCQGConstantVolumeBarClassToString},
                    { "GetCQGConstantVolumeBarsClassCount", this.GetCQGConstantVolumeBarsClassCount},
                    { "GetCQGConstantVolumeBarsClassEndTimestamp", this.GetCQGConstantVolumeBarsClassEndTimestamp},
                    { "GetCQGConstantVolumeBarsClassId", this.GetCQGConstantVolumeBarsClassId},
                    { "GetCQGConstantVolumeBarsClassItem", this.GetCQGConstantVolumeBarsClassItem},
                    { "GetCQGConstantVolumeBarsClassLastError", this.GetCQGConstantVolumeBarsClassLastError},
                    { "GetCQGConstantVolumeBarsClassRequest", this.GetCQGConstantVolumeBarsClassRequest},
                    { "GetCQGConstantVolumeBarsClassStartTimestamp", this.GetCQGConstantVolumeBarsClassStartTimestamp},
                    { "GetCQGConstantVolumeBarsClassStatus", this.GetCQGConstantVolumeBarsClassStatus},
                    { "GetCQGConstantVolumeBarsClassTag", this.GetCQGConstantVolumeBarsClassTag},
                    { "SetCQGConstantVolumeBarsClassTag", this.SetCQGConstantVolumeBarsClassTag},
                    { "MethodCQGConstantVolumeBarsClassget_Tag", this.MethodCQGConstantVolumeBarsClassget_Tag},
                    { "MethodCQGConstantVolumeBarsClassGetEnumerator", this.MethodCQGConstantVolumeBarsClassGetEnumerator},
                    { "MethodCQGConstantVolumeBarsClassGetHashCode", this.MethodCQGConstantVolumeBarsClassGetHashCode},
                    { "MethodCQGConstantVolumeBarsClassset_Tag", this.MethodCQGConstantVolumeBarsClassset_Tag},
                    { "MethodCQGConstantVolumeBarsClassToString", this.MethodCQGConstantVolumeBarsClassToString},
                    { "GetCQGConstantVolumeBarsCollectionClassCount", this.GetCQGConstantVolumeBarsCollectionClassCount},
                    { "GetCQGConstantVolumeBarsCollectionClassItem", this.GetCQGConstantVolumeBarsCollectionClassItem},
                    { "GetCQGConstantVolumeBarsCollectionClassItemById", this.GetCQGConstantVolumeBarsCollectionClassItemById},
                    { "MethodCQGConstantVolumeBarsCollectionClassget_ItemById", this.MethodCQGConstantVolumeBarsCollectionClassget_ItemById},
                    { "MethodCQGConstantVolumeBarsCollectionClassGetEnumerator", this.MethodCQGConstantVolumeBarsCollectionClassGetEnumerator},
                    { "MethodCQGConstantVolumeBarsCollectionClassGetHashCode", this.MethodCQGConstantVolumeBarsCollectionClassGetHashCode},
                    { "MethodCQGConstantVolumeBarsCollectionClassToString", this.MethodCQGConstantVolumeBarsCollectionClassToString},
                    { "GetCQGConstantVolumeBarsRequestClassContinuation", this.GetCQGConstantVolumeBarsRequestClassContinuation},
                    { "SetCQGConstantVolumeBarsRequestClassContinuation", this.SetCQGConstantVolumeBarsRequestClassContinuation},
                    { "GetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration", this.GetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration", this.SetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGConstantVolumeBarsRequestClassEqualizeCloses", this.GetCQGConstantVolumeBarsRequestClassEqualizeCloses},
                    { "SetCQGConstantVolumeBarsRequestClassEqualizeCloses", this.SetCQGConstantVolumeBarsRequestClassEqualizeCloses},
                    { "GetCQGConstantVolumeBarsRequestClassIncludeEnd", this.GetCQGConstantVolumeBarsRequestClassIncludeEnd},
                    { "SetCQGConstantVolumeBarsRequestClassIncludeEnd", this.SetCQGConstantVolumeBarsRequestClassIncludeEnd},
                    { "GetCQGConstantVolumeBarsRequestClassIncludeFlatTicks", this.GetCQGConstantVolumeBarsRequestClassIncludeFlatTicks},
                    { "SetCQGConstantVolumeBarsRequestClassIncludeFlatTicks", this.SetCQGConstantVolumeBarsRequestClassIncludeFlatTicks},
                    { "GetCQGConstantVolumeBarsRequestClassRangeEnd", this.GetCQGConstantVolumeBarsRequestClassRangeEnd},
                    { "SetCQGConstantVolumeBarsRequestClassRangeEnd", this.SetCQGConstantVolumeBarsRequestClassRangeEnd},
                    { "GetCQGConstantVolumeBarsRequestClassRangeStart", this.GetCQGConstantVolumeBarsRequestClassRangeStart},
                    { "SetCQGConstantVolumeBarsRequestClassRangeStart", this.SetCQGConstantVolumeBarsRequestClassRangeStart},
                    { "GetCQGConstantVolumeBarsRequestClassRecalcPeriod", this.GetCQGConstantVolumeBarsRequestClassRecalcPeriod},
                    { "SetCQGConstantVolumeBarsRequestClassRecalcPeriod", this.SetCQGConstantVolumeBarsRequestClassRecalcPeriod},
                    { "GetCQGConstantVolumeBarsRequestClassSessionFlags", this.GetCQGConstantVolumeBarsRequestClassSessionFlags},
                    { "SetCQGConstantVolumeBarsRequestClassSessionFlags", this.SetCQGConstantVolumeBarsRequestClassSessionFlags},
                    { "GetCQGConstantVolumeBarsRequestClassSessionsFilter", this.GetCQGConstantVolumeBarsRequestClassSessionsFilter},
                    { "SetCQGConstantVolumeBarsRequestClassSessionsFilter", this.SetCQGConstantVolumeBarsRequestClassSessionsFilter},
                    { "GetCQGConstantVolumeBarsRequestClassSubscriptionLevel", this.GetCQGConstantVolumeBarsRequestClassSubscriptionLevel},
                    { "SetCQGConstantVolumeBarsRequestClassSubscriptionLevel", this.SetCQGConstantVolumeBarsRequestClassSubscriptionLevel},
                    { "GetCQGConstantVolumeBarsRequestClassSymbol", this.GetCQGConstantVolumeBarsRequestClassSymbol},
                    { "SetCQGConstantVolumeBarsRequestClassSymbol", this.SetCQGConstantVolumeBarsRequestClassSymbol},
                    { "GetCQGConstantVolumeBarsRequestClassUpdatesEnabled", this.GetCQGConstantVolumeBarsRequestClassUpdatesEnabled},
                    { "SetCQGConstantVolumeBarsRequestClassUpdatesEnabled", this.SetCQGConstantVolumeBarsRequestClassUpdatesEnabled},
                    { "GetCQGConstantVolumeBarsRequestClassVolumeLevel", this.GetCQGConstantVolumeBarsRequestClassVolumeLevel},
                    { "SetCQGConstantVolumeBarsRequestClassVolumeLevel", this.SetCQGConstantVolumeBarsRequestClassVolumeLevel},
                    { "GetCQGConstantVolumeBarsRequestClassVolumeType", this.GetCQGConstantVolumeBarsRequestClassVolumeType},
                    { "SetCQGConstantVolumeBarsRequestClassVolumeType", this.SetCQGConstantVolumeBarsRequestClassVolumeType},
                    { "MethodCQGConstantVolumeBarsRequestClassGetHashCode", this.MethodCQGConstantVolumeBarsRequestClassGetHashCode},
                    { "MethodCQGConstantVolumeBarsRequestClassToString", this.MethodCQGConstantVolumeBarsRequestClassToString},
                    { "GetCQGCurrencyRateClassBaseCurrencyName", this.GetCQGCurrencyRateClassBaseCurrencyName},
                    { "GetCQGCurrencyRateClassCEL", this.GetCQGCurrencyRateClassCEL},
                    { "GetCQGCurrencyRateClassCurrencyName", this.GetCQGCurrencyRateClassCurrencyName},
                    { "GetCQGCurrencyRateClassFcmID", this.GetCQGCurrencyRateClassFcmID},
                    { "GetCQGCurrencyRateClassRate", this.GetCQGCurrencyRateClassRate},
                    { "GetCQGCurrencyRateClassServerTimestamp", this.GetCQGCurrencyRateClassServerTimestamp},
                    { "GetCQGCurrencyRateClassTimestamp", this.GetCQGCurrencyRateClassTimestamp},
                    { "MethodCQGCurrencyRateClassGetHashCode", this.MethodCQGCurrencyRateClassGetHashCode},
                    { "MethodCQGCurrencyRateClassToString", this.MethodCQGCurrencyRateClassToString},
                    { "GetCQGCurrencyRatesClassCount", this.GetCQGCurrencyRatesClassCount},
                    { "GetCQGCurrencyRatesClassItem", this.GetCQGCurrencyRatesClassItem},
                    { "MethodCQGCurrencyRatesClassGetEnumerator", this.MethodCQGCurrencyRatesClassGetEnumerator},
                    { "MethodCQGCurrencyRatesClassGetHashCode", this.MethodCQGCurrencyRatesClassGetHashCode},
                    { "MethodCQGCurrencyRatesClassToString", this.MethodCQGCurrencyRatesClassToString},
                    { "GetCQGCurveDefinitionClassName", this.GetCQGCurveDefinitionClassName},
                    { "MethodCQGCurveDefinitionClassGetHashCode", this.MethodCQGCurveDefinitionClassGetHashCode},
                    { "MethodCQGCurveDefinitionClassToString", this.MethodCQGCurveDefinitionClassToString},
                    { "GetCQGCurveDefinitionsClassCount", this.GetCQGCurveDefinitionsClassCount},
                    { "GetCQGCurveDefinitionsClassItem", this.GetCQGCurveDefinitionsClassItem},
                    { "GetCQGCurveDefinitionsClassItemByName", this.GetCQGCurveDefinitionsClassItemByName},
                    { "MethodCQGCurveDefinitionsClassget_ItemByName", this.MethodCQGCurveDefinitionsClassget_ItemByName},
                    { "MethodCQGCurveDefinitionsClassGetEnumerator", this.MethodCQGCurveDefinitionsClassGetEnumerator},
                    { "MethodCQGCurveDefinitionsClassGetHashCode", this.MethodCQGCurveDefinitionsClassGetHashCode},
                    { "MethodCQGCurveDefinitionsClassToString", this.MethodCQGCurveDefinitionsClassToString},
                    { "GetCQGCurveHeadersClassCount", this.GetCQGCurveHeadersClassCount},
                    { "GetCQGCurveHeadersClassItem", this.GetCQGCurveHeadersClassItem},
                    { "MethodCQGCurveHeadersClassGetEnumerator", this.MethodCQGCurveHeadersClassGetEnumerator},
                    { "MethodCQGCurveHeadersClassGetHashCode", this.MethodCQGCurveHeadersClassGetHashCode},
                    { "MethodCQGCurveHeadersClassToString", this.MethodCQGCurveHeadersClassToString},
                    { "GetCQGCurvesClassCount", this.GetCQGCurvesClassCount},
                    { "GetCQGCurvesClassItem", this.GetCQGCurvesClassItem},
                    { "GetCQGCurvesClassTimestamp", this.GetCQGCurvesClassTimestamp},
                    { "GetCQGCurvesClassTimestampOffset", this.GetCQGCurvesClassTimestampOffset},
                    { "MethodCQGCurvesClassGetEnumerator", this.MethodCQGCurvesClassGetEnumerator},
                    { "MethodCQGCurvesClassGetHashCode", this.MethodCQGCurvesClassGetHashCode},
                    { "MethodCQGCurvesClassToString", this.MethodCQGCurvesClassToString},
                    { "GetCQGCustomStudiesClassCount", this.GetCQGCustomStudiesClassCount},
                    { "GetCQGCustomStudiesClassItem", this.GetCQGCustomStudiesClassItem},
                    { "GetCQGCustomStudiesClassItemById", this.GetCQGCustomStudiesClassItemById},
                    { "MethodCQGCustomStudiesClassget_ItemById", this.MethodCQGCustomStudiesClassget_ItemById},
                    { "MethodCQGCustomStudiesClassGetEnumerator", this.MethodCQGCustomStudiesClassGetEnumerator},
                    { "MethodCQGCustomStudiesClassGetHashCode", this.MethodCQGCustomStudiesClassGetHashCode},
                    { "MethodCQGCustomStudiesClassToString", this.MethodCQGCustomStudiesClassToString},
                    { "GetCQGCustomStudyClassCount", this.GetCQGCustomStudyClassCount},
                    { "GetCQGCustomStudyClassCurveHeaders", this.GetCQGCustomStudyClassCurveHeaders},
                    { "GetCQGCustomStudyClassDefinition", this.GetCQGCustomStudyClassDefinition},
                    { "GetCQGCustomStudyClassEndTimestamp", this.GetCQGCustomStudyClassEndTimestamp},
                    { "GetCQGCustomStudyClassId", this.GetCQGCustomStudyClassId},
                    { "GetCQGCustomStudyClassItem", this.GetCQGCustomStudyClassItem},
                    { "GetCQGCustomStudyClassLastError", this.GetCQGCustomStudyClassLastError},
                    { "GetCQGCustomStudyClassRequest", this.GetCQGCustomStudyClassRequest},
                    { "GetCQGCustomStudyClassStartTimestamp", this.GetCQGCustomStudyClassStartTimestamp},
                    { "GetCQGCustomStudyClassStatus", this.GetCQGCustomStudyClassStatus},
                    { "GetCQGCustomStudyClassTag", this.GetCQGCustomStudyClassTag},
                    { "SetCQGCustomStudyClassTag", this.SetCQGCustomStudyClassTag},
                    { "MethodCQGCustomStudyClassget_Tag", this.MethodCQGCustomStudyClassget_Tag},
                    { "MethodCQGCustomStudyClassGetEnumerator", this.MethodCQGCustomStudyClassGetEnumerator},
                    { "MethodCQGCustomStudyClassGetHashCode", this.MethodCQGCustomStudyClassGetHashCode},
                    { "MethodCQGCustomStudyClassIndexForDate", this.MethodCQGCustomStudyClassIndexForDate},
                    { "MethodCQGCustomStudyClassset_Tag", this.MethodCQGCustomStudyClassset_Tag},
                    { "MethodCQGCustomStudyClassToString", this.MethodCQGCustomStudyClassToString},
                    { "GetCQGCustomStudyDefinitionClassAbbreviation", this.GetCQGCustomStudyDefinitionClassAbbreviation},
                    { "GetCQGCustomStudyDefinitionClassCurveDefinitions", this.GetCQGCustomStudyDefinitionClassCurveDefinitions},
                    { "GetCQGCustomStudyDefinitionClassName", this.GetCQGCustomStudyDefinitionClassName},
                    { "GetCQGCustomStudyDefinitionClassParameterDefinitions", this.GetCQGCustomStudyDefinitionClassParameterDefinitions},
                    { "MethodCQGCustomStudyDefinitionClassGetHashCode", this.MethodCQGCustomStudyDefinitionClassGetHashCode},
                    { "MethodCQGCustomStudyDefinitionClassToString", this.MethodCQGCustomStudyDefinitionClassToString},
                    { "GetCQGCustomStudyDefinitionsClassCount", this.GetCQGCustomStudyDefinitionsClassCount},
                    { "GetCQGCustomStudyDefinitionsClassItem", this.GetCQGCustomStudyDefinitionsClassItem},
                    { "GetCQGCustomStudyDefinitionsClassItemByAbbreviation", this.GetCQGCustomStudyDefinitionsClassItemByAbbreviation},
                    { "MethodCQGCustomStudyDefinitionsClassget_ItemByAbbreviation", this.MethodCQGCustomStudyDefinitionsClassget_ItemByAbbreviation},
                    { "MethodCQGCustomStudyDefinitionsClassget_ItemByName", this.MethodCQGCustomStudyDefinitionsClassget_ItemByName},
                    { "MethodCQGCustomStudyDefinitionsClassGetEnumerator", this.MethodCQGCustomStudyDefinitionsClassGetEnumerator},
                    { "MethodCQGCustomStudyDefinitionsClassGetHashCode", this.MethodCQGCustomStudyDefinitionsClassGetHashCode},
                    { "MethodCQGCustomStudyDefinitionsClassToString", this.MethodCQGCustomStudyDefinitionsClassToString},
                    { "GetCQGCustomStudyRequestClassBaseExpression", this.GetCQGCustomStudyRequestClassBaseExpression},
                    { "SetCQGCustomStudyRequestClassBaseExpression", this.SetCQGCustomStudyRequestClassBaseExpression},
                    { "GetCQGCustomStudyRequestClassContinuation", this.GetCQGCustomStudyRequestClassContinuation},
                    { "SetCQGCustomStudyRequestClassContinuation", this.SetCQGCustomStudyRequestClassContinuation},
                    { "GetCQGCustomStudyRequestClassDaysBeforeExpiration", this.GetCQGCustomStudyRequestClassDaysBeforeExpiration},
                    { "SetCQGCustomStudyRequestClassDaysBeforeExpiration", this.SetCQGCustomStudyRequestClassDaysBeforeExpiration},
                    { "GetCQGCustomStudyRequestClassDefinition", this.GetCQGCustomStudyRequestClassDefinition},
                    { "GetCQGCustomStudyRequestClassEqualizeCloses", this.GetCQGCustomStudyRequestClassEqualizeCloses},
                    { "SetCQGCustomStudyRequestClassEqualizeCloses", this.SetCQGCustomStudyRequestClassEqualizeCloses},
                    { "GetCQGCustomStudyRequestClassHistoricalPeriod", this.GetCQGCustomStudyRequestClassHistoricalPeriod},
                    { "SetCQGCustomStudyRequestClassHistoricalPeriod", this.SetCQGCustomStudyRequestClassHistoricalPeriod},
                    { "GetCQGCustomStudyRequestClassIncludeEnd", this.GetCQGCustomStudyRequestClassIncludeEnd},
                    { "SetCQGCustomStudyRequestClassIncludeEnd", this.SetCQGCustomStudyRequestClassIncludeEnd},
                    { "GetCQGCustomStudyRequestClassIntradayPeriod", this.GetCQGCustomStudyRequestClassIntradayPeriod},
                    { "SetCQGCustomStudyRequestClassIntradayPeriod", this.SetCQGCustomStudyRequestClassIntradayPeriod},
                    { "GetCQGCustomStudyRequestClassParameter", this.GetCQGCustomStudyRequestClassParameter},
                    { "SetCQGCustomStudyRequestClassParameter", this.SetCQGCustomStudyRequestClassParameter},
                    { "GetCQGCustomStudyRequestClassRangeEnd", this.GetCQGCustomStudyRequestClassRangeEnd},
                    { "SetCQGCustomStudyRequestClassRangeEnd", this.SetCQGCustomStudyRequestClassRangeEnd},
                    { "GetCQGCustomStudyRequestClassRangeStart", this.GetCQGCustomStudyRequestClassRangeStart},
                    { "SetCQGCustomStudyRequestClassRangeStart", this.SetCQGCustomStudyRequestClassRangeStart},
                    { "GetCQGCustomStudyRequestClassRecalcPeriod", this.GetCQGCustomStudyRequestClassRecalcPeriod},
                    { "SetCQGCustomStudyRequestClassRecalcPeriod", this.SetCQGCustomStudyRequestClassRecalcPeriod},
                    { "GetCQGCustomStudyRequestClassSessionFlags", this.GetCQGCustomStudyRequestClassSessionFlags},
                    { "SetCQGCustomStudyRequestClassSessionFlags", this.SetCQGCustomStudyRequestClassSessionFlags},
                    { "GetCQGCustomStudyRequestClassSessionsFilter", this.GetCQGCustomStudyRequestClassSessionsFilter},
                    { "SetCQGCustomStudyRequestClassSessionsFilter", this.SetCQGCustomStudyRequestClassSessionsFilter},
                    { "GetCQGCustomStudyRequestClassSubscriptionLevel", this.GetCQGCustomStudyRequestClassSubscriptionLevel},
                    { "SetCQGCustomStudyRequestClassSubscriptionLevel", this.SetCQGCustomStudyRequestClassSubscriptionLevel},
                    { "GetCQGCustomStudyRequestClassUpdatesEnabled", this.GetCQGCustomStudyRequestClassUpdatesEnabled},
                    { "SetCQGCustomStudyRequestClassUpdatesEnabled", this.SetCQGCustomStudyRequestClassUpdatesEnabled},
                    { "MethodCQGCustomStudyRequestClassget_Parameter", this.MethodCQGCustomStudyRequestClassget_Parameter},
                    { "MethodCQGCustomStudyRequestClassGetHashCode", this.MethodCQGCustomStudyRequestClassGetHashCode},
                    { "MethodCQGCustomStudyRequestClassIncludeCurve", this.MethodCQGCustomStudyRequestClassIncludeCurve},
                    { "MethodCQGCustomStudyRequestClassIsCurveIncluded", this.MethodCQGCustomStudyRequestClassIsCurveIncluded},
                    { "MethodCQGCustomStudyRequestClassset_Parameter", this.MethodCQGCustomStudyRequestClassset_Parameter},
                    { "MethodCQGCustomStudyRequestClassToString", this.MethodCQGCustomStudyRequestClassToString},
                    { "GetCQGDataSourceClassAbbreviation", this.GetCQGDataSourceClassAbbreviation},
                    { "GetCQGDataSourceClassName", this.GetCQGDataSourceClassName},
                    { "GetCQGDataSourceClassStatus", this.GetCQGDataSourceClassStatus},
                    { "GetCQGDataSourceClassSymbolTypes", this.GetCQGDataSourceClassSymbolTypes},
                    { "MethodCQGDataSourceClassGetHashCode", this.MethodCQGDataSourceClassGetHashCode},
                    { "MethodCQGDataSourceClassToString", this.MethodCQGDataSourceClassToString},
                    { "GetCQGDataSourcesClassCount", this.GetCQGDataSourcesClassCount},
                    { "GetCQGDataSourcesClassItem", this.GetCQGDataSourcesClassItem},
                    { "GetCQGDataSourcesClassItemByAbbreviation", this.GetCQGDataSourcesClassItemByAbbreviation},
                    { "MethodCQGDataSourcesClassget_ItemByAbbreviation", this.MethodCQGDataSourcesClassget_ItemByAbbreviation},
                    { "MethodCQGDataSourcesClassGetEnumerator", this.MethodCQGDataSourcesClassGetEnumerator},
                    { "MethodCQGDataSourcesClassGetHashCode", this.MethodCQGDataSourcesClassGetHashCode},
                    { "MethodCQGDataSourcesClassToString", this.MethodCQGDataSourcesClassToString},
                    { "GetCQGDataSourceSymbolClassAbbreviation", this.GetCQGDataSourceSymbolClassAbbreviation},
                    { "GetCQGDataSourceSymbolClassDescription", this.GetCQGDataSourceSymbolClassDescription},
                    { "GetCQGDataSourceSymbolClassType", this.GetCQGDataSourceSymbolClassType},
                    { "MethodCQGDataSourceSymbolClassGetHashCode", this.MethodCQGDataSourceSymbolClassGetHashCode},
                    { "MethodCQGDataSourceSymbolClassToString", this.MethodCQGDataSourceSymbolClassToString},
                    { "GetCQGDataSourceSymbolsClassCount", this.GetCQGDataSourceSymbolsClassCount},
                    { "GetCQGDataSourceSymbolsClassDataSourceAbbreviation", this.GetCQGDataSourceSymbolsClassDataSourceAbbreviation},
                    { "GetCQGDataSourceSymbolsClassItem", this.GetCQGDataSourceSymbolsClassItem},
                    { "MethodCQGDataSourceSymbolsClassGetEnumerator", this.MethodCQGDataSourceSymbolsClassGetEnumerator},
                    { "MethodCQGDataSourceSymbolsClassGetHashCode", this.MethodCQGDataSourceSymbolsClassGetHashCode},
                    { "MethodCQGDataSourceSymbolsClassToString", this.MethodCQGDataSourceSymbolsClassToString},
                    { "EventCQGDirectEventsAccessorClassCommodityInstrumentsResolved", this.EventCQGDirectEventsAccessorClassCommodityInstrumentsResolved},
                    { "EventCQGDirectEventsAccessorClassIncorrectSymbol", this.EventCQGDirectEventsAccessorClassIncorrectSymbol},
                    { "EventCQGDirectEventsAccessorClassInstrumentChanged", this.EventCQGDirectEventsAccessorClassInstrumentChanged},
                    { "EventCQGDirectEventsAccessorClassInstrumentDOMChanged", this.EventCQGDirectEventsAccessorClassInstrumentDOMChanged},
                    { "EventCQGDirectEventsAccessorClassInstrumentsGroupChanged", this.EventCQGDirectEventsAccessorClassInstrumentsGroupChanged},
                    { "EventCQGDirectEventsAccessorClassInstrumentsGroupResolved", this.EventCQGDirectEventsAccessorClassInstrumentsGroupResolved},
                    { "EventCQGDirectEventsAccessorClassInstrumentSubscribed", this.EventCQGDirectEventsAccessorClassInstrumentSubscribed},
                    { "MethodCQGDirectEventsAccessorClassGetHashCode", this.MethodCQGDirectEventsAccessorClassGetHashCode},
                    { "MethodCQGDirectEventsAccessorClassToString", this.MethodCQGDirectEventsAccessorClassToString},
                    { "GetCQGDOMQuotesClassCount", this.GetCQGDOMQuotesClassCount},
                    { "GetCQGDOMQuotesClassItem", this.GetCQGDOMQuotesClassItem},
                    { "GetCQGDOMQuotesClassItemByPrice", this.GetCQGDOMQuotesClassItemByPrice},
                    { "MethodCQGDOMQuotesClassget_ItemByPrice", this.MethodCQGDOMQuotesClassget_ItemByPrice},
                    { "MethodCQGDOMQuotesClassGetEnumerator", this.MethodCQGDOMQuotesClassGetEnumerator},
                    { "MethodCQGDOMQuotesClassGetHashCode", this.MethodCQGDOMQuotesClassGetHashCode},
                    { "MethodCQGDOMQuotesClassToString", this.MethodCQGDOMQuotesClassToString},
                    { "GetCQGEnvironmentClassCEL", this.GetCQGEnvironmentClassCEL},
                    { "GetCQGEnvironmentClassCELVersion", this.GetCQGEnvironmentClassCELVersion},
                    { "GetCQGEnvironmentClassCQGSerialNumber", this.GetCQGEnvironmentClassCQGSerialNumber},
                    { "GetCQGEnvironmentClassCQGVersion", this.GetCQGEnvironmentClassCQGVersion},
                    { "GetCQGEnvironmentClassDataConnectionStatus", this.GetCQGEnvironmentClassDataConnectionStatus},
                    { "GetCQGEnvironmentClassGWConnectionStatus", this.GetCQGEnvironmentClassGWConnectionStatus},
                    { "GetCQGEnvironmentClassGWLogonName", this.GetCQGEnvironmentClassGWLogonName},
                    { "GetCQGEnvironmentClassLastError", this.GetCQGEnvironmentClassLastError},
                    { "GetCQGEnvironmentClassLineTime", this.GetCQGEnvironmentClassLineTime},
                    { "GetCQGEnvironmentClassLocalTime", this.GetCQGEnvironmentClassLocalTime},
                    { "GetCQGEnvironmentClassMessagesPending", this.GetCQGEnvironmentClassMessagesPending},
                    { "GetCQGEnvironmentClassOrdersPending", this.GetCQGEnvironmentClassOrdersPending},
                    { "GetCQGEnvironmentClassRemoteOpenAPISession", this.GetCQGEnvironmentClassRemoteOpenAPISession},
                    { "MethodCQGEnvironmentClassGetHashCode", this.MethodCQGEnvironmentClassGetHashCode},
                    { "MethodCQGEnvironmentClassToString", this.MethodCQGEnvironmentClassToString},
                    { "GetCQGErrorClassCode", this.GetCQGErrorClassCode},
                    { "GetCQGErrorClassDescription", this.GetCQGErrorClassDescription},
                    { "GetCQGErrorClassOwner", this.GetCQGErrorClassOwner},
                    { "MethodCQGErrorClassGetHashCode", this.MethodCQGErrorClassGetHashCode},
                    { "MethodCQGErrorClassToString", this.MethodCQGErrorClassToString},
                    { "GetCQGExchangesClassCount", this.GetCQGExchangesClassCount},
                    { "GetCQGExchangesClassGWAccountID", this.GetCQGExchangesClassGWAccountID},
                    { "GetCQGExchangesClassItem", this.GetCQGExchangesClassItem},
                    { "MethodCQGExchangesClassGetEnumerator", this.MethodCQGExchangesClassGetEnumerator},
                    { "MethodCQGExchangesClassGetHashCode", this.MethodCQGExchangesClassGetHashCode},
                    { "MethodCQGExchangesClassToString", this.MethodCQGExchangesClassToString},
                    { "GetCQGExecutionPatternClassParameters", this.GetCQGExecutionPatternClassParameters},
                    { "GetCQGExecutionPatternClassPatternString", this.GetCQGExecutionPatternClassPatternString},
                    { "MethodCQGExecutionPatternClassGetHashCode", this.MethodCQGExecutionPatternClassGetHashCode},
                    { "MethodCQGExecutionPatternClassToString", this.MethodCQGExecutionPatternClassToString},
                    { "GetCQGExecutionPatternParameterClassName", this.GetCQGExecutionPatternParameterClassName},
                    { "GetCQGExecutionPatternParameterClassParameters", this.GetCQGExecutionPatternParameterClassParameters},
                    { "GetCQGExecutionPatternParameterClassType", this.GetCQGExecutionPatternParameterClassType},
                    { "GetCQGExecutionPatternParameterClassValue", this.GetCQGExecutionPatternParameterClassValue},
                    { "SetCQGExecutionPatternParameterClassValue", this.SetCQGExecutionPatternParameterClassValue},
                    { "MethodCQGExecutionPatternParameterClassGetHashCode", this.MethodCQGExecutionPatternParameterClassGetHashCode},
                    { "MethodCQGExecutionPatternParameterClassToString", this.MethodCQGExecutionPatternParameterClassToString},
                    { "GetCQGExecutionPatternParametersClassCount", this.GetCQGExecutionPatternParametersClassCount},
                    { "GetCQGExecutionPatternParametersClassItem", this.GetCQGExecutionPatternParametersClassItem},
                    { "MethodCQGExecutionPatternParametersClassAdd", this.MethodCQGExecutionPatternParametersClassAdd},
                    { "MethodCQGExecutionPatternParametersClassGetEnumerator", this.MethodCQGExecutionPatternParametersClassGetEnumerator},
                    { "MethodCQGExecutionPatternParametersClassGetHashCode", this.MethodCQGExecutionPatternParametersClassGetHashCode},
                    { "MethodCQGExecutionPatternParametersClassRemove", this.MethodCQGExecutionPatternParametersClassRemove},
                    { "MethodCQGExecutionPatternParametersClassToString", this.MethodCQGExecutionPatternParametersClassToString},
                    { "GetCQGExpressionClassCount", this.GetCQGExpressionClassCount},
                    { "GetCQGExpressionClassEndTimestamp", this.GetCQGExpressionClassEndTimestamp},
                    { "GetCQGExpressionClassId", this.GetCQGExpressionClassId},
                    { "GetCQGExpressionClassItem", this.GetCQGExpressionClassItem},
                    { "GetCQGExpressionClassLastError", this.GetCQGExpressionClassLastError},
                    { "GetCQGExpressionClassOutputHeaders", this.GetCQGExpressionClassOutputHeaders},
                    { "GetCQGExpressionClassRequest", this.GetCQGExpressionClassRequest},
                    { "GetCQGExpressionClassStartTimestamp", this.GetCQGExpressionClassStartTimestamp},
                    { "GetCQGExpressionClassStatus", this.GetCQGExpressionClassStatus},
                    { "GetCQGExpressionClassTag", this.GetCQGExpressionClassTag},
                    { "SetCQGExpressionClassTag", this.SetCQGExpressionClassTag},
                    { "MethodCQGExpressionClassget_Tag", this.MethodCQGExpressionClassget_Tag},
                    { "MethodCQGExpressionClassGetEnumerator", this.MethodCQGExpressionClassGetEnumerator},
                    { "MethodCQGExpressionClassGetHashCode", this.MethodCQGExpressionClassGetHashCode},
                    { "MethodCQGExpressionClassIndexForDate", this.MethodCQGExpressionClassIndexForDate},
                    { "MethodCQGExpressionClassset_Tag", this.MethodCQGExpressionClassset_Tag},
                    { "MethodCQGExpressionClassToString", this.MethodCQGExpressionClassToString},
                    { "GetCQGExpressionOutputHeadersClassCount", this.GetCQGExpressionOutputHeadersClassCount},
                    { "GetCQGExpressionOutputHeadersClassItem", this.GetCQGExpressionOutputHeadersClassItem},
                    { "MethodCQGExpressionOutputHeadersClassGetEnumerator", this.MethodCQGExpressionOutputHeadersClassGetEnumerator},
                    { "MethodCQGExpressionOutputHeadersClassGetHashCode", this.MethodCQGExpressionOutputHeadersClassGetHashCode},
                    { "MethodCQGExpressionOutputHeadersClassToString", this.MethodCQGExpressionOutputHeadersClassToString},
                    { "GetCQGExpressionOutputsClassCount", this.GetCQGExpressionOutputsClassCount},
                    { "GetCQGExpressionOutputsClassItem", this.GetCQGExpressionOutputsClassItem},
                    { "GetCQGExpressionOutputsClassTimestamp", this.GetCQGExpressionOutputsClassTimestamp},
                    { "GetCQGExpressionOutputsClassTimestampOffset", this.GetCQGExpressionOutputsClassTimestampOffset},
                    { "MethodCQGExpressionOutputsClassGetEnumerator", this.MethodCQGExpressionOutputsClassGetEnumerator},
                    { "MethodCQGExpressionOutputsClassGetHashCode", this.MethodCQGExpressionOutputsClassGetHashCode},
                    { "MethodCQGExpressionOutputsClassToString", this.MethodCQGExpressionOutputsClassToString},
                    { "GetCQGExpressionRequestClassContinuation", this.GetCQGExpressionRequestClassContinuation},
                    { "SetCQGExpressionRequestClassContinuation", this.SetCQGExpressionRequestClassContinuation},
                    { "GetCQGExpressionRequestClassDaysBeforeExpiration", this.GetCQGExpressionRequestClassDaysBeforeExpiration},
                    { "SetCQGExpressionRequestClassDaysBeforeExpiration", this.SetCQGExpressionRequestClassDaysBeforeExpiration},
                    { "GetCQGExpressionRequestClassEqualizeCloses", this.GetCQGExpressionRequestClassEqualizeCloses},
                    { "SetCQGExpressionRequestClassEqualizeCloses", this.SetCQGExpressionRequestClassEqualizeCloses},
                    { "GetCQGExpressionRequestClassHistoricalPeriod", this.GetCQGExpressionRequestClassHistoricalPeriod},
                    { "SetCQGExpressionRequestClassHistoricalPeriod", this.SetCQGExpressionRequestClassHistoricalPeriod},
                    { "GetCQGExpressionRequestClassIncludeEnd", this.GetCQGExpressionRequestClassIncludeEnd},
                    { "SetCQGExpressionRequestClassIncludeEnd", this.SetCQGExpressionRequestClassIncludeEnd},
                    { "GetCQGExpressionRequestClassIntradayPeriod", this.GetCQGExpressionRequestClassIntradayPeriod},
                    { "SetCQGExpressionRequestClassIntradayPeriod", this.SetCQGExpressionRequestClassIntradayPeriod},
                    { "GetCQGExpressionRequestClassRangeEnd", this.GetCQGExpressionRequestClassRangeEnd},
                    { "SetCQGExpressionRequestClassRangeEnd", this.SetCQGExpressionRequestClassRangeEnd},
                    { "GetCQGExpressionRequestClassRangeStart", this.GetCQGExpressionRequestClassRangeStart},
                    { "SetCQGExpressionRequestClassRangeStart", this.SetCQGExpressionRequestClassRangeStart},
                    { "GetCQGExpressionRequestClassRecalcPeriod", this.GetCQGExpressionRequestClassRecalcPeriod},
                    { "SetCQGExpressionRequestClassRecalcPeriod", this.SetCQGExpressionRequestClassRecalcPeriod},
                    { "GetCQGExpressionRequestClassSessionFlags", this.GetCQGExpressionRequestClassSessionFlags},
                    { "SetCQGExpressionRequestClassSessionFlags", this.SetCQGExpressionRequestClassSessionFlags},
                    { "GetCQGExpressionRequestClassSessionsFilter", this.GetCQGExpressionRequestClassSessionsFilter},
                    { "SetCQGExpressionRequestClassSessionsFilter", this.SetCQGExpressionRequestClassSessionsFilter},
                    { "GetCQGExpressionRequestClassSubExpression", this.GetCQGExpressionRequestClassSubExpression},
                    { "GetCQGExpressionRequestClassSubExpressionCount", this.GetCQGExpressionRequestClassSubExpressionCount},
                    { "GetCQGExpressionRequestClassSubscriptionLevel", this.GetCQGExpressionRequestClassSubscriptionLevel},
                    { "SetCQGExpressionRequestClassSubscriptionLevel", this.SetCQGExpressionRequestClassSubscriptionLevel},
                    { "GetCQGExpressionRequestClassUpdatesEnabled", this.GetCQGExpressionRequestClassUpdatesEnabled},
                    { "SetCQGExpressionRequestClassUpdatesEnabled", this.SetCQGExpressionRequestClassUpdatesEnabled},
                    { "MethodCQGExpressionRequestClassAddSubExpression", this.MethodCQGExpressionRequestClassAddSubExpression},
                    { "MethodCQGExpressionRequestClassget_SubExpression", this.MethodCQGExpressionRequestClassget_SubExpression},
                    { "MethodCQGExpressionRequestClassget_SubExpressionAlias", this.MethodCQGExpressionRequestClassget_SubExpressionAlias},
                    { "MethodCQGExpressionRequestClassGetHashCode", this.MethodCQGExpressionRequestClassGetHashCode},
                    { "MethodCQGExpressionRequestClassToString", this.MethodCQGExpressionRequestClassToString},
                    { "GetCQGExpressionsClassCount", this.GetCQGExpressionsClassCount},
                    { "GetCQGExpressionsClassItem", this.GetCQGExpressionsClassItem},
                    { "GetCQGExpressionsClassItemById", this.GetCQGExpressionsClassItemById},
                    { "MethodCQGExpressionsClassget_ItemById", this.MethodCQGExpressionsClassget_ItemById},
                    { "MethodCQGExpressionsClassGetEnumerator", this.MethodCQGExpressionsClassGetEnumerator},
                    { "MethodCQGExpressionsClassGetHashCode", this.MethodCQGExpressionsClassGetHashCode},
                    { "MethodCQGExpressionsClassToString", this.MethodCQGExpressionsClassToString},
                    { "GetCQGFillClassGWTradesCount", this.GetCQGFillClassGWTradesCount},
                    { "GetCQGFillClassId", this.GetCQGFillClassId},
                    { "GetCQGFillClassLegCount", this.GetCQGFillClassLegCount},
                    { "GetCQGFillClassOrder", this.GetCQGFillClassOrder},
                    { "GetCQGFillClassRefFillId", this.GetCQGFillClassRefFillId},
                    { "GetCQGFillClassServerTimestamp", this.GetCQGFillClassServerTimestamp},
                    { "GetCQGFillClassStatus", this.GetCQGFillClassStatus},
                    { "GetCQGFillClassTimestamp", this.GetCQGFillClassTimestamp},
                    { "MethodCQGFillClassget_Aggressive", this.MethodCQGFillClassget_Aggressive},
                    { "MethodCQGFillClassget_Currency", this.MethodCQGFillClassget_Currency},
                    { "MethodCQGFillClassget_DisplayPrice", this.MethodCQGFillClassget_DisplayPrice},
                    { "MethodCQGFillClassget_ExchangeTradeDate", this.MethodCQGFillClassget_ExchangeTradeDate},
                    { "MethodCQGFillClassget_GWTradeId", this.MethodCQGFillClassget_GWTradeId},
                    { "MethodCQGFillClassget_GWTrades", this.MethodCQGFillClassget_GWTrades},
                    { "MethodCQGFillClassget_GWTradesCount", this.MethodCQGFillClassget_GWTradesCount},
                    { "MethodCQGFillClassget_InstrumentName", this.MethodCQGFillClassget_InstrumentName},
                    { "MethodCQGFillClassget_Price", this.MethodCQGFillClassget_Price},
                    { "MethodCQGFillClassget_Quantity", this.MethodCQGFillClassget_Quantity},
                    { "MethodCQGFillClassget_Side", this.MethodCQGFillClassget_Side},
                    { "MethodCQGFillClassget_StatementDate", this.MethodCQGFillClassget_StatementDate},
                    { "MethodCQGFillClassGetHashCode", this.MethodCQGFillClassGetHashCode},
                    { "MethodCQGFillClassToString", this.MethodCQGFillClassToString},
                    { "GetCQGFillsClassCount", this.GetCQGFillsClassCount},
                    { "GetCQGFillsClassItem", this.GetCQGFillsClassItem},
                    { "GetCQGFillsClassItemByIndex", this.GetCQGFillsClassItemByIndex},
                    { "MethodCQGFillsClassget_ItemByIndex", this.MethodCQGFillsClassget_ItemByIndex},
                    { "MethodCQGFillsClassGetEnumerator", this.MethodCQGFillsClassGetEnumerator},
                    { "MethodCQGFillsClassGetHashCode", this.MethodCQGFillsClassGetHashCode},
                    { "MethodCQGFillsClassToString", this.MethodCQGFillsClassToString},
                    { "GetCQGGWTradeClassAggressive", this.GetCQGGWTradeClassAggressive},
                    { "GetCQGGWTradeClassCurrency", this.GetCQGGWTradeClassCurrency},
                    { "GetCQGGWTradeClassDisplayPrice", this.GetCQGGWTradeClassDisplayPrice},
                    { "GetCQGGWTradeClassExchangeTradeDate", this.GetCQGGWTradeClassExchangeTradeDate},
                    { "GetCQGGWTradeClassFill", this.GetCQGGWTradeClassFill},
                    { "GetCQGGWTradeClassId", this.GetCQGGWTradeClassId},
                    { "GetCQGGWTradeClassInstrumentName", this.GetCQGGWTradeClassInstrumentName},
                    { "GetCQGGWTradeClassLeg", this.GetCQGGWTradeClassLeg},
                    { "GetCQGGWTradeClassPrice", this.GetCQGGWTradeClassPrice},
                    { "GetCQGGWTradeClassQuantity", this.GetCQGGWTradeClassQuantity},
                    { "GetCQGGWTradeClassSide", this.GetCQGGWTradeClassSide},
                    { "GetCQGGWTradeClassStatementDate", this.GetCQGGWTradeClassStatementDate},
                    { "MethodCQGGWTradeClassGetHashCode", this.MethodCQGGWTradeClassGetHashCode},
                    { "MethodCQGGWTradeClassToString", this.MethodCQGGWTradeClassToString},
                    { "GetCQGGWTradesClassCount", this.GetCQGGWTradesClassCount},
                    { "GetCQGGWTradesClassItem", this.GetCQGGWTradesClassItem},
                    { "GetCQGGWTradesClassItemByIndex", this.GetCQGGWTradesClassItemByIndex},
                    { "MethodCQGGWTradesClassget_ItemByIndex", this.MethodCQGGWTradesClassget_ItemByIndex},
                    { "MethodCQGGWTradesClassGetEnumerator", this.MethodCQGGWTradesClassGetEnumerator},
                    { "MethodCQGGWTradesClassGetHashCode", this.MethodCQGGWTradesClassGetHashCode},
                    { "MethodCQGGWTradesClassToString", this.MethodCQGGWTradesClassToString},
                    { "GetCQGHistoricalSessionsRequestClassRangeEnd", this.GetCQGHistoricalSessionsRequestClassRangeEnd},
                    { "SetCQGHistoricalSessionsRequestClassRangeEnd", this.SetCQGHistoricalSessionsRequestClassRangeEnd},
                    { "GetCQGHistoricalSessionsRequestClassRangeStart", this.GetCQGHistoricalSessionsRequestClassRangeStart},
                    { "SetCQGHistoricalSessionsRequestClassRangeStart", this.SetCQGHistoricalSessionsRequestClassRangeStart},
                    { "GetCQGHistoricalSessionsRequestClassSymbol", this.GetCQGHistoricalSessionsRequestClassSymbol},
                    { "SetCQGHistoricalSessionsRequestClassSymbol", this.SetCQGHistoricalSessionsRequestClassSymbol},
                    { "GetCQGHistoricalSessionsRequestClassType", this.GetCQGHistoricalSessionsRequestClassType},
                    { "SetCQGHistoricalSessionsRequestClassType", this.SetCQGHistoricalSessionsRequestClassType},
                    { "MethodCQGHistoricalSessionsRequestClassGetHashCode", this.MethodCQGHistoricalSessionsRequestClassGetHashCode},
                    { "MethodCQGHistoricalSessionsRequestClassToString", this.MethodCQGHistoricalSessionsRequestClassToString},
                    { "GetCQGHolidayClassHolidayDate", this.GetCQGHolidayClassHolidayDate},
                    { "GetCQGHolidayClassIsDaily", this.GetCQGHolidayClassIsDaily},
                    { "GetCQGHolidayClassSessionMask", this.GetCQGHolidayClassSessionMask},
                    { "MethodCQGHolidayClassGetHashCode", this.MethodCQGHolidayClassGetHashCode},
                    { "MethodCQGHolidayClassToString", this.MethodCQGHolidayClassToString},
                    { "GetCQGHolidaysClassCount", this.GetCQGHolidaysClassCount},
                    { "GetCQGHolidaysClassItem", this.GetCQGHolidaysClassItem},
                    { "GetCQGHolidaysClassSessions", this.GetCQGHolidaysClassSessions},
                    { "MethodCQGHolidaysClassGetEnumerator", this.MethodCQGHolidaysClassGetEnumerator},
                    { "MethodCQGHolidaysClassGetHashCode", this.MethodCQGHolidaysClassGetHashCode},
                    { "MethodCQGHolidaysClassToString", this.MethodCQGHolidaysClassToString},
                    { "GetCQGInstrumentClassAsk", this.GetCQGInstrumentClassAsk},
                    { "GetCQGInstrumentClassBBAType", this.GetCQGInstrumentClassBBAType},
                    { "SetCQGInstrumentClassBBAType", this.SetCQGInstrumentClassBBAType},
                    { "GetCQGInstrumentClassBid", this.GetCQGInstrumentClassBid},
                    { "GetCQGInstrumentClassCEL", this.GetCQGInstrumentClassCEL},
                    { "GetCQGInstrumentClassCommodity", this.GetCQGInstrumentClassCommodity},
                    { "GetCQGInstrumentClassCountry", this.GetCQGInstrumentClassCountry},
                    { "GetCQGInstrumentClassCurrency", this.GetCQGInstrumentClassCurrency},
                    { "GetCQGInstrumentClassDataSubscriptionLevel", this.GetCQGInstrumentClassDataSubscriptionLevel},
                    { "SetCQGInstrumentClassDataSubscriptionLevel", this.SetCQGInstrumentClassDataSubscriptionLevel},
                    { "GetCQGInstrumentClassDescription", this.GetCQGInstrumentClassDescription},
                    { "GetCQGInstrumentClassDOMAsks", this.GetCQGInstrumentClassDOMAsks},
                    { "GetCQGInstrumentClassDOMBids", this.GetCQGInstrumentClassDOMBids},
                    { "GetCQGInstrumentClassDOMBookLimit", this.GetCQGInstrumentClassDOMBookLimit},
                    { "SetCQGInstrumentClassDOMBookLimit", this.SetCQGInstrumentClassDOMBookLimit},
                    { "GetCQGInstrumentClassDOMStatus", this.GetCQGInstrumentClassDOMStatus},
                    { "SetCQGInstrumentClassDOMStatus", this.SetCQGInstrumentClassDOMStatus},
                    { "GetCQGInstrumentClassDTE", this.GetCQGInstrumentClassDTE},
                    { "GetCQGInstrumentClassExchangeAbbreviation", this.GetCQGInstrumentClassExchangeAbbreviation},
                    { "GetCQGInstrumentClassExchangeID", this.GetCQGInstrumentClassExchangeID},
                    { "GetCQGInstrumentClassExpirationDate", this.GetCQGInstrumentClassExpirationDate},
                    { "GetCQGInstrumentClassFullName", this.GetCQGInstrumentClassFullName},
                    { "GetCQGInstrumentClassInitialMargin", this.GetCQGInstrumentClassInitialMargin},
                    { "GetCQGInstrumentClassInstrumentID", this.GetCQGInstrumentClassInstrumentID},
                    { "GetCQGInstrumentClassInstrumentType", this.GetCQGInstrumentClassInstrumentType},
                    { "GetCQGInstrumentClassIsDownTick", this.GetCQGInstrumentClassIsDownTick},
                    { "GetCQGInstrumentClassIsFastMarket", this.GetCQGInstrumentClassIsFastMarket},
                    { "GetCQGInstrumentClassIsUpTick", this.GetCQGInstrumentClassIsUpTick},
                    { "GetCQGInstrumentClassMaintenanceMargin", this.GetCQGInstrumentClassMaintenanceMargin},
                    { "GetCQGInstrumentClassMonth", this.GetCQGInstrumentClassMonth},
                    { "GetCQGInstrumentClassMonthChar", this.GetCQGInstrumentClassMonthChar},
                    { "GetCQGInstrumentClassNetChange", this.GetCQGInstrumentClassNetChange},
                    { "GetCQGInstrumentClassPreferredSessionsName", this.GetCQGInstrumentClassPreferredSessionsName},
                    { "GetCQGInstrumentClassProperties", this.GetCQGInstrumentClassProperties},
                    { "GetCQGInstrumentClassPropertyLevel", this.GetCQGInstrumentClassPropertyLevel},
                    { "GetCQGInstrumentClassQuoteLevel", this.GetCQGInstrumentClassQuoteLevel},
                    { "GetCQGInstrumentClassQuotes", this.GetCQGInstrumentClassQuotes},
                    { "GetCQGInstrumentClassScale", this.GetCQGInstrumentClassScale},
                    { "GetCQGInstrumentClassServerTimestamp", this.GetCQGInstrumentClassServerTimestamp},
                    { "GetCQGInstrumentClassSessionMask", this.GetCQGInstrumentClassSessionMask},
                    { "GetCQGInstrumentClassSessionNumber", this.GetCQGInstrumentClassSessionNumber},
                    { "GetCQGInstrumentClassSessions", this.GetCQGInstrumentClassSessions},
                    { "GetCQGInstrumentClassStrike", this.GetCQGInstrumentClassStrike},
                    { "GetCQGInstrumentClassTag", this.GetCQGInstrumentClassTag},
                    { "SetCQGInstrumentClassTag", this.SetCQGInstrumentClassTag},
                    { "GetCQGInstrumentClassTickSize", this.GetCQGInstrumentClassTickSize},
                    { "GetCQGInstrumentClassTickSizeFractionDenominator", this.GetCQGInstrumentClassTickSizeFractionDenominator},
                    { "GetCQGInstrumentClassTickSizeFractionNumerator", this.GetCQGInstrumentClassTickSizeFractionNumerator},
                    { "GetCQGInstrumentClassTickValue", this.GetCQGInstrumentClassTickValue},
                    { "GetCQGInstrumentClassTimestamp", this.GetCQGInstrumentClassTimestamp},
                    { "GetCQGInstrumentClassTodayCTotalVolume", this.GetCQGInstrumentClassTodayCTotalVolume},
                    { "GetCQGInstrumentClassTrade", this.GetCQGInstrumentClassTrade},
                    { "GetCQGInstrumentClassUnderlyingInstrument", this.GetCQGInstrumentClassUnderlyingInstrument},
                    { "GetCQGInstrumentClassUnderlyingInstrumentName", this.GetCQGInstrumentClassUnderlyingInstrumentName},
                    { "GetCQGInstrumentClassYCOI", this.GetCQGInstrumentClassYCOI},
                    { "GetCQGInstrumentClassYear", this.GetCQGInstrumentClassYear},
                    { "GetCQGInstrumentClassYearString", this.GetCQGInstrumentClassYearString},
                    { "GetCQGInstrumentClassYesterdayCTotalVolume", this.GetCQGInstrumentClassYesterdayCTotalVolume},
                    { "MethodCQGInstrumentClassFromDisplayPrice", this.MethodCQGInstrumentClassFromDisplayPrice},
                    { "MethodCQGInstrumentClassget_Tag", this.MethodCQGInstrumentClassget_Tag},
                    { "MethodCQGInstrumentClassGetHashCode", this.MethodCQGInstrumentClassGetHashCode},
                    { "MethodCQGInstrumentClassGetNearestTradeablePrice", this.MethodCQGInstrumentClassGetNearestTradeablePrice},
                    { "MethodCQGInstrumentClassGetTickSizeFor", this.MethodCQGInstrumentClassGetTickSizeFor},
                    { "MethodCQGInstrumentClassGetTickValueFor", this.MethodCQGInstrumentClassGetTickValueFor},
                    { "MethodCQGInstrumentClassset_Tag", this.MethodCQGInstrumentClassset_Tag},
                    { "MethodCQGInstrumentClassToDisplayPrice", this.MethodCQGInstrumentClassToDisplayPrice},
                    { "MethodCQGInstrumentClassToString", this.MethodCQGInstrumentClassToString},
                    { "GetCQGInstrumentPropertiesClassCount", this.GetCQGInstrumentPropertiesClassCount},
                    { "GetCQGInstrumentPropertiesClassItem", this.GetCQGInstrumentPropertiesClassItem},
                    { "MethodCQGInstrumentPropertiesClassGetEnumerator", this.MethodCQGInstrumentPropertiesClassGetEnumerator},
                    { "MethodCQGInstrumentPropertiesClassGetHashCode", this.MethodCQGInstrumentPropertiesClassGetHashCode},
                    { "MethodCQGInstrumentPropertiesClassToString", this.MethodCQGInstrumentPropertiesClassToString},
                    { "GetCQGInstrumentPropertyClassInstrument", this.GetCQGInstrumentPropertyClassInstrument},
                    { "GetCQGInstrumentPropertyClassName", this.GetCQGInstrumentPropertyClassName},
                    { "GetCQGInstrumentPropertyClassServerTimestamp", this.GetCQGInstrumentPropertyClassServerTimestamp},
                    { "GetCQGInstrumentPropertyClassTimestamp", this.GetCQGInstrumentPropertyClassTimestamp},
                    { "GetCQGInstrumentPropertyClassType", this.GetCQGInstrumentPropertyClassType},
                    { "GetCQGInstrumentPropertyClassValue", this.GetCQGInstrumentPropertyClassValue},
                    { "MethodCQGInstrumentPropertyClassGetHashCode", this.MethodCQGInstrumentPropertyClassGetHashCode},
                    { "MethodCQGInstrumentPropertyClassToString", this.MethodCQGInstrumentPropertyClassToString},
                    { "GetCQGInstrumentsClassCount", this.GetCQGInstrumentsClassCount},
                    { "GetCQGInstrumentsClassItem", this.GetCQGInstrumentsClassItem},
                    { "MethodCQGInstrumentsClassGetEnumerator", this.MethodCQGInstrumentsClassGetEnumerator},
                    { "MethodCQGInstrumentsClassGetHashCode", this.MethodCQGInstrumentsClassGetHashCode},
                    { "MethodCQGInstrumentsClassToString", this.MethodCQGInstrumentsClassToString},
                    { "GetCQGInstrumentsGroupClassId", this.GetCQGInstrumentsGroupClassId},
                    { "GetCQGInstrumentsGroupClassInstruments", this.GetCQGInstrumentsGroupClassInstruments},
                    { "GetCQGInstrumentsGroupClassRequest", this.GetCQGInstrumentsGroupClassRequest},
                    { "MethodCQGInstrumentsGroupClassGetHashCode", this.MethodCQGInstrumentsGroupClassGetHashCode},
                    { "MethodCQGInstrumentsGroupClassToString", this.MethodCQGInstrumentsGroupClassToString},
                    { "GetCQGInstrumentsGroupRequestClassCommodity", this.GetCQGInstrumentsGroupRequestClassCommodity},
                    { "SetCQGInstrumentsGroupRequestClassCommodity", this.SetCQGInstrumentsGroupRequestClassCommodity},
                    { "GetCQGInstrumentsGroupRequestClassInstrumentTypes", this.GetCQGInstrumentsGroupRequestClassInstrumentTypes},
                    { "SetCQGInstrumentsGroupRequestClassInstrumentTypes", this.SetCQGInstrumentsGroupRequestClassInstrumentTypes},
                    { "GetCQGInstrumentsGroupRequestClassRangeEnd", this.GetCQGInstrumentsGroupRequestClassRangeEnd},
                    { "SetCQGInstrumentsGroupRequestClassRangeEnd", this.SetCQGInstrumentsGroupRequestClassRangeEnd},
                    { "GetCQGInstrumentsGroupRequestClassRangeStart", this.GetCQGInstrumentsGroupRequestClassRangeStart},
                    { "SetCQGInstrumentsGroupRequestClassRangeStart", this.SetCQGInstrumentsGroupRequestClassRangeStart},
                    { "GetCQGInstrumentsGroupRequestClassSubscriptionLevel", this.GetCQGInstrumentsGroupRequestClassSubscriptionLevel},
                    { "SetCQGInstrumentsGroupRequestClassSubscriptionLevel", this.SetCQGInstrumentsGroupRequestClassSubscriptionLevel},
                    { "MethodCQGInstrumentsGroupRequestClassGetHashCode", this.MethodCQGInstrumentsGroupRequestClassGetHashCode},
                    { "MethodCQGInstrumentsGroupRequestClassToString", this.MethodCQGInstrumentsGroupRequestClassToString},
                    { "GetCQGInstrumentsGroupsClassCount", this.GetCQGInstrumentsGroupsClassCount},
                    { "GetCQGInstrumentsGroupsClassItem", this.GetCQGInstrumentsGroupsClassItem},
                    { "MethodCQGInstrumentsGroupsClassGetEnumerator", this.MethodCQGInstrumentsGroupsClassGetEnumerator},
                    { "MethodCQGInstrumentsGroupsClassGetHashCode", this.MethodCQGInstrumentsGroupsClassGetHashCode},
                    { "MethodCQGInstrumentsGroupsClassToString", this.MethodCQGInstrumentsGroupsClassToString},
                    { "GetCQGInstrumentSubscriptionRequestClassDOMBBAType", this.GetCQGInstrumentSubscriptionRequestClassDOMBBAType},
                    { "SetCQGInstrumentSubscriptionRequestClassDOMBBAType", this.SetCQGInstrumentSubscriptionRequestClassDOMBBAType},
                    { "GetCQGInstrumentSubscriptionRequestClassDOMStatus", this.GetCQGInstrumentSubscriptionRequestClassDOMStatus},
                    { "SetCQGInstrumentSubscriptionRequestClassDOMStatus", this.SetCQGInstrumentSubscriptionRequestClassDOMStatus},
                    { "GetCQGInstrumentSubscriptionRequestClassPropertyLevel", this.GetCQGInstrumentSubscriptionRequestClassPropertyLevel},
                    { "SetCQGInstrumentSubscriptionRequestClassPropertyLevel", this.SetCQGInstrumentSubscriptionRequestClassPropertyLevel},
                    { "GetCQGInstrumentSubscriptionRequestClassQuoteLevel", this.GetCQGInstrumentSubscriptionRequestClassQuoteLevel},
                    { "SetCQGInstrumentSubscriptionRequestClassQuoteLevel", this.SetCQGInstrumentSubscriptionRequestClassQuoteLevel},
                    { "GetCQGInstrumentSubscriptionRequestClassSymbol", this.GetCQGInstrumentSubscriptionRequestClassSymbol},
                    { "SetCQGInstrumentSubscriptionRequestClassSymbol", this.SetCQGInstrumentSubscriptionRequestClassSymbol},
                    { "MethodCQGInstrumentSubscriptionRequestClassGetHashCode", this.MethodCQGInstrumentSubscriptionRequestClassGetHashCode},
                    { "MethodCQGInstrumentSubscriptionRequestClassToString", this.MethodCQGInstrumentSubscriptionRequestClassToString},
                    { "GetCQGIntegerCollectionClassCount", this.GetCQGIntegerCollectionClassCount},
                    { "GetCQGIntegerCollectionClassItem", this.GetCQGIntegerCollectionClassItem},
                    { "MethodCQGIntegerCollectionClassGetEnumerator", this.MethodCQGIntegerCollectionClassGetEnumerator},
                    { "MethodCQGIntegerCollectionClassGetHashCode", this.MethodCQGIntegerCollectionClassGetHashCode},
                    { "MethodCQGIntegerCollectionClassToString", this.MethodCQGIntegerCollectionClassToString},
                    { "GetCQGLoggerClassCEL", this.GetCQGLoggerClassCEL},
                    { "MethodCQGLoggerClassGetHashCode", this.MethodCQGLoggerClassGetHashCode},
                    { "MethodCQGLoggerClassLog", this.MethodCQGLoggerClassLog},
                    { "MethodCQGLoggerClassToString", this.MethodCQGLoggerClassToString},
                    { "GetCQGManualFillClassDisplayPrice", this.GetCQGManualFillClassDisplayPrice},
                    { "GetCQGManualFillClassGWAccountID", this.GetCQGManualFillClassGWAccountID},
                    { "GetCQGManualFillClassInstrumentName", this.GetCQGManualFillClassInstrumentName},
                    { "GetCQGManualFillClassNote", this.GetCQGManualFillClassNote},
                    { "GetCQGManualFillClassPrice", this.GetCQGManualFillClassPrice},
                    { "GetCQGManualFillClassQuantity", this.GetCQGManualFillClassQuantity},
                    { "GetCQGManualFillClassSide", this.GetCQGManualFillClassSide},
                    { "GetCQGManualFillClassStatementDate", this.GetCQGManualFillClassStatementDate},
                    { "GetCQGManualFillClassTradeId", this.GetCQGManualFillClassTradeId},
                    { "GetCQGManualFillClassTradeTimestamp", this.GetCQGManualFillClassTradeTimestamp},
                    { "MethodCQGManualFillClassGetHashCode", this.MethodCQGManualFillClassGetHashCode},
                    { "MethodCQGManualFillClassToString", this.MethodCQGManualFillClassToString},
                    { "GetCQGManualFillRequestClassGWAccountID", this.GetCQGManualFillRequestClassGWAccountID},
                    { "SetCQGManualFillRequestClassGWAccountID", this.SetCQGManualFillRequestClassGWAccountID},
                    { "GetCQGManualFillRequestClassInstrumentName", this.GetCQGManualFillRequestClassInstrumentName},
                    { "SetCQGManualFillRequestClassInstrumentName", this.SetCQGManualFillRequestClassInstrumentName},
                    { "GetCQGManualFillRequestClassNote", this.GetCQGManualFillRequestClassNote},
                    { "SetCQGManualFillRequestClassNote", this.SetCQGManualFillRequestClassNote},
                    { "GetCQGManualFillRequestClassPrice", this.GetCQGManualFillRequestClassPrice},
                    { "SetCQGManualFillRequestClassPrice", this.SetCQGManualFillRequestClassPrice},
                    { "GetCQGManualFillRequestClassQuantity", this.GetCQGManualFillRequestClassQuantity},
                    { "SetCQGManualFillRequestClassQuantity", this.SetCQGManualFillRequestClassQuantity},
                    { "GetCQGManualFillRequestClassSide", this.GetCQGManualFillRequestClassSide},
                    { "SetCQGManualFillRequestClassSide", this.SetCQGManualFillRequestClassSide},
                    { "GetCQGManualFillRequestClassStatementDate", this.GetCQGManualFillRequestClassStatementDate},
                    { "SetCQGManualFillRequestClassStatementDate", this.SetCQGManualFillRequestClassStatementDate},
                    { "GetCQGManualFillRequestClassTradeId", this.GetCQGManualFillRequestClassTradeId},
                    { "SetCQGManualFillRequestClassTradeId", this.SetCQGManualFillRequestClassTradeId},
                    { "GetCQGManualFillRequestClassTradeTimestamp", this.GetCQGManualFillRequestClassTradeTimestamp},
                    { "SetCQGManualFillRequestClassTradeTimestamp", this.SetCQGManualFillRequestClassTradeTimestamp},
                    { "MethodCQGManualFillRequestClassGetHashCode", this.MethodCQGManualFillRequestClassGetHashCode},
                    { "MethodCQGManualFillRequestClassToString", this.MethodCQGManualFillRequestClassToString},
                    { "GetCQGManualFillsClassCount", this.GetCQGManualFillsClassCount},
                    { "GetCQGManualFillsClassDataLevel", this.GetCQGManualFillsClassDataLevel},
                    { "GetCQGManualFillsClassGWAccountID", this.GetCQGManualFillsClassGWAccountID},
                    { "GetCQGManualFillsClassItem", this.GetCQGManualFillsClassItem},
                    { "MethodCQGManualFillsClassget_ItemByIndex", this.MethodCQGManualFillsClassget_ItemByIndex},
                    { "MethodCQGManualFillsClassGetEnumerator", this.MethodCQGManualFillsClassGetEnumerator},
                    { "MethodCQGManualFillsClassGetHashCode", this.MethodCQGManualFillsClassGetHashCode},
                    { "MethodCQGManualFillsClassToString", this.MethodCQGManualFillsClassToString},
                    { "GetCQGManualFillsCollectionClassCount", this.GetCQGManualFillsCollectionClassCount},
                    { "GetCQGManualFillsCollectionClassItem", this.GetCQGManualFillsCollectionClassItem},
                    { "MethodCQGManualFillsCollectionClassget_ItemByIndex", this.MethodCQGManualFillsCollectionClassget_ItemByIndex},
                    { "MethodCQGManualFillsCollectionClassGetEnumerator", this.MethodCQGManualFillsCollectionClassGetEnumerator},
                    { "MethodCQGManualFillsCollectionClassGetHashCode", this.MethodCQGManualFillsCollectionClassGetHashCode},
                    { "MethodCQGManualFillsCollectionClassToString", this.MethodCQGManualFillsCollectionClassToString},
                    { "GetCQGModifiedPropertiesClassCount", this.GetCQGModifiedPropertiesClassCount},
                    { "GetCQGModifiedPropertiesClassItem", this.GetCQGModifiedPropertiesClassItem},
                    { "GetCQGModifiedPropertiesClassItemByIndex", this.GetCQGModifiedPropertiesClassItemByIndex},
                    { "MethodCQGModifiedPropertiesClassget_ItemByIndex", this.MethodCQGModifiedPropertiesClassget_ItemByIndex},
                    { "MethodCQGModifiedPropertiesClassGetEnumerator", this.MethodCQGModifiedPropertiesClassGetEnumerator},
                    { "MethodCQGModifiedPropertiesClassGetHashCode", this.MethodCQGModifiedPropertiesClassGetHashCode},
                    { "MethodCQGModifiedPropertiesClassToString", this.MethodCQGModifiedPropertiesClassToString},
                    { "GetCQGModifiedPropertyClassDescription", this.GetCQGModifiedPropertyClassDescription},
                    { "GetCQGModifiedPropertyClassName", this.GetCQGModifiedPropertyClassName},
                    { "GetCQGModifiedPropertyClassNewValue", this.GetCQGModifiedPropertyClassNewValue},
                    { "GetCQGModifiedPropertyClassPreviousValue", this.GetCQGModifiedPropertyClassPreviousValue},
                    { "GetCQGModifiedPropertyClassType", this.GetCQGModifiedPropertyClassType},
                    { "MethodCQGModifiedPropertyClassGetHashCode", this.MethodCQGModifiedPropertyClassGetHashCode},
                    { "MethodCQGModifiedPropertyClassToString", this.MethodCQGModifiedPropertyClassToString},
                    { "GetCQGOrderActionRequestClassAccount", this.GetCQGOrderActionRequestClassAccount},
                    { "SetCQGOrderActionRequestClassAccount", this.SetCQGOrderActionRequestClassAccount},
                    { "GetCQGOrderActionRequestClassAlgorithmID", this.GetCQGOrderActionRequestClassAlgorithmID},
                    { "SetCQGOrderActionRequestClassAlgorithmID", this.SetCQGOrderActionRequestClassAlgorithmID},
                    { "GetCQGOrderActionRequestClassAlgorithmStringID", this.GetCQGOrderActionRequestClassAlgorithmStringID},
                    { "SetCQGOrderActionRequestClassAlgorithmStringID", this.SetCQGOrderActionRequestClassAlgorithmStringID},
                    { "GetCQGOrderActionRequestClassFromAllTraders", this.GetCQGOrderActionRequestClassFromAllTraders},
                    { "SetCQGOrderActionRequestClassFromAllTraders", this.SetCQGOrderActionRequestClassFromAllTraders},
                    { "GetCQGOrderActionRequestClassInstrument", this.GetCQGOrderActionRequestClassInstrument},
                    { "SetCQGOrderActionRequestClassInstrument", this.SetCQGOrderActionRequestClassInstrument},
                    { "GetCQGOrderActionRequestClassOrderSide", this.GetCQGOrderActionRequestClassOrderSide},
                    { "SetCQGOrderActionRequestClassOrderSide", this.SetCQGOrderActionRequestClassOrderSide},
                    { "GetCQGOrderActionRequestClassParked", this.GetCQGOrderActionRequestClassParked},
                    { "SetCQGOrderActionRequestClassParked", this.SetCQGOrderActionRequestClassParked},
                    { "MethodCQGOrderActionRequestClassGetHashCode", this.MethodCQGOrderActionRequestClassGetHashCode},
                    { "MethodCQGOrderActionRequestClassToString", this.MethodCQGOrderActionRequestClassToString},
                    { "GetCQGOrderChainClassAlgorithmID", this.GetCQGOrderChainClassAlgorithmID},
                    { "SetCQGOrderChainClassAlgorithmID", this.SetCQGOrderChainClassAlgorithmID},
                    { "GetCQGOrderChainClassAlgorithmStringID", this.GetCQGOrderChainClassAlgorithmStringID},
                    { "SetCQGOrderChainClassAlgorithmStringID", this.SetCQGOrderChainClassAlgorithmStringID},
                    { "GetCQGOrderChainClassGWAccountID", this.GetCQGOrderChainClassGWAccountID},
                    { "MethodCQGOrderChainClassAddOrder", this.MethodCQGOrderChainClassAddOrder},
                    { "MethodCQGOrderChainClassGetHashCode", this.MethodCQGOrderChainClassGetHashCode},
                    { "MethodCQGOrderChainClassToString", this.MethodCQGOrderChainClassToString},
                    { "GetCQGOrderClassAccount", this.GetCQGOrderClassAccount},
                    { "SetCQGOrderClassAccount", this.SetCQGOrderClassAccount},
                    { "GetCQGOrderClassAlgorithmID", this.GetCQGOrderClassAlgorithmID},
                    { "SetCQGOrderClassAlgorithmID", this.SetCQGOrderClassAlgorithmID},
                    { "GetCQGOrderClassAlgorithmStringID", this.GetCQGOrderClassAlgorithmStringID},
                    { "SetCQGOrderClassAlgorithmStringID", this.SetCQGOrderClassAlgorithmStringID},
                    { "GetCQGOrderClassCanBeCanceled", this.GetCQGOrderClassCanBeCanceled},
                    { "GetCQGOrderClassCanBeModified", this.GetCQGOrderClassCanBeModified},
                    { "GetCQGOrderClassCanBeReplaced", this.GetCQGOrderClassCanBeReplaced},
                    { "GetCQGOrderClassCancelationInstruction", this.GetCQGOrderClassCancelationInstruction},
                    { "SetCQGOrderClassCancelationInstruction", this.SetCQGOrderClassCancelationInstruction},
                    { "GetCQGOrderClassDescription", this.GetCQGOrderClassDescription},
                    { "SetCQGOrderClassDescription", this.SetCQGOrderClassDescription},
                    { "GetCQGOrderClassDurationType", this.GetCQGOrderClassDurationType},
                    { "SetCQGOrderClassDurationType", this.SetCQGOrderClassDurationType},
                    { "GetCQGOrderClassFilledQuantity", this.GetCQGOrderClassFilledQuantity},
                    { "GetCQGOrderClassFills", this.GetCQGOrderClassFills},
                    { "GetCQGOrderClassGUID", this.GetCQGOrderClassGUID},
                    { "GetCQGOrderClassGWOrderID", this.GetCQGOrderClassGWOrderID},
                    { "GetCQGOrderClassGWStatus", this.GetCQGOrderClassGWStatus},
                    { "GetCQGOrderClassInstrument", this.GetCQGOrderClassInstrument},
                    { "SetCQGOrderClassInstrument", this.SetCQGOrderClassInstrument},
                    { "GetCQGOrderClassInstrumentName", this.GetCQGOrderClassInstrumentName},
                    { "GetCQGOrderClassIsExternal", this.GetCQGOrderClassIsExternal},
                    { "GetCQGOrderClassIsFinal", this.GetCQGOrderClassIsFinal},
                    { "GetCQGOrderClassLastError", this.GetCQGOrderClassLastError},
                    { "GetCQGOrderClassLastEvent", this.GetCQGOrderClassLastEvent},
                    { "GetCQGOrderClassLimitPrice", this.GetCQGOrderClassLimitPrice},
                    { "SetCQGOrderClassLimitPrice", this.SetCQGOrderClassLimitPrice},
                    { "GetCQGOrderClassOrderCheckMark", this.GetCQGOrderClassOrderCheckMark},
                    { "SetCQGOrderClassOrderCheckMark", this.SetCQGOrderClassOrderCheckMark},
                    { "GetCQGOrderClassOriginalOrderID", this.GetCQGOrderClassOriginalOrderID},
                    { "GetCQGOrderClassPlaceTime", this.GetCQGOrderClassPlaceTime},
                    { "GetCQGOrderClassProperties", this.GetCQGOrderClassProperties},
                    { "GetCQGOrderClassQuantity", this.GetCQGOrderClassQuantity},
                    { "SetCQGOrderClassQuantity", this.SetCQGOrderClassQuantity},
                    { "GetCQGOrderClassRemainingQuantity", this.GetCQGOrderClassRemainingQuantity},
                    { "GetCQGOrderClassServerTimestamp", this.GetCQGOrderClassServerTimestamp},
                    { "GetCQGOrderClassSide", this.GetCQGOrderClassSide},
                    { "SetCQGOrderClassSide", this.SetCQGOrderClassSide},
                    { "GetCQGOrderClassState", this.GetCQGOrderClassState},
                    { "GetCQGOrderClassStopPrice", this.GetCQGOrderClassStopPrice},
                    { "SetCQGOrderClassStopPrice", this.SetCQGOrderClassStopPrice},
                    { "GetCQGOrderClassTag", this.GetCQGOrderClassTag},
                    { "SetCQGOrderClassTag", this.SetCQGOrderClassTag},
                    { "GetCQGOrderClassTimeActiveAt", this.GetCQGOrderClassTimeActiveAt},
                    { "GetCQGOrderClassTimestamp", this.GetCQGOrderClassTimestamp},
                    { "GetCQGOrderClassTransactions", this.GetCQGOrderClassTransactions},
                    { "GetCQGOrderClassType", this.GetCQGOrderClassType},
                    { "GetCQGOrderClassUEName", this.GetCQGOrderClassUEName},
                    { "MethodCQGOrderClassActivate", this.MethodCQGOrderClassActivate},
                    { "MethodCQGOrderClassCancel", this.MethodCQGOrderClassCancel},
                    { "MethodCQGOrderClassget_Tag", this.MethodCQGOrderClassget_Tag},
                    { "MethodCQGOrderClassGetHashCode", this.MethodCQGOrderClassGetHashCode},
                    { "MethodCQGOrderClassModify", this.MethodCQGOrderClassModify},
                    { "MethodCQGOrderClassPlace", this.MethodCQGOrderClassPlace},
                    { "MethodCQGOrderClassPrepareModify", this.MethodCQGOrderClassPrepareModify},
                    { "MethodCQGOrderClassSendCareOrderAck", this.MethodCQGOrderClassSendCareOrderAck},
                    { "MethodCQGOrderClassset_Tag", this.MethodCQGOrderClassset_Tag},
                    { "MethodCQGOrderClassToString", this.MethodCQGOrderClassToString},
                    { "GetCQGOrderModifyClassProperties", this.GetCQGOrderModifyClassProperties},
                    { "MethodCQGOrderModifyClassGetHashCode", this.MethodCQGOrderModifyClassGetHashCode},
                    { "MethodCQGOrderModifyClassToString", this.MethodCQGOrderModifyClassToString},
                    { "GetCQGOrderPropertiesClassCount", this.GetCQGOrderPropertiesClassCount},
                    { "GetCQGOrderPropertiesClassItem", this.GetCQGOrderPropertiesClassItem},
                    { "MethodCQGOrderPropertiesClassGetEnumerator", this.MethodCQGOrderPropertiesClassGetEnumerator},
                    { "MethodCQGOrderPropertiesClassGetHashCode", this.MethodCQGOrderPropertiesClassGetHashCode},
                    { "MethodCQGOrderPropertiesClassToString", this.MethodCQGOrderPropertiesClassToString},
                    { "GetCQGOrderPropertyClassCanBeSet", this.GetCQGOrderPropertyClassCanBeSet},
                    { "GetCQGOrderPropertyClassDescription", this.GetCQGOrderPropertyClassDescription},
                    { "GetCQGOrderPropertyClassName", this.GetCQGOrderPropertyClassName},
                    { "GetCQGOrderPropertyClassOrder", this.GetCQGOrderPropertyClassOrder},
                    { "GetCQGOrderPropertyClassTimestamp", this.GetCQGOrderPropertyClassTimestamp},
                    { "GetCQGOrderPropertyClassType", this.GetCQGOrderPropertyClassType},
                    { "GetCQGOrderPropertyClassValue", this.GetCQGOrderPropertyClassValue},
                    { "SetCQGOrderPropertyClassValue", this.SetCQGOrderPropertyClassValue},
                    { "MethodCQGOrderPropertyClassGetHashCode", this.MethodCQGOrderPropertyClassGetHashCode},
                    { "MethodCQGOrderPropertyClassToString", this.MethodCQGOrderPropertyClassToString},
                    { "GetCQGOrdersClassCount", this.GetCQGOrdersClassCount},
                    { "GetCQGOrdersClassItem", this.GetCQGOrdersClassItem},
                    { "MethodCQGOrdersClassAddToLiveOrders", this.MethodCQGOrdersClassAddToLiveOrders},
                    { "MethodCQGOrdersClassget_ItemByGuid", this.MethodCQGOrdersClassget_ItemByGuid},
                    { "MethodCQGOrdersClassGetEnumerator", this.MethodCQGOrdersClassGetEnumerator},
                    { "MethodCQGOrdersClassGetHashCode", this.MethodCQGOrdersClassGetHashCode},
                    { "MethodCQGOrdersClassSelectByInstrumentName", this.MethodCQGOrdersClassSelectByInstrumentName},
                    { "MethodCQGOrdersClassSelectByOrderStatus", this.MethodCQGOrdersClassSelectByOrderStatus},
                    { "MethodCQGOrdersClassSelectByOrderType", this.MethodCQGOrdersClassSelectByOrderType},
                    { "MethodCQGOrdersClassSelectByProperty", this.MethodCQGOrdersClassSelectByProperty},
                    { "MethodCQGOrdersClassSelectBySide", this.MethodCQGOrdersClassSelectBySide},
                    { "MethodCQGOrdersClassSelectByTag", this.MethodCQGOrdersClassSelectByTag},
                    { "MethodCQGOrdersClassToString", this.MethodCQGOrdersClassToString},
                    { "GetCQGOrdersQueryClassAccount", this.GetCQGOrdersQueryClassAccount},
                    { "GetCQGOrdersQueryClassCEL", this.GetCQGOrdersQueryClassCEL},
                    { "GetCQGOrdersQueryClassFinalError", this.GetCQGOrdersQueryClassFinalError},
                    { "GetCQGOrdersQueryClassLastChunk", this.GetCQGOrdersQueryClassLastChunk},
                    { "GetCQGOrdersQueryClassOrders", this.GetCQGOrdersQueryClassOrders},
                    { "GetCQGOrdersQueryClassQueryID", this.GetCQGOrdersQueryClassQueryID},
                    { "GetCQGOrdersQueryClassServerTimestamp", this.GetCQGOrdersQueryClassServerTimestamp},
                    { "GetCQGOrdersQueryClassStatus", this.GetCQGOrdersQueryClassStatus},
                    { "GetCQGOrdersQueryClassTimestamp", this.GetCQGOrdersQueryClassTimestamp},
                    { "MethodCQGOrdersQueryClassCancel", this.MethodCQGOrdersQueryClassCancel},
                    { "MethodCQGOrdersQueryClassGetHashCode", this.MethodCQGOrdersQueryClassGetHashCode},
                    { "MethodCQGOrdersQueryClassToString", this.MethodCQGOrdersQueryClassToString},
                    { "GetCQGOrderStatisticsClassStatisticsOnReceive", this.GetCQGOrderStatisticsClassStatisticsOnReceive},
                    { "SetCQGOrderStatisticsClassSwitch", this.SetCQGOrderStatisticsClassSwitch},
                    { "MethodCQGOrderStatisticsClassget_StatisticsOnReceive", this.MethodCQGOrderStatisticsClassget_StatisticsOnReceive},
                    { "MethodCQGOrderStatisticsClassget_StatisticsOnSend", this.MethodCQGOrderStatisticsClassget_StatisticsOnSend},
                    { "MethodCQGOrderStatisticsClassGetHashCode", this.MethodCQGOrderStatisticsClassGetHashCode},
                    { "MethodCQGOrderStatisticsClassToString", this.MethodCQGOrderStatisticsClassToString},
                    { "GetCQGParameterDefinitionClassAvailableValues", this.GetCQGParameterDefinitionClassAvailableValues},
                    { "GetCQGParameterDefinitionClassComment", this.GetCQGParameterDefinitionClassComment},
                    { "GetCQGParameterDefinitionClassDefaultValue", this.GetCQGParameterDefinitionClassDefaultValue},
                    { "GetCQGParameterDefinitionClassName", this.GetCQGParameterDefinitionClassName},
                    { "GetCQGParameterDefinitionClassType", this.GetCQGParameterDefinitionClassType},
                    { "MethodCQGParameterDefinitionClassGetHashCode", this.MethodCQGParameterDefinitionClassGetHashCode},
                    { "MethodCQGParameterDefinitionClassToString", this.MethodCQGParameterDefinitionClassToString},
                    { "GetCQGParameterDefinitionsClassCount", this.GetCQGParameterDefinitionsClassCount},
                    { "GetCQGParameterDefinitionsClassItem", this.GetCQGParameterDefinitionsClassItem},
                    { "GetCQGParameterDefinitionsClassItemByName", this.GetCQGParameterDefinitionsClassItemByName},
                    { "MethodCQGParameterDefinitionsClassget_ItemByName", this.MethodCQGParameterDefinitionsClassget_ItemByName},
                    { "MethodCQGParameterDefinitionsClassGetEnumerator", this.MethodCQGParameterDefinitionsClassGetEnumerator},
                    { "MethodCQGParameterDefinitionsClassGetHashCode", this.MethodCQGParameterDefinitionsClassGetHashCode},
                    { "MethodCQGParameterDefinitionsClassToString", this.MethodCQGParameterDefinitionsClassToString},
                    { "GetCQGPointAndFigureBarClassHigh", this.GetCQGPointAndFigureBarClassHigh},
                    { "GetCQGPointAndFigureBarClassLow", this.GetCQGPointAndFigureBarClassLow},
                    { "GetCQGPointAndFigureBarClassMid", this.GetCQGPointAndFigureBarClassMid},
                    { "GetCQGPointAndFigureBarClassPFHigh", this.GetCQGPointAndFigureBarClassPFHigh},
                    { "GetCQGPointAndFigureBarClassPFLow", this.GetCQGPointAndFigureBarClassPFLow},
                    { "GetCQGPointAndFigureBarClassTimestamp", this.GetCQGPointAndFigureBarClassTimestamp},
                    { "GetCQGPointAndFigureBarClassTimestampOffset", this.GetCQGPointAndFigureBarClassTimestampOffset},
                    { "GetCQGPointAndFigureBarClassUp", this.GetCQGPointAndFigureBarClassUp},
                    { "MethodCQGPointAndFigureBarClassGetHashCode", this.MethodCQGPointAndFigureBarClassGetHashCode},
                    { "MethodCQGPointAndFigureBarClassToString", this.MethodCQGPointAndFigureBarClassToString},
                    { "GetCQGPointAndFigureBarsClassCount", this.GetCQGPointAndFigureBarsClassCount},
                    { "GetCQGPointAndFigureBarsClassEndTimestamp", this.GetCQGPointAndFigureBarsClassEndTimestamp},
                    { "GetCQGPointAndFigureBarsClassId", this.GetCQGPointAndFigureBarsClassId},
                    { "GetCQGPointAndFigureBarsClassItem", this.GetCQGPointAndFigureBarsClassItem},
                    { "GetCQGPointAndFigureBarsClassLastError", this.GetCQGPointAndFigureBarsClassLastError},
                    { "GetCQGPointAndFigureBarsClassRequest", this.GetCQGPointAndFigureBarsClassRequest},
                    { "GetCQGPointAndFigureBarsClassStartTimestamp", this.GetCQGPointAndFigureBarsClassStartTimestamp},
                    { "GetCQGPointAndFigureBarsClassStatus", this.GetCQGPointAndFigureBarsClassStatus},
                    { "GetCQGPointAndFigureBarsClassTag", this.GetCQGPointAndFigureBarsClassTag},
                    { "SetCQGPointAndFigureBarsClassTag", this.SetCQGPointAndFigureBarsClassTag},
                    { "MethodCQGPointAndFigureBarsClassget_Tag", this.MethodCQGPointAndFigureBarsClassget_Tag},
                    { "MethodCQGPointAndFigureBarsClassGetEnumerator", this.MethodCQGPointAndFigureBarsClassGetEnumerator},
                    { "MethodCQGPointAndFigureBarsClassGetHashCode", this.MethodCQGPointAndFigureBarsClassGetHashCode},
                    { "MethodCQGPointAndFigureBarsClassset_Tag", this.MethodCQGPointAndFigureBarsClassset_Tag},
                    { "MethodCQGPointAndFigureBarsClassToString", this.MethodCQGPointAndFigureBarsClassToString},
                    { "GetCQGPointAndFigureBarsCollectionClassCount", this.GetCQGPointAndFigureBarsCollectionClassCount},
                    { "GetCQGPointAndFigureBarsCollectionClassItem", this.GetCQGPointAndFigureBarsCollectionClassItem},
                    { "GetCQGPointAndFigureBarsCollectionClassItemById", this.GetCQGPointAndFigureBarsCollectionClassItemById},
                    { "MethodCQGPointAndFigureBarsCollectionClassget_ItemById", this.MethodCQGPointAndFigureBarsCollectionClassget_ItemById},
                    { "MethodCQGPointAndFigureBarsCollectionClassGetEnumerator", this.MethodCQGPointAndFigureBarsCollectionClassGetEnumerator},
                    { "MethodCQGPointAndFigureBarsCollectionClassGetHashCode", this.MethodCQGPointAndFigureBarsCollectionClassGetHashCode},
                    { "MethodCQGPointAndFigureBarsCollectionClassToString", this.MethodCQGPointAndFigureBarsCollectionClassToString},
                    { "GetCQGPointAndFigureBarsRequestClassBoxSize", this.GetCQGPointAndFigureBarsRequestClassBoxSize},
                    { "SetCQGPointAndFigureBarsRequestClassBoxSize", this.SetCQGPointAndFigureBarsRequestClassBoxSize},
                    { "GetCQGPointAndFigureBarsRequestClassBoxUnits", this.GetCQGPointAndFigureBarsRequestClassBoxUnits},
                    { "SetCQGPointAndFigureBarsRequestClassBoxUnits", this.SetCQGPointAndFigureBarsRequestClassBoxUnits},
                    { "GetCQGPointAndFigureBarsRequestClassContinuation", this.GetCQGPointAndFigureBarsRequestClassContinuation},
                    { "SetCQGPointAndFigureBarsRequestClassContinuation", this.SetCQGPointAndFigureBarsRequestClassContinuation},
                    { "GetCQGPointAndFigureBarsRequestClassDataSource", this.GetCQGPointAndFigureBarsRequestClassDataSource},
                    { "SetCQGPointAndFigureBarsRequestClassDataSource", this.SetCQGPointAndFigureBarsRequestClassDataSource},
                    { "GetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration", this.GetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration", this.SetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGPointAndFigureBarsRequestClassEqualizeCloses", this.GetCQGPointAndFigureBarsRequestClassEqualizeCloses},
                    { "SetCQGPointAndFigureBarsRequestClassEqualizeCloses", this.SetCQGPointAndFigureBarsRequestClassEqualizeCloses},
                    { "GetCQGPointAndFigureBarsRequestClassIncludeEnd", this.GetCQGPointAndFigureBarsRequestClassIncludeEnd},
                    { "SetCQGPointAndFigureBarsRequestClassIncludeEnd", this.SetCQGPointAndFigureBarsRequestClassIncludeEnd},
                    { "GetCQGPointAndFigureBarsRequestClassRangeEnd", this.GetCQGPointAndFigureBarsRequestClassRangeEnd},
                    { "SetCQGPointAndFigureBarsRequestClassRangeEnd", this.SetCQGPointAndFigureBarsRequestClassRangeEnd},
                    { "GetCQGPointAndFigureBarsRequestClassRangeStart", this.GetCQGPointAndFigureBarsRequestClassRangeStart},
                    { "SetCQGPointAndFigureBarsRequestClassRangeStart", this.SetCQGPointAndFigureBarsRequestClassRangeStart},
                    { "GetCQGPointAndFigureBarsRequestClassRecalcPeriod", this.GetCQGPointAndFigureBarsRequestClassRecalcPeriod},
                    { "SetCQGPointAndFigureBarsRequestClassRecalcPeriod", this.SetCQGPointAndFigureBarsRequestClassRecalcPeriod},
                    { "GetCQGPointAndFigureBarsRequestClassReversal", this.GetCQGPointAndFigureBarsRequestClassReversal},
                    { "SetCQGPointAndFigureBarsRequestClassReversal", this.SetCQGPointAndFigureBarsRequestClassReversal},
                    { "GetCQGPointAndFigureBarsRequestClassSessionFlags", this.GetCQGPointAndFigureBarsRequestClassSessionFlags},
                    { "SetCQGPointAndFigureBarsRequestClassSessionFlags", this.SetCQGPointAndFigureBarsRequestClassSessionFlags},
                    { "GetCQGPointAndFigureBarsRequestClassSessionsFilter", this.GetCQGPointAndFigureBarsRequestClassSessionsFilter},
                    { "SetCQGPointAndFigureBarsRequestClassSessionsFilter", this.SetCQGPointAndFigureBarsRequestClassSessionsFilter},
                    { "GetCQGPointAndFigureBarsRequestClassSubscriptionLevel", this.GetCQGPointAndFigureBarsRequestClassSubscriptionLevel},
                    { "SetCQGPointAndFigureBarsRequestClassSubscriptionLevel", this.SetCQGPointAndFigureBarsRequestClassSubscriptionLevel},
                    { "GetCQGPointAndFigureBarsRequestClassSymbol", this.GetCQGPointAndFigureBarsRequestClassSymbol},
                    { "SetCQGPointAndFigureBarsRequestClassSymbol", this.SetCQGPointAndFigureBarsRequestClassSymbol},
                    { "GetCQGPointAndFigureBarsRequestClassUpdatesEnabled", this.GetCQGPointAndFigureBarsRequestClassUpdatesEnabled},
                    { "SetCQGPointAndFigureBarsRequestClassUpdatesEnabled", this.SetCQGPointAndFigureBarsRequestClassUpdatesEnabled},
                    { "MethodCQGPointAndFigureBarsRequestClassGetHashCode", this.MethodCQGPointAndFigureBarsRequestClassGetHashCode},
                    { "MethodCQGPointAndFigureBarsRequestClassToString", this.MethodCQGPointAndFigureBarsRequestClassToString},
                    { "GetCQGPositionClassAccount", this.GetCQGPositionClassAccount},
                    { "GetCQGPositionClassAveragePrice", this.GetCQGPositionClassAveragePrice},
                    { "GetCQGPositionClassInstrument", this.GetCQGPositionClassInstrument},
                    { "GetCQGPositionClassInstrumentName", this.GetCQGPositionClassInstrumentName},
                    { "GetCQGPositionClassManualFillsInvolved", this.GetCQGPositionClassManualFillsInvolved},
                    { "GetCQGPositionClassMatchedTrades", this.GetCQGPositionClassMatchedTrades},
                    { "GetCQGPositionClassMVO", this.GetCQGPositionClassMVO},
                    { "GetCQGPositionClassOpenTrades", this.GetCQGPositionClassOpenTrades},
                    { "GetCQGPositionClassOTE", this.GetCQGPositionClassOTE},
                    { "GetCQGPositionClassProfitLoss", this.GetCQGPositionClassProfitLoss},
                    { "GetCQGPositionClassQuantity", this.GetCQGPositionClassQuantity},
                    { "GetCQGPositionClassServerTimestamp", this.GetCQGPositionClassServerTimestamp},
                    { "GetCQGPositionClassSide", this.GetCQGPositionClassSide},
                    { "GetCQGPositionClassTimestamp", this.GetCQGPositionClassTimestamp},
                    { "GetCQGPositionClassUPL", this.GetCQGPositionClassUPL},
                    { "MethodCQGPositionClassGetHashCode", this.MethodCQGPositionClassGetHashCode},
                    { "MethodCQGPositionClassToString", this.MethodCQGPositionClassToString},
                    { "GetCQGPositionsClassCount", this.GetCQGPositionsClassCount},
                    { "GetCQGPositionsClassItem", this.GetCQGPositionsClassItem},
                    { "GetCQGPositionsClassItemByIndex", this.GetCQGPositionsClassItemByIndex},
                    { "MethodCQGPositionsClassget_ItemByIndex", this.MethodCQGPositionsClassget_ItemByIndex},
                    { "MethodCQGPositionsClassGetEnumerator", this.MethodCQGPositionsClassGetEnumerator},
                    { "MethodCQGPositionsClassGetHashCode", this.MethodCQGPositionsClassGetHashCode},
                    { "MethodCQGPositionsClassToString", this.MethodCQGPositionsClassToString},
                    { "GetCQGPositionsStatementClassGWAccountID", this.GetCQGPositionsStatementClassGWAccountID},
                    { "GetCQGPositionsStatementClassPositions", this.GetCQGPositionsStatementClassPositions},
                    { "GetCQGPositionsStatementClassStatementDate", this.GetCQGPositionsStatementClassStatementDate},
                    { "MethodCQGPositionsStatementClassGetHashCode", this.MethodCQGPositionsStatementClassGetHashCode},
                    { "MethodCQGPositionsStatementClassToString", this.MethodCQGPositionsStatementClassToString},
                    { "GetCQGQFormulaDefinitionClassExpression", this.GetCQGQFormulaDefinitionClassExpression},
                    { "GetCQGQFormulaDefinitionClassName", this.GetCQGQFormulaDefinitionClassName},
                    { "GetCQGQFormulaDefinitionClassNumber", this.GetCQGQFormulaDefinitionClassNumber},
                    { "MethodCQGQFormulaDefinitionClassGetHashCode", this.MethodCQGQFormulaDefinitionClassGetHashCode},
                    { "MethodCQGQFormulaDefinitionClassToString", this.MethodCQGQFormulaDefinitionClassToString},
                    { "GetCQGQFormulaDefinitionsClassCount", this.GetCQGQFormulaDefinitionsClassCount},
                    { "GetCQGQFormulaDefinitionsClassItem", this.GetCQGQFormulaDefinitionsClassItem},
                    { "GetCQGQFormulaDefinitionsClassItemByName", this.GetCQGQFormulaDefinitionsClassItemByName},
                    { "MethodCQGQFormulaDefinitionsClassget_ItemByName", this.MethodCQGQFormulaDefinitionsClassget_ItemByName},
                    { "MethodCQGQFormulaDefinitionsClassGetEnumerator", this.MethodCQGQFormulaDefinitionsClassGetEnumerator},
                    { "MethodCQGQFormulaDefinitionsClassGetHashCode", this.MethodCQGQFormulaDefinitionsClassGetHashCode},
                    { "MethodCQGQFormulaDefinitionsClassToString", this.MethodCQGQFormulaDefinitionsClassToString},
                    { "GetCQGQuoteClassHasVolume", this.GetCQGQuoteClassHasVolume},
                    { "GetCQGQuoteClassInstrument", this.GetCQGQuoteClassInstrument},
                    { "GetCQGQuoteClassIsValid", this.GetCQGQuoteClassIsValid},
                    { "GetCQGQuoteClassName", this.GetCQGQuoteClassName},
                    { "GetCQGQuoteClassPrice", this.GetCQGQuoteClassPrice},
                    { "GetCQGQuoteClassServerTimestamp", this.GetCQGQuoteClassServerTimestamp},
                    { "GetCQGQuoteClassTimestamp", this.GetCQGQuoteClassTimestamp},
                    { "GetCQGQuoteClassType", this.GetCQGQuoteClassType},
                    { "GetCQGQuoteClassVolume", this.GetCQGQuoteClassVolume},
                    { "MethodCQGQuoteClassGetHashCode", this.MethodCQGQuoteClassGetHashCode},
                    { "MethodCQGQuoteClassToString", this.MethodCQGQuoteClassToString},
                    { "GetCQGQuotesClassCount", this.GetCQGQuotesClassCount},
                    { "GetCQGQuotesClassItem", this.GetCQGQuotesClassItem},
                    { "MethodCQGQuotesClassGetEnumerator", this.MethodCQGQuotesClassGetEnumerator},
                    { "MethodCQGQuotesClassGetHashCode", this.MethodCQGQuotesClassGetHashCode},
                    { "MethodCQGQuotesClassToString", this.MethodCQGQuotesClassToString},
                    { "GetCQGRemoteOpenAPISessionClassLogonName", this.GetCQGRemoteOpenAPISessionClassLogonName},
                    { "GetCQGRemoteOpenAPISessionClassROMNumber", this.GetCQGRemoteOpenAPISessionClassROMNumber},
                    { "GetCQGRemoteOpenAPISessionClassServerAddress", this.GetCQGRemoteOpenAPISessionClassServerAddress},
                    { "MethodCQGRemoteOpenAPISessionClassGetHashCode", this.MethodCQGRemoteOpenAPISessionClassGetHashCode},
                    { "MethodCQGRemoteOpenAPISessionClassToString", this.MethodCQGRemoteOpenAPISessionClassToString},
                    { "GetCQGSessionClassActivationDate", this.GetCQGSessionClassActivationDate},
                    { "GetCQGSessionClassDayCloseOffset", this.GetCQGSessionClassDayCloseOffset},
                    { "GetCQGSessionClassDayStartOffset", this.GetCQGSessionClassDayStartOffset},
                    { "GetCQGSessionClassDayStartsYesterday", this.GetCQGSessionClassDayStartsYesterday},
                    { "GetCQGSessionClassEndTime", this.GetCQGSessionClassEndTime},
                    { "GetCQGSessionClassInstrument", this.GetCQGSessionClassInstrument},
                    { "GetCQGSessionClassName", this.GetCQGSessionClassName},
                    { "GetCQGSessionClassNumber", this.GetCQGSessionClassNumber},
                    { "GetCQGSessionClassPrimaryFlag", this.GetCQGSessionClassPrimaryFlag},
                    { "GetCQGSessionClassStartTime", this.GetCQGSessionClassStartTime},
                    { "GetCQGSessionClassType", this.GetCQGSessionClassType},
                    { "GetCQGSessionClassValidEndTime", this.GetCQGSessionClassValidEndTime},
                    { "GetCQGSessionClassValidStartTime", this.GetCQGSessionClassValidStartTime},
                    { "GetCQGSessionClassWorkingWeekDays", this.GetCQGSessionClassWorkingWeekDays},
                    { "MethodCQGSessionClassGetHashCode", this.MethodCQGSessionClassGetHashCode},
                    { "MethodCQGSessionClassIsTimeInSession", this.MethodCQGSessionClassIsTimeInSession},
                    { "MethodCQGSessionClassToString", this.MethodCQGSessionClassToString},
                    { "GetCQGSessionsClassCount", this.GetCQGSessionsClassCount},
                    { "GetCQGSessionsClassDescriptionEnd", this.GetCQGSessionsClassDescriptionEnd},
                    { "GetCQGSessionsClassDescriptionNumber", this.GetCQGSessionsClassDescriptionNumber},
                    { "GetCQGSessionsClassDescriptionStart", this.GetCQGSessionsClassDescriptionStart},
                    { "GetCQGSessionsClassHolidays", this.GetCQGSessionsClassHolidays},
                    { "GetCQGSessionsClassItem", this.GetCQGSessionsClassItem},
                    { "GetCQGSessionsClassName", this.GetCQGSessionsClassName},
                    { "GetCQGSessionsClassType", this.GetCQGSessionsClassType},
                    { "MethodCQGSessionsClassGetEnumerator", this.MethodCQGSessionsClassGetEnumerator},
                    { "MethodCQGSessionsClassGetHashCode", this.MethodCQGSessionsClassGetHashCode},
                    { "MethodCQGSessionsClassIsTimeInSession", this.MethodCQGSessionsClassIsTimeInSession},
                    { "MethodCQGSessionsClassToString", this.MethodCQGSessionsClassToString},
                    { "GetCQGSessionsCollectionClassCount", this.GetCQGSessionsCollectionClassCount},
                    { "GetCQGSessionsCollectionClassItem", this.GetCQGSessionsCollectionClassItem},
                    { "MethodCQGSessionsCollectionClassGetEnumerator", this.MethodCQGSessionsCollectionClassGetEnumerator},
                    { "MethodCQGSessionsCollectionClassGetHashCode", this.MethodCQGSessionsCollectionClassGetHashCode},
                    { "MethodCQGSessionsCollectionClassToString", this.MethodCQGSessionsCollectionClassToString},
                    { "GetCQGStrategyDefinitionClassClientId", this.GetCQGStrategyDefinitionClassClientId},
                    { "GetCQGStrategyDefinitionClassId", this.GetCQGStrategyDefinitionClassId},
                    { "GetCQGStrategyDefinitionClassLastError", this.GetCQGStrategyDefinitionClassLastError},
                    { "GetCQGStrategyDefinitionClassRequestString", this.GetCQGStrategyDefinitionClassRequestString},
                    { "GetCQGStrategyDefinitionClassStatus", this.GetCQGStrategyDefinitionClassStatus},
                    { "GetCQGStrategyDefinitionClassSymbol", this.GetCQGStrategyDefinitionClassSymbol},
                    { "MethodCQGStrategyDefinitionClassGetHashCode", this.MethodCQGStrategyDefinitionClassGetHashCode},
                    { "MethodCQGStrategyDefinitionClassToString", this.MethodCQGStrategyDefinitionClassToString},
                    { "GetCQGStrategyDefinitionsClassCount", this.GetCQGStrategyDefinitionsClassCount},
                    { "GetCQGStrategyDefinitionsClassItem", this.GetCQGStrategyDefinitionsClassItem},
                    { "GetCQGStrategyDefinitionsClassItemByIndex", this.GetCQGStrategyDefinitionsClassItemByIndex},
                    { "MethodCQGStrategyDefinitionsClassget_ItemByIndex", this.MethodCQGStrategyDefinitionsClassget_ItemByIndex},
                    { "MethodCQGStrategyDefinitionsClassGetEnumerator", this.MethodCQGStrategyDefinitionsClassGetEnumerator},
                    { "MethodCQGStrategyDefinitionsClassGetHashCode", this.MethodCQGStrategyDefinitionsClassGetHashCode},
                    { "MethodCQGStrategyDefinitionsClassToString", this.MethodCQGStrategyDefinitionsClassToString},
                    { "GetCQGStrategyLegFillClassExecutionId", this.GetCQGStrategyLegFillClassExecutionId},
                    { "GetCQGStrategyLegFillClassOrder", this.GetCQGStrategyLegFillClassOrder},
                    { "GetCQGStrategyLegFillClassOriginalOrderID", this.GetCQGStrategyLegFillClassOriginalOrderID},
                    { "GetCQGStrategyLegFillClassQuantity", this.GetCQGStrategyLegFillClassQuantity},
                    { "MethodCQGStrategyLegFillClassGetHashCode", this.MethodCQGStrategyLegFillClassGetHashCode},
                    { "MethodCQGStrategyLegFillClassToString", this.MethodCQGStrategyLegFillClassToString},
                    { "GetCQGStrategyLegFillsClassCount", this.GetCQGStrategyLegFillsClassCount},
                    { "GetCQGStrategyLegFillsClassItemByIndex", this.GetCQGStrategyLegFillsClassItemByIndex},
                    { "MethodCQGStrategyLegFillsClassget_ItemByIndex", this.MethodCQGStrategyLegFillsClassget_ItemByIndex},
                    { "MethodCQGStrategyLegFillsClassGetHashCode", this.MethodCQGStrategyLegFillsClassGetHashCode},
                    { "MethodCQGStrategyLegFillsClassToString", this.MethodCQGStrategyLegFillsClassToString},
                    { "GetCQGStringCollectionClassCount", this.GetCQGStringCollectionClassCount},
                    { "GetCQGStringCollectionClassItem", this.GetCQGStringCollectionClassItem},
                    { "MethodCQGStringCollectionClassGetEnumerator", this.MethodCQGStringCollectionClassGetEnumerator},
                    { "MethodCQGStringCollectionClassGetHashCode", this.MethodCQGStringCollectionClassGetHashCode},
                    { "MethodCQGStringCollectionClassToString", this.MethodCQGStringCollectionClassToString},
                    { "GetCQGSubMinuteBarClassAskVolume", this.GetCQGSubMinuteBarClassAskVolume},
                    { "GetCQGSubMinuteBarClassAvg", this.GetCQGSubMinuteBarClassAvg},
                    { "GetCQGSubMinuteBarClassBidVolume", this.GetCQGSubMinuteBarClassBidVolume},
                    { "GetCQGSubMinuteBarClassClose", this.GetCQGSubMinuteBarClassClose},
                    { "GetCQGSubMinuteBarClassHigh", this.GetCQGSubMinuteBarClassHigh},
                    { "GetCQGSubMinuteBarClassHLC3", this.GetCQGSubMinuteBarClassHLC3},
                    { "GetCQGSubMinuteBarClassLow", this.GetCQGSubMinuteBarClassLow},
                    { "GetCQGSubMinuteBarClassMid", this.GetCQGSubMinuteBarClassMid},
                    { "GetCQGSubMinuteBarClassOpen", this.GetCQGSubMinuteBarClassOpen},
                    { "GetCQGSubMinuteBarClassRange", this.GetCQGSubMinuteBarClassRange},
                    { "GetCQGSubMinuteBarClassTickVolume", this.GetCQGSubMinuteBarClassTickVolume},
                    { "GetCQGSubMinuteBarClassTimestamp", this.GetCQGSubMinuteBarClassTimestamp},
                    { "GetCQGSubMinuteBarClassTimestampOffset", this.GetCQGSubMinuteBarClassTimestampOffset},
                    { "GetCQGSubMinuteBarClassTrueHigh", this.GetCQGSubMinuteBarClassTrueHigh},
                    { "GetCQGSubMinuteBarClassTrueLow", this.GetCQGSubMinuteBarClassTrueLow},
                    { "GetCQGSubMinuteBarClassTrueRange", this.GetCQGSubMinuteBarClassTrueRange},
                    { "GetCQGSubMinuteBarClassVolume", this.GetCQGSubMinuteBarClassVolume},
                    { "MethodCQGSubMinuteBarClassGetHashCode", this.MethodCQGSubMinuteBarClassGetHashCode},
                    { "MethodCQGSubMinuteBarClassToString", this.MethodCQGSubMinuteBarClassToString},
                    { "GetCQGSubMinuteBarsClassCount", this.GetCQGSubMinuteBarsClassCount},
                    { "GetCQGSubMinuteBarsClassEndTimestamp", this.GetCQGSubMinuteBarsClassEndTimestamp},
                    { "GetCQGSubMinuteBarsClassId", this.GetCQGSubMinuteBarsClassId},
                    { "GetCQGSubMinuteBarsClassItem", this.GetCQGSubMinuteBarsClassItem},
                    { "GetCQGSubMinuteBarsClassLastError", this.GetCQGSubMinuteBarsClassLastError},
                    { "GetCQGSubMinuteBarsClassRequest", this.GetCQGSubMinuteBarsClassRequest},
                    { "GetCQGSubMinuteBarsClassStartTimestamp", this.GetCQGSubMinuteBarsClassStartTimestamp},
                    { "GetCQGSubMinuteBarsClassStatus", this.GetCQGSubMinuteBarsClassStatus},
                    { "GetCQGSubMinuteBarsClassTag", this.GetCQGSubMinuteBarsClassTag},
                    { "SetCQGSubMinuteBarsClassTag", this.SetCQGSubMinuteBarsClassTag},
                    { "MethodCQGSubMinuteBarsClassget_Tag", this.MethodCQGSubMinuteBarsClassget_Tag},
                    { "MethodCQGSubMinuteBarsClassGetEnumerator", this.MethodCQGSubMinuteBarsClassGetEnumerator},
                    { "MethodCQGSubMinuteBarsClassGetHashCode", this.MethodCQGSubMinuteBarsClassGetHashCode},
                    { "MethodCQGSubMinuteBarsClassset_Tag", this.MethodCQGSubMinuteBarsClassset_Tag},
                    { "MethodCQGSubMinuteBarsClassToString", this.MethodCQGSubMinuteBarsClassToString},
                    { "GetCQGSubMinuteBarsCollectionClassCount", this.GetCQGSubMinuteBarsCollectionClassCount},
                    { "GetCQGSubMinuteBarsCollectionClassItem", this.GetCQGSubMinuteBarsCollectionClassItem},
                    { "GetCQGSubMinuteBarsCollectionClassItemById", this.GetCQGSubMinuteBarsCollectionClassItemById},
                    { "MethodCQGSubMinuteBarsCollectionClassget_ItemById", this.MethodCQGSubMinuteBarsCollectionClassget_ItemById},
                    { "MethodCQGSubMinuteBarsCollectionClassGetEnumerator", this.MethodCQGSubMinuteBarsCollectionClassGetEnumerator},
                    { "MethodCQGSubMinuteBarsCollectionClassGetHashCode", this.MethodCQGSubMinuteBarsCollectionClassGetHashCode},
                    { "MethodCQGSubMinuteBarsCollectionClassToString", this.MethodCQGSubMinuteBarsCollectionClassToString},
                    { "GetCQGSubMinuteBarsRequestClassContinuation", this.GetCQGSubMinuteBarsRequestClassContinuation},
                    { "SetCQGSubMinuteBarsRequestClassContinuation", this.SetCQGSubMinuteBarsRequestClassContinuation},
                    { "GetCQGSubMinuteBarsRequestClassDaysBeforeExpiration", this.GetCQGSubMinuteBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGSubMinuteBarsRequestClassDaysBeforeExpiration", this.SetCQGSubMinuteBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGSubMinuteBarsRequestClassEqualizeCloses", this.GetCQGSubMinuteBarsRequestClassEqualizeCloses},
                    { "SetCQGSubMinuteBarsRequestClassEqualizeCloses", this.SetCQGSubMinuteBarsRequestClassEqualizeCloses},
                    { "GetCQGSubMinuteBarsRequestClassGapFilter", this.GetCQGSubMinuteBarsRequestClassGapFilter},
                    { "SetCQGSubMinuteBarsRequestClassGapFilter", this.SetCQGSubMinuteBarsRequestClassGapFilter},
                    { "GetCQGSubMinuteBarsRequestClassIncludeEnd", this.GetCQGSubMinuteBarsRequestClassIncludeEnd},
                    { "SetCQGSubMinuteBarsRequestClassIncludeEnd", this.SetCQGSubMinuteBarsRequestClassIncludeEnd},
                    { "GetCQGSubMinuteBarsRequestClassInterval", this.GetCQGSubMinuteBarsRequestClassInterval},
                    { "SetCQGSubMinuteBarsRequestClassInterval", this.SetCQGSubMinuteBarsRequestClassInterval},
                    { "GetCQGSubMinuteBarsRequestClassRangeEnd", this.GetCQGSubMinuteBarsRequestClassRangeEnd},
                    { "SetCQGSubMinuteBarsRequestClassRangeEnd", this.SetCQGSubMinuteBarsRequestClassRangeEnd},
                    { "GetCQGSubMinuteBarsRequestClassRangeStart", this.GetCQGSubMinuteBarsRequestClassRangeStart},
                    { "SetCQGSubMinuteBarsRequestClassRangeStart", this.SetCQGSubMinuteBarsRequestClassRangeStart},
                    { "GetCQGSubMinuteBarsRequestClassRecalcPeriod", this.GetCQGSubMinuteBarsRequestClassRecalcPeriod},
                    { "SetCQGSubMinuteBarsRequestClassRecalcPeriod", this.SetCQGSubMinuteBarsRequestClassRecalcPeriod},
                    { "GetCQGSubMinuteBarsRequestClassSessionFlags", this.GetCQGSubMinuteBarsRequestClassSessionFlags},
                    { "SetCQGSubMinuteBarsRequestClassSessionFlags", this.SetCQGSubMinuteBarsRequestClassSessionFlags},
                    { "GetCQGSubMinuteBarsRequestClassSessionsFilter", this.GetCQGSubMinuteBarsRequestClassSessionsFilter},
                    { "SetCQGSubMinuteBarsRequestClassSessionsFilter", this.SetCQGSubMinuteBarsRequestClassSessionsFilter},
                    { "GetCQGSubMinuteBarsRequestClassSubscriptionLevel", this.GetCQGSubMinuteBarsRequestClassSubscriptionLevel},
                    { "SetCQGSubMinuteBarsRequestClassSubscriptionLevel", this.SetCQGSubMinuteBarsRequestClassSubscriptionLevel},
                    { "GetCQGSubMinuteBarsRequestClassSymbol", this.GetCQGSubMinuteBarsRequestClassSymbol},
                    { "SetCQGSubMinuteBarsRequestClassSymbol", this.SetCQGSubMinuteBarsRequestClassSymbol},
                    { "GetCQGSubMinuteBarsRequestClassTickFilter", this.GetCQGSubMinuteBarsRequestClassTickFilter},
                    { "SetCQGSubMinuteBarsRequestClassTickFilter", this.SetCQGSubMinuteBarsRequestClassTickFilter},
                    { "GetCQGSubMinuteBarsRequestClassUpdatesEnabled", this.GetCQGSubMinuteBarsRequestClassUpdatesEnabled},
                    { "SetCQGSubMinuteBarsRequestClassUpdatesEnabled", this.SetCQGSubMinuteBarsRequestClassUpdatesEnabled},
                    { "MethodCQGSubMinuteBarsRequestClassGetHashCode", this.MethodCQGSubMinuteBarsRequestClassGetHashCode},
                    { "MethodCQGSubMinuteBarsRequestClassToString", this.MethodCQGSubMinuteBarsRequestClassToString},
                    { "GetCQGSummariesStatementClassCurrencySummaries", this.GetCQGSummariesStatementClassCurrencySummaries},
                    { "GetCQGSummariesStatementClassGWAccountID", this.GetCQGSummariesStatementClassGWAccountID},
                    { "GetCQGSummariesStatementClassStatementDate", this.GetCQGSummariesStatementClassStatementDate},
                    { "GetCQGSummariesStatementClassSummary", this.GetCQGSummariesStatementClassSummary},
                    { "MethodCQGSummariesStatementClassGetHashCode", this.MethodCQGSummariesStatementClassGetHashCode},
                    { "MethodCQGSummariesStatementClassToString", this.MethodCQGSummariesStatementClassToString},
                    { "GetCQGTFlowBarClassAskVolume", this.GetCQGTFlowBarClassAskVolume},
                    { "GetCQGTFlowBarClassBestAskPrice", this.GetCQGTFlowBarClassBestAskPrice},
                    { "GetCQGTFlowBarClassBestBidPrice", this.GetCQGTFlowBarClassBestBidPrice},
                    { "GetCQGTFlowBarClassBidVolume", this.GetCQGTFlowBarClassBidVolume},
                    { "GetCQGTFlowBarClassClose", this.GetCQGTFlowBarClassClose},
                    { "GetCQGTFlowBarClassDomAskCount", this.GetCQGTFlowBarClassDomAskCount},
                    { "GetCQGTFlowBarClassDomAskVolume", this.GetCQGTFlowBarClassDomAskVolume},
                    { "GetCQGTFlowBarClassDomBidCount", this.GetCQGTFlowBarClassDomBidCount},
                    { "GetCQGTFlowBarClassHigh", this.GetCQGTFlowBarClassHigh},
                    { "GetCQGTFlowBarClassLow", this.GetCQGTFlowBarClassLow},
                    { "GetCQGTFlowBarClassMid", this.GetCQGTFlowBarClassMid},
                    { "GetCQGTFlowBarClassOpen", this.GetCQGTFlowBarClassOpen},
                    { "GetCQGTFlowBarClassTimestamp", this.GetCQGTFlowBarClassTimestamp},
                    { "GetCQGTFlowBarClassTimestampOffset", this.GetCQGTFlowBarClassTimestampOffset},
                    { "GetCQGTFlowBarClassTrueHigh", this.GetCQGTFlowBarClassTrueHigh},
                    { "GetCQGTFlowBarClassTrueLow", this.GetCQGTFlowBarClassTrueLow},
                    { "GetCQGTFlowBarClassTrueMid", this.GetCQGTFlowBarClassTrueMid},
                    { "MethodCQGTFlowBarClassget_DomAskVolume", this.MethodCQGTFlowBarClassget_DomAskVolume},
                    { "MethodCQGTFlowBarClassget_DomBidVolume", this.MethodCQGTFlowBarClassget_DomBidVolume},
                    { "MethodCQGTFlowBarClassGetHashCode", this.MethodCQGTFlowBarClassGetHashCode},
                    { "MethodCQGTFlowBarClassToString", this.MethodCQGTFlowBarClassToString},
                    { "GetCQGTFlowBarsClassCount", this.GetCQGTFlowBarsClassCount},
                    { "GetCQGTFlowBarsClassEndTimestamp", this.GetCQGTFlowBarsClassEndTimestamp},
                    { "GetCQGTFlowBarsClassId", this.GetCQGTFlowBarsClassId},
                    { "GetCQGTFlowBarsClassItem", this.GetCQGTFlowBarsClassItem},
                    { "GetCQGTFlowBarsClassLastError", this.GetCQGTFlowBarsClassLastError},
                    { "GetCQGTFlowBarsClassRequest", this.GetCQGTFlowBarsClassRequest},
                    { "GetCQGTFlowBarsClassStartTimestamp", this.GetCQGTFlowBarsClassStartTimestamp},
                    { "GetCQGTFlowBarsClassStatus", this.GetCQGTFlowBarsClassStatus},
                    { "GetCQGTFlowBarsClassTag", this.GetCQGTFlowBarsClassTag},
                    { "SetCQGTFlowBarsClassTag", this.SetCQGTFlowBarsClassTag},
                    { "MethodCQGTFlowBarsClassget_Tag", this.MethodCQGTFlowBarsClassget_Tag},
                    { "MethodCQGTFlowBarsClassGetEnumerator", this.MethodCQGTFlowBarsClassGetEnumerator},
                    { "MethodCQGTFlowBarsClassGetHashCode", this.MethodCQGTFlowBarsClassGetHashCode},
                    { "MethodCQGTFlowBarsClassset_Tag", this.MethodCQGTFlowBarsClassset_Tag},
                    { "MethodCQGTFlowBarsClassToString", this.MethodCQGTFlowBarsClassToString},
                    { "GetCQGTFlowBarsCollectionClassCount", this.GetCQGTFlowBarsCollectionClassCount},
                    { "GetCQGTFlowBarsCollectionClassItem", this.GetCQGTFlowBarsCollectionClassItem},
                    { "GetCQGTFlowBarsCollectionClassItemById", this.GetCQGTFlowBarsCollectionClassItemById},
                    { "MethodCQGTFlowBarsCollectionClassget_ItemById", this.MethodCQGTFlowBarsCollectionClassget_ItemById},
                    { "MethodCQGTFlowBarsCollectionClassGetEnumerator", this.MethodCQGTFlowBarsCollectionClassGetEnumerator},
                    { "MethodCQGTFlowBarsCollectionClassGetHashCode", this.MethodCQGTFlowBarsCollectionClassGetHashCode},
                    { "MethodCQGTFlowBarsCollectionClassToString", this.MethodCQGTFlowBarsCollectionClassToString},
                    { "GetCQGTFlowBarsRequestClassAggregation", this.GetCQGTFlowBarsRequestClassAggregation},
                    { "SetCQGTFlowBarsRequestClassAggregation", this.SetCQGTFlowBarsRequestClassAggregation},
                    { "GetCQGTFlowBarsRequestClassAggregationLevel", this.GetCQGTFlowBarsRequestClassAggregationLevel},
                    { "SetCQGTFlowBarsRequestClassAggregationLevel", this.SetCQGTFlowBarsRequestClassAggregationLevel},
                    { "GetCQGTFlowBarsRequestClassContinuation", this.GetCQGTFlowBarsRequestClassContinuation},
                    { "SetCQGTFlowBarsRequestClassContinuation", this.SetCQGTFlowBarsRequestClassContinuation},
                    { "GetCQGTFlowBarsRequestClassDaysBeforeExpiration", this.GetCQGTFlowBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGTFlowBarsRequestClassDaysBeforeExpiration", this.SetCQGTFlowBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGTFlowBarsRequestClassDomAskVolumeLevel", this.GetCQGTFlowBarsRequestClassDomAskVolumeLevel},
                    { "SetCQGTFlowBarsRequestClassDomAskVolumeLevel", this.SetCQGTFlowBarsRequestClassDomAskVolumeLevel},
                    { "GetCQGTFlowBarsRequestClassDomBidVolumeLevel", this.GetCQGTFlowBarsRequestClassDomBidVolumeLevel},
                    { "SetCQGTFlowBarsRequestClassDomBidVolumeLevel", this.SetCQGTFlowBarsRequestClassDomBidVolumeLevel},
                    { "GetCQGTFlowBarsRequestClassEqualizeCloses", this.GetCQGTFlowBarsRequestClassEqualizeCloses},
                    { "SetCQGTFlowBarsRequestClassEqualizeCloses", this.SetCQGTFlowBarsRequestClassEqualizeCloses},
                    { "GetCQGTFlowBarsRequestClassIncludeEnd", this.GetCQGTFlowBarsRequestClassIncludeEnd},
                    { "SetCQGTFlowBarsRequestClassIncludeEnd", this.SetCQGTFlowBarsRequestClassIncludeEnd},
                    { "GetCQGTFlowBarsRequestClassRangeEnd", this.GetCQGTFlowBarsRequestClassRangeEnd},
                    { "SetCQGTFlowBarsRequestClassRangeEnd", this.SetCQGTFlowBarsRequestClassRangeEnd},
                    { "GetCQGTFlowBarsRequestClassRangeStart", this.GetCQGTFlowBarsRequestClassRangeStart},
                    { "SetCQGTFlowBarsRequestClassRangeStart", this.SetCQGTFlowBarsRequestClassRangeStart},
                    { "GetCQGTFlowBarsRequestClassRecalcPeriod", this.GetCQGTFlowBarsRequestClassRecalcPeriod},
                    { "SetCQGTFlowBarsRequestClassRecalcPeriod", this.SetCQGTFlowBarsRequestClassRecalcPeriod},
                    { "GetCQGTFlowBarsRequestClassSessionFlags", this.GetCQGTFlowBarsRequestClassSessionFlags},
                    { "SetCQGTFlowBarsRequestClassSessionFlags", this.SetCQGTFlowBarsRequestClassSessionFlags},
                    { "GetCQGTFlowBarsRequestClassSessionsFilter", this.GetCQGTFlowBarsRequestClassSessionsFilter},
                    { "SetCQGTFlowBarsRequestClassSessionsFilter", this.SetCQGTFlowBarsRequestClassSessionsFilter},
                    { "GetCQGTFlowBarsRequestClassSubscriptionLevel", this.GetCQGTFlowBarsRequestClassSubscriptionLevel},
                    { "SetCQGTFlowBarsRequestClassSubscriptionLevel", this.SetCQGTFlowBarsRequestClassSubscriptionLevel},
                    { "GetCQGTFlowBarsRequestClassSymbol", this.GetCQGTFlowBarsRequestClassSymbol},
                    { "SetCQGTFlowBarsRequestClassSymbol", this.SetCQGTFlowBarsRequestClassSymbol},
                    { "GetCQGTFlowBarsRequestClassUpdatesEnabled", this.GetCQGTFlowBarsRequestClassUpdatesEnabled},
                    { "SetCQGTFlowBarsRequestClassUpdatesEnabled", this.SetCQGTFlowBarsRequestClassUpdatesEnabled},
                    { "MethodCQGTFlowBarsRequestClassGetHashCode", this.MethodCQGTFlowBarsRequestClassGetHashCode},
                    { "MethodCQGTFlowBarsRequestClassToString", this.MethodCQGTFlowBarsRequestClassToString},
                    { "GetCQGTickClassContributorId", this.GetCQGTickClassContributorId},
                    { "GetCQGTickClassContributorIdCode", this.GetCQGTickClassContributorIdCode},
                    { "GetCQGTickClassCorrectionType", this.GetCQGTickClassCorrectionType},
                    { "GetCQGTickClassMarketState", this.GetCQGTickClassMarketState},
                    { "GetCQGTickClassPrice", this.GetCQGTickClassPrice},
                    { "GetCQGTickClassPriceType", this.GetCQGTickClassPriceType},
                    { "GetCQGTickClassSalesConditionCode", this.GetCQGTickClassSalesConditionCode},
                    { "GetCQGTickClassSalesConditionLabel", this.GetCQGTickClassSalesConditionLabel},
                    { "GetCQGTickClassTimestamp", this.GetCQGTickClassTimestamp},
                    { "GetCQGTickClassVolume", this.GetCQGTickClassVolume},
                    { "MethodCQGTickClassGetHashCode", this.MethodCQGTickClassGetHashCode},
                    { "MethodCQGTickClassToString", this.MethodCQGTickClassToString},
                    { "GetCQGTicksClassCount", this.GetCQGTicksClassCount},
                    { "GetCQGTicksClassEndTimestamp", this.GetCQGTicksClassEndTimestamp},
                    { "GetCQGTicksClassHasUpdates", this.GetCQGTicksClassHasUpdates},
                    { "GetCQGTicksClassId", this.GetCQGTicksClassId},
                    { "GetCQGTicksClassItem", this.GetCQGTicksClassItem},
                    { "GetCQGTicksClassLastError", this.GetCQGTicksClassLastError},
                    { "GetCQGTicksClassRequest", this.GetCQGTicksClassRequest},
                    { "GetCQGTicksClassStartTimestamp", this.GetCQGTicksClassStartTimestamp},
                    { "GetCQGTicksClassStatus", this.GetCQGTicksClassStatus},
                    { "GetCQGTicksClassTag", this.GetCQGTicksClassTag},
                    { "SetCQGTicksClassTag", this.SetCQGTicksClassTag},
                    { "MethodCQGTicksClassget_Tag", this.MethodCQGTicksClassget_Tag},
                    { "MethodCQGTicksClassGetEnumerator", this.MethodCQGTicksClassGetEnumerator},
                    { "MethodCQGTicksClassGetHashCode", this.MethodCQGTicksClassGetHashCode},
                    { "MethodCQGTicksClassIndexForDate", this.MethodCQGTicksClassIndexForDate},
                    { "MethodCQGTicksClassIndicesForDates", this.MethodCQGTicksClassIndicesForDates},
                    { "MethodCQGTicksClassset_Tag", this.MethodCQGTicksClassset_Tag},
                    { "MethodCQGTicksClassToString", this.MethodCQGTicksClassToString},
                    { "GetCQGTicksCollectionClassCount", this.GetCQGTicksCollectionClassCount},
                    { "GetCQGTicksCollectionClassItem", this.GetCQGTicksCollectionClassItem},
                    { "GetCQGTicksCollectionClassItemById", this.GetCQGTicksCollectionClassItemById},
                    { "MethodCQGTicksCollectionClassget_ItemById", this.MethodCQGTicksCollectionClassget_ItemById},
                    { "MethodCQGTicksCollectionClassGetEnumerator", this.MethodCQGTicksCollectionClassGetEnumerator},
                    { "MethodCQGTicksCollectionClassGetHashCode", this.MethodCQGTicksCollectionClassGetHashCode},
                    { "MethodCQGTicksCollectionClassToString", this.MethodCQGTicksCollectionClassToString},
                    { "GetCQGTicksRequestClassRangeEnd", this.GetCQGTicksRequestClassRangeEnd},
                    { "SetCQGTicksRequestClassRangeEnd", this.SetCQGTicksRequestClassRangeEnd},
                    { "GetCQGTicksRequestClassRangeStart", this.GetCQGTicksRequestClassRangeStart},
                    { "SetCQGTicksRequestClassRangeStart", this.SetCQGTicksRequestClassRangeStart},
                    { "GetCQGTicksRequestClassSessionsFilter", this.GetCQGTicksRequestClassSessionsFilter},
                    { "SetCQGTicksRequestClassSessionsFilter", this.SetCQGTicksRequestClassSessionsFilter},
                    { "GetCQGTicksRequestClassSymbol", this.GetCQGTicksRequestClassSymbol},
                    { "SetCQGTicksRequestClassSymbol", this.SetCQGTicksRequestClassSymbol},
                    { "GetCQGTicksRequestClassTickFilter", this.GetCQGTicksRequestClassTickFilter},
                    { "SetCQGTicksRequestClassTickFilter", this.SetCQGTicksRequestClassTickFilter},
                    { "GetCQGTicksRequestClassType", this.GetCQGTicksRequestClassType},
                    { "SetCQGTicksRequestClassType", this.SetCQGTicksRequestClassType},
                    { "MethodCQGTicksRequestClassGetHashCode", this.MethodCQGTicksRequestClassGetHashCode},
                    { "MethodCQGTicksRequestClassToString", this.MethodCQGTicksRequestClassToString},
                    { "GetCQGTimedBarClassActualVolume", this.GetCQGTimedBarClassActualVolume},
                    { "GetCQGTimedBarClassAskVolume", this.GetCQGTimedBarClassAskVolume},
                    { "GetCQGTimedBarClassAvg", this.GetCQGTimedBarClassAvg},
                    { "GetCQGTimedBarClassBidVolume", this.GetCQGTimedBarClassBidVolume},
                    { "GetCQGTimedBarClassClose", this.GetCQGTimedBarClassClose},
                    { "GetCQGTimedBarClassCommodityOpenInterest", this.GetCQGTimedBarClassCommodityOpenInterest},
                    { "GetCQGTimedBarClassCommodityTickVolume", this.GetCQGTimedBarClassCommodityTickVolume},
                    { "GetCQGTimedBarClassCommodityVolume", this.GetCQGTimedBarClassCommodityVolume},
                    { "GetCQGTimedBarClassContractOpenInterest", this.GetCQGTimedBarClassContractOpenInterest},
                    { "GetCQGTimedBarClassContractTickVolume", this.GetCQGTimedBarClassContractTickVolume},
                    { "GetCQGTimedBarClassContractVolume", this.GetCQGTimedBarClassContractVolume},
                    { "GetCQGTimedBarClassHigh", this.GetCQGTimedBarClassHigh},
                    { "GetCQGTimedBarClassHLC3", this.GetCQGTimedBarClassHLC3},
                    { "GetCQGTimedBarClassLow", this.GetCQGTimedBarClassLow},
                    { "GetCQGTimedBarClassMid", this.GetCQGTimedBarClassMid},
                    { "GetCQGTimedBarClassOpen", this.GetCQGTimedBarClassOpen},
                    { "GetCQGTimedBarClassOpenInterest", this.GetCQGTimedBarClassOpenInterest},
                    { "GetCQGTimedBarClassRange", this.GetCQGTimedBarClassRange},
                    { "GetCQGTimedBarClassTickVolume", this.GetCQGTimedBarClassTickVolume},
                    { "GetCQGTimedBarClassTimestamp", this.GetCQGTimedBarClassTimestamp},
                    { "GetCQGTimedBarClassTrueHigh", this.GetCQGTimedBarClassTrueHigh},
                    { "GetCQGTimedBarClassTrueLow", this.GetCQGTimedBarClassTrueLow},
                    { "GetCQGTimedBarClassTrueRange", this.GetCQGTimedBarClassTrueRange},
                    { "MethodCQGTimedBarClassGetHashCode", this.MethodCQGTimedBarClassGetHashCode},
                    { "MethodCQGTimedBarClassToString", this.MethodCQGTimedBarClassToString},
                    { "GetCQGTimedBarsClassCount", this.GetCQGTimedBarsClassCount},
                    { "GetCQGTimedBarsClassEndTimestamp", this.GetCQGTimedBarsClassEndTimestamp},
                    { "GetCQGTimedBarsClassId", this.GetCQGTimedBarsClassId},
                    { "GetCQGTimedBarsClassItem", this.GetCQGTimedBarsClassItem},
                    { "GetCQGTimedBarsClassLastError", this.GetCQGTimedBarsClassLastError},
                    { "GetCQGTimedBarsClassRequest", this.GetCQGTimedBarsClassRequest},
                    { "GetCQGTimedBarsClassStartTimestamp", this.GetCQGTimedBarsClassStartTimestamp},
                    { "GetCQGTimedBarsClassStatus", this.GetCQGTimedBarsClassStatus},
                    { "GetCQGTimedBarsClassTag", this.GetCQGTimedBarsClassTag},
                    { "SetCQGTimedBarsClassTag", this.SetCQGTimedBarsClassTag},
                    { "MethodCQGTimedBarsClassget_Tag", this.MethodCQGTimedBarsClassget_Tag},
                    { "MethodCQGTimedBarsClassGetEnumerator", this.MethodCQGTimedBarsClassGetEnumerator},
                    { "MethodCQGTimedBarsClassGetHashCode", this.MethodCQGTimedBarsClassGetHashCode},
                    { "MethodCQGTimedBarsClassIndexForDate", this.MethodCQGTimedBarsClassIndexForDate},
                    { "MethodCQGTimedBarsClassset_Tag", this.MethodCQGTimedBarsClassset_Tag},
                    { "MethodCQGTimedBarsClassToString", this.MethodCQGTimedBarsClassToString},
                    { "GetCQGTimedBarsCollectionClassCount", this.GetCQGTimedBarsCollectionClassCount},
                    { "GetCQGTimedBarsCollectionClassItem", this.GetCQGTimedBarsCollectionClassItem},
                    { "GetCQGTimedBarsCollectionClassItemById", this.GetCQGTimedBarsCollectionClassItemById},
                    { "MethodCQGTimedBarsCollectionClassget_ItemById", this.MethodCQGTimedBarsCollectionClassget_ItemById},
                    { "MethodCQGTimedBarsCollectionClassGetEnumerator", this.MethodCQGTimedBarsCollectionClassGetEnumerator},
                    { "MethodCQGTimedBarsCollectionClassGetHashCode", this.MethodCQGTimedBarsCollectionClassGetHashCode},
                    { "MethodCQGTimedBarsCollectionClassToString", this.MethodCQGTimedBarsCollectionClassToString},
                    { "GetCQGTimedBarsRequestClassContinuation", this.GetCQGTimedBarsRequestClassContinuation},
                    { "SetCQGTimedBarsRequestClassContinuation", this.SetCQGTimedBarsRequestClassContinuation},
                    { "GetCQGTimedBarsRequestClassDaysBeforeExpiration", this.GetCQGTimedBarsRequestClassDaysBeforeExpiration},
                    { "SetCQGTimedBarsRequestClassDaysBeforeExpiration", this.SetCQGTimedBarsRequestClassDaysBeforeExpiration},
                    { "GetCQGTimedBarsRequestClassEqualizeCloses", this.GetCQGTimedBarsRequestClassEqualizeCloses},
                    { "SetCQGTimedBarsRequestClassEqualizeCloses", this.SetCQGTimedBarsRequestClassEqualizeCloses},
                    { "GetCQGTimedBarsRequestClassHistoricalPeriod", this.GetCQGTimedBarsRequestClassHistoricalPeriod},
                    { "SetCQGTimedBarsRequestClassHistoricalPeriod", this.SetCQGTimedBarsRequestClassHistoricalPeriod},
                    { "GetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars", this.GetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars},
                    { "SetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars", this.SetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars},
                    { "GetCQGTimedBarsRequestClassIncludeEnd", this.GetCQGTimedBarsRequestClassIncludeEnd},
                    { "SetCQGTimedBarsRequestClassIncludeEnd", this.SetCQGTimedBarsRequestClassIncludeEnd},
                    { "GetCQGTimedBarsRequestClassIntradayPeriod", this.GetCQGTimedBarsRequestClassIntradayPeriod},
                    { "SetCQGTimedBarsRequestClassIntradayPeriod", this.SetCQGTimedBarsRequestClassIntradayPeriod},
                    { "GetCQGTimedBarsRequestClassRangeEnd", this.GetCQGTimedBarsRequestClassRangeEnd},
                    { "SetCQGTimedBarsRequestClassRangeEnd", this.SetCQGTimedBarsRequestClassRangeEnd},
                    { "GetCQGTimedBarsRequestClassRangeStart", this.GetCQGTimedBarsRequestClassRangeStart},
                    { "SetCQGTimedBarsRequestClassRangeStart", this.SetCQGTimedBarsRequestClassRangeStart},
                    { "GetCQGTimedBarsRequestClassSessionFlags", this.GetCQGTimedBarsRequestClassSessionFlags},
                    { "SetCQGTimedBarsRequestClassSessionFlags", this.SetCQGTimedBarsRequestClassSessionFlags},
                    { "GetCQGTimedBarsRequestClassSessionsFilter", this.GetCQGTimedBarsRequestClassSessionsFilter},
                    { "SetCQGTimedBarsRequestClassSessionsFilter", this.SetCQGTimedBarsRequestClassSessionsFilter},
                    { "GetCQGTimedBarsRequestClassSymbol", this.GetCQGTimedBarsRequestClassSymbol},
                    { "SetCQGTimedBarsRequestClassSymbol", this.SetCQGTimedBarsRequestClassSymbol},
                    { "GetCQGTimedBarsRequestClassTickFilter", this.GetCQGTimedBarsRequestClassTickFilter},
                    { "SetCQGTimedBarsRequestClassTickFilter", this.SetCQGTimedBarsRequestClassTickFilter},
                    { "GetCQGTimedBarsRequestClassUpdatesEnabled", this.GetCQGTimedBarsRequestClassUpdatesEnabled},
                    { "SetCQGTimedBarsRequestClassUpdatesEnabled", this.SetCQGTimedBarsRequestClassUpdatesEnabled},
                    { "MethodCQGTimedBarsRequestClassExcludeAllOutputs", this.MethodCQGTimedBarsRequestClassExcludeAllOutputs},
                    { "MethodCQGTimedBarsRequestClassGetHashCode", this.MethodCQGTimedBarsRequestClassGetHashCode},
                    { "MethodCQGTimedBarsRequestClassIncludeOutput", this.MethodCQGTimedBarsRequestClassIncludeOutput},
                    { "MethodCQGTimedBarsRequestClassIsOutputIncluded", this.MethodCQGTimedBarsRequestClassIsOutputIncluded},
                    { "MethodCQGTimedBarsRequestClassToString", this.MethodCQGTimedBarsRequestClassToString},
                    { "GetCQGTradeClassGroupID", this.GetCQGTradeClassGroupID},
                    { "GetCQGTradeClassIsMatched", this.GetCQGTradeClassIsMatched},
                    { "GetCQGTradeClassPrice", this.GetCQGTradeClassPrice},
                    { "GetCQGTradeClassQuantity", this.GetCQGTradeClassQuantity},
                    { "GetCQGTradeClassServerTimestamp", this.GetCQGTradeClassServerTimestamp},
                    { "GetCQGTradeClassSide", this.GetCQGTradeClassSide},
                    { "GetCQGTradeClassTimestamp", this.GetCQGTradeClassTimestamp},
                    { "MethodCQGTradeClassGetHashCode", this.MethodCQGTradeClassGetHashCode},
                    { "MethodCQGTradeClassToString", this.MethodCQGTradeClassToString},
                    { "GetCQGTradeEntriesClassCount", this.GetCQGTradeEntriesClassCount},
                    { "GetCQGTradeEntriesClassItem", this.GetCQGTradeEntriesClassItem},
                    { "MethodCQGTradeEntriesClassGetEnumerator", this.MethodCQGTradeEntriesClassGetEnumerator},
                    { "MethodCQGTradeEntriesClassGetHashCode", this.MethodCQGTradeEntriesClassGetHashCode},
                    { "MethodCQGTradeEntriesClassToString", this.MethodCQGTradeEntriesClassToString},
                    { "GetCQGTradeEntryClassCanPlaceOrderSignal", this.GetCQGTradeEntryClassCanPlaceOrderSignal},
                    { "GetCQGTradeEntryClassDefinition", this.GetCQGTradeEntryClassDefinition},
                    { "GetCQGTradeEntryClassPrice", this.GetCQGTradeEntryClassPrice},
                    { "GetCQGTradeEntryClassQuantity", this.GetCQGTradeEntryClassQuantity},
                    { "GetCQGTradeEntryClassRelatedExits", this.GetCQGTradeEntryClassRelatedExits},
                    { "GetCQGTradeEntryClassSignal", this.GetCQGTradeEntryClassSignal},
                    { "GetCQGTradeEntryClassStopLimitPrice", this.GetCQGTradeEntryClassStopLimitPrice},
                    { "GetCQGTradeEntryClassTrade", this.GetCQGTradeEntryClassTrade},
                    { "MethodCQGTradeEntryClassGetHashCode", this.MethodCQGTradeEntryClassGetHashCode},
                    { "MethodCQGTradeEntryClassToString", this.MethodCQGTradeEntryClassToString},
                    { "GetCQGTradeEntryDefinitionClassAllowEntryOnExit", this.GetCQGTradeEntryDefinitionClassAllowEntryOnExit},
                    { "GetCQGTradeEntryDefinitionClassAllowPyramids", this.GetCQGTradeEntryDefinitionClassAllowPyramids},
                    { "GetCQGTradeEntryDefinitionClassOrderType", this.GetCQGTradeEntryDefinitionClassOrderType},
                    { "MethodCQGTradeEntryDefinitionClassGetHashCode", this.MethodCQGTradeEntryDefinitionClassGetHashCode},
                    { "MethodCQGTradeEntryDefinitionClassToString", this.MethodCQGTradeEntryDefinitionClassToString},
                    { "GetCQGTradeExitClassCanPlaceOrderSignal", this.GetCQGTradeExitClassCanPlaceOrderSignal},
                    { "GetCQGTradeExitClassDefinition", this.GetCQGTradeExitClassDefinition},
                    { "GetCQGTradeExitClassPrice", this.GetCQGTradeExitClassPrice},
                    { "GetCQGTradeExitClassQuantity", this.GetCQGTradeExitClassQuantity},
                    { "GetCQGTradeExitClassRelatedEntries", this.GetCQGTradeExitClassRelatedEntries},
                    { "GetCQGTradeExitClassSignal", this.GetCQGTradeExitClassSignal},
                    { "GetCQGTradeExitClassStopLimitPrice", this.GetCQGTradeExitClassStopLimitPrice},
                    { "GetCQGTradeExitClassTrade", this.GetCQGTradeExitClassTrade},
                    { "MethodCQGTradeExitClassGetHashCode", this.MethodCQGTradeExitClassGetHashCode},
                    { "MethodCQGTradeExitClassToString", this.MethodCQGTradeExitClassToString},
                    { "GetCQGTradeExitDefinitionClassAllowExitOnEntry", this.GetCQGTradeExitDefinitionClassAllowExitOnEntry},
                    { "GetCQGTradeExitDefinitionClassAllowMoreThanOnce", this.GetCQGTradeExitDefinitionClassAllowMoreThanOnce},
                    { "GetCQGTradeExitDefinitionClassName", this.GetCQGTradeExitDefinitionClassName},
                    { "GetCQGTradeExitDefinitionClassOrderType", this.GetCQGTradeExitDefinitionClassOrderType},
                    { "MethodCQGTradeExitDefinitionClassGetHashCode", this.MethodCQGTradeExitDefinitionClassGetHashCode},
                    { "MethodCQGTradeExitDefinitionClassToString", this.MethodCQGTradeExitDefinitionClassToString},
                    { "GetCQGTradeExitDefinitionsClassCount", this.GetCQGTradeExitDefinitionsClassCount},
                    { "GetCQGTradeExitDefinitionsClassItem", this.GetCQGTradeExitDefinitionsClassItem},
                    { "GetCQGTradeExitDefinitionsClassItemByName", this.GetCQGTradeExitDefinitionsClassItemByName},
                    { "MethodCQGTradeExitDefinitionsClassget_ItemByName", this.MethodCQGTradeExitDefinitionsClassget_ItemByName},
                    { "MethodCQGTradeExitDefinitionsClassGetEnumerator", this.MethodCQGTradeExitDefinitionsClassGetEnumerator},
                    { "MethodCQGTradeExitDefinitionsClassGetHashCode", this.MethodCQGTradeExitDefinitionsClassGetHashCode},
                    { "MethodCQGTradeExitDefinitionsClassToString", this.MethodCQGTradeExitDefinitionsClassToString},
                    { "GetCQGTradeExitsClassCount", this.GetCQGTradeExitsClassCount},
                    { "GetCQGTradeExitsClassItem", this.GetCQGTradeExitsClassItem},
                    { "GetCQGTradeExitsClassItemByName", this.GetCQGTradeExitsClassItemByName},
                    { "MethodCQGTradeExitsClassget_ItemByName", this.MethodCQGTradeExitsClassget_ItemByName},
                    { "MethodCQGTradeExitsClassGetEnumerator", this.MethodCQGTradeExitsClassGetEnumerator},
                    { "MethodCQGTradeExitsClassGetHashCode", this.MethodCQGTradeExitsClassGetHashCode},
                    { "MethodCQGTradeExitsClassToString", this.MethodCQGTradeExitsClassToString},
                    { "GetCQGTradesClassCount", this.GetCQGTradesClassCount},
                    { "GetCQGTradesClassItem", this.GetCQGTradesClassItem},
                    { "MethodCQGTradesClassGetEnumerator", this.MethodCQGTradesClassGetEnumerator},
                    { "MethodCQGTradesClassGetHashCode", this.MethodCQGTradesClassGetHashCode},
                    { "MethodCQGTradesClassToString", this.MethodCQGTradesClassToString},
                    { "MethodCQGTradingSystemAddInfoClassGetHashCode", this.MethodCQGTradingSystemAddInfoClassGetHashCode},
                    { "MethodCQGTradingSystemAddInfoClassToString", this.MethodCQGTradingSystemAddInfoClassToString},
                    { "GetCQGTradingSystemBaseBarParameterClassName", this.GetCQGTradingSystemBaseBarParameterClassName},
                    { "GetCQGTradingSystemBaseBarParameterClassType", this.GetCQGTradingSystemBaseBarParameterClassType},
                    { "GetCQGTradingSystemBaseBarParameterClassValue", this.GetCQGTradingSystemBaseBarParameterClassValue},
                    { "SetCQGTradingSystemBaseBarParameterClassValue", this.SetCQGTradingSystemBaseBarParameterClassValue},
                    { "MethodCQGTradingSystemBaseBarParameterClassGetHashCode", this.MethodCQGTradingSystemBaseBarParameterClassGetHashCode},
                    { "MethodCQGTradingSystemBaseBarParameterClassToString", this.MethodCQGTradingSystemBaseBarParameterClassToString},
                    { "GetCQGTradingSystemBaseBarParametersClassCount", this.GetCQGTradingSystemBaseBarParametersClassCount},
                    { "GetCQGTradingSystemBaseBarParametersClassItem", this.GetCQGTradingSystemBaseBarParametersClassItem},
                    { "MethodCQGTradingSystemBaseBarParametersClassGetEnumerator", this.MethodCQGTradingSystemBaseBarParametersClassGetEnumerator},
                    { "MethodCQGTradingSystemBaseBarParametersClassGetHashCode", this.MethodCQGTradingSystemBaseBarParametersClassGetHashCode},
                    { "MethodCQGTradingSystemBaseBarParametersClassToString", this.MethodCQGTradingSystemBaseBarParametersClassToString},
                    { "GetCQGTradingSystemClassDefinition", this.GetCQGTradingSystemClassDefinition},
                    { "GetCQGTradingSystemClassId", this.GetCQGTradingSystemClassId},
                    { "GetCQGTradingSystemClassLastError", this.GetCQGTradingSystemClassLastError},
                    { "GetCQGTradingSystemClassRequest", this.GetCQGTradingSystemClassRequest},
                    { "GetCQGTradingSystemClassStatistics", this.GetCQGTradingSystemClassStatistics},
                    { "GetCQGTradingSystemClassStatus", this.GetCQGTradingSystemClassStatus},
                    { "GetCQGTradingSystemClassTag", this.GetCQGTradingSystemClassTag},
                    { "SetCQGTradingSystemClassTag", this.SetCQGTradingSystemClassTag},
                    { "GetCQGTradingSystemClassTradesRows", this.GetCQGTradingSystemClassTradesRows},
                    { "MethodCQGTradingSystemClassget_Tag", this.MethodCQGTradingSystemClassget_Tag},
                    { "MethodCQGTradingSystemClassGetHashCode", this.MethodCQGTradingSystemClassGetHashCode},
                    { "MethodCQGTradingSystemClassset_Tag", this.MethodCQGTradingSystemClassset_Tag},
                    { "MethodCQGTradingSystemClassToString", this.MethodCQGTradingSystemClassToString},
                    { "GetCQGTradingSystemDefinitionClassAbbreviation", this.GetCQGTradingSystemDefinitionClassAbbreviation},
                    { "GetCQGTradingSystemDefinitionClassCommission", this.GetCQGTradingSystemDefinitionClassCommission},
                    { "GetCQGTradingSystemDefinitionClassCommissionType", this.GetCQGTradingSystemDefinitionClassCommissionType},
                    { "GetCQGTradingSystemDefinitionClassName", this.GetCQGTradingSystemDefinitionClassName},
                    { "GetCQGTradingSystemDefinitionClassParameterDefinitions", this.GetCQGTradingSystemDefinitionClassParameterDefinitions},
                    { "GetCQGTradingSystemDefinitionClassTradeDefinitions", this.GetCQGTradingSystemDefinitionClassTradeDefinitions},
                    { "MethodCQGTradingSystemDefinitionClassGetHashCode", this.MethodCQGTradingSystemDefinitionClassGetHashCode},
                    { "MethodCQGTradingSystemDefinitionClassToString", this.MethodCQGTradingSystemDefinitionClassToString},
                    { "GetCQGTradingSystemDefinitionsClassCount", this.GetCQGTradingSystemDefinitionsClassCount},
                    { "GetCQGTradingSystemDefinitionsClassItem", this.GetCQGTradingSystemDefinitionsClassItem},
                    { "GetCQGTradingSystemDefinitionsClassItemByAbbreviation", this.GetCQGTradingSystemDefinitionsClassItemByAbbreviation},
                    { "MethodCQGTradingSystemDefinitionsClassget_ItemByAbbreviation", this.MethodCQGTradingSystemDefinitionsClassget_ItemByAbbreviation},
                    { "MethodCQGTradingSystemDefinitionsClassget_ItemByName", this.MethodCQGTradingSystemDefinitionsClassget_ItemByName},
                    { "MethodCQGTradingSystemDefinitionsClassGetEnumerator", this.MethodCQGTradingSystemDefinitionsClassGetEnumerator},
                    { "MethodCQGTradingSystemDefinitionsClassGetHashCode", this.MethodCQGTradingSystemDefinitionsClassGetHashCode},
                    { "MethodCQGTradingSystemDefinitionsClassToString", this.MethodCQGTradingSystemDefinitionsClassToString},
                    { "GetCQGTradingSystemInsertInfoClassIndex", this.GetCQGTradingSystemInsertInfoClassIndex},
                    { "MethodCQGTradingSystemInsertInfoClassGetHashCode", this.MethodCQGTradingSystemInsertInfoClassGetHashCode},
                    { "MethodCQGTradingSystemInsertInfoClassToString", this.MethodCQGTradingSystemInsertInfoClassToString},
                    { "GetCQGTradingSystemRelationAddInfoClassEntry", this.GetCQGTradingSystemRelationAddInfoClassEntry},
                    { "GetCQGTradingSystemRelationAddInfoClassEntryRowIndex", this.GetCQGTradingSystemRelationAddInfoClassEntryRowIndex},
                    { "GetCQGTradingSystemRelationAddInfoClassExit", this.GetCQGTradingSystemRelationAddInfoClassExit},
                    { "GetCQGTradingSystemRelationAddInfoClassExitRowIndex", this.GetCQGTradingSystemRelationAddInfoClassExitRowIndex},
                    { "MethodCQGTradingSystemRelationAddInfoClassGetHashCode", this.MethodCQGTradingSystemRelationAddInfoClassGetHashCode},
                    { "MethodCQGTradingSystemRelationAddInfoClassToString", this.MethodCQGTradingSystemRelationAddInfoClassToString},
                    { "GetCQGTradingSystemRemoveInfoClassIndex", this.GetCQGTradingSystemRemoveInfoClassIndex},
                    { "MethodCQGTradingSystemRemoveInfoClassGetHashCode", this.MethodCQGTradingSystemRemoveInfoClassGetHashCode},
                    { "MethodCQGTradingSystemRemoveInfoClassToString", this.MethodCQGTradingSystemRemoveInfoClassToString},
                    { "GetCQGTradingSystemRequestClassBaseBarParameters", this.GetCQGTradingSystemRequestClassBaseBarParameters},
                    { "GetCQGTradingSystemRequestClassBaseBarType", this.GetCQGTradingSystemRequestClassBaseBarType},
                    { "SetCQGTradingSystemRequestClassBaseBarType", this.SetCQGTradingSystemRequestClassBaseBarType},
                    { "GetCQGTradingSystemRequestClassBaseExpression", this.GetCQGTradingSystemRequestClassBaseExpression},
                    { "SetCQGTradingSystemRequestClassBaseExpression", this.SetCQGTradingSystemRequestClassBaseExpression},
                    { "GetCQGTradingSystemRequestClassContinuation", this.GetCQGTradingSystemRequestClassContinuation},
                    { "SetCQGTradingSystemRequestClassContinuation", this.SetCQGTradingSystemRequestClassContinuation},
                    { "GetCQGTradingSystemRequestClassDaysBeforeExpiration", this.GetCQGTradingSystemRequestClassDaysBeforeExpiration},
                    { "SetCQGTradingSystemRequestClassDaysBeforeExpiration", this.SetCQGTradingSystemRequestClassDaysBeforeExpiration},
                    { "GetCQGTradingSystemRequestClassDefinition", this.GetCQGTradingSystemRequestClassDefinition},
                    { "GetCQGTradingSystemRequestClassEqualizeCloses", this.GetCQGTradingSystemRequestClassEqualizeCloses},
                    { "SetCQGTradingSystemRequestClassEqualizeCloses", this.SetCQGTradingSystemRequestClassEqualizeCloses},
                    { "GetCQGTradingSystemRequestClassHistoricalPeriod", this.GetCQGTradingSystemRequestClassHistoricalPeriod},
                    { "SetCQGTradingSystemRequestClassHistoricalPeriod", this.SetCQGTradingSystemRequestClassHistoricalPeriod},
                    { "GetCQGTradingSystemRequestClassIncludeEnd", this.GetCQGTradingSystemRequestClassIncludeEnd},
                    { "SetCQGTradingSystemRequestClassIncludeEnd", this.SetCQGTradingSystemRequestClassIncludeEnd},
                    { "GetCQGTradingSystemRequestClassIntradayPeriod", this.GetCQGTradingSystemRequestClassIntradayPeriod},
                    { "SetCQGTradingSystemRequestClassIntradayPeriod", this.SetCQGTradingSystemRequestClassIntradayPeriod},
                    { "GetCQGTradingSystemRequestClassParameter", this.GetCQGTradingSystemRequestClassParameter},
                    { "SetCQGTradingSystemRequestClassParameter", this.SetCQGTradingSystemRequestClassParameter},
                    { "GetCQGTradingSystemRequestClassRangeEnd", this.GetCQGTradingSystemRequestClassRangeEnd},
                    { "SetCQGTradingSystemRequestClassRangeEnd", this.SetCQGTradingSystemRequestClassRangeEnd},
                    { "GetCQGTradingSystemRequestClassRangeStart", this.GetCQGTradingSystemRequestClassRangeStart},
                    { "SetCQGTradingSystemRequestClassRangeStart", this.SetCQGTradingSystemRequestClassRangeStart},
                    { "GetCQGTradingSystemRequestClassRecalcPeriod", this.GetCQGTradingSystemRequestClassRecalcPeriod},
                    { "SetCQGTradingSystemRequestClassRecalcPeriod", this.SetCQGTradingSystemRequestClassRecalcPeriod},
                    { "GetCQGTradingSystemRequestClassSessionFlags", this.GetCQGTradingSystemRequestClassSessionFlags},
                    { "SetCQGTradingSystemRequestClassSessionFlags", this.SetCQGTradingSystemRequestClassSessionFlags},
                    { "GetCQGTradingSystemRequestClassSessionsFilter", this.GetCQGTradingSystemRequestClassSessionsFilter},
                    { "SetCQGTradingSystemRequestClassSessionsFilter", this.SetCQGTradingSystemRequestClassSessionsFilter},
                    { "GetCQGTradingSystemRequestClassSubscriptionLevel", this.GetCQGTradingSystemRequestClassSubscriptionLevel},
                    { "SetCQGTradingSystemRequestClassSubscriptionLevel", this.SetCQGTradingSystemRequestClassSubscriptionLevel},
                    { "MethodCQGTradingSystemRequestClassExcludeAllStatistics", this.MethodCQGTradingSystemRequestClassExcludeAllStatistics},
                    { "MethodCQGTradingSystemRequestClassget_Parameter", this.MethodCQGTradingSystemRequestClassget_Parameter},
                    { "MethodCQGTradingSystemRequestClassGetHashCode", this.MethodCQGTradingSystemRequestClassGetHashCode},
                    { "MethodCQGTradingSystemRequestClassIncludeStatistic", this.MethodCQGTradingSystemRequestClassIncludeStatistic},
                    { "MethodCQGTradingSystemRequestClassIsStatisticIncluded", this.MethodCQGTradingSystemRequestClassIsStatisticIncluded},
                    { "MethodCQGTradingSystemRequestClassset_Parameter", this.MethodCQGTradingSystemRequestClassset_Parameter},
                    { "MethodCQGTradingSystemRequestClassToString", this.MethodCQGTradingSystemRequestClassToString},
                    { "GetCQGTradingSystemsClassCount", this.GetCQGTradingSystemsClassCount},
                    { "GetCQGTradingSystemsClassItem", this.GetCQGTradingSystemsClassItem},
                    { "GetCQGTradingSystemsClassItemById", this.GetCQGTradingSystemsClassItemById},
                    { "MethodCQGTradingSystemsClassget_ItemById", this.MethodCQGTradingSystemsClassget_ItemById},
                    { "MethodCQGTradingSystemsClassGetEnumerator", this.MethodCQGTradingSystemsClassGetEnumerator},
                    { "MethodCQGTradingSystemsClassGetHashCode", this.MethodCQGTradingSystemsClassGetHashCode},
                    { "MethodCQGTradingSystemsClassToString", this.MethodCQGTradingSystemsClassToString},
                    { "GetCQGTradingSystemStatisticsChangeInfoClassStatistics", this.GetCQGTradingSystemStatisticsChangeInfoClassStatistics},
                    { "MethodCQGTradingSystemStatisticsChangeInfoClassGetHashCode", this.MethodCQGTradingSystemStatisticsChangeInfoClassGetHashCode},
                    { "MethodCQGTradingSystemStatisticsChangeInfoClassIsStatisticChanged", this.MethodCQGTradingSystemStatisticsChangeInfoClassIsStatisticChanged},
                    { "MethodCQGTradingSystemStatisticsChangeInfoClassToString", this.MethodCQGTradingSystemStatisticsChangeInfoClassToString},
                    { "GetCQGTradingSystemStatisticsClassAverageDuration", this.GetCQGTradingSystemStatisticsClassAverageDuration},
                    { "GetCQGTradingSystemStatisticsClassAverageLoss", this.GetCQGTradingSystemStatisticsClassAverageLoss},
                    { "GetCQGTradingSystemStatisticsClassAverageProfit", this.GetCQGTradingSystemStatisticsClassAverageProfit},
                    { "GetCQGTradingSystemStatisticsClassAverageWin", this.GetCQGTradingSystemStatisticsClassAverageWin},
                    { "GetCQGTradingSystemStatisticsClassClosedNetProfit", this.GetCQGTradingSystemStatisticsClassClosedNetProfit},
                    { "GetCQGTradingSystemStatisticsClassCurConsecLosses", this.GetCQGTradingSystemStatisticsClassCurConsecLosses},
                    { "GetCQGTradingSystemStatisticsClassCurConsecWins", this.GetCQGTradingSystemStatisticsClassCurConsecWins},
                    { "GetCQGTradingSystemStatisticsClassCurDrawDown", this.GetCQGTradingSystemStatisticsClassCurDrawDown},
                    { "GetCQGTradingSystemStatisticsClassLinearRegression", this.GetCQGTradingSystemStatisticsClassLinearRegression},
                    { "GetCQGTradingSystemStatisticsClassMaxClosedDraw", this.GetCQGTradingSystemStatisticsClassMaxClosedDraw},
                    { "GetCQGTradingSystemStatisticsClassMaxConsecLosses", this.GetCQGTradingSystemStatisticsClassMaxConsecLosses},
                    { "GetCQGTradingSystemStatisticsClassMaxConsecWins", this.GetCQGTradingSystemStatisticsClassMaxConsecWins},
                    { "GetCQGTradingSystemStatisticsClassMaxDrawAmount", this.GetCQGTradingSystemStatisticsClassMaxDrawAmount},
                    { "GetCQGTradingSystemStatisticsClassMaxDrawDuration", this.GetCQGTradingSystemStatisticsClassMaxDrawDuration},
                    { "GetCQGTradingSystemStatisticsClassMaximumLoss", this.GetCQGTradingSystemStatisticsClassMaximumLoss},
                    { "GetCQGTradingSystemStatisticsClassMaximumWin", this.GetCQGTradingSystemStatisticsClassMaximumWin},
                    { "GetCQGTradingSystemStatisticsClassOpenPosition", this.GetCQGTradingSystemStatisticsClassOpenPosition},
                    { "GetCQGTradingSystemStatisticsClassPercentLong", this.GetCQGTradingSystemStatisticsClassPercentLong},
                    { "GetCQGTradingSystemStatisticsClassPercentWinners", this.GetCQGTradingSystemStatisticsClassPercentWinners},
                    { "GetCQGTradingSystemStatisticsClassProfitLossRatio", this.GetCQGTradingSystemStatisticsClassProfitLossRatio},
                    { "GetCQGTradingSystemStatisticsClassProfitToMaxDraw", this.GetCQGTradingSystemStatisticsClassProfitToMaxDraw},
                    { "GetCQGTradingSystemStatisticsClassRemoveToNeutral", this.GetCQGTradingSystemStatisticsClassRemoveToNeutral},
                    { "GetCQGTradingSystemStatisticsClassReturnRetracement", this.GetCQGTradingSystemStatisticsClassReturnRetracement},
                    { "GetCQGTradingSystemStatisticsClassTimePercentage", this.GetCQGTradingSystemStatisticsClassTimePercentage},
                    { "GetCQGTradingSystemStatisticsClassTimestamp", this.GetCQGTradingSystemStatisticsClassTimestamp},
                    { "GetCQGTradingSystemStatisticsClassTimestampOffset", this.GetCQGTradingSystemStatisticsClassTimestampOffset},
                    { "GetCQGTradingSystemStatisticsClassTotalNetProfit", this.GetCQGTradingSystemStatisticsClassTotalNetProfit},
                    { "GetCQGTradingSystemStatisticsClassTotalTradeCount", this.GetCQGTradingSystemStatisticsClassTotalTradeCount},
                    { "GetCQGTradingSystemStatisticsClassValue", this.GetCQGTradingSystemStatisticsClassValue},
                    { "MethodCQGTradingSystemStatisticsClassget_Value", this.MethodCQGTradingSystemStatisticsClassget_Value},
                    { "MethodCQGTradingSystemStatisticsClassGetHashCode", this.MethodCQGTradingSystemStatisticsClassGetHashCode},
                    { "MethodCQGTradingSystemStatisticsClassToString", this.MethodCQGTradingSystemStatisticsClassToString},
                    { "GetCQGTradingSystemStatisticsCollectionClassCount", this.GetCQGTradingSystemStatisticsCollectionClassCount},
                    { "GetCQGTradingSystemStatisticsCollectionClassItem", this.GetCQGTradingSystemStatisticsCollectionClassItem},
                    { "MethodCQGTradingSystemStatisticsCollectionClassGetEnumerator", this.MethodCQGTradingSystemStatisticsCollectionClassGetEnumerator},
                    { "MethodCQGTradingSystemStatisticsCollectionClassGetHashCode", this.MethodCQGTradingSystemStatisticsCollectionClassGetHashCode},
                    { "MethodCQGTradingSystemStatisticsCollectionClassIndexForDate", this.MethodCQGTradingSystemStatisticsCollectionClassIndexForDate},
                    { "MethodCQGTradingSystemStatisticsCollectionClassIndicesForDates", this.MethodCQGTradingSystemStatisticsCollectionClassIndicesForDates},
                    { "MethodCQGTradingSystemStatisticsCollectionClassToString", this.MethodCQGTradingSystemStatisticsCollectionClassToString},
                    { "GetCQGTradingSystemTradeClassDefinition", this.GetCQGTradingSystemTradeClassDefinition},
                    { "GetCQGTradingSystemTradeClassIsActive", this.GetCQGTradingSystemTradeClassIsActive},
                    { "GetCQGTradingSystemTradeClassTimestamp", this.GetCQGTradingSystemTradeClassTimestamp},
                    { "GetCQGTradingSystemTradeClassTimestampOffset", this.GetCQGTradingSystemTradeClassTimestampOffset},
                    { "GetCQGTradingSystemTradeClassTradeEntry", this.GetCQGTradingSystemTradeClassTradeEntry},
                    { "GetCQGTradingSystemTradeClassTradeExits", this.GetCQGTradingSystemTradeClassTradeExits},
                    { "GetCQGTradingSystemTradeClassTradesRow", this.GetCQGTradingSystemTradeClassTradesRow},
                    { "MethodCQGTradingSystemTradeClassGetHashCode", this.MethodCQGTradingSystemTradeClassGetHashCode},
                    { "MethodCQGTradingSystemTradeClassToString", this.MethodCQGTradingSystemTradeClassToString},
                    { "GetCQGTradingSystemTradeDefinitionClassEntry", this.GetCQGTradingSystemTradeDefinitionClassEntry},
                    { "GetCQGTradingSystemTradeDefinitionClassExits", this.GetCQGTradingSystemTradeDefinitionClassExits},
                    { "GetCQGTradingSystemTradeDefinitionClassName", this.GetCQGTradingSystemTradeDefinitionClassName},
                    { "GetCQGTradingSystemTradeDefinitionClassSide", this.GetCQGTradingSystemTradeDefinitionClassSide},
                    { "MethodCQGTradingSystemTradeDefinitionClassGetHashCode", this.MethodCQGTradingSystemTradeDefinitionClassGetHashCode},
                    { "MethodCQGTradingSystemTradeDefinitionClassToString", this.MethodCQGTradingSystemTradeDefinitionClassToString},
                    { "GetCQGTradingSystemTradeDefinitionsClassCount", this.GetCQGTradingSystemTradeDefinitionsClassCount},
                    { "GetCQGTradingSystemTradeDefinitionsClassItem", this.GetCQGTradingSystemTradeDefinitionsClassItem},
                    { "GetCQGTradingSystemTradeDefinitionsClassItemByName", this.GetCQGTradingSystemTradeDefinitionsClassItemByName},
                    { "MethodCQGTradingSystemTradeDefinitionsClassget_ItemByName", this.MethodCQGTradingSystemTradeDefinitionsClassget_ItemByName},
                    { "MethodCQGTradingSystemTradeDefinitionsClassGetEnumerator", this.MethodCQGTradingSystemTradeDefinitionsClassGetEnumerator},
                    { "MethodCQGTradingSystemTradeDefinitionsClassGetHashCode", this.MethodCQGTradingSystemTradeDefinitionsClassGetHashCode},
                    { "MethodCQGTradingSystemTradeDefinitionsClassToString", this.MethodCQGTradingSystemTradeDefinitionsClassToString},
                    { "GetCQGTradingSystemTradesRowClassCount", this.GetCQGTradingSystemTradesRowClassCount},
                    { "GetCQGTradingSystemTradesRowClassItem", this.GetCQGTradingSystemTradesRowClassItem},
                    { "GetCQGTradingSystemTradesRowClassItemByName", this.GetCQGTradingSystemTradesRowClassItemByName},
                    { "GetCQGTradingSystemTradesRowClassTimestamp", this.GetCQGTradingSystemTradesRowClassTimestamp},
                    { "GetCQGTradingSystemTradesRowClassTimestampOffset", this.GetCQGTradingSystemTradesRowClassTimestampOffset},
                    { "MethodCQGTradingSystemTradesRowClassget_ItemByName", this.MethodCQGTradingSystemTradesRowClassget_ItemByName},
                    { "MethodCQGTradingSystemTradesRowClassGetEnumerator", this.MethodCQGTradingSystemTradesRowClassGetEnumerator},
                    { "MethodCQGTradingSystemTradesRowClassGetHashCode", this.MethodCQGTradingSystemTradesRowClassGetHashCode},
                    { "MethodCQGTradingSystemTradesRowClassToString", this.MethodCQGTradingSystemTradesRowClassToString},
                    { "GetCQGTradingSystemTradesRowsClassCount", this.GetCQGTradingSystemTradesRowsClassCount},
                    { "GetCQGTradingSystemTradesRowsClassItem", this.GetCQGTradingSystemTradesRowsClassItem},
                    { "MethodCQGTradingSystemTradesRowsClassGetEnumerator", this.MethodCQGTradingSystemTradesRowsClassGetEnumerator},
                    { "MethodCQGTradingSystemTradesRowsClassGetHashCode", this.MethodCQGTradingSystemTradesRowsClassGetHashCode},
                    { "MethodCQGTradingSystemTradesRowsClassToString", this.MethodCQGTradingSystemTradesRowsClassToString},
                    { "GetCQGTradingSystemUpdateInfoClassIndex", this.GetCQGTradingSystemUpdateInfoClassIndex},
                    { "GetCQGTradingSystemUpdateInfoClassStatisticsChangeInfo", this.GetCQGTradingSystemUpdateInfoClassStatisticsChangeInfo},
                    { "MethodCQGTradingSystemUpdateInfoClassget_ChangedEntries", this.MethodCQGTradingSystemUpdateInfoClassget_ChangedEntries},
                    { "MethodCQGTradingSystemUpdateInfoClassget_ChangedExits", this.MethodCQGTradingSystemUpdateInfoClassget_ChangedExits},
                    { "MethodCQGTradingSystemUpdateInfoClassGetHashCode", this.MethodCQGTradingSystemUpdateInfoClassGetHashCode},
                    { "MethodCQGTradingSystemUpdateInfoClassToString", this.MethodCQGTradingSystemUpdateInfoClassToString},
                    { "GetCQGTransactionClassExecutionId", this.GetCQGTransactionClassExecutionId},
                    { "GetCQGTransactionClassFill", this.GetCQGTransactionClassFill},
                    { "GetCQGTransactionClassHangOrderIds", this.GetCQGTransactionClassHangOrderIds},
                    { "GetCQGTransactionClassHangQuantity", this.GetCQGTransactionClassHangQuantity},
                    { "GetCQGTransactionClassId", this.GetCQGTransactionClassId},
                    { "GetCQGTransactionClassOrder", this.GetCQGTransactionClassOrder},
                    { "GetCQGTransactionClassProperties", this.GetCQGTransactionClassProperties},
                    { "GetCQGTransactionClassRejectReason", this.GetCQGTransactionClassRejectReason},
                    { "GetCQGTransactionClassServerTimestamp", this.GetCQGTransactionClassServerTimestamp},
                    { "GetCQGTransactionClassStatus", this.GetCQGTransactionClassStatus},
                    { "GetCQGTransactionClassStrategyLegFills", this.GetCQGTransactionClassStrategyLegFills},
                    { "GetCQGTransactionClassTimestamp", this.GetCQGTransactionClassTimestamp},
                    { "MethodCQGTransactionClassGetHashCode", this.MethodCQGTransactionClassGetHashCode},
                    { "MethodCQGTransactionClassToString", this.MethodCQGTransactionClassToString},
                    { "GetCQGTransactionsClassCount", this.GetCQGTransactionsClassCount},
                    { "GetCQGTransactionsClassItem", this.GetCQGTransactionsClassItem},
                    { "GetCQGTransactionsClassItemByIndex", this.GetCQGTransactionsClassItemByIndex},
                    { "MethodCQGTransactionsClassget_ItemByIndex", this.MethodCQGTransactionsClassget_ItemByIndex},
                    { "MethodCQGTransactionsClassGetEnumerator", this.MethodCQGTransactionsClassGetEnumerator},
                    { "MethodCQGTransactionsClassGetHashCode", this.MethodCQGTransactionsClassGetHashCode},
                    { "MethodCQGTransactionsClassToString", this.MethodCQGTransactionsClassToString},
                    { "GetCQGYieldClassAvg", this.GetCQGYieldClassAvg},
                    { "GetCQGYieldClassClose", this.GetCQGYieldClassClose},
                    { "GetCQGYieldClassHigh", this.GetCQGYieldClassHigh},
                    { "GetCQGYieldClassHLC3", this.GetCQGYieldClassHLC3},
                    { "GetCQGYieldClassLow", this.GetCQGYieldClassLow},
                    { "GetCQGYieldClassMid", this.GetCQGYieldClassMid},
                    { "GetCQGYieldClassOpen", this.GetCQGYieldClassOpen},
                    { "GetCQGYieldClassRange", this.GetCQGYieldClassRange},
                    { "GetCQGYieldClassTimestamp", this.GetCQGYieldClassTimestamp},
                    { "GetCQGYieldClassTrueHigh", this.GetCQGYieldClassTrueHigh},
                    { "GetCQGYieldClassTrueLow", this.GetCQGYieldClassTrueLow},
                    { "GetCQGYieldClassTrueRange", this.GetCQGYieldClassTrueRange},
                    { "MethodCQGYieldClassGetHashCode", this.MethodCQGYieldClassGetHashCode},
                    { "MethodCQGYieldClassToString", this.MethodCQGYieldClassToString},
                    { "GetCQGYieldsClassCount", this.GetCQGYieldsClassCount},
                    { "GetCQGYieldsClassEndTimestamp", this.GetCQGYieldsClassEndTimestamp},
                    { "GetCQGYieldsClassId", this.GetCQGYieldsClassId},
                    { "GetCQGYieldsClassItem", this.GetCQGYieldsClassItem},
                    { "GetCQGYieldsClassLastError", this.GetCQGYieldsClassLastError},
                    { "GetCQGYieldsClassRequest", this.GetCQGYieldsClassRequest},
                    { "GetCQGYieldsClassStartTimestamp", this.GetCQGYieldsClassStartTimestamp},
                    { "GetCQGYieldsClassStatus", this.GetCQGYieldsClassStatus},
                    { "GetCQGYieldsClassTag", this.GetCQGYieldsClassTag},
                    { "SetCQGYieldsClassTag", this.SetCQGYieldsClassTag},
                    { "MethodCQGYieldsClassget_Tag", this.MethodCQGYieldsClassget_Tag},
                    { "MethodCQGYieldsClassGetEnumerator", this.MethodCQGYieldsClassGetEnumerator},
                    { "MethodCQGYieldsClassGetHashCode", this.MethodCQGYieldsClassGetHashCode},
                    { "MethodCQGYieldsClassIndexForDate", this.MethodCQGYieldsClassIndexForDate},
                    { "MethodCQGYieldsClassset_Tag", this.MethodCQGYieldsClassset_Tag},
                    { "MethodCQGYieldsClassToString", this.MethodCQGYieldsClassToString},
                    { "GetCQGYieldsCollectionClassCount", this.GetCQGYieldsCollectionClassCount},
                    { "GetCQGYieldsCollectionClassItem", this.GetCQGYieldsCollectionClassItem},
                    { "GetCQGYieldsCollectionClassItemById", this.GetCQGYieldsCollectionClassItemById},
                    { "MethodCQGYieldsCollectionClassget_ItemById", this.MethodCQGYieldsCollectionClassget_ItemById},
                    { "MethodCQGYieldsCollectionClassGetEnumerator", this.MethodCQGYieldsCollectionClassGetEnumerator},
                    { "MethodCQGYieldsCollectionClassGetHashCode", this.MethodCQGYieldsCollectionClassGetHashCode},
                    { "MethodCQGYieldsCollectionClassToString", this.MethodCQGYieldsCollectionClassToString},
                    { "GetCQGYieldsRequestClassCompound", this.GetCQGYieldsRequestClassCompound},
                    { "SetCQGYieldsRequestClassCompound", this.SetCQGYieldsRequestClassCompound},
                    { "GetCQGYieldsRequestClassContinuation", this.GetCQGYieldsRequestClassContinuation},
                    { "SetCQGYieldsRequestClassContinuation", this.SetCQGYieldsRequestClassContinuation},
                    { "GetCQGYieldsRequestClassDaysBeforeExpiration", this.GetCQGYieldsRequestClassDaysBeforeExpiration},
                    { "SetCQGYieldsRequestClassDaysBeforeExpiration", this.SetCQGYieldsRequestClassDaysBeforeExpiration},
                    { "GetCQGYieldsRequestClassEqualizeCloses", this.GetCQGYieldsRequestClassEqualizeCloses},
                    { "SetCQGYieldsRequestClassEqualizeCloses", this.SetCQGYieldsRequestClassEqualizeCloses},
                    { "GetCQGYieldsRequestClassIncludeEnd", this.GetCQGYieldsRequestClassIncludeEnd},
                    { "SetCQGYieldsRequestClassIncludeEnd", this.SetCQGYieldsRequestClassIncludeEnd},
                    { "GetCQGYieldsRequestClassModel", this.GetCQGYieldsRequestClassModel},
                    { "SetCQGYieldsRequestClassModel", this.SetCQGYieldsRequestClassModel},
                    { "GetCQGYieldsRequestClassRangeEnd", this.GetCQGYieldsRequestClassRangeEnd},
                    { "SetCQGYieldsRequestClassRangeEnd", this.SetCQGYieldsRequestClassRangeEnd},
                    { "GetCQGYieldsRequestClassRangeStart", this.GetCQGYieldsRequestClassRangeStart},
                    { "SetCQGYieldsRequestClassRangeStart", this.SetCQGYieldsRequestClassRangeStart},
                    { "GetCQGYieldsRequestClassRecalcPeriod", this.GetCQGYieldsRequestClassRecalcPeriod},
                    { "SetCQGYieldsRequestClassRecalcPeriod", this.SetCQGYieldsRequestClassRecalcPeriod},
                    { "GetCQGYieldsRequestClassSessionFlags", this.GetCQGYieldsRequestClassSessionFlags},
                    { "SetCQGYieldsRequestClassSessionFlags", this.SetCQGYieldsRequestClassSessionFlags},
                    { "GetCQGYieldsRequestClassSessionsFilter", this.GetCQGYieldsRequestClassSessionsFilter},
                    { "SetCQGYieldsRequestClassSessionsFilter", this.SetCQGYieldsRequestClassSessionsFilter},
                    { "GetCQGYieldsRequestClassSubscriptionLevel", this.GetCQGYieldsRequestClassSubscriptionLevel},
                    { "SetCQGYieldsRequestClassSubscriptionLevel", this.SetCQGYieldsRequestClassSubscriptionLevel},
                    { "GetCQGYieldsRequestClassSymbol", this.GetCQGYieldsRequestClassSymbol},
                    { "SetCQGYieldsRequestClassSymbol", this.SetCQGYieldsRequestClassSymbol},
                    { "GetCQGYieldsRequestClassUpdatesEnabled", this.GetCQGYieldsRequestClassUpdatesEnabled},
                    { "SetCQGYieldsRequestClassUpdatesEnabled", this.SetCQGYieldsRequestClassUpdatesEnabled},
                    { "MethodCQGYieldsRequestClassGetHashCode", this.MethodCQGYieldsRequestClassGetHashCode},
                    { "MethodCQGYieldsRequestClassToString", this.MethodCQGYieldsRequestClassToString},
            };

        }
        public void AutoGenQueryProcessing(QueryInfo query)
        {
            qObj = ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
            object[] args = Core.ParseInputArgsFromQueryInfo(query);
            switch (query.QueryType)
            {
                case QueryType.GetProperty:
                    string getHndlrName = string.Concat("Get", query.ObjectType, query.MemberName);
                    if (!hMethods.ContainsKey(getHndlrName)) 
                        throw new System.ArgumentException(string.Concat("Operation ", getHndlrName, " is invalid"), "getter name");
                    hMethods[getHndlrName](query, args); 
                    break;
                case QueryType.SetProperty:
                    string setHndlrName = string.Concat("Set", query.ObjectType, query.MemberName);
                    if (!hMethods.ContainsKey(setHndlrName)) 
                        throw new System.ArgumentException(string.Concat("Operation ", setHndlrName, " is invalid"), "setter name");
                    hMethods[setHndlrName](query, args); 
                    break;
                case QueryType.CallMethod:
                    string mthdHndlrName = string.Concat("Method", query.ObjectType, query.MemberName);
                    if (!hMethods.ContainsKey(mthdHndlrName)) 
                        throw new System.ArgumentException(string.Concat("Operation ", mthdHndlrName, " is invalid"), "method name");
                    hMethods[mthdHndlrName](query, args); 
                    break;
                case QueryType.SubscribeToEvent:
                case QueryType.UnsubscribeFromEvent:
                    string eventHndlrName = string.Concat("Event", query.ObjectType, query.MemberName);
                    if (!hMethods.ContainsKey(eventHndlrName)) 
                        throw new System.ArgumentException(string.Concat("Operation ", eventHndlrName, " is invalid"), "method name");
                    if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                    {
                EventHandler.EventAppsSubscribersNum[query.MemberName] =
                        query.QueryType == QueryType.SubscribeToEvent ?
                        EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                        EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                    }
                    else
                    {
                        EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                    }
                    hMethods[eventHndlrName](query, args); 
                    break;
            }
        }

            private void GetCQGAccountClassAccountMarginDetailing(QueryInfo query, object[] args)
            {
                CQGAccount AccountMarginDetailingObj = (CQGAccount)qObj;
                CQG.eAccountMarginDetailing AccountMarginDetailingPropV = AccountMarginDetailingObj.AccountMarginDetailing;
                var AccountMarginDetailingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountMarginDetailingPropKey, value: AccountMarginDetailingPropV));
            }

            private void GetCQGAccountClassAuthorizedTraders(QueryInfo query, object[] args)
            {
                CQGAccount AuthorizedTradersObj = (CQGAccount)qObj;
                CQG.CQGStringCollection AuthorizedTradersPropV = AuthorizedTradersObj.AuthorizedTraders;
                var AuthorizedTradersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AuthorizedTradersPropKey, AuthorizedTradersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AuthorizedTradersPropKey));
            }

            private void GetCQGAccountClassAutoSubscribeInstruments(QueryInfo query, object[] args)
            {
                CQGAccount AutoSubscribeInstrumentsObj = (CQGAccount)qObj;
                System.Boolean AutoSubscribeInstrumentsPropV = AutoSubscribeInstrumentsObj.AutoSubscribeInstruments;
                var AutoSubscribeInstrumentsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AutoSubscribeInstrumentsPropKey, value: AutoSubscribeInstrumentsPropV));
            }

            private void GetCQGAccountClassCEL(QueryInfo query, object[] args)
            {
                CQGAccount CELObj = (CQGAccount)qObj;
                CQG.CQGCEL CELPropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGAccountClassCurrencySummaries(QueryInfo query, object[] args)
            {
                CQGAccount CurrencySummariesObj = (CQGAccount)qObj;
                CQG.CQGAccountSummaries CurrencySummariesPropV = CurrencySummariesObj.CurrencySummaries;
                var CurrencySummariesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurrencySummariesPropKey, CurrencySummariesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencySummariesPropKey));
            }

            private void GetCQGAccountClassDateOfLastStatement(QueryInfo query, object[] args)
            {
                CQGAccount DateOfLastStatementObj = (CQGAccount)qObj;
                System.DateTime DateOfLastStatementPropV = DateOfLastStatementObj.DateOfLastStatement;
                var DateOfLastStatementPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DateOfLastStatementPropKey, value: DateOfLastStatementPropV));
            }

            private void GetCQGAccountClassFcmAccountID(QueryInfo query, object[] args)
            {
                CQGAccount FcmAccountIDObj = (CQGAccount)qObj;
                System.String FcmAccountIDPropV = FcmAccountIDObj.FcmAccountID;
                var FcmAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmAccountIDPropKey, value: FcmAccountIDPropV));
            }

            private void GetCQGAccountClassFcmClass(QueryInfo query, object[] args)
            {
                CQGAccount FcmClassObj = (CQGAccount)qObj;
                CQG.eFcmClass FcmClassPropV = FcmClassObj.FcmClass;
                var FcmClassPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmClassPropKey, value: FcmClassPropV));
            }

            private void GetCQGAccountClassFcmID(QueryInfo query, object[] args)
            {
                CQGAccount FcmIDObj = (CQGAccount)qObj;
                System.Int32 FcmIDPropV = FcmIDObj.FcmID;
                var FcmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmIDPropKey, value: FcmIDPropV));
            }

            private void GetCQGAccountClassFcmName(QueryInfo query, object[] args)
            {
                CQGAccount FcmNameObj = (CQGAccount)qObj;
                System.String FcmNamePropV = FcmNameObj.FcmName;
                var FcmNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmNamePropKey, value: FcmNamePropV));
            }

            private void GetCQGAccountClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGAccount GWAccountIDObj = (CQGAccount)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGAccountClassGWAccountName(QueryInfo query, object[] args)
            {
                CQGAccount GWAccountNameObj = (CQGAccount)qObj;
                System.String GWAccountNamePropV = GWAccountNameObj.GWAccountName;
                var GWAccountNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountNamePropKey, value: GWAccountNamePropV));
            }

            private void GetCQGAccountClassInternalOrders(QueryInfo query, object[] args)
            {
                CQGAccount InternalOrdersObj = (CQGAccount)qObj;
                CQG.CQGOrders InternalOrdersPropV = InternalOrdersObj.InternalOrders;
                var InternalOrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InternalOrdersPropKey, InternalOrdersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InternalOrdersPropKey));
            }

            private void GetCQGAccountClassOrders(QueryInfo query, object[] args)
            {
                CQGAccount OrdersObj = (CQGAccount)qObj;
                CQG.CQGOrders OrdersPropV = OrdersObj.Orders;
                var OrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrdersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
            }

            private void GetCQGAccountClassPositions(QueryInfo query, object[] args)
            {
                CQGAccount PositionsObj = (CQGAccount)qObj;
                CQG.CQGPositions PositionsPropV = PositionsObj.Positions;
                var PositionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PositionsPropKey, PositionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionsPropKey));
            }

            private void GetCQGAccountClassPositionSubcriptionLevel(QueryInfo query, object[] args)
            {
                CQGAccount PositionSubcriptionLevelObj = (CQGAccount)qObj;
                CQG.ePositionSubscriptionLevel PositionSubcriptionLevelPropV = PositionSubcriptionLevelObj.PositionSubcriptionLevel;
                var PositionSubcriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionSubcriptionLevelPropKey, value: PositionSubcriptionLevelPropV));
            }

            private void GetCQGAccountClassReportingCurrency(QueryInfo query, object[] args)
            {
                CQGAccount ReportingCurrencyObj = (CQGAccount)qObj;
                System.String ReportingCurrencyPropV = ReportingCurrencyObj.ReportingCurrency;
                var ReportingCurrencyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReportingCurrencyPropKey, value: ReportingCurrencyPropV));
            }

            private void GetCQGAccountClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGAccount ServerTimestampObj = (CQGAccount)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGAccountClassSummary(QueryInfo query, object[] args)
            {
                CQGAccount SummaryObj = (CQGAccount)qObj;
                CQG.CQGAccountSummary SummaryPropV = SummaryObj.Summary;
                var SummaryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SummaryPropKey, SummaryPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SummaryPropKey));
            }

            private void GetCQGAccountClassTimestamp(QueryInfo query, object[] args)
            {
                CQGAccount TimestampObj = (CQGAccount)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGAccountClassTotalMarginValue(QueryInfo query, object[] args)
            {
                CQGAccount TotalMarginValueObj = (CQGAccount)qObj;
                System.Double TotalMarginValuePropV = TotalMarginValueObj.TotalMarginValue;
                var TotalMarginValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalMarginValuePropKey, value: TotalMarginValuePropV));
            }

            private void GetCQGAccountClassTotalPurchasingPower(QueryInfo query, object[] args)
            {
                CQGAccount TotalPurchasingPowerObj = (CQGAccount)qObj;
                System.Double TotalPurchasingPowerPropV = TotalPurchasingPowerObj.TotalPurchasingPower;
                var TotalPurchasingPowerPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalPurchasingPowerPropKey, value: TotalPurchasingPowerPropV));
            }

            private void GetCQGAccountsClassCount(QueryInfo query, object[] args)
            {
                CQGAccounts CountObj = (CQGAccounts)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGAccountsClassItem(QueryInfo query, object[] args)
            {
                CQGAccounts ItemObj = (CQGAccounts)qObj;
                CQG.CQGAccount ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAccountsClassItemByFCM(QueryInfo query, object[] args)
            {
                CQGAccounts ItemByFCMObj = (CQGAccounts)qObj;
                CQG.CQGAccount ItemByFCMPropV = ItemByFCMObj.ItemByFCM[(System.String)args[0],(System.Int32)args[1]];
                var ItemByFCMPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByFCMPropKey, ItemByFCMPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByFCMPropKey));
            }

            private void GetCQGAccountSummariesClassCount(QueryInfo query, object[] args)
            {
                CQGAccountSummaries CountObj = (CQGAccountSummaries)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGAccountSummariesClassItem(QueryInfo query, object[] args)
            {
                CQGAccountSummaries ItemObj = (CQGAccountSummaries)qObj;
                CQG.CQGAccountSummary ItemPropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAccountSummaryClassAccount(QueryInfo query, object[] args)
            {
                CQGAccountSummary AccountObj = (CQGAccountSummary)qObj;
                CQG.CQGAccount AccountPropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGAccountSummaryClassCurrencyName(QueryInfo query, object[] args)
            {
                CQGAccountSummary CurrencyNameObj = (CQGAccountSummary)qObj;
                System.String CurrencyNamePropV = CurrencyNameObj.CurrencyName;
                var CurrencyNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyNamePropKey, value: CurrencyNamePropV));
            }

            private void GetCQGAccountSummaryClassManualFillsInvolved(QueryInfo query, object[] args)
            {
                CQGAccountSummary ManualFillsInvolvedObj = (CQGAccountSummary)qObj;
                System.Boolean ManualFillsInvolvedPropV = ManualFillsInvolvedObj.ManualFillsInvolved;
                var ManualFillsInvolvedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ManualFillsInvolvedPropKey, value: ManualFillsInvolvedPropV));
            }

            private void GetCQGAdvancedStudiesClassCount(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies CountObj = (CQGAdvancedStudies)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGAdvancedStudiesClassItem(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies ItemObj = (CQGAdvancedStudies)qObj;
                CQG.CQGAdvancedStudy ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAdvancedStudiesClassItemById(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies ItemByIdObj = (CQGAdvancedStudies)qObj;
                CQG.CQGAdvancedStudy ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGAdvancedStudyClassCount(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy CountObj = (CQGAdvancedStudy)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGAdvancedStudyClassCurveHeaders(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy CurveHeadersObj = (CQGAdvancedStudy)qObj;
                CQG.CQGCurveHeaders CurveHeadersPropV = CurveHeadersObj.CurveHeaders;
                var CurveHeadersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurveHeadersPropKey, CurveHeadersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveHeadersPropKey));
            }

            private void GetCQGAdvancedStudyClassDefinition(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy DefinitionObj = (CQGAdvancedStudy)qObj;
                CQG.CQGAdvancedStudyDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGAdvancedStudyClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy EndTimestampObj = (CQGAdvancedStudy)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGAdvancedStudyClassId(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy IdObj = (CQGAdvancedStudy)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGAdvancedStudyClassItem(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy ItemObj = (CQGAdvancedStudy)qObj;
                CQG.CQGCurves ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAdvancedStudyClassLastError(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy LastErrorObj = (CQGAdvancedStudy)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGAdvancedStudyClassRequest(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy RequestObj = (CQGAdvancedStudy)qObj;
                CQG.CQGAdvancedStudyRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGAdvancedStudyClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy StartTimestampObj = (CQGAdvancedStudy)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGAdvancedStudyClassStatus(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy StatusObj = (CQGAdvancedStudy)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGAdvancedStudyClassTag(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy TagObj = (CQGAdvancedStudy)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGAdvancedStudyDefinitionClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition AbbreviationObj = (CQGAdvancedStudyDefinition)qObj;
                System.String AbbreviationPropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationPropV));
            }

            private void GetCQGAdvancedStudyDefinitionClassCurveDefinitions(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition CurveDefinitionsObj = (CQGAdvancedStudyDefinition)qObj;
                CQG.CQGCurveDefinitions CurveDefinitionsPropV = CurveDefinitionsObj.CurveDefinitions;
                var CurveDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurveDefinitionsPropKey, CurveDefinitionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveDefinitionsPropKey));
            }

            private void GetCQGAdvancedStudyDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition NameObj = (CQGAdvancedStudyDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGAdvancedStudyDefinitionClassParameterDefinitions(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition ParameterDefinitionsObj = (CQGAdvancedStudyDefinition)qObj;
                CQG.CQGParameterDefinitions ParameterDefinitionsPropV = ParameterDefinitionsObj.ParameterDefinitions;
                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
            }

            private void GetCQGAdvancedStudyDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions CountObj = (CQGAdvancedStudyDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGAdvancedStudyDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions ItemObj = (CQGAdvancedStudyDefinitions)qObj;
                CQG.CQGAdvancedStudyDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAdvancedStudyDefinitionsClassItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions ItemByAbbreviationObj = (CQGAdvancedStudyDefinitions)qObj;
                CQG.CQGAdvancedStudyDefinition ItemByAbbreviationPropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
            }

            private void GetCQGAdvancedStudyRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest BaseExpressionObj = (CQGAdvancedStudyRequest)qObj;
                System.String BaseExpressionPropV = BaseExpressionObj.BaseExpression;
                var BaseExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionPropV));
            }

            private void GetCQGAdvancedStudyRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ContinuationObj = (CQGAdvancedStudyRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGAdvancedStudyRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest DaysBeforeExpirationObj = (CQGAdvancedStudyRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGAdvancedStudyRequestClassDefinition(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest DefinitionObj = (CQGAdvancedStudyRequest)qObj;
                CQG.CQGAdvancedStudyDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGAdvancedStudyRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest EqualizeClosesObj = (CQGAdvancedStudyRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGAdvancedStudyRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest HistoricalPeriodObj = (CQGAdvancedStudyRequest)qObj;
                CQG.eHistoricalPeriod HistoricalPeriodPropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodPropV));
            }

            private void GetCQGAdvancedStudyRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IncludeEndObj = (CQGAdvancedStudyRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGAdvancedStudyRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IntradayPeriodObj = (CQGAdvancedStudyRequest)qObj;
                System.Int32 IntradayPeriodPropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodPropV));
            }

            private void GetCQGAdvancedStudyRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ParameterObj = (CQGAdvancedStudyRequest)qObj;
                System.Object ParameterPropV = ParameterObj.Parameter[(System.Object)args[0]];
                var ParameterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterPropV));
            }

            private void GetCQGAdvancedStudyRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RangeEndObj = (CQGAdvancedStudyRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGAdvancedStudyRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RangeStartObj = (CQGAdvancedStudyRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGAdvancedStudyRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RecalcPeriodObj = (CQGAdvancedStudyRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGAdvancedStudyRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SessionFlagsObj = (CQGAdvancedStudyRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGAdvancedStudyRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SessionsFilterObj = (CQGAdvancedStudyRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGAdvancedStudyRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SubscriptionLevelObj = (CQGAdvancedStudyRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGAdvancedStudyRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest UpdatesEnabledObj = (CQGAdvancedStudyRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassDefaultValue(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition DefaultValueObj = (CQGAlgorithmicOrderDefinition)qObj;
                System.Object DefaultValuePropV = DefaultValueObj.DefaultValue;
                var DefaultValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValuePropKey, value: DefaultValuePropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition DefaultValueIndexObj = (CQGAlgorithmicOrderDefinition)qObj;
                System.Int32 DefaultValueIndexPropV = DefaultValueIndexObj.DefaultValueIndex;
                var DefaultValueIndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValueIndexPropKey, value: DefaultValueIndexPropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition NameObj = (CQGAlgorithmicOrderDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassType(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition TypeObj = (CQGAlgorithmicOrderDefinition)qObj;
                CQG.eAlgorithmicOrderPropertyType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassUnit(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition UnitObj = (CQGAlgorithmicOrderDefinition)qObj;
                System.String UnitPropV = UnitObj.Unit;
                var UnitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnitPropKey, value: UnitPropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionClassValues(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition ValuesObj = (CQGAlgorithmicOrderDefinition)qObj;
                CQG.CQGStringCollection ValuesPropV = ValuesObj.Values;
                var ValuesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ValuesPropKey, ValuesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuesPropKey));
            }

            private void GetCQGAlgorithmicOrderDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions CountObj = (CQGAlgorithmicOrderDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGAlgorithmicOrderDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions ItemObj = (CQGAlgorithmicOrderDefinitions)qObj;
                CQG.CQGAlgorithmicOrderDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAlgorithmicOrderParametersClassDurationType(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters DurationTypeObj = (CQGAlgorithmicOrderParameters)qObj;
                CQG.eOrderDuration DurationTypePropV = DurationTypeObj.DurationType;
                var DurationTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DurationTypePropKey, value: DurationTypePropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassExecutionInstructions(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters ExecutionInstructionsObj = (CQGAlgorithmicOrderParameters)qObj;
                CQG.eOrderExecutionInstruction ExecutionInstructionsPropV = ExecutionInstructionsObj.ExecutionInstructions;
                var ExecutionInstructionsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionInstructionsPropKey, value: ExecutionInstructionsPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassExecutionPattern(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters ExecutionPatternObj = (CQGAlgorithmicOrderParameters)qObj;
                System.String ExecutionPatternPropV = ExecutionPatternObj.ExecutionPattern;
                var ExecutionPatternPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionPatternPropKey, value: ExecutionPatternPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassGTD(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters GTDObj = (CQGAlgorithmicOrderParameters)qObj;
                System.DateTime GTDPropV = GTDObj.GTD;
                var GTDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GTDPropKey, value: GTDPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters GWAccountIDObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters InstrumentNameObj = (CQGAlgorithmicOrderParameters)qObj;
                System.String InstrumentNamePropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamePropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassParked(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters ParkedObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Boolean ParkedPropV = ParkedObj.Parked;
                var ParkedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParkedPropKey, value: ParkedPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassPreferredTrailingPeg(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters PreferredTrailingPegObj = (CQGAlgorithmicOrderParameters)qObj;
                CQG.eOrderTrailingPeg PreferredTrailingPegPropV = PreferredTrailingPegObj.PreferredTrailingPeg;
                var PreferredTrailingPegPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreferredTrailingPegPropKey, value: PreferredTrailingPegPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassPrice(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters PriceObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassQuantity(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters QuantityObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassSide(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters SideObj = (CQGAlgorithmicOrderParameters)qObj;
                CQG.eOrderSide SidePropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidePropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassStopLimitPrice(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters StopLimitPriceObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Double StopLimitPricePropV = StopLimitPriceObj.StopLimitPrice;
                var StopLimitPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricePropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassTrailingOffset(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters TrailingOffsetObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Double TrailingOffsetPropV = TrailingOffsetObj.TrailingOffset;
                var TrailingOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrailingOffsetPropKey, value: TrailingOffsetPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassTriggerQuantity(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters TriggerQuantityObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Int32 TriggerQuantityPropV = TriggerQuantityObj.TriggerQuantity;
                var TriggerQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TriggerQuantityPropKey, value: TriggerQuantityPropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassType(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters TypeObj = (CQGAlgorithmicOrderParameters)qObj;
                CQG.eOrderType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGAlgorithmicOrderParametersClassVisibleQuantity(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters VisibleQuantityObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Int32 VisibleQuantityPropV = VisibleQuantityObj.VisibleQuantity;
                var VisibleQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VisibleQuantityPropKey, value: VisibleQuantityPropV));
            }

            private void GetCQGAlgorithmicOrderPropertiesClassCount(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperties CountObj = (CQGAlgorithmicOrderProperties)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGAlgorithmicOrderPropertiesClassItem(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperties ItemObj = (CQGAlgorithmicOrderProperties)qObj;
                CQG.CQGAlgorithmicOrderProperty ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGAlgorithmicOrderPropertyClassName(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperty NameObj = (CQGAlgorithmicOrderProperty)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGAlgorithmicOrderPropertyClassValue(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperty ValueObj = (CQGAlgorithmicOrderProperty)qObj;
                System.Object ValuePropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuePropV));
            }

            private void GetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval(QueryInfo query, object[] args)
            {
                CQGAPIConfig AccountMarginAndPositionsThrottleIntervalObj = (CQGAPIConfig)qObj;
                System.Int32 AccountMarginAndPositionsThrottleIntervalPropV = AccountMarginAndPositionsThrottleIntervalObj.AccountMarginAndPositionsThrottleInterval;
                var AccountMarginAndPositionsThrottleIntervalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountMarginAndPositionsThrottleIntervalPropKey, value: AccountMarginAndPositionsThrottleIntervalPropV));
            }

            private void GetCQGAPIConfigClassAgeToDeleteLogFileDays(QueryInfo query, object[] args)
            {
                CQGAPIConfig AgeToDeleteLogFileDaysObj = (CQGAPIConfig)qObj;
                System.Int32 AgeToDeleteLogFileDaysPropV = AgeToDeleteLogFileDaysObj.AgeToDeleteLogFileDays;
                var AgeToDeleteLogFileDaysPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AgeToDeleteLogFileDaysPropKey, value: AgeToDeleteLogFileDaysPropV));
            }

            private void GetCQGAPIConfigClassApplyDaylightSavingChanges(QueryInfo query, object[] args)
            {
                CQGAPIConfig ApplyDaylightSavingChangesObj = (CQGAPIConfig)qObj;
                System.Boolean ApplyDaylightSavingChangesPropV = ApplyDaylightSavingChangesObj.ApplyDaylightSavingChanges;
                var ApplyDaylightSavingChangesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ApplyDaylightSavingChangesPropKey, value: ApplyDaylightSavingChangesPropV));
            }

            private void GetCQGAPIConfigClassCollectionsThrowException(QueryInfo query, object[] args)
            {
                CQGAPIConfig CollectionsThrowExceptionObj = (CQGAPIConfig)qObj;
                System.Boolean CollectionsThrowExceptionPropV = CollectionsThrowExceptionObj.CollectionsThrowException;
                var CollectionsThrowExceptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CollectionsThrowExceptionPropKey, value: CollectionsThrowExceptionPropV));
            }

            private void GetCQGAPIConfigClassDefaultAccountMarginDetailing(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultAccountMarginDetailingObj = (CQGAPIConfig)qObj;
                CQG.eAccountMarginDetailing DefaultAccountMarginDetailingPropV = DefaultAccountMarginDetailingObj.DefaultAccountMarginDetailing;
                var DefaultAccountMarginDetailingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultAccountMarginDetailingPropKey, value: DefaultAccountMarginDetailingPropV));
            }

            private void GetCQGAPIConfigClassDefaultInstrumentBBAType(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultInstrumentBBATypeObj = (CQGAPIConfig)qObj;
                CQG.eDOMandBBAType DefaultInstrumentBBATypePropV = DefaultInstrumentBBATypeObj.DefaultInstrumentBBAType;
                var DefaultInstrumentBBATypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultInstrumentBBATypePropKey, value: DefaultInstrumentBBATypePropV));
            }

            private void GetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultInstrumentSubscriptionLevelObj = (CQGAPIConfig)qObj;
                CQG.eDataSubscriptionLevel DefaultInstrumentSubscriptionLevelPropV = DefaultInstrumentSubscriptionLevelObj.DefaultInstrumentSubscriptionLevel;
                var DefaultInstrumentSubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultInstrumentSubscriptionLevelPropKey, value: DefaultInstrumentSubscriptionLevelPropV));
            }

            private void GetCQGAPIConfigClassDefPositionSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefPositionSubscriptionLevelObj = (CQGAPIConfig)qObj;
                CQG.ePositionSubscriptionLevel DefPositionSubscriptionLevelPropV = DefPositionSubscriptionLevelObj.DefPositionSubscriptionLevel;
                var DefPositionSubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefPositionSubscriptionLevelPropKey, value: DefPositionSubscriptionLevelPropV));
            }

            private void GetCQGAPIConfigClassDOMUpdatesMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig DOMUpdatesModeObj = (CQGAPIConfig)qObj;
                CQG.eDOMUpdatesMode DOMUpdatesModePropV = DOMUpdatesModeObj.DOMUpdatesMode;
                var DOMUpdatesModePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMUpdatesModePropKey, value: DOMUpdatesModePropV));
            }

            private void GetCQGAPIConfigClassDOMUpdatesPeriod(QueryInfo query, object[] args)
            {
                CQGAPIConfig DOMUpdatesPeriodObj = (CQGAPIConfig)qObj;
                System.Int32 DOMUpdatesPeriodPropV = DOMUpdatesPeriodObj.DOMUpdatesPeriod;
                var DOMUpdatesPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMUpdatesPeriodPropKey, value: DOMUpdatesPeriodPropV));
            }

            private void GetCQGAPIConfigClassFireEventOnChangedPrices(QueryInfo query, object[] args)
            {
                CQGAPIConfig FireEventOnChangedPricesObj = (CQGAPIConfig)qObj;
                System.Boolean FireEventOnChangedPricesPropV = FireEventOnChangedPricesObj.FireEventOnChangedPrices;
                var FireEventOnChangedPricesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FireEventOnChangedPricesPropKey, value: FireEventOnChangedPricesPropV));
            }

            private void GetCQGAPIConfigClassGatewayEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig GatewayEnabledObj = (CQGAPIConfig)qObj;
                System.Boolean GatewayEnabledPropV = GatewayEnabledObj.GatewayEnabled;
                var GatewayEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GatewayEnabledPropKey, value: GatewayEnabledPropV));
            }

            private void GetCQGAPIConfigClassIncludeOrderTransactions(QueryInfo query, object[] args)
            {
                CQGAPIConfig IncludeOrderTransactionsObj = (CQGAPIConfig)qObj;
                System.Boolean IncludeOrderTransactionsPropV = IncludeOrderTransactionsObj.IncludeOrderTransactions;
                var IncludeOrderTransactionsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeOrderTransactionsPropKey, value: IncludeOrderTransactionsPropV));
            }

            private void GetCQGAPIConfigClassLogSeverity(QueryInfo query, object[] args)
            {
                CQGAPIConfig LogSeverityObj = (CQGAPIConfig)qObj;
                CQG.eLogSeverity LogSeverityPropV = LogSeverityObj.LogSeverity;
                var LogSeverityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LogSeverityPropKey, value: LogSeverityPropV));
            }

            private void GetCQGAPIConfigClassMaxLogFileCount(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileCountObj = (CQGAPIConfig)qObj;
                System.Int32 MaxLogFileCountPropV = MaxLogFileCountObj.MaxLogFileCount;
                var MaxLogFileCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileCountPropKey, value: MaxLogFileCountPropV));
            }

            private void GetCQGAPIConfigClassMaxLogFileDuration(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileDurationObj = (CQGAPIConfig)qObj;
                System.DateTime MaxLogFileDurationPropV = MaxLogFileDurationObj.MaxLogFileDuration;
                var MaxLogFileDurationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileDurationPropKey, value: MaxLogFileDurationPropV));
            }

            private void GetCQGAPIConfigClassMaxLogFileSize(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileSizeObj = (CQGAPIConfig)qObj;
                System.Int32 MaxLogFileSizePropV = MaxLogFileSizeObj.MaxLogFileSize;
                var MaxLogFileSizePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileSizePropKey, value: MaxLogFileSizePropV));
            }

            private void GetCQGAPIConfigClassMessageProcessingTimeout(QueryInfo query, object[] args)
            {
                CQGAPIConfig MessageProcessingTimeoutObj = (CQGAPIConfig)qObj;
                System.Int32 MessageProcessingTimeoutPropV = MessageProcessingTimeoutObj.MessageProcessingTimeout;
                var MessageProcessingTimeoutPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MessageProcessingTimeoutPropKey, value: MessageProcessingTimeoutPropV));
            }

            private void GetCQGAPIConfigClassMetaDataEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig MetaDataEnabledObj = (CQGAPIConfig)qObj;
                System.Boolean MetaDataEnabledPropV = MetaDataEnabledObj.MetaDataEnabled;
                var MetaDataEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MetaDataEnabledPropKey, value: MetaDataEnabledPropV));
            }

            private void GetCQGAPIConfigClassNewInstrumentChangeMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig NewInstrumentChangeModeObj = (CQGAPIConfig)qObj;
                System.Boolean NewInstrumentChangeModePropV = NewInstrumentChangeModeObj.NewInstrumentChangeMode;
                var NewInstrumentChangeModePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewInstrumentChangeModePropKey, value: NewInstrumentChangeModePropV));
            }

            private void GetCQGAPIConfigClassNewInstrumentMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig NewInstrumentModeObj = (CQGAPIConfig)qObj;
                System.Boolean NewInstrumentModePropV = NewInstrumentModeObj.NewInstrumentMode;
                var NewInstrumentModePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewInstrumentModePropKey, value: NewInstrumentModePropV));
            }

            private void GetCQGAPIConfigClassNonsynchronizedData(QueryInfo query, object[] args)
            {
                CQGAPIConfig NonsynchronizedDataObj = (CQGAPIConfig)qObj;
                System.Boolean NonsynchronizedDataPropV = NonsynchronizedDataObj.NonsynchronizedData;
                var NonsynchronizedDataPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NonsynchronizedDataPropKey, value: NonsynchronizedDataPropV));
            }

            private void GetCQGAPIConfigClassPendingOrderActionEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig PendingOrderActionEnabledObj = (CQGAPIConfig)qObj;
                System.Boolean PendingOrderActionEnabledPropV = PendingOrderActionEnabledObj.PendingOrderActionEnabled;
                var PendingOrderActionEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PendingOrderActionEnabledPropKey, value: PendingOrderActionEnabledPropV));
            }

            private void GetCQGAPIConfigClassPositionDetailing(QueryInfo query, object[] args)
            {
                CQGAPIConfig PositionDetailingObj = (CQGAPIConfig)qObj;
                CQG.ePositionDetailing PositionDetailingPropV = PositionDetailingObj.PositionDetailing;
                var PositionDetailingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionDetailingPropKey, value: PositionDetailingPropV));
            }

            private void GetCQGAPIConfigClassPriceMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig PriceModeObj = (CQGAPIConfig)qObj;
                CQG.ePriceMode PriceModePropV = PriceModeObj.PriceMode;
                var PriceModePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PriceModePropKey, value: PriceModePropV));
            }

            private void GetCQGAPIConfigClassProviderPassword(QueryInfo query, object[] args)
            {
                CQGAPIConfig ProviderPasswordObj = (CQGAPIConfig)qObj;
                System.String ProviderPasswordPropV = ProviderPasswordObj.ProviderPassword;
                var ProviderPasswordPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProviderPasswordPropKey, value: ProviderPasswordPropV));
            }

            private void GetCQGAPIConfigClassQueryAllAuthorizedTraders(QueryInfo query, object[] args)
            {
                CQGAPIConfig QueryAllAuthorizedTradersObj = (CQGAPIConfig)qObj;
                System.Boolean QueryAllAuthorizedTradersPropV = QueryAllAuthorizedTradersObj.QueryAllAuthorizedTraders;
                var QueryAllAuthorizedTradersPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QueryAllAuthorizedTradersPropKey, value: QueryAllAuthorizedTradersPropV));
            }

            private void GetCQGAPIConfigClassReadyStatusCheck(QueryInfo query, object[] args)
            {
                CQGAPIConfig ReadyStatusCheckObj = (CQGAPIConfig)qObj;
                CQG.eReadyStatusCheck ReadyStatusCheckPropV = ReadyStatusCheckObj.ReadyStatusCheck;
                var ReadyStatusCheckPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReadyStatusCheckPropKey, value: ReadyStatusCheckPropV));
            }

            private void GetCQGAPIConfigClassRemoteOpenAPILoginService(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPILoginServiceObj = (CQGAPIConfig)qObj;
                System.String RemoteOpenAPILoginServicePropV = RemoteOpenAPILoginServiceObj.RemoteOpenAPILoginService;
                var RemoteOpenAPILoginServicePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPILoginServicePropKey, value: RemoteOpenAPILoginServicePropV));
            }

            private void GetCQGAPIConfigClassRemoteOpenAPIServer(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPIServerObj = (CQGAPIConfig)qObj;
                System.String RemoteOpenAPIServerPropV = RemoteOpenAPIServerObj.RemoteOpenAPIServer;
                var RemoteOpenAPIServerPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPIServerPropKey, value: RemoteOpenAPIServerPropV));
            }

            private void GetCQGAPIConfigClassRemoteOpenAPIServers(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPIServersObj = (CQGAPIConfig)qObj;
                CQG.CQGStringCollection RemoteOpenAPIServersPropV = RemoteOpenAPIServersObj.RemoteOpenAPIServers;
                var RemoteOpenAPIServersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RemoteOpenAPIServersPropKey, RemoteOpenAPIServersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPIServersPropKey));
            }

            private void GetCQGAPIConfigClassReplaceLoginSession(QueryInfo query, object[] args)
            {
                CQGAPIConfig ReplaceLoginSessionObj = (CQGAPIConfig)qObj;
                System.Boolean ReplaceLoginSessionPropV = ReplaceLoginSessionObj.ReplaceLoginSession;
                var ReplaceLoginSessionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReplaceLoginSessionPropKey, value: ReplaceLoginSessionPropV));
            }

            private void GetCQGAPIConfigClassSnapshotPeriod(QueryInfo query, object[] args)
            {
                CQGAPIConfig SnapshotPeriodObj = (CQGAPIConfig)qObj;
                System.Int32 SnapshotPeriodPropV = SnapshotPeriodObj.SnapshotPeriod;
                var SnapshotPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SnapshotPeriodPropKey, value: SnapshotPeriodPropV));
            }

            private void GetCQGAPIConfigClassStrategyManagerEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig StrategyManagerEnabledObj = (CQGAPIConfig)qObj;
                System.Boolean StrategyManagerEnabledPropV = StrategyManagerEnabledObj.StrategyManagerEnabled;
                var StrategyManagerEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrategyManagerEnabledPropKey, value: StrategyManagerEnabledPropV));
            }

            private void GetCQGAPIConfigClassTimeZoneCode(QueryInfo query, object[] args)
            {
                CQGAPIConfig TimeZoneCodeObj = (CQGAPIConfig)qObj;
                CQG.eTimeZone TimeZoneCodePropV = TimeZoneCodeObj.TimeZoneCode;
                var TimeZoneCodePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimeZoneCodePropKey, value: TimeZoneCodePropV));
            }

            private void GetCQGAPIConfigClassUsedFromATLClient(QueryInfo query, object[] args)
            {
                CQGAPIConfig UsedFromATLClientObj = (CQGAPIConfig)qObj;
                System.Boolean UsedFromATLClientPropV = UsedFromATLClientObj.UsedFromATLClient;
                var UsedFromATLClientPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UsedFromATLClientPropKey, value: UsedFromATLClientPropV));
            }

            private void GetCQGAPIConfigClassUseOrderSide(QueryInfo query, object[] args)
            {
                CQGAPIConfig UseOrderSideObj = (CQGAPIConfig)qObj;
                System.Boolean UseOrderSidePropV = UseOrderSideObj.UseOrderSide;
                var UseOrderSidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UseOrderSidePropKey, value: UseOrderSidePropV));
            }

            private void GetCQGBarsTimestampsClassCount(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps CountObj = (CQGBarsTimestamps)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGBarsTimestampsClassId(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps IdObj = (CQGBarsTimestamps)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGBarsTimestampsClassItem(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps ItemObj = (CQGBarsTimestamps)qObj;
                System.DateTime ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGBarsTimestampsClassLastError(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps LastErrorObj = (CQGBarsTimestamps)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGBarsTimestampsClassStatus(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps StatusObj = (CQGBarsTimestamps)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGCELClassAccounts(QueryInfo query, object[] args)
            {
                CQGCEL AccountsObj = (CQGCEL)qObj;
                CQG.CQGAccounts AccountsPropV = AccountsObj.Accounts;
                var AccountsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountsPropKey, AccountsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountsPropKey));
            }

            private void GetCQGCELClassAccountSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGCEL AccountSubscriptionLevelObj = (CQGCEL)qObj;
                CQG.eAccountSubscriptionLevel AccountSubscriptionLevelPropV = AccountSubscriptionLevelObj.AccountSubscriptionLevel;
                var AccountSubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountSubscriptionLevelPropKey, value: AccountSubscriptionLevelPropV));
            }

            private void GetCQGCELClassAllAdvancedStudies(QueryInfo query, object[] args)
            {
                CQGCEL AllAdvancedStudiesObj = (CQGCEL)qObj;
                CQG.CQGAdvancedStudies AllAdvancedStudiesPropV = AllAdvancedStudiesObj.AllAdvancedStudies;
                var AllAdvancedStudiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllAdvancedStudiesPropKey, AllAdvancedStudiesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllAdvancedStudiesPropKey));
            }

            private void GetCQGCELClassAllConditions(QueryInfo query, object[] args)
            {
                CQGCEL AllConditionsObj = (CQGCEL)qObj;
                CQG.CQGConditions AllConditionsPropV = AllConditionsObj.AllConditions;
                var AllConditionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllConditionsPropKey, AllConditionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllConditionsPropKey));
            }

            private void GetCQGCELClassAllConstantVolumeBars(QueryInfo query, object[] args)
            {
                CQGCEL AllConstantVolumeBarsObj = (CQGCEL)qObj;
                CQG.CQGConstantVolumeBarsCollection AllConstantVolumeBarsPropV = AllConstantVolumeBarsObj.AllConstantVolumeBars;
                var AllConstantVolumeBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllConstantVolumeBarsPropKey, AllConstantVolumeBarsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllConstantVolumeBarsPropKey));
            }

            private void GetCQGCELClassAllCustomStudies(QueryInfo query, object[] args)
            {
                CQGCEL AllCustomStudiesObj = (CQGCEL)qObj;
                CQG.CQGCustomStudies AllCustomStudiesPropV = AllCustomStudiesObj.AllCustomStudies;
                var AllCustomStudiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllCustomStudiesPropKey, AllCustomStudiesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllCustomStudiesPropKey));
            }

            private void GetCQGCELClassAllExpressions(QueryInfo query, object[] args)
            {
                CQGCEL AllExpressionsObj = (CQGCEL)qObj;
                CQG.CQGExpressions AllExpressionsPropV = AllExpressionsObj.AllExpressions;
                var AllExpressionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllExpressionsPropKey, AllExpressionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllExpressionsPropKey));
            }

            private void GetCQGCELClassAllInstrumentsGroups(QueryInfo query, object[] args)
            {
                CQGCEL AllInstrumentsGroupsObj = (CQGCEL)qObj;
                CQG.CQGInstrumentsGroups AllInstrumentsGroupsPropV = AllInstrumentsGroupsObj.AllInstrumentsGroups;
                var AllInstrumentsGroupsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllInstrumentsGroupsPropKey, AllInstrumentsGroupsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllInstrumentsGroupsPropKey));
            }

            private void GetCQGCELClassAllManualFills(QueryInfo query, object[] args)
            {
                CQGCEL AllManualFillsObj = (CQGCEL)qObj;
                CQG.CQGManualFillsCollection AllManualFillsPropV = AllManualFillsObj.AllManualFills;
                var AllManualFillsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllManualFillsPropKey, AllManualFillsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllManualFillsPropKey));
            }

            private void GetCQGCELClassAllPointAndFigureBars(QueryInfo query, object[] args)
            {
                CQGCEL AllPointAndFigureBarsObj = (CQGCEL)qObj;
                CQG.CQGPointAndFigureBarsCollection AllPointAndFigureBarsPropV = AllPointAndFigureBarsObj.AllPointAndFigureBars;
                var AllPointAndFigureBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllPointAndFigureBarsPropKey, AllPointAndFigureBarsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllPointAndFigureBarsPropKey));
            }

            private void GetCQGCELClassAllStrategyDefinitions(QueryInfo query, object[] args)
            {
                CQGCEL AllStrategyDefinitionsObj = (CQGCEL)qObj;
                CQG.CQGStrategyDefinitions AllStrategyDefinitionsPropV = AllStrategyDefinitionsObj.AllStrategyDefinitions;
                var AllStrategyDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllStrategyDefinitionsPropKey, AllStrategyDefinitionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllStrategyDefinitionsPropKey));
            }

            private void GetCQGCELClassAllSubMinuteBars(QueryInfo query, object[] args)
            {
                CQGCEL AllSubMinuteBarsObj = (CQGCEL)qObj;
                CQG.CQGSubMinuteBarsCollection AllSubMinuteBarsPropV = AllSubMinuteBarsObj.AllSubMinuteBars;
                var AllSubMinuteBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllSubMinuteBarsPropKey, AllSubMinuteBarsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllSubMinuteBarsPropKey));
            }

            private void GetCQGCELClassAllTFlowBars(QueryInfo query, object[] args)
            {
                CQGCEL AllTFlowBarsObj = (CQGCEL)qObj;
                CQG.CQGTFlowBarsCollection AllTFlowBarsPropV = AllTFlowBarsObj.AllTFlowBars;
                var AllTFlowBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllTFlowBarsPropKey, AllTFlowBarsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTFlowBarsPropKey));
            }

            private void GetCQGCELClassAllTicks(QueryInfo query, object[] args)
            {
                CQGCEL AllTicksObj = (CQGCEL)qObj;
                CQG.CQGTicksCollection AllTicksPropV = AllTicksObj.AllTicks;
                var AllTicksPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllTicksPropKey, AllTicksPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTicksPropKey));
            }

            private void GetCQGCELClassAllTimedBars(QueryInfo query, object[] args)
            {
                CQGCEL AllTimedBarsObj = (CQGCEL)qObj;
                CQG.CQGTimedBarsCollection AllTimedBarsPropV = AllTimedBarsObj.AllTimedBars;
                var AllTimedBarsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllTimedBarsPropKey, AllTimedBarsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTimedBarsPropKey));
            }

            private void GetCQGCELClassAllTradingSystems(QueryInfo query, object[] args)
            {
                CQGCEL AllTradingSystemsObj = (CQGCEL)qObj;
                CQG.CQGTradingSystems AllTradingSystemsPropV = AllTradingSystemsObj.AllTradingSystems;
                var AllTradingSystemsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllTradingSystemsPropKey, AllTradingSystemsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTradingSystemsPropKey));
            }

            private void GetCQGCELClassAllYields(QueryInfo query, object[] args)
            {
                CQGCEL AllYieldsObj = (CQGCEL)qObj;
                CQG.CQGYieldsCollection AllYieldsPropV = AllYieldsObj.AllYields;
                var AllYieldsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AllYieldsPropKey, AllYieldsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllYieldsPropKey));
            }

            private void GetCQGCELClassAPIConfiguration(QueryInfo query, object[] args)
            {
                CQGCEL APIConfigurationObj = (CQGCEL)qObj;
                CQG.CQGAPIConfig APIConfigurationPropV = APIConfigurationObj.APIConfiguration;
                var APIConfigurationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(APIConfigurationPropKey, APIConfigurationPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: APIConfigurationPropKey));
            }

            private void GetCQGCELClassConfiguration(QueryInfo query, object[] args)
            {
                CQGCEL ConfigurationObj = (CQGCEL)qObj;
                CQG.CQGCELConfiguration ConfigurationPropV = ConfigurationObj.get_Configuration();
                var ConfigurationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ConfigurationPropKey, value: ConfigurationPropV));
            }

            private void GetCQGCELClassCurrencyRates(QueryInfo query, object[] args)
            {
                CQGCEL CurrencyRatesObj = (CQGCEL)qObj;
                CQG.CQGCurrencyRates CurrencyRatesPropV = CurrencyRatesObj.CurrencyRates;
                var CurrencyRatesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurrencyRatesPropKey, CurrencyRatesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyRatesPropKey));
            }

            private void GetCQGCELClassDirectEventsAccessor(QueryInfo query, object[] args)
            {
                CQGCEL DirectEventsAccessorObj = (CQGCEL)qObj;
                CQG.CQGDirectEventsAccessor DirectEventsAccessorPropV = DirectEventsAccessorObj.DirectEventsAccessor;
                var DirectEventsAccessorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DirectEventsAccessorPropKey, DirectEventsAccessorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DirectEventsAccessorPropKey));
            }

            private void GetCQGCELClassEnvironment(QueryInfo query, object[] args)
            {
                CQGCEL EnvironmentObj = (CQGCEL)qObj;
                CQG.CQGEnvironment EnvironmentPropV = EnvironmentObj.Environment;
                var EnvironmentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(EnvironmentPropKey, EnvironmentPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EnvironmentPropKey));
            }

            private void GetCQGCELClassInstruments(QueryInfo query, object[] args)
            {
                CQGCEL InstrumentsObj = (CQGCEL)qObj;
                CQG.CQGInstruments InstrumentsPropV = InstrumentsObj.Instruments;
                var InstrumentsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentsPropKey, InstrumentsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentsPropKey));
            }

            private void GetCQGCELClassInternalOrders(QueryInfo query, object[] args)
            {
                CQGCEL InternalOrdersObj = (CQGCEL)qObj;
                CQG.CQGOrders InternalOrdersPropV = InternalOrdersObj.InternalOrders;
                var InternalOrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InternalOrdersPropKey, InternalOrdersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InternalOrdersPropKey));
            }

            private void GetCQGCELClassIsStarted(QueryInfo query, object[] args)
            {
                System.Boolean IsStartedPropV = CqgDataManagement.IsCQGStarted;
                var IsStartedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsStartedPropKey, value: IsStartedPropV));
            }

            private void GetCQGCELClassLogger(QueryInfo query, object[] args)
            {
                CQGCEL LoggerObj = (CQGCEL)qObj;
                CQG.CQGLogger LoggerPropV = LoggerObj.Logger;
                var LoggerPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LoggerPropKey, LoggerPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LoggerPropKey));
            }

            private void GetCQGCELClassOrders(QueryInfo query, object[] args)
            {
                CQGCEL OrdersObj = (CQGCEL)qObj;
                CQG.CQGOrders OrdersPropV = OrdersObj.Orders;
                var OrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrdersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
            }

            private void GetCQGCELClassOTPRequired(QueryInfo query, object[] args)
            {
                CQGCEL OTPRequiredObj = (CQGCEL)qObj;
                System.Boolean OTPRequiredPropV = OTPRequiredObj.OTPRequired;
                var OTPRequiredPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OTPRequiredPropKey, value: OTPRequiredPropV));
            }

            private void GetCQGChangedTradeEntriesClassChangeFilter(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries ChangeFilterObj = (CQGChangedTradeEntries)qObj;
                CQG.eTradeChangeCategory ChangeFilterPropV = ChangeFilterObj.ChangeFilter;
                var ChangeFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeFilterPropKey, value: ChangeFilterPropV));
            }

            private void GetCQGChangedTradeEntriesClassCount(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries CountObj = (CQGChangedTradeEntries)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGChangedTradeEntriesClassItem(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries ItemObj = (CQGChangedTradeEntries)qObj;
                CQG.CQGChangedTradeEntry ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGChangedTradeEntryClassChangeCategory(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntry ChangeCategoryObj = (CQGChangedTradeEntry)qObj;
                CQG.eTradeChangeCategory ChangeCategoryPropV = ChangeCategoryObj.ChangeCategory;
                var ChangeCategoryPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeCategoryPropKey, value: ChangeCategoryPropV));
            }

            private void GetCQGChangedTradeEntryClassTradeEntry(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntry TradeEntryObj = (CQGChangedTradeEntry)qObj;
                CQG.CQGTradeEntry TradeEntryPropV = TradeEntryObj.TradeEntry;
                var TradeEntryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeEntryPropKey, TradeEntryPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeEntryPropKey));
            }

            private void GetCQGChangedTradeExitClassChangeCategory(QueryInfo query, object[] args)
            {
                CQGChangedTradeExit ChangeCategoryObj = (CQGChangedTradeExit)qObj;
                CQG.eTradeChangeCategory ChangeCategoryPropV = ChangeCategoryObj.ChangeCategory;
                var ChangeCategoryPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeCategoryPropKey, value: ChangeCategoryPropV));
            }

            private void GetCQGChangedTradeExitClassTradeExit(QueryInfo query, object[] args)
            {
                CQGChangedTradeExit TradeExitObj = (CQGChangedTradeExit)qObj;
                CQG.CQGTradeExit TradeExitPropV = TradeExitObj.TradeExit;
                var TradeExitPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeExitPropKey, TradeExitPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeExitPropKey));
            }

            private void GetCQGChangedTradeExitsClassChangeFilter(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits ChangeFilterObj = (CQGChangedTradeExits)qObj;
                CQG.eTradeChangeCategory ChangeFilterPropV = ChangeFilterObj.ChangeFilter;
                var ChangeFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeFilterPropKey, value: ChangeFilterPropV));
            }

            private void GetCQGChangedTradeExitsClassCount(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits CountObj = (CQGChangedTradeExits)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGChangedTradeExitsClassItem(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits ItemObj = (CQGChangedTradeExits)qObj;
                CQG.CQGChangedTradeExit ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCommoditiesClassCount(QueryInfo query, object[] args)
            {
                CQGCommodities CountObj = (CQGCommodities)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCommoditiesClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGCommodities GWAccountIDObj = (CQGCommodities)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGCommoditiesClassItem(QueryInfo query, object[] args)
            {
                CQGCommodities ItemObj = (CQGCommodities)qObj;
                System.String ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGCommodityInstrumentsClassCount(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments CountObj = (CQGCommodityInstruments)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCommodityInstrumentsClassIsTradableOnly(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments IsTradableOnlyObj = (CQGCommodityInstruments)qObj;
                System.Boolean IsTradableOnlyPropV = IsTradableOnlyObj.IsTradableOnly;
                var IsTradableOnlyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsTradableOnlyPropKey, value: IsTradableOnlyPropV));
            }

            private void GetCQGCommodityInstrumentsClassItem(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments ItemObj = (CQGCommodityInstruments)qObj;
                System.String ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGConditionClassCount(QueryInfo query, object[] args)
            {
                CQGCondition CountObj = (CQGCondition)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGConditionClassDefinition(QueryInfo query, object[] args)
            {
                CQGCondition DefinitionObj = (CQGCondition)qObj;
                CQG.CQGConditionDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGConditionClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGCondition EndTimestampObj = (CQGCondition)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGConditionClassId(QueryInfo query, object[] args)
            {
                CQGCondition IdObj = (CQGCondition)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGConditionClassItem(QueryInfo query, object[] args)
            {
                CQGCondition ItemObj = (CQGCondition)qObj;
                CQG.CQGConditionResult ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConditionClassLastError(QueryInfo query, object[] args)
            {
                CQGCondition LastErrorObj = (CQGCondition)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGConditionClassRequest(QueryInfo query, object[] args)
            {
                CQGCondition RequestObj = (CQGCondition)qObj;
                CQG.CQGConditionRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGConditionClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGCondition StartTimestampObj = (CQGCondition)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGConditionClassStatus(QueryInfo query, object[] args)
            {
                CQGCondition StatusObj = (CQGCondition)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGConditionClassTag(QueryInfo query, object[] args)
            {
                CQGCondition TagObj = (CQGCondition)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGConditionDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGConditionDefinition NameObj = (CQGConditionDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGConditionDefinitionClassParameterDefinitions(QueryInfo query, object[] args)
            {
                CQGConditionDefinition ParameterDefinitionsObj = (CQGConditionDefinition)qObj;
                CQG.CQGParameterDefinitions ParameterDefinitionsPropV = ParameterDefinitionsObj.ParameterDefinitions;
                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
            }

            private void GetCQGConditionDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions CountObj = (CQGConditionDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGConditionDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions ItemObj = (CQGConditionDefinitions)qObj;
                CQG.CQGConditionDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConditionDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions ItemByNameObj = (CQGConditionDefinitions)qObj;
                CQG.CQGConditionDefinition ItemByNamePropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGConditionRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGConditionRequest BaseExpressionObj = (CQGConditionRequest)qObj;
                System.String BaseExpressionPropV = BaseExpressionObj.BaseExpression;
                var BaseExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionPropV));
            }

            private void GetCQGConditionRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGConditionRequest ContinuationObj = (CQGConditionRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGConditionRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGConditionRequest DaysBeforeExpirationObj = (CQGConditionRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGConditionRequestClassDefinition(QueryInfo query, object[] args)
            {
                CQGConditionRequest DefinitionObj = (CQGConditionRequest)qObj;
                CQG.CQGConditionDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGConditionRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGConditionRequest EqualizeClosesObj = (CQGConditionRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGConditionRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest HistoricalPeriodObj = (CQGConditionRequest)qObj;
                CQG.eHistoricalPeriod HistoricalPeriodPropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodPropV));
            }

            private void GetCQGConditionRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGConditionRequest IncludeEndObj = (CQGConditionRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGConditionRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest IntradayPeriodObj = (CQGConditionRequest)qObj;
                System.Int32 IntradayPeriodPropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodPropV));
            }

            private void GetCQGConditionRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGConditionRequest ParameterObj = (CQGConditionRequest)qObj;
                System.Object ParameterPropV = ParameterObj.Parameter[(System.Object)args[0]];
                var ParameterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterPropV));
            }

            private void GetCQGConditionRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGConditionRequest RangeEndObj = (CQGConditionRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGConditionRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGConditionRequest RangeStartObj = (CQGConditionRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGConditionRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest RecalcPeriodObj = (CQGConditionRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGConditionRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGConditionRequest SessionFlagsObj = (CQGConditionRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGConditionRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGConditionRequest SessionsFilterObj = (CQGConditionRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGConditionRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGConditionRequest SubscriptionLevelObj = (CQGConditionRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGConditionRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGConditionRequest UpdatesEnabledObj = (CQGConditionRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGConditionResultClassTimestamp(QueryInfo query, object[] args)
            {
                CQGConditionResult TimestampObj = (CQGConditionResult)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGConditionResultClassValue(QueryInfo query, object[] args)
            {
                CQGConditionResult ValueObj = (CQGConditionResult)qObj;
                System.Boolean ValuePropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuePropV));
            }

            private void GetCQGConditionsClassCount(QueryInfo query, object[] args)
            {
                CQGConditions CountObj = (CQGConditions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGConditionsClassItem(QueryInfo query, object[] args)
            {
                CQGConditions ItemObj = (CQGConditions)qObj;
                CQG.CQGCondition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConditionsClassItemById(QueryInfo query, object[] args)
            {
                CQGConditions ItemByIdObj = (CQGConditions)qObj;
                CQG.CQGCondition ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGConstantVolumeBarClassActualVolume(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar ActualVolumeObj = (CQGConstantVolumeBar)qObj;
                System.Int32 ActualVolumePropV = ActualVolumeObj.ActualVolume;
                var ActualVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActualVolumePropKey, value: ActualVolumePropV));
            }

            private void GetCQGConstantVolumeBarClassAskVolume(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar AskVolumeObj = (CQGConstantVolumeBar)qObj;
                System.Int32 AskVolumePropV = AskVolumeObj.AskVolume;
                var AskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumePropV));
            }

            private void GetCQGConstantVolumeBarClassAvg(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar AvgObj = (CQGConstantVolumeBar)qObj;
                System.Double AvgPropV = AvgObj.Avg;
                var AvgPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgPropV));
            }

            private void GetCQGConstantVolumeBarClassBidVolume(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar BidVolumeObj = (CQGConstantVolumeBar)qObj;
                System.Int32 BidVolumePropV = BidVolumeObj.BidVolume;
                var BidVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumePropV));
            }

            private void GetCQGConstantVolumeBarClassClose(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar CloseObj = (CQGConstantVolumeBar)qObj;
                System.Double ClosePropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosePropV));
            }

            private void GetCQGConstantVolumeBarClassHigh(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar HighObj = (CQGConstantVolumeBar)qObj;
                System.Double HighPropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighPropV));
            }

            private void GetCQGConstantVolumeBarClassHLC3(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar HLC3Obj = (CQGConstantVolumeBar)qObj;
                System.Double HLC3PropV = HLC3Obj.HLC3;
                var HLC3PropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3PropV));
            }

            private void GetCQGConstantVolumeBarClassLow(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar LowObj = (CQGConstantVolumeBar)qObj;
                System.Double LowPropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowPropV));
            }

            private void GetCQGConstantVolumeBarClassMid(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar MidObj = (CQGConstantVolumeBar)qObj;
                System.Double MidPropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidPropV));
            }

            private void GetCQGConstantVolumeBarClassOpen(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar OpenObj = (CQGConstantVolumeBar)qObj;
                System.Double OpenPropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenPropV));
            }

            private void GetCQGConstantVolumeBarClassRange(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar RangeObj = (CQGConstantVolumeBar)qObj;
                System.Double RangePropV = RangeObj.Range;
                var RangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangePropV));
            }

            private void GetCQGConstantVolumeBarClassTickVolume(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TickVolumeObj = (CQGConstantVolumeBar)qObj;
                System.Int32 TickVolumePropV = TickVolumeObj.TickVolume;
                var TickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumePropV));
            }

            private void GetCQGConstantVolumeBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TimestampObj = (CQGConstantVolumeBar)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGConstantVolumeBarClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TimestampOffsetObj = (CQGConstantVolumeBar)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGConstantVolumeBarClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TrueHighObj = (CQGConstantVolumeBar)qObj;
                System.Double TrueHighPropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighPropV));
            }

            private void GetCQGConstantVolumeBarClassTrueLow(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TrueLowObj = (CQGConstantVolumeBar)qObj;
                System.Double TrueLowPropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowPropV));
            }

            private void GetCQGConstantVolumeBarClassTrueRange(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar TrueRangeObj = (CQGConstantVolumeBar)qObj;
                System.Double TrueRangePropV = TrueRangeObj.TrueRange;
                var TrueRangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangePropV));
            }

            private void GetCQGConstantVolumeBarsClassCount(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars CountObj = (CQGConstantVolumeBars)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGConstantVolumeBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars EndTimestampObj = (CQGConstantVolumeBars)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGConstantVolumeBarsClassId(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars IdObj = (CQGConstantVolumeBars)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGConstantVolumeBarsClassItem(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars ItemObj = (CQGConstantVolumeBars)qObj;
                CQG.CQGConstantVolumeBar ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConstantVolumeBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars LastErrorObj = (CQGConstantVolumeBars)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGConstantVolumeBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars RequestObj = (CQGConstantVolumeBars)qObj;
                CQG.CQGConstantVolumeBarsRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGConstantVolumeBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars StartTimestampObj = (CQGConstantVolumeBars)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGConstantVolumeBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars StatusObj = (CQGConstantVolumeBars)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGConstantVolumeBarsClassTag(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars TagObj = (CQGConstantVolumeBars)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGConstantVolumeBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection CountObj = (CQGConstantVolumeBarsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGConstantVolumeBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection ItemObj = (CQGConstantVolumeBarsCollection)qObj;
                CQG.CQGConstantVolumeBars ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGConstantVolumeBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection ItemByIdObj = (CQGConstantVolumeBarsCollection)qObj;
                CQG.CQGConstantVolumeBars ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGConstantVolumeBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest ContinuationObj = (CQGConstantVolumeBarsRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest DaysBeforeExpirationObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest EqualizeClosesObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest IncludeEndObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassIncludeFlatTicks(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest IncludeFlatTicksObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Boolean IncludeFlatTicksPropV = IncludeFlatTicksObj.IncludeFlatTicks;
                var IncludeFlatTicksPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeFlatTicksPropKey, value: IncludeFlatTicksPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RangeEndObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RangeStartObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RecalcPeriodObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SessionFlagsObj = (CQGConstantVolumeBarsRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SessionsFilterObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SubscriptionLevelObj = (CQGConstantVolumeBarsRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SymbolObj = (CQGConstantVolumeBarsRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest UpdatesEnabledObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassVolumeLevel(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest VolumeLevelObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Int32 VolumeLevelPropV = VolumeLevelObj.VolumeLevel;
                var VolumeLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumeLevelPropKey, value: VolumeLevelPropV));
            }

            private void GetCQGConstantVolumeBarsRequestClassVolumeType(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest VolumeTypeObj = (CQGConstantVolumeBarsRequest)qObj;
                CQG.eCvbVolumeType VolumeTypePropV = VolumeTypeObj.VolumeType;
                var VolumeTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumeTypePropKey, value: VolumeTypePropV));
            }

            private void GetCQGCurrencyRateClassBaseCurrencyName(QueryInfo query, object[] args)
            {
                CQGCurrencyRate BaseCurrencyNameObj = (CQGCurrencyRate)qObj;
                System.String BaseCurrencyNamePropV = BaseCurrencyNameObj.BaseCurrencyName;
                var BaseCurrencyNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseCurrencyNamePropKey, value: BaseCurrencyNamePropV));
            }

            private void GetCQGCurrencyRateClassCEL(QueryInfo query, object[] args)
            {
                CQGCurrencyRate CELObj = (CQGCurrencyRate)qObj;
                CQG.CQGCEL CELPropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGCurrencyRateClassCurrencyName(QueryInfo query, object[] args)
            {
                CQGCurrencyRate CurrencyNameObj = (CQGCurrencyRate)qObj;
                System.String CurrencyNamePropV = CurrencyNameObj.CurrencyName;
                var CurrencyNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyNamePropKey, value: CurrencyNamePropV));
            }

            private void GetCQGCurrencyRateClassFcmID(QueryInfo query, object[] args)
            {
                CQGCurrencyRate FcmIDObj = (CQGCurrencyRate)qObj;
                System.Int32 FcmIDPropV = FcmIDObj.FcmID;
                var FcmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmIDPropKey, value: FcmIDPropV));
            }

            private void GetCQGCurrencyRateClassRate(QueryInfo query, object[] args)
            {
                CQGCurrencyRate RateObj = (CQGCurrencyRate)qObj;
                System.Double RatePropV = RateObj.Rate;
                var RatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RatePropKey, value: RatePropV));
            }

            private void GetCQGCurrencyRateClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGCurrencyRate ServerTimestampObj = (CQGCurrencyRate)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGCurrencyRateClassTimestamp(QueryInfo query, object[] args)
            {
                CQGCurrencyRate TimestampObj = (CQGCurrencyRate)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGCurrencyRatesClassCount(QueryInfo query, object[] args)
            {
                CQGCurrencyRates CountObj = (CQGCurrencyRates)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCurrencyRatesClassItem(QueryInfo query, object[] args)
            {
                CQGCurrencyRates ItemObj = (CQGCurrencyRates)qObj;
                CQG.CQGCurrencyRate ItemPropV = ItemObj[(System.Int32)args[0],(System.String)args[1],(System.String)args[2]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCurveDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGCurveDefinition NameObj = (CQGCurveDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGCurveDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions CountObj = (CQGCurveDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCurveDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions ItemObj = (CQGCurveDefinitions)qObj;
                CQG.CQGCurveDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCurveDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions ItemByNameObj = (CQGCurveDefinitions)qObj;
                CQG.CQGCurveDefinition ItemByNamePropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGCurveHeadersClassCount(QueryInfo query, object[] args)
            {
                CQGCurveHeaders CountObj = (CQGCurveHeaders)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCurveHeadersClassItem(QueryInfo query, object[] args)
            {
                CQGCurveHeaders ItemObj = (CQGCurveHeaders)qObj;
                System.String ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGCurvesClassCount(QueryInfo query, object[] args)
            {
                CQGCurves CountObj = (CQGCurves)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCurvesClassItem(QueryInfo query, object[] args)
            {
                CQGCurves ItemObj = (CQGCurves)qObj;
                System.Double ItemPropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGCurvesClassTimestamp(QueryInfo query, object[] args)
            {
                CQGCurves TimestampObj = (CQGCurves)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGCurvesClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGCurves TimestampOffsetObj = (CQGCurves)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGCustomStudiesClassCount(QueryInfo query, object[] args)
            {
                CQGCustomStudies CountObj = (CQGCustomStudies)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCustomStudiesClassItem(QueryInfo query, object[] args)
            {
                CQGCustomStudies ItemObj = (CQGCustomStudies)qObj;
                CQG.CQGCustomStudy ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCustomStudiesClassItemById(QueryInfo query, object[] args)
            {
                CQGCustomStudies ItemByIdObj = (CQGCustomStudies)qObj;
                CQG.CQGCustomStudy ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGCustomStudyClassCount(QueryInfo query, object[] args)
            {
                CQGCustomStudy CountObj = (CQGCustomStudy)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCustomStudyClassCurveHeaders(QueryInfo query, object[] args)
            {
                CQGCustomStudy CurveHeadersObj = (CQGCustomStudy)qObj;
                CQG.CQGCurveHeaders CurveHeadersPropV = CurveHeadersObj.CurveHeaders;
                var CurveHeadersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurveHeadersPropKey, CurveHeadersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveHeadersPropKey));
            }

            private void GetCQGCustomStudyClassDefinition(QueryInfo query, object[] args)
            {
                CQGCustomStudy DefinitionObj = (CQGCustomStudy)qObj;
                CQG.CQGCustomStudyDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGCustomStudyClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGCustomStudy EndTimestampObj = (CQGCustomStudy)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGCustomStudyClassId(QueryInfo query, object[] args)
            {
                CQGCustomStudy IdObj = (CQGCustomStudy)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGCustomStudyClassItem(QueryInfo query, object[] args)
            {
                CQGCustomStudy ItemObj = (CQGCustomStudy)qObj;
                CQG.CQGCurves ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCustomStudyClassLastError(QueryInfo query, object[] args)
            {
                CQGCustomStudy LastErrorObj = (CQGCustomStudy)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGCustomStudyClassRequest(QueryInfo query, object[] args)
            {
                CQGCustomStudy RequestObj = (CQGCustomStudy)qObj;
                CQG.CQGCustomStudyRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGCustomStudyClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGCustomStudy StartTimestampObj = (CQGCustomStudy)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGCustomStudyClassStatus(QueryInfo query, object[] args)
            {
                CQGCustomStudy StatusObj = (CQGCustomStudy)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGCustomStudyClassTag(QueryInfo query, object[] args)
            {
                CQGCustomStudy TagObj = (CQGCustomStudy)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGCustomStudyDefinitionClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition AbbreviationObj = (CQGCustomStudyDefinition)qObj;
                System.String AbbreviationPropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationPropV));
            }

            private void GetCQGCustomStudyDefinitionClassCurveDefinitions(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition CurveDefinitionsObj = (CQGCustomStudyDefinition)qObj;
                CQG.CQGCurveDefinitions CurveDefinitionsPropV = CurveDefinitionsObj.CurveDefinitions;
                var CurveDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurveDefinitionsPropKey, CurveDefinitionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveDefinitionsPropKey));
            }

            private void GetCQGCustomStudyDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition NameObj = (CQGCustomStudyDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGCustomStudyDefinitionClassParameterDefinitions(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition ParameterDefinitionsObj = (CQGCustomStudyDefinition)qObj;
                CQG.CQGParameterDefinitions ParameterDefinitionsPropV = ParameterDefinitionsObj.ParameterDefinitions;
                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
            }

            private void GetCQGCustomStudyDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions CountObj = (CQGCustomStudyDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGCustomStudyDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions ItemObj = (CQGCustomStudyDefinitions)qObj;
                CQG.CQGCustomStudyDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGCustomStudyDefinitionsClassItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions ItemByAbbreviationObj = (CQGCustomStudyDefinitions)qObj;
                CQG.CQGCustomStudyDefinition ItemByAbbreviationPropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
            }

            private void GetCQGCustomStudyRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest BaseExpressionObj = (CQGCustomStudyRequest)qObj;
                System.String BaseExpressionPropV = BaseExpressionObj.BaseExpression;
                var BaseExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionPropV));
            }

            private void GetCQGCustomStudyRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ContinuationObj = (CQGCustomStudyRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGCustomStudyRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest DaysBeforeExpirationObj = (CQGCustomStudyRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGCustomStudyRequestClassDefinition(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest DefinitionObj = (CQGCustomStudyRequest)qObj;
                CQG.CQGCustomStudyDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGCustomStudyRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest EqualizeClosesObj = (CQGCustomStudyRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGCustomStudyRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest HistoricalPeriodObj = (CQGCustomStudyRequest)qObj;
                CQG.eHistoricalPeriod HistoricalPeriodPropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodPropV));
            }

            private void GetCQGCustomStudyRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IncludeEndObj = (CQGCustomStudyRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGCustomStudyRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IntradayPeriodObj = (CQGCustomStudyRequest)qObj;
                System.Int32 IntradayPeriodPropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodPropV));
            }

            private void GetCQGCustomStudyRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ParameterObj = (CQGCustomStudyRequest)qObj;
                System.Object ParameterPropV = ParameterObj.Parameter[(System.Object)args[0]];
                var ParameterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterPropV));
            }

            private void GetCQGCustomStudyRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RangeEndObj = (CQGCustomStudyRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGCustomStudyRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RangeStartObj = (CQGCustomStudyRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGCustomStudyRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RecalcPeriodObj = (CQGCustomStudyRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGCustomStudyRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SessionFlagsObj = (CQGCustomStudyRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGCustomStudyRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SessionsFilterObj = (CQGCustomStudyRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGCustomStudyRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SubscriptionLevelObj = (CQGCustomStudyRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGCustomStudyRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest UpdatesEnabledObj = (CQGCustomStudyRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGDataSourceClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSource AbbreviationObj = (CQGDataSource)qObj;
                System.String AbbreviationPropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationPropV));
            }

            private void GetCQGDataSourceClassName(QueryInfo query, object[] args)
            {
                CQGDataSource NameObj = (CQGDataSource)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGDataSourceClassStatus(QueryInfo query, object[] args)
            {
                CQGDataSource StatusObj = (CQGDataSource)qObj;
                CQG.eDataSourceStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGDataSourceClassSymbolTypes(QueryInfo query, object[] args)
            {
                CQGDataSource SymbolTypesObj = (CQGDataSource)qObj;
                CQG.eSymbolType SymbolTypesPropV = SymbolTypesObj.SymbolTypes;
                var SymbolTypesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolTypesPropKey, value: SymbolTypesPropV));
            }

            private void GetCQGDataSourcesClassCount(QueryInfo query, object[] args)
            {
                CQGDataSources CountObj = (CQGDataSources)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGDataSourcesClassItem(QueryInfo query, object[] args)
            {
                CQGDataSources ItemObj = (CQGDataSources)qObj;
                CQG.CQGDataSource ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGDataSourcesClassItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSources ItemByAbbreviationObj = (CQGDataSources)qObj;
                CQG.CQGDataSource ItemByAbbreviationPropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
            }

            private void GetCQGDataSourceSymbolClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbol AbbreviationObj = (CQGDataSourceSymbol)qObj;
                System.String AbbreviationPropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationPropV));
            }

            private void GetCQGDataSourceSymbolClassDescription(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbol DescriptionObj = (CQGDataSourceSymbol)qObj;
                System.String DescriptionPropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionPropV));
            }

            private void GetCQGDataSourceSymbolClassType(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbol TypeObj = (CQGDataSourceSymbol)qObj;
                CQG.eSymbolType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGDataSourceSymbolsClassCount(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols CountObj = (CQGDataSourceSymbols)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGDataSourceSymbolsClassDataSourceAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols DataSourceAbbreviationObj = (CQGDataSourceSymbols)qObj;
                System.String DataSourceAbbreviationPropV = DataSourceAbbreviationObj.DataSourceAbbreviation;
                var DataSourceAbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSourceAbbreviationPropKey, value: DataSourceAbbreviationPropV));
            }

            private void GetCQGDataSourceSymbolsClassItem(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols ItemObj = (CQGDataSourceSymbols)qObj;
                CQG.CQGDataSourceSymbol ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGDOMQuotesClassCount(QueryInfo query, object[] args)
            {
                CQGDOMQuotes CountObj = (CQGDOMQuotes)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGDOMQuotesClassItem(QueryInfo query, object[] args)
            {
                CQGDOMQuotes ItemObj = (CQGDOMQuotes)qObj;
                CQG.CQGQuote ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGDOMQuotesClassItemByPrice(QueryInfo query, object[] args)
            {
                CQGDOMQuotes ItemByPriceObj = (CQGDOMQuotes)qObj;
                CQG.CQGQuote ItemByPricePropV = ItemByPriceObj.ItemByPrice[(System.Double)args[0],(System.Boolean)args[1]];
                var ItemByPricePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByPricePropKey, ItemByPricePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByPricePropKey));
            }

            private void GetCQGEnvironmentClassCEL(QueryInfo query, object[] args)
            {
                CQGEnvironment CELObj = (CQGEnvironment)qObj;
                CQG.CQGCEL CELPropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGEnvironmentClassCELVersion(QueryInfo query, object[] args)
            {
                CQGEnvironment CELVersionObj = (CQGEnvironment)qObj;
                System.String CELVersionPropV = CELVersionObj.CELVersion;
                var CELVersionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELVersionPropKey, value: CELVersionPropV));
            }

            private void GetCQGEnvironmentClassCQGSerialNumber(QueryInfo query, object[] args)
            {
                CQGEnvironment CQGSerialNumberObj = (CQGEnvironment)qObj;
                System.Int32 CQGSerialNumberPropV = CQGSerialNumberObj.CQGSerialNumber;
                var CQGSerialNumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CQGSerialNumberPropKey, value: CQGSerialNumberPropV));
            }

            private void GetCQGEnvironmentClassCQGVersion(QueryInfo query, object[] args)
            {
                CQGEnvironment CQGVersionObj = (CQGEnvironment)qObj;
                System.String CQGVersionPropV = CQGVersionObj.CQGVersion;
                var CQGVersionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CQGVersionPropKey, value: CQGVersionPropV));
            }

            private void GetCQGEnvironmentClassDataConnectionStatus(QueryInfo query, object[] args)
            {
                CQGEnvironment DataConnectionStatusObj = (CQGEnvironment)qObj;
                CQG.eConnectionStatus DataConnectionStatusPropV = DataConnectionStatusObj.DataConnectionStatus;
                var DataConnectionStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataConnectionStatusPropKey, value: DataConnectionStatusPropV));
            }

            private void GetCQGEnvironmentClassGWConnectionStatus(QueryInfo query, object[] args)
            {
                CQGEnvironment GWConnectionStatusObj = (CQGEnvironment)qObj;
                CQG.eConnectionStatus GWConnectionStatusPropV = GWConnectionStatusObj.GWConnectionStatus;
                var GWConnectionStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWConnectionStatusPropKey, value: GWConnectionStatusPropV));
            }

            private void GetCQGEnvironmentClassGWLogonName(QueryInfo query, object[] args)
            {
                CQGEnvironment GWLogonNameObj = (CQGEnvironment)qObj;
                System.String GWLogonNamePropV = GWLogonNameObj.GWLogonName;
                var GWLogonNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWLogonNamePropKey, value: GWLogonNamePropV));
            }

            private void GetCQGEnvironmentClassLastError(QueryInfo query, object[] args)
            {
                CQGEnvironment LastErrorObj = (CQGEnvironment)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGEnvironmentClassLineTime(QueryInfo query, object[] args)
            {
                CQGEnvironment LineTimeObj = (CQGEnvironment)qObj;
                System.DateTime LineTimePropV = LineTimeObj.LineTime;
                var LineTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LineTimePropKey, value: LineTimePropV));
            }

            private void GetCQGEnvironmentClassLocalTime(QueryInfo query, object[] args)
            {
                CQGEnvironment LocalTimeObj = (CQGEnvironment)qObj;
                System.DateTime LocalTimePropV = LocalTimeObj.LocalTime;
                var LocalTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LocalTimePropKey, value: LocalTimePropV));
            }

            private void GetCQGEnvironmentClassMessagesPending(QueryInfo query, object[] args)
            {
                CQGEnvironment MessagesPendingObj = (CQGEnvironment)qObj;
                System.Int32 MessagesPendingPropV = MessagesPendingObj.MessagesPending;
                var MessagesPendingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MessagesPendingPropKey, value: MessagesPendingPropV));
            }

            private void GetCQGEnvironmentClassOrdersPending(QueryInfo query, object[] args)
            {
                CQGEnvironment OrdersPendingObj = (CQGEnvironment)qObj;
                System.Int32 OrdersPendingPropV = OrdersPendingObj.OrdersPending;
                var OrdersPendingPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPendingPropKey, value: OrdersPendingPropV));
            }

            private void GetCQGEnvironmentClassRemoteOpenAPISession(QueryInfo query, object[] args)
            {
                CQGEnvironment RemoteOpenAPISessionObj = (CQGEnvironment)qObj;
                CQG.CQGRemoteOpenAPISession RemoteOpenAPISessionPropV = RemoteOpenAPISessionObj.RemoteOpenAPISession;
                var RemoteOpenAPISessionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RemoteOpenAPISessionPropKey, RemoteOpenAPISessionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPISessionPropKey));
            }

            private void GetCQGErrorClassCode(QueryInfo query, object[] args)
            {
                CQGError CodeObj = (CQGError)qObj;
                System.Int32 CodePropV = CodeObj.Code;
                var CodePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CodePropKey, value: CodePropV));
            }

            private void GetCQGErrorClassDescription(QueryInfo query, object[] args)
            {
                CQGError DescriptionObj = (CQGError)qObj;
                System.String DescriptionPropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionPropV));
            }

            private void GetCQGErrorClassOwner(QueryInfo query, object[] args)
            {
                CQGError OwnerObj = (CQGError)qObj;
                System.Object OwnerPropV = OwnerObj.Owner;
                var OwnerPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OwnerPropKey, value: OwnerPropV));
            }

            private void GetCQGExchangesClassCount(QueryInfo query, object[] args)
            {
                CQGExchanges CountObj = (CQGExchanges)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGExchangesClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGExchanges GWAccountIDObj = (CQGExchanges)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGExchangesClassItem(QueryInfo query, object[] args)
            {
                CQGExchanges ItemObj = (CQGExchanges)qObj;
                System.String ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGExecutionPatternClassParameters(QueryInfo query, object[] args)
            {
                CQGExecutionPattern ParametersObj = (CQGExecutionPattern)qObj;
                CQG.CQGExecutionPatternParameters ParametersPropV = ParametersObj.Parameters;
                var ParametersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParametersPropKey, ParametersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParametersPropKey));
            }

            private void GetCQGExecutionPatternClassPatternString(QueryInfo query, object[] args)
            {
                CQGExecutionPattern PatternStringObj = (CQGExecutionPattern)qObj;
                System.String PatternStringPropV = PatternStringObj.PatternString;
                var PatternStringPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PatternStringPropKey, value: PatternStringPropV));
            }

            private void GetCQGExecutionPatternParameterClassName(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter NameObj = (CQGExecutionPatternParameter)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGExecutionPatternParameterClassParameters(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter ParametersObj = (CQGExecutionPatternParameter)qObj;
                CQG.CQGExecutionPatternParameters ParametersPropV = ParametersObj.Parameters;
                var ParametersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParametersPropKey, ParametersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParametersPropKey));
            }

            private void GetCQGExecutionPatternParameterClassType(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter TypeObj = (CQGExecutionPatternParameter)qObj;
                CQG.eExecutionPatternParameterType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGExecutionPatternParameterClassValue(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter ValueObj = (CQGExecutionPatternParameter)qObj;
                System.String ValuePropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuePropV));
            }

            private void GetCQGExecutionPatternParametersClassCount(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters CountObj = (CQGExecutionPatternParameters)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGExecutionPatternParametersClassItem(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters ItemObj = (CQGExecutionPatternParameters)qObj;
                CQG.CQGExecutionPatternParameter ItemPropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGExpressionClassCount(QueryInfo query, object[] args)
            {
                CQGExpression CountObj = (CQGExpression)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGExpressionClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGExpression EndTimestampObj = (CQGExpression)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGExpressionClassId(QueryInfo query, object[] args)
            {
                CQGExpression IdObj = (CQGExpression)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGExpressionClassItem(QueryInfo query, object[] args)
            {
                CQGExpression ItemObj = (CQGExpression)qObj;
                CQG.CQGExpressionOutputs ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGExpressionClassLastError(QueryInfo query, object[] args)
            {
                CQGExpression LastErrorObj = (CQGExpression)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGExpressionClassOutputHeaders(QueryInfo query, object[] args)
            {
                CQGExpression OutputHeadersObj = (CQGExpression)qObj;
                CQG.CQGExpressionOutputHeaders OutputHeadersPropV = OutputHeadersObj.OutputHeaders;
                var OutputHeadersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OutputHeadersPropKey, OutputHeadersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OutputHeadersPropKey));
            }

            private void GetCQGExpressionClassRequest(QueryInfo query, object[] args)
            {
                CQGExpression RequestObj = (CQGExpression)qObj;
                CQG.CQGExpressionRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGExpressionClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGExpression StartTimestampObj = (CQGExpression)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGExpressionClassStatus(QueryInfo query, object[] args)
            {
                CQGExpression StatusObj = (CQGExpression)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGExpressionClassTag(QueryInfo query, object[] args)
            {
                CQGExpression TagObj = (CQGExpression)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGExpressionOutputHeadersClassCount(QueryInfo query, object[] args)
            {
                CQGExpressionOutputHeaders CountObj = (CQGExpressionOutputHeaders)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGExpressionOutputHeadersClassItem(QueryInfo query, object[] args)
            {
                CQGExpressionOutputHeaders ItemObj = (CQGExpressionOutputHeaders)qObj;
                System.String ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGExpressionOutputsClassCount(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs CountObj = (CQGExpressionOutputs)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGExpressionOutputsClassItem(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs ItemObj = (CQGExpressionOutputs)qObj;
                System.Double ItemPropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGExpressionOutputsClassTimestamp(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs TimestampObj = (CQGExpressionOutputs)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGExpressionOutputsClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs TimestampOffsetObj = (CQGExpressionOutputs)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGExpressionRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGExpressionRequest ContinuationObj = (CQGExpressionRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGExpressionRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGExpressionRequest DaysBeforeExpirationObj = (CQGExpressionRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGExpressionRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGExpressionRequest EqualizeClosesObj = (CQGExpressionRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGExpressionRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest HistoricalPeriodObj = (CQGExpressionRequest)qObj;
                CQG.eHistoricalPeriod HistoricalPeriodPropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodPropV));
            }

            private void GetCQGExpressionRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGExpressionRequest IncludeEndObj = (CQGExpressionRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGExpressionRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest IntradayPeriodObj = (CQGExpressionRequest)qObj;
                System.Int32 IntradayPeriodPropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodPropV));
            }

            private void GetCQGExpressionRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RangeEndObj = (CQGExpressionRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGExpressionRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RangeStartObj = (CQGExpressionRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGExpressionRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RecalcPeriodObj = (CQGExpressionRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGExpressionRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SessionFlagsObj = (CQGExpressionRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGExpressionRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SessionsFilterObj = (CQGExpressionRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGExpressionRequestClassSubExpression(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SubExpressionObj = (CQGExpressionRequest)qObj;
                System.String SubExpressionPropV = SubExpressionObj.SubExpression[(System.Int32)args[0]];
                var SubExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubExpressionPropKey, value: SubExpressionPropV));
            }

            private void GetCQGExpressionRequestClassSubExpressionCount(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SubExpressionCountObj = (CQGExpressionRequest)qObj;
                System.Int32 SubExpressionCountPropV = SubExpressionCountObj.SubExpressionCount;
                var SubExpressionCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubExpressionCountPropKey, value: SubExpressionCountPropV));
            }

            private void GetCQGExpressionRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SubscriptionLevelObj = (CQGExpressionRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGExpressionRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGExpressionRequest UpdatesEnabledObj = (CQGExpressionRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGExpressionsClassCount(QueryInfo query, object[] args)
            {
                CQGExpressions CountObj = (CQGExpressions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGExpressionsClassItem(QueryInfo query, object[] args)
            {
                CQGExpressions ItemObj = (CQGExpressions)qObj;
                CQG.CQGExpression ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGExpressionsClassItemById(QueryInfo query, object[] args)
            {
                CQGExpressions ItemByIdObj = (CQGExpressions)qObj;
                CQG.CQGExpression ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGFillClassGWTradesCount(QueryInfo query, object[] args)
            {
                CQGFill GWTradesCountObj = (CQGFill)qObj;
                System.Int32 GWTradesCountPropV = GWTradesCountObj.GWTradesCount[(System.Int32)args[0]];
                var GWTradesCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWTradesCountPropKey, value: GWTradesCountPropV));
            }

            private void GetCQGFillClassId(QueryInfo query, object[] args)
            {
                CQGFill IdObj = (CQGFill)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGFillClassLegCount(QueryInfo query, object[] args)
            {
                CQGFill LegCountObj = (CQGFill)qObj;
                System.Int32 LegCountPropV = LegCountObj.LegCount;
                var LegCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LegCountPropKey, value: LegCountPropV));
            }

            private void GetCQGFillClassOrder(QueryInfo query, object[] args)
            {
                CQGFill OrderObj = (CQGFill)qObj;
                CQG.CQGOrder OrderPropV = OrderObj.Order;
                var OrderPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
            }

            private void GetCQGFillClassRefFillId(QueryInfo query, object[] args)
            {
                CQGFill RefFillIdObj = (CQGFill)qObj;
                System.String RefFillIdPropV = RefFillIdObj.RefFillId;
                var RefFillIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RefFillIdPropKey, value: RefFillIdPropV));
            }

            private void GetCQGFillClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGFill ServerTimestampObj = (CQGFill)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGFillClassStatus(QueryInfo query, object[] args)
            {
                CQGFill StatusObj = (CQGFill)qObj;
                CQG.eFillStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGFillClassTimestamp(QueryInfo query, object[] args)
            {
                CQGFill TimestampObj = (CQGFill)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGFillsClassCount(QueryInfo query, object[] args)
            {
                CQGFills CountObj = (CQGFills)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGFillsClassItem(QueryInfo query, object[] args)
            {
                CQGFills ItemObj = (CQGFills)qObj;
                CQG.CQGFill ItemPropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGFillsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGFills ItemByIndexObj = (CQGFills)qObj;
                CQG.CQGFill ItemByIndexPropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGGWTradeClassAggressive(QueryInfo query, object[] args)
            {
                CQGGWTrade AggressiveObj = (CQGGWTrade)qObj;
                System.Boolean AggressivePropV = AggressiveObj.Aggressive;
                var AggressivePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggressivePropKey, value: AggressivePropV));
            }

            private void GetCQGGWTradeClassCurrency(QueryInfo query, object[] args)
            {
                CQGGWTrade CurrencyObj = (CQGGWTrade)qObj;
                System.String CurrencyPropV = CurrencyObj.Currency;
                var CurrencyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyPropKey, value: CurrencyPropV));
            }

            private void GetCQGGWTradeClassDisplayPrice(QueryInfo query, object[] args)
            {
                CQGGWTrade DisplayPriceObj = (CQGGWTrade)qObj;
                System.String DisplayPricePropV = DisplayPriceObj.DisplayPrice;
                var DisplayPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DisplayPricePropKey, value: DisplayPricePropV));
            }

            private void GetCQGGWTradeClassExchangeTradeDate(QueryInfo query, object[] args)
            {
                CQGGWTrade ExchangeTradeDateObj = (CQGGWTrade)qObj;
                System.DateTime ExchangeTradeDatePropV = ExchangeTradeDateObj.ExchangeTradeDate;
                var ExchangeTradeDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeTradeDatePropKey, value: ExchangeTradeDatePropV));
            }

            private void GetCQGGWTradeClassFill(QueryInfo query, object[] args)
            {
                CQGGWTrade FillObj = (CQGGWTrade)qObj;
                CQG.CQGFill FillPropV = FillObj.Fill;
                var FillPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(FillPropKey, FillPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillPropKey));
            }

            private void GetCQGGWTradeClassId(QueryInfo query, object[] args)
            {
                CQGGWTrade IdObj = (CQGGWTrade)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGGWTradeClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGGWTrade InstrumentNameObj = (CQGGWTrade)qObj;
                System.String InstrumentNamePropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamePropV));
            }

            private void GetCQGGWTradeClassLeg(QueryInfo query, object[] args)
            {
                CQGGWTrade LegObj = (CQGGWTrade)qObj;
                System.Int32 LegPropV = LegObj.Leg;
                var LegPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LegPropKey, value: LegPropV));
            }

            private void GetCQGGWTradeClassPrice(QueryInfo query, object[] args)
            {
                CQGGWTrade PriceObj = (CQGGWTrade)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGGWTradeClassQuantity(QueryInfo query, object[] args)
            {
                CQGGWTrade QuantityObj = (CQGGWTrade)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGGWTradeClassSide(QueryInfo query, object[] args)
            {
                CQGGWTrade SideObj = (CQGGWTrade)qObj;
                CQG.eOrderSide SidePropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidePropV));
            }

            private void GetCQGGWTradeClassStatementDate(QueryInfo query, object[] args)
            {
                CQGGWTrade StatementDateObj = (CQGGWTrade)qObj;
                System.DateTime StatementDatePropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatePropV));
            }

            private void GetCQGGWTradesClassCount(QueryInfo query, object[] args)
            {
                CQGGWTrades CountObj = (CQGGWTrades)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGGWTradesClassItem(QueryInfo query, object[] args)
            {
                CQGGWTrades ItemObj = (CQGGWTrades)qObj;
                CQG.CQGGWTrade ItemPropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGGWTradesClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGGWTrades ItemByIndexObj = (CQGGWTrades)qObj;
                CQG.CQGGWTrade ItemByIndexPropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGHistoricalSessionsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest RangeEndObj = (CQGHistoricalSessionsRequest)qObj;
                System.DateTime RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGHistoricalSessionsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest RangeStartObj = (CQGHistoricalSessionsRequest)qObj;
                System.DateTime RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGHistoricalSessionsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest SymbolObj = (CQGHistoricalSessionsRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGHistoricalSessionsRequestClassType(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest TypeObj = (CQGHistoricalSessionsRequest)qObj;
                CQG.eHistoricalSessionsRequestType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGHolidayClassHolidayDate(QueryInfo query, object[] args)
            {
                CQGHoliday HolidayDateObj = (CQGHoliday)qObj;
                System.DateTime HolidayDatePropV = HolidayDateObj.HolidayDate;
                var HolidayDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HolidayDatePropKey, value: HolidayDatePropV));
            }

            private void GetCQGHolidayClassIsDaily(QueryInfo query, object[] args)
            {
                CQGHoliday IsDailyObj = (CQGHoliday)qObj;
                System.Boolean IsDailyPropV = IsDailyObj.IsDaily;
                var IsDailyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsDailyPropKey, value: IsDailyPropV));
            }

            private void GetCQGHolidayClassSessionMask(QueryInfo query, object[] args)
            {
                CQGHoliday SessionMaskObj = (CQGHoliday)qObj;
                CQG.eSessionWeekDays SessionMaskPropV = SessionMaskObj.SessionMask;
                var SessionMaskPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionMaskPropKey, value: SessionMaskPropV));
            }

            private void GetCQGHolidaysClassCount(QueryInfo query, object[] args)
            {
                CQGHolidays CountObj = (CQGHolidays)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGHolidaysClassItem(QueryInfo query, object[] args)
            {
                CQGHolidays ItemObj = (CQGHolidays)qObj;
                CQG.CQGHoliday ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGHolidaysClassSessions(QueryInfo query, object[] args)
            {
                CQGHolidays SessionsObj = (CQGHolidays)qObj;
                CQG.CQGSessions SessionsPropV = SessionsObj.Sessions;
                var SessionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SessionsPropKey, SessionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsPropKey));
            }

            private void GetCQGInstrumentClassAsk(QueryInfo query, object[] args)
            {
                CQGInstrument AskObj = (CQGInstrument)qObj;
                CQG.CQGQuote AskPropV = AskObj.Ask;
                var AskPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AskPropKey, AskPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskPropKey));
            }

            private void GetCQGInstrumentClassBBAType(QueryInfo query, object[] args)
            {
                CQGInstrument BBATypeObj = (CQGInstrument)qObj;
                CQG.eDOMandBBAType BBATypePropV = BBATypeObj.BBAType;
                var BBATypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BBATypePropKey, value: BBATypePropV));
            }

            private void GetCQGInstrumentClassBid(QueryInfo query, object[] args)
            {
                CQGInstrument BidObj = (CQGInstrument)qObj;
                CQG.CQGQuote BidPropV = BidObj.Bid;
                var BidPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(BidPropKey, BidPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidPropKey));
            }

            private void GetCQGInstrumentClassCEL(QueryInfo query, object[] args)
            {
                CQGInstrument CELObj = (CQGInstrument)qObj;
                CQG.CQGCEL CELPropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGInstrumentClassCommodity(QueryInfo query, object[] args)
            {
                CQGInstrument CommodityObj = (CQGInstrument)qObj;
                System.String CommodityPropV = CommodityObj.Commodity;
                var CommodityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityPropKey, value: CommodityPropV));
            }

            private void GetCQGInstrumentClassCountry(QueryInfo query, object[] args)
            {
                CQGInstrument CountryObj = (CQGInstrument)qObj;
                System.String CountryPropV = CountryObj.Country;
                var CountryPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountryPropKey, value: CountryPropV));
            }

            private void GetCQGInstrumentClassCurrency(QueryInfo query, object[] args)
            {
                CQGInstrument CurrencyObj = (CQGInstrument)qObj;
                System.String CurrencyPropV = CurrencyObj.Currency;
                var CurrencyPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyPropKey, value: CurrencyPropV));
            }

            private void GetCQGInstrumentClassDataSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGInstrument DataSubscriptionLevelObj = (CQGInstrument)qObj;
                CQG.eDataSubscriptionLevel DataSubscriptionLevelPropV = DataSubscriptionLevelObj.DataSubscriptionLevel;
                var DataSubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSubscriptionLevelPropKey, value: DataSubscriptionLevelPropV));
            }

            private void GetCQGInstrumentClassDescription(QueryInfo query, object[] args)
            {
                CQGInstrument DescriptionObj = (CQGInstrument)qObj;
                System.String DescriptionPropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionPropV));
            }

            private void GetCQGInstrumentClassDOMAsks(QueryInfo query, object[] args)
            {
                CQGInstrument DOMAsksObj = (CQGInstrument)qObj;
                CQG.CQGDOMQuotes DOMAsksPropV = DOMAsksObj.DOMAsks;
                var DOMAsksPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DOMAsksPropKey, DOMAsksPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMAsksPropKey));
            }

            private void GetCQGInstrumentClassDOMBids(QueryInfo query, object[] args)
            {
                CQGInstrument DOMBidsObj = (CQGInstrument)qObj;
                CQG.CQGDOMQuotes DOMBidsPropV = DOMBidsObj.DOMBids;
                var DOMBidsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DOMBidsPropKey, DOMBidsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBidsPropKey));
            }

            private void GetCQGInstrumentClassDOMBookLimit(QueryInfo query, object[] args)
            {
                CQGInstrument DOMBookLimitObj = (CQGInstrument)qObj;
                System.Int32 DOMBookLimitPropV = DOMBookLimitObj.DOMBookLimit;
                var DOMBookLimitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBookLimitPropKey, value: DOMBookLimitPropV));
            }

            private void GetCQGInstrumentClassDOMStatus(QueryInfo query, object[] args)
            {
                CQGInstrument DOMStatusObj = (CQGInstrument)qObj;
                System.Boolean DOMStatusPropV = DOMStatusObj.DOMStatus;
                var DOMStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMStatusPropKey, value: DOMStatusPropV));
            }

            private void GetCQGInstrumentClassDTE(QueryInfo query, object[] args)
            {
                CQGInstrument DTEObj = (CQGInstrument)qObj;
                System.Int32 DTEPropV = DTEObj.DTE;
                var DTEPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DTEPropKey, value: DTEPropV));
            }

            private void GetCQGInstrumentClassExchangeAbbreviation(QueryInfo query, object[] args)
            {
                CQGInstrument ExchangeAbbreviationObj = (CQGInstrument)qObj;
                System.String ExchangeAbbreviationPropV = ExchangeAbbreviationObj.ExchangeAbbreviation;
                var ExchangeAbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeAbbreviationPropKey, value: ExchangeAbbreviationPropV));
            }

            private void GetCQGInstrumentClassExchangeID(QueryInfo query, object[] args)
            {
                CQGInstrument ExchangeIDObj = (CQGInstrument)qObj;
                System.Int32 ExchangeIDPropV = ExchangeIDObj.ExchangeID;
                var ExchangeIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeIDPropKey, value: ExchangeIDPropV));
            }

            private void GetCQGInstrumentClassExpirationDate(QueryInfo query, object[] args)
            {
                CQGInstrument ExpirationDateObj = (CQGInstrument)qObj;
                System.DateTime ExpirationDatePropV = ExpirationDateObj.ExpirationDate;
                var ExpirationDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExpirationDatePropKey, value: ExpirationDatePropV));
            }

            private void GetCQGInstrumentClassFullName(QueryInfo query, object[] args)
            {
                CQGInstrument FullNameObj = (CQGInstrument)qObj;
                System.String FullNamePropV = FullNameObj.FullName;
                var FullNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FullNamePropKey, value: FullNamePropV));
            }

            private void GetCQGInstrumentClassInitialMargin(QueryInfo query, object[] args)
            {
                CQGInstrument InitialMarginObj = (CQGInstrument)qObj;
                System.Double InitialMarginPropV = InitialMarginObj.InitialMargin;
                var InitialMarginPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InitialMarginPropKey, value: InitialMarginPropV));
            }

            private void GetCQGInstrumentClassInstrumentID(QueryInfo query, object[] args)
            {
                CQGInstrument InstrumentIDObj = (CQGInstrument)qObj;
                System.Int32 InstrumentIDPropV = InstrumentIDObj.InstrumentID;
                var InstrumentIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentIDPropKey, value: InstrumentIDPropV));
            }

            private void GetCQGInstrumentClassInstrumentType(QueryInfo query, object[] args)
            {
                CQGInstrument InstrumentTypeObj = (CQGInstrument)qObj;
                CQG.eInstrumentType InstrumentTypePropV = InstrumentTypeObj.InstrumentType;
                var InstrumentTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentTypePropKey, value: InstrumentTypePropV));
            }

            private void GetCQGInstrumentClassIsDownTick(QueryInfo query, object[] args)
            {
                CQGInstrument IsDownTickObj = (CQGInstrument)qObj;
                System.Boolean IsDownTickPropV = IsDownTickObj.IsDownTick;
                var IsDownTickPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsDownTickPropKey, value: IsDownTickPropV));
            }

            private void GetCQGInstrumentClassIsFastMarket(QueryInfo query, object[] args)
            {
                CQGInstrument IsFastMarketObj = (CQGInstrument)qObj;
                System.Boolean IsFastMarketPropV = IsFastMarketObj.IsFastMarket;
                var IsFastMarketPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsFastMarketPropKey, value: IsFastMarketPropV));
            }

            private void GetCQGInstrumentClassIsUpTick(QueryInfo query, object[] args)
            {
                CQGInstrument IsUpTickObj = (CQGInstrument)qObj;
                System.Boolean IsUpTickPropV = IsUpTickObj.IsUpTick;
                var IsUpTickPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsUpTickPropKey, value: IsUpTickPropV));
            }

            private void GetCQGInstrumentClassMaintenanceMargin(QueryInfo query, object[] args)
            {
                CQGInstrument MaintenanceMarginObj = (CQGInstrument)qObj;
                System.Double MaintenanceMarginPropV = MaintenanceMarginObj.MaintenanceMargin;
                var MaintenanceMarginPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaintenanceMarginPropKey, value: MaintenanceMarginPropV));
            }

            private void GetCQGInstrumentClassMonth(QueryInfo query, object[] args)
            {
                CQGInstrument MonthObj = (CQGInstrument)qObj;
                System.Int32 MonthPropV = MonthObj.Month;
                var MonthPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MonthPropKey, value: MonthPropV));
            }

            private void GetCQGInstrumentClassMonthChar(QueryInfo query, object[] args)
            {
                CQGInstrument MonthCharObj = (CQGInstrument)qObj;
                System.String MonthCharPropV = MonthCharObj.MonthChar;
                var MonthCharPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MonthCharPropKey, value: MonthCharPropV));
            }

            private void GetCQGInstrumentClassNetChange(QueryInfo query, object[] args)
            {
                CQGInstrument NetChangeObj = (CQGInstrument)qObj;
                System.Double NetChangePropV = NetChangeObj.NetChange;
                var NetChangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NetChangePropKey, value: NetChangePropV));
            }

            private void GetCQGInstrumentClassPreferredSessionsName(QueryInfo query, object[] args)
            {
                CQGInstrument PreferredSessionsNameObj = (CQGInstrument)qObj;
                System.String PreferredSessionsNamePropV = PreferredSessionsNameObj.PreferredSessionsName;
                var PreferredSessionsNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreferredSessionsNamePropKey, value: PreferredSessionsNamePropV));
            }

            private void GetCQGInstrumentClassProperties(QueryInfo query, object[] args)
            {
                CQGInstrument PropertiesObj = (CQGInstrument)qObj;
                CQG.CQGInstrumentProperties PropertiesPropV = PropertiesObj.Properties;
                var PropertiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
            }

            private void GetCQGInstrumentClassPropertyLevel(QueryInfo query, object[] args)
            {
                CQGInstrument PropertyLevelObj = (CQGInstrument)qObj;
                CQG.ePropertySubscriptionLevel PropertyLevelPropV = PropertyLevelObj.PropertyLevel;
                var PropertyLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertyLevelPropKey, value: PropertyLevelPropV));
            }

            private void GetCQGInstrumentClassQuoteLevel(QueryInfo query, object[] args)
            {
                CQGInstrument QuoteLevelObj = (CQGInstrument)qObj;
                CQG.eQuoteSubscriptionLevel QuoteLevelPropV = QuoteLevelObj.QuoteLevel;
                var QuoteLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuoteLevelPropKey, value: QuoteLevelPropV));
            }

            private void GetCQGInstrumentClassQuotes(QueryInfo query, object[] args)
            {
                CQGInstrument QuotesObj = (CQGInstrument)qObj;
                CQG.CQGQuotes QuotesPropV = QuotesObj.Quotes;
                var QuotesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(QuotesPropKey, QuotesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuotesPropKey));
            }

            private void GetCQGInstrumentClassScale(QueryInfo query, object[] args)
            {
                CQGInstrument ScaleObj = (CQGInstrument)qObj;
                System.Int16 ScalePropV = ScaleObj.Scale;
                var ScalePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ScalePropKey, value: ScalePropV));
            }

            private void GetCQGInstrumentClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGInstrument ServerTimestampObj = (CQGInstrument)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGInstrumentClassSessionMask(QueryInfo query, object[] args)
            {
                CQGInstrument SessionMaskObj = (CQGInstrument)qObj;
                System.Int32 SessionMaskPropV = SessionMaskObj.SessionMask;
                var SessionMaskPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionMaskPropKey, value: SessionMaskPropV));
            }

            private void GetCQGInstrumentClassSessionNumber(QueryInfo query, object[] args)
            {
                CQGInstrument SessionNumberObj = (CQGInstrument)qObj;
                System.Int32 SessionNumberPropV = SessionNumberObj.SessionNumber;
                var SessionNumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionNumberPropKey, value: SessionNumberPropV));
            }

            private void GetCQGInstrumentClassSessions(QueryInfo query, object[] args)
            {
                CQGInstrument SessionsObj = (CQGInstrument)qObj;
                CQG.CQGSessions SessionsPropV = SessionsObj.Sessions;
                var SessionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SessionsPropKey, SessionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsPropKey));
            }

            private void GetCQGInstrumentClassStrike(QueryInfo query, object[] args)
            {
                CQGInstrument StrikeObj = (CQGInstrument)qObj;
                System.Int32 StrikePropV = StrikeObj.Strike;
                var StrikePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrikePropKey, value: StrikePropV));
            }

            private void GetCQGInstrumentClassTag(QueryInfo query, object[] args)
            {
                CQGInstrument TagObj = (CQGInstrument)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGInstrumentClassTickSize(QueryInfo query, object[] args)
            {
                CQGInstrument TickSizeObj = (CQGInstrument)qObj;
                System.Double TickSizePropV = TickSizeObj.TickSize;
                var TickSizePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizePropKey, value: TickSizePropV));
            }

            private void GetCQGInstrumentClassTickSizeFractionDenominator(QueryInfo query, object[] args)
            {
                CQGInstrument TickSizeFractionDenominatorObj = (CQGInstrument)qObj;
                System.Int32 TickSizeFractionDenominatorPropV = TickSizeFractionDenominatorObj.TickSizeFractionDenominator;
                var TickSizeFractionDenominatorPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizeFractionDenominatorPropKey, value: TickSizeFractionDenominatorPropV));
            }

            private void GetCQGInstrumentClassTickSizeFractionNumerator(QueryInfo query, object[] args)
            {
                CQGInstrument TickSizeFractionNumeratorObj = (CQGInstrument)qObj;
                System.Int32 TickSizeFractionNumeratorPropV = TickSizeFractionNumeratorObj.TickSizeFractionNumerator;
                var TickSizeFractionNumeratorPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizeFractionNumeratorPropKey, value: TickSizeFractionNumeratorPropV));
            }

            private void GetCQGInstrumentClassTickValue(QueryInfo query, object[] args)
            {
                CQGInstrument TickValueObj = (CQGInstrument)qObj;
                System.Double TickValuePropV = TickValueObj.TickValue;
                var TickValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickValuePropKey, value: TickValuePropV));
            }

            private void GetCQGInstrumentClassTimestamp(QueryInfo query, object[] args)
            {
                CQGInstrument TimestampObj = (CQGInstrument)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGInstrumentClassTodayCTotalVolume(QueryInfo query, object[] args)
            {
                CQGInstrument TodayCTotalVolumeObj = (CQGInstrument)qObj;
                System.Double TodayCTotalVolumePropV = TodayCTotalVolumeObj.TodayCTotalVolume;
                var TodayCTotalVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TodayCTotalVolumePropKey, value: TodayCTotalVolumePropV));
            }

            private void GetCQGInstrumentClassTrade(QueryInfo query, object[] args)
            {
                CQGInstrument TradeObj = (CQGInstrument)qObj;
                CQG.CQGQuote TradePropV = TradeObj.Trade;
                var TradePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
            }

            private void GetCQGInstrumentClassUnderlyingInstrument(QueryInfo query, object[] args)
            {
                CQGInstrument UnderlyingInstrumentObj = (CQGInstrument)qObj;
                CQG.CQGInstrument UnderlyingInstrumentPropV = UnderlyingInstrumentObj.UnderlyingInstrument;
                var UnderlyingInstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(UnderlyingInstrumentPropKey, UnderlyingInstrumentPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnderlyingInstrumentPropKey));
            }

            private void GetCQGInstrumentClassUnderlyingInstrumentName(QueryInfo query, object[] args)
            {
                CQGInstrument UnderlyingInstrumentNameObj = (CQGInstrument)qObj;
                System.String UnderlyingInstrumentNamePropV = UnderlyingInstrumentNameObj.UnderlyingInstrumentName;
                var UnderlyingInstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnderlyingInstrumentNamePropKey, value: UnderlyingInstrumentNamePropV));
            }

            private void GetCQGInstrumentClassYCOI(QueryInfo query, object[] args)
            {
                CQGInstrument YCOIObj = (CQGInstrument)qObj;
                System.Double YCOIPropV = YCOIObj.YCOI;
                var YCOIPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YCOIPropKey, value: YCOIPropV));
            }

            private void GetCQGInstrumentClassYear(QueryInfo query, object[] args)
            {
                CQGInstrument YearObj = (CQGInstrument)qObj;
                System.Int32 YearPropV = YearObj.Year;
                var YearPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YearPropKey, value: YearPropV));
            }

            private void GetCQGInstrumentClassYearString(QueryInfo query, object[] args)
            {
                CQGInstrument YearStringObj = (CQGInstrument)qObj;
                System.String YearStringPropV = YearStringObj.YearString;
                var YearStringPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YearStringPropKey, value: YearStringPropV));
            }

            private void GetCQGInstrumentClassYesterdayCTotalVolume(QueryInfo query, object[] args)
            {
                CQGInstrument YesterdayCTotalVolumeObj = (CQGInstrument)qObj;
                System.Double YesterdayCTotalVolumePropV = YesterdayCTotalVolumeObj.YesterdayCTotalVolume;
                var YesterdayCTotalVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YesterdayCTotalVolumePropKey, value: YesterdayCTotalVolumePropV));
            }

            private void GetCQGInstrumentPropertiesClassCount(QueryInfo query, object[] args)
            {
                CQGInstrumentProperties CountObj = (CQGInstrumentProperties)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGInstrumentPropertiesClassItem(QueryInfo query, object[] args)
            {
                CQGInstrumentProperties ItemObj = (CQGInstrumentProperties)qObj;
                CQG.CQGInstrumentProperty ItemPropV = ItemObj[(CQG.eInstrumentProperty)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGInstrumentPropertyClassInstrument(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty InstrumentObj = (CQGInstrumentProperty)qObj;
                CQG.CQGInstrument InstrumentPropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGInstrumentPropertyClassName(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty NameObj = (CQGInstrumentProperty)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGInstrumentPropertyClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty ServerTimestampObj = (CQGInstrumentProperty)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGInstrumentPropertyClassTimestamp(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty TimestampObj = (CQGInstrumentProperty)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGInstrumentPropertyClassType(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty TypeObj = (CQGInstrumentProperty)qObj;
                CQG.eInstrumentProperty TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGInstrumentPropertyClassValue(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty ValueObj = (CQGInstrumentProperty)qObj;
                System.Object ValuePropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuePropV));
            }

            private void GetCQGInstrumentsClassCount(QueryInfo query, object[] args)
            {
                CQGInstruments CountObj = (CQGInstruments)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGInstrumentsClassItem(QueryInfo query, object[] args)
            {
                CQGInstruments ItemObj = (CQGInstruments)qObj;
                CQG.CQGInstrument ItemPropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGInstrumentsGroupClassId(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroup IdObj = (CQGInstrumentsGroup)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGInstrumentsGroupClassInstruments(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroup InstrumentsObj = (CQGInstrumentsGroup)qObj;
                CQG.CQGInstruments InstrumentsPropV = InstrumentsObj.Instruments;
                var InstrumentsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentsPropKey, InstrumentsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentsPropKey));
            }

            private void GetCQGInstrumentsGroupClassRequest(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroup RequestObj = (CQGInstrumentsGroup)qObj;
                CQG.CQGInstrumentsGroupRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGInstrumentsGroupRequestClassCommodity(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest CommodityObj = (CQGInstrumentsGroupRequest)qObj;
                System.String CommodityPropV = CommodityObj.Commodity;
                var CommodityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityPropKey, value: CommodityPropV));
            }

            private void GetCQGInstrumentsGroupRequestClassInstrumentTypes(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest InstrumentTypesObj = (CQGInstrumentsGroupRequest)qObj;
                CQG.eInstrumentType InstrumentTypesPropV = InstrumentTypesObj.InstrumentTypes;
                var InstrumentTypesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentTypesPropKey, value: InstrumentTypesPropV));
            }

            private void GetCQGInstrumentsGroupRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest RangeEndObj = (CQGInstrumentsGroupRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGInstrumentsGroupRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest RangeStartObj = (CQGInstrumentsGroupRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGInstrumentsGroupRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest SubscriptionLevelObj = (CQGInstrumentsGroupRequest)qObj;
                CQG.eGroupSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGInstrumentsGroupsClassCount(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroups CountObj = (CQGInstrumentsGroups)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGInstrumentsGroupsClassItem(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroups ItemObj = (CQGInstrumentsGroups)qObj;
                CQG.CQGInstrumentsGroup ItemPropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGInstrumentSubscriptionRequestClassDOMBBAType(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest DOMBBATypeObj = (CQGInstrumentSubscriptionRequest)qObj;
                CQG.eDOMandBBAType DOMBBATypePropV = DOMBBATypeObj.DOMBBAType;
                var DOMBBATypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBBATypePropKey, value: DOMBBATypePropV));
            }

            private void GetCQGInstrumentSubscriptionRequestClassDOMStatus(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest DOMStatusObj = (CQGInstrumentSubscriptionRequest)qObj;
                System.Boolean DOMStatusPropV = DOMStatusObj.DOMStatus;
                var DOMStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMStatusPropKey, value: DOMStatusPropV));
            }

            private void GetCQGInstrumentSubscriptionRequestClassPropertyLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest PropertyLevelObj = (CQGInstrumentSubscriptionRequest)qObj;
                CQG.ePropertySubscriptionLevel PropertyLevelPropV = PropertyLevelObj.PropertyLevel;
                var PropertyLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertyLevelPropKey, value: PropertyLevelPropV));
            }

            private void GetCQGInstrumentSubscriptionRequestClassQuoteLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest QuoteLevelObj = (CQGInstrumentSubscriptionRequest)qObj;
                CQG.eQuoteSubscriptionLevel QuoteLevelPropV = QuoteLevelObj.QuoteLevel;
                var QuoteLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuoteLevelPropKey, value: QuoteLevelPropV));
            }

            private void GetCQGInstrumentSubscriptionRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest SymbolObj = (CQGInstrumentSubscriptionRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGIntegerCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGIntegerCollection CountObj = (CQGIntegerCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGIntegerCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGIntegerCollection ItemObj = (CQGIntegerCollection)qObj;
                System.Int32 ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGLoggerClassCEL(QueryInfo query, object[] args)
            {
                CQGLogger CELObj = (CQGLogger)qObj;
                CQG.CQGCEL CELPropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGManualFillClassDisplayPrice(QueryInfo query, object[] args)
            {
                CQGManualFill DisplayPriceObj = (CQGManualFill)qObj;
                System.String DisplayPricePropV = DisplayPriceObj.DisplayPrice;
                var DisplayPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DisplayPricePropKey, value: DisplayPricePropV));
            }

            private void GetCQGManualFillClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGManualFill GWAccountIDObj = (CQGManualFill)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGManualFillClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGManualFill InstrumentNameObj = (CQGManualFill)qObj;
                System.String InstrumentNamePropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamePropV));
            }

            private void GetCQGManualFillClassNote(QueryInfo query, object[] args)
            {
                CQGManualFill NoteObj = (CQGManualFill)qObj;
                System.String NotePropV = NoteObj.Note;
                var NotePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NotePropKey, value: NotePropV));
            }

            private void GetCQGManualFillClassPrice(QueryInfo query, object[] args)
            {
                CQGManualFill PriceObj = (CQGManualFill)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGManualFillClassQuantity(QueryInfo query, object[] args)
            {
                CQGManualFill QuantityObj = (CQGManualFill)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGManualFillClassSide(QueryInfo query, object[] args)
            {
                CQGManualFill SideObj = (CQGManualFill)qObj;
                CQG.eOrderSide SidePropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidePropV));
            }

            private void GetCQGManualFillClassStatementDate(QueryInfo query, object[] args)
            {
                CQGManualFill StatementDateObj = (CQGManualFill)qObj;
                System.DateTime StatementDatePropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatePropV));
            }

            private void GetCQGManualFillClassTradeId(QueryInfo query, object[] args)
            {
                CQGManualFill TradeIdObj = (CQGManualFill)qObj;
                System.Int32 TradeIdPropV = TradeIdObj.TradeId;
                var TradeIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeIdPropKey, value: TradeIdPropV));
            }

            private void GetCQGManualFillClassTradeTimestamp(QueryInfo query, object[] args)
            {
                CQGManualFill TradeTimestampObj = (CQGManualFill)qObj;
                System.DateTime TradeTimestampPropV = TradeTimestampObj.TradeTimestamp;
                var TradeTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeTimestampPropKey, value: TradeTimestampPropV));
            }

            private void GetCQGManualFillRequestClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGManualFillRequest GWAccountIDObj = (CQGManualFillRequest)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGManualFillRequestClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGManualFillRequest InstrumentNameObj = (CQGManualFillRequest)qObj;
                System.String InstrumentNamePropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamePropV));
            }

            private void GetCQGManualFillRequestClassNote(QueryInfo query, object[] args)
            {
                CQGManualFillRequest NoteObj = (CQGManualFillRequest)qObj;
                System.String NotePropV = NoteObj.Note;
                var NotePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NotePropKey, value: NotePropV));
            }

            private void GetCQGManualFillRequestClassPrice(QueryInfo query, object[] args)
            {
                CQGManualFillRequest PriceObj = (CQGManualFillRequest)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGManualFillRequestClassQuantity(QueryInfo query, object[] args)
            {
                CQGManualFillRequest QuantityObj = (CQGManualFillRequest)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGManualFillRequestClassSide(QueryInfo query, object[] args)
            {
                CQGManualFillRequest SideObj = (CQGManualFillRequest)qObj;
                CQG.eOrderSide SidePropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidePropV));
            }

            private void GetCQGManualFillRequestClassStatementDate(QueryInfo query, object[] args)
            {
                CQGManualFillRequest StatementDateObj = (CQGManualFillRequest)qObj;
                System.DateTime StatementDatePropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatePropV));
            }

            private void GetCQGManualFillRequestClassTradeId(QueryInfo query, object[] args)
            {
                CQGManualFillRequest TradeIdObj = (CQGManualFillRequest)qObj;
                System.Int32 TradeIdPropV = TradeIdObj.TradeId;
                var TradeIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeIdPropKey, value: TradeIdPropV));
            }

            private void GetCQGManualFillRequestClassTradeTimestamp(QueryInfo query, object[] args)
            {
                CQGManualFillRequest TradeTimestampObj = (CQGManualFillRequest)qObj;
                System.DateTime TradeTimestampPropV = TradeTimestampObj.TradeTimestamp;
                var TradeTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeTimestampPropKey, value: TradeTimestampPropV));
            }

            private void GetCQGManualFillsClassCount(QueryInfo query, object[] args)
            {
                CQGManualFills CountObj = (CQGManualFills)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGManualFillsClassDataLevel(QueryInfo query, object[] args)
            {
                CQGManualFills DataLevelObj = (CQGManualFills)qObj;
                CQG.eManualFillsDataLevel DataLevelPropV = DataLevelObj.DataLevel;
                var DataLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataLevelPropKey, value: DataLevelPropV));
            }

            private void GetCQGManualFillsClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGManualFills GWAccountIDObj = (CQGManualFills)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGManualFillsClassItem(QueryInfo query, object[] args)
            {
                CQGManualFills ItemObj = (CQGManualFills)qObj;
                CQG.CQGManualFill ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGManualFillsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGManualFillsCollection CountObj = (CQGManualFillsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGManualFillsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGManualFillsCollection ItemObj = (CQGManualFillsCollection)qObj;
                CQG.CQGManualFills ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGModifiedPropertiesClassCount(QueryInfo query, object[] args)
            {
                CQGModifiedProperties CountObj = (CQGModifiedProperties)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGModifiedPropertiesClassItem(QueryInfo query, object[] args)
            {
                CQGModifiedProperties ItemObj = (CQGModifiedProperties)qObj;
                CQG.CQGModifiedProperty ItemPropV = ItemObj[(CQG.eOrderProperty)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGModifiedPropertiesClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGModifiedProperties ItemByIndexObj = (CQGModifiedProperties)qObj;
                CQG.CQGModifiedProperty ItemByIndexPropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGModifiedPropertyClassDescription(QueryInfo query, object[] args)
            {
                CQGModifiedProperty DescriptionObj = (CQGModifiedProperty)qObj;
                System.String DescriptionPropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionPropV));
            }

            private void GetCQGModifiedPropertyClassName(QueryInfo query, object[] args)
            {
                CQGModifiedProperty NameObj = (CQGModifiedProperty)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGModifiedPropertyClassNewValue(QueryInfo query, object[] args)
            {
                CQGModifiedProperty NewValueObj = (CQGModifiedProperty)qObj;
                System.Object NewValuePropV = NewValueObj.NewValue;
                var NewValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewValuePropKey, value: NewValuePropV));
            }

            private void GetCQGModifiedPropertyClassPreviousValue(QueryInfo query, object[] args)
            {
                CQGModifiedProperty PreviousValueObj = (CQGModifiedProperty)qObj;
                System.Object PreviousValuePropV = PreviousValueObj.PreviousValue;
                var PreviousValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreviousValuePropKey, value: PreviousValuePropV));
            }

            private void GetCQGModifiedPropertyClassType(QueryInfo query, object[] args)
            {
                CQGModifiedProperty TypeObj = (CQGModifiedProperty)qObj;
                CQG.eOrderProperty TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGOrderActionRequestClassAccount(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AccountObj = (CQGOrderActionRequest)qObj;
                CQG.CQGAccount AccountPropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGOrderActionRequestClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AlgorithmIDObj = (CQGOrderActionRequest)qObj;
                System.UInt32 AlgorithmIDPropV = AlgorithmIDObj.AlgorithmID;
                var AlgorithmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDPropV));
            }

            private void GetCQGOrderActionRequestClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AlgorithmStringIDObj = (CQGOrderActionRequest)qObj;
                System.String AlgorithmStringIDPropV = AlgorithmStringIDObj.AlgorithmStringID;
                var AlgorithmStringIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDPropV));
            }

            private void GetCQGOrderActionRequestClassFromAllTraders(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest FromAllTradersObj = (CQGOrderActionRequest)qObj;
                System.Boolean FromAllTradersPropV = FromAllTradersObj.FromAllTraders;
                var FromAllTradersPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FromAllTradersPropKey, value: FromAllTradersPropV));
            }

            private void GetCQGOrderActionRequestClassInstrument(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest InstrumentObj = (CQGOrderActionRequest)qObj;
                CQG.CQGInstrument InstrumentPropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGOrderActionRequestClassOrderSide(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest OrderSideObj = (CQGOrderActionRequest)qObj;
                CQG.eOrderSide OrderSidePropV = OrderSideObj.OrderSide;
                var OrderSidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderSidePropKey, value: OrderSidePropV));
            }

            private void GetCQGOrderActionRequestClassParked(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest ParkedObj = (CQGOrderActionRequest)qObj;
                System.Boolean ParkedPropV = ParkedObj.Parked;
                var ParkedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParkedPropKey, value: ParkedPropV));
            }

            private void GetCQGOrderChainClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrderChain AlgorithmIDObj = (CQGOrderChain)qObj;
                System.UInt32 AlgorithmIDPropV = AlgorithmIDObj.AlgorithmID;
                var AlgorithmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDPropV));
            }

            private void GetCQGOrderChainClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrderChain AlgorithmStringIDObj = (CQGOrderChain)qObj;
                System.String AlgorithmStringIDPropV = AlgorithmStringIDObj.AlgorithmStringID;
                var AlgorithmStringIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDPropV));
            }

            private void GetCQGOrderChainClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGOrderChain GWAccountIDObj = (CQGOrderChain)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGOrderClassAccount(QueryInfo query, object[] args)
            {
                CQGOrder AccountObj = (CQGOrder)qObj;
                CQG.CQGAccount AccountPropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGOrderClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrder AlgorithmIDObj = (CQGOrder)qObj;
                System.UInt32 AlgorithmIDPropV = AlgorithmIDObj.AlgorithmID;
                var AlgorithmIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDPropV));
            }

            private void GetCQGOrderClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrder AlgorithmStringIDObj = (CQGOrder)qObj;
                System.String AlgorithmStringIDPropV = AlgorithmStringIDObj.AlgorithmStringID;
                var AlgorithmStringIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDPropV));
            }

            private void GetCQGOrderClassCanBeCanceled(QueryInfo query, object[] args)
            {
                CQGOrder CanBeCanceledObj = (CQGOrder)qObj;
                System.Boolean CanBeCanceledPropV = CanBeCanceledObj.CanBeCanceled;
                var CanBeCanceledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeCanceledPropKey, value: CanBeCanceledPropV));
            }

            private void GetCQGOrderClassCanBeModified(QueryInfo query, object[] args)
            {
                CQGOrder CanBeModifiedObj = (CQGOrder)qObj;
                System.Boolean CanBeModifiedPropV = CanBeModifiedObj.CanBeModified;
                var CanBeModifiedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeModifiedPropKey, value: CanBeModifiedPropV));
            }

            private void GetCQGOrderClassCanBeReplaced(QueryInfo query, object[] args)
            {
                CQGOrder CanBeReplacedObj = (CQGOrder)qObj;
                System.Boolean CanBeReplacedPropV = CanBeReplacedObj.CanBeReplaced;
                var CanBeReplacedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeReplacedPropKey, value: CanBeReplacedPropV));
            }

            private void GetCQGOrderClassCancelationInstruction(QueryInfo query, object[] args)
            {
                CQGOrder CancelationInstructionObj = (CQGOrder)qObj;
                CQG.eOrderCancelationType CancelationInstructionPropV = CancelationInstructionObj.CancelationInstruction;
                var CancelationInstructionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CancelationInstructionPropKey, value: CancelationInstructionPropV));
            }

            private void GetCQGOrderClassDescription(QueryInfo query, object[] args)
            {
                CQGOrder DescriptionObj = (CQGOrder)qObj;
                System.String DescriptionPropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionPropV));
            }

            private void GetCQGOrderClassDurationType(QueryInfo query, object[] args)
            {
                CQGOrder DurationTypeObj = (CQGOrder)qObj;
                CQG.eOrderDuration DurationTypePropV = DurationTypeObj.DurationType;
                var DurationTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DurationTypePropKey, value: DurationTypePropV));
            }

            private void GetCQGOrderClassFilledQuantity(QueryInfo query, object[] args)
            {
                CQGOrder FilledQuantityObj = (CQGOrder)qObj;
                System.Int32 FilledQuantityPropV = FilledQuantityObj.FilledQuantity;
                var FilledQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FilledQuantityPropKey, value: FilledQuantityPropV));
            }

            private void GetCQGOrderClassFills(QueryInfo query, object[] args)
            {
                CQGOrder FillsObj = (CQGOrder)qObj;
                CQG.CQGFills FillsPropV = FillsObj.Fills;
                var FillsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(FillsPropKey, FillsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillsPropKey));
            }

            private void GetCQGOrderClassGUID(QueryInfo query, object[] args)
            {
                CQGOrder GUIDObj = (CQGOrder)qObj;
                System.String GUIDPropV = GUIDObj.GUID;
                var GUIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GUIDPropKey, value: GUIDPropV));
            }

            private void GetCQGOrderClassGWOrderID(QueryInfo query, object[] args)
            {
                CQGOrder GWOrderIDObj = (CQGOrder)qObj;
                System.String GWOrderIDPropV = GWOrderIDObj.GWOrderID;
                var GWOrderIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWOrderIDPropKey, value: GWOrderIDPropV));
            }

            private void GetCQGOrderClassGWStatus(QueryInfo query, object[] args)
            {
                CQGOrder GWStatusObj = (CQGOrder)qObj;
                CQG.eOrderStatus GWStatusPropV = GWStatusObj.GWStatus;
                var GWStatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWStatusPropKey, value: GWStatusPropV));
            }

            private void GetCQGOrderClassInstrument(QueryInfo query, object[] args)
            {
                CQGOrder InstrumentObj = (CQGOrder)qObj;
                CQG.CQGInstrument InstrumentPropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGOrderClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGOrder InstrumentNameObj = (CQGOrder)qObj;
                System.String InstrumentNamePropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamePropV));
            }

            private void GetCQGOrderClassIsExternal(QueryInfo query, object[] args)
            {
                CQGOrder IsExternalObj = (CQGOrder)qObj;
                System.Boolean IsExternalPropV = IsExternalObj.IsExternal;
                var IsExternalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsExternalPropKey, value: IsExternalPropV));
            }

            private void GetCQGOrderClassIsFinal(QueryInfo query, object[] args)
            {
                CQGOrder IsFinalObj = (CQGOrder)qObj;
                System.Boolean IsFinalPropV = IsFinalObj.IsFinal;
                var IsFinalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsFinalPropKey, value: IsFinalPropV));
            }

            private void GetCQGOrderClassLastError(QueryInfo query, object[] args)
            {
                CQGOrder LastErrorObj = (CQGOrder)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGOrderClassLastEvent(QueryInfo query, object[] args)
            {
                CQGOrder LastEventObj = (CQGOrder)qObj;
                CQG.eOrderEvent LastEventPropV = LastEventObj.LastEvent;
                var LastEventPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastEventPropKey, value: LastEventPropV));
            }

            private void GetCQGOrderClassLimitPrice(QueryInfo query, object[] args)
            {
                CQGOrder LimitPriceObj = (CQGOrder)qObj;
                System.Double LimitPricePropV = LimitPriceObj.LimitPrice;
                var LimitPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LimitPricePropKey, value: LimitPricePropV));
            }

            private void GetCQGOrderClassOrderCheckMark(QueryInfo query, object[] args)
            {
                CQGOrder OrderCheckMarkObj = (CQGOrder)qObj;
                System.Boolean OrderCheckMarkPropV = OrderCheckMarkObj.OrderCheckMark;
                var OrderCheckMarkPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderCheckMarkPropKey, value: OrderCheckMarkPropV));
            }

            private void GetCQGOrderClassOriginalOrderID(QueryInfo query, object[] args)
            {
                CQGOrder OriginalOrderIDObj = (CQGOrder)qObj;
                System.String OriginalOrderIDPropV = OriginalOrderIDObj.OriginalOrderID;
                var OriginalOrderIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OriginalOrderIDPropKey, value: OriginalOrderIDPropV));
            }

            private void GetCQGOrderClassPlaceTime(QueryInfo query, object[] args)
            {
                CQGOrder PlaceTimeObj = (CQGOrder)qObj;
                System.DateTime PlaceTimePropV = PlaceTimeObj.PlaceTime;
                var PlaceTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PlaceTimePropKey, value: PlaceTimePropV));
            }

            private void GetCQGOrderClassProperties(QueryInfo query, object[] args)
            {
                CQGOrder PropertiesObj = (CQGOrder)qObj;
                CQG.CQGOrderProperties PropertiesPropV = PropertiesObj.Properties;
                var PropertiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
            }

            private void GetCQGOrderClassQuantity(QueryInfo query, object[] args)
            {
                CQGOrder QuantityObj = (CQGOrder)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGOrderClassRemainingQuantity(QueryInfo query, object[] args)
            {
                CQGOrder RemainingQuantityObj = (CQGOrder)qObj;
                System.Int32 RemainingQuantityPropV = RemainingQuantityObj.RemainingQuantity;
                var RemainingQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemainingQuantityPropKey, value: RemainingQuantityPropV));
            }

            private void GetCQGOrderClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGOrder ServerTimestampObj = (CQGOrder)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGOrderClassSide(QueryInfo query, object[] args)
            {
                CQGOrder SideObj = (CQGOrder)qObj;
                CQG.eOrderSide SidePropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidePropV));
            }

            private void GetCQGOrderClassState(QueryInfo query, object[] args)
            {
                CQGOrder StateObj = (CQGOrder)qObj;
                CQG.eOrderLocalState StatePropV = StateObj.State;
                var StatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatePropKey, value: StatePropV));
            }

            private void GetCQGOrderClassStopPrice(QueryInfo query, object[] args)
            {
                CQGOrder StopPriceObj = (CQGOrder)qObj;
                System.Double StopPricePropV = StopPriceObj.StopPrice;
                var StopPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopPricePropKey, value: StopPricePropV));
            }

            private void GetCQGOrderClassTag(QueryInfo query, object[] args)
            {
                CQGOrder TagObj = (CQGOrder)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGOrderClassTimeActiveAt(QueryInfo query, object[] args)
            {
                CQGOrder TimeActiveAtObj = (CQGOrder)qObj;
                System.DateTime TimeActiveAtPropV = TimeActiveAtObj.TimeActiveAt;
                var TimeActiveAtPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimeActiveAtPropKey, value: TimeActiveAtPropV));
            }

            private void GetCQGOrderClassTimestamp(QueryInfo query, object[] args)
            {
                CQGOrder TimestampObj = (CQGOrder)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGOrderClassTransactions(QueryInfo query, object[] args)
            {
                CQGOrder TransactionsObj = (CQGOrder)qObj;
                CQG.CQGTransactions TransactionsPropV = TransactionsObj.Transactions;
                var TransactionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TransactionsPropKey, TransactionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TransactionsPropKey));
            }

            private void GetCQGOrderClassType(QueryInfo query, object[] args)
            {
                CQGOrder TypeObj = (CQGOrder)qObj;
                CQG.eOrderType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGOrderClassUEName(QueryInfo query, object[] args)
            {
                CQGOrder UENameObj = (CQGOrder)qObj;
                System.String UENamePropV = UENameObj.UEName;
                var UENamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UENamePropKey, value: UENamePropV));
            }

            private void GetCQGOrderModifyClassProperties(QueryInfo query, object[] args)
            {
                CQGOrderModify PropertiesObj = (CQGOrderModify)qObj;
                CQG.CQGOrderProperties PropertiesPropV = PropertiesObj.Properties;
                var PropertiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
            }

            private void GetCQGOrderPropertiesClassCount(QueryInfo query, object[] args)
            {
                CQGOrderProperties CountObj = (CQGOrderProperties)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGOrderPropertiesClassItem(QueryInfo query, object[] args)
            {
                CQGOrderProperties ItemObj = (CQGOrderProperties)qObj;
                CQG.CQGOrderProperty ItemPropV = ItemObj[(CQG.eOrderProperty)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGOrderPropertyClassCanBeSet(QueryInfo query, object[] args)
            {
                CQGOrderProperty CanBeSetObj = (CQGOrderProperty)qObj;
                System.Boolean CanBeSetPropV = CanBeSetObj.CanBeSet;
                var CanBeSetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeSetPropKey, value: CanBeSetPropV));
            }

            private void GetCQGOrderPropertyClassDescription(QueryInfo query, object[] args)
            {
                CQGOrderProperty DescriptionObj = (CQGOrderProperty)qObj;
                System.String DescriptionPropV = DescriptionObj.Description;
                var DescriptionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionPropV));
            }

            private void GetCQGOrderPropertyClassName(QueryInfo query, object[] args)
            {
                CQGOrderProperty NameObj = (CQGOrderProperty)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGOrderPropertyClassOrder(QueryInfo query, object[] args)
            {
                CQGOrderProperty OrderObj = (CQGOrderProperty)qObj;
                CQG.CQGOrder OrderPropV = OrderObj.Order;
                var OrderPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
            }

            private void GetCQGOrderPropertyClassTimestamp(QueryInfo query, object[] args)
            {
                CQGOrderProperty TimestampObj = (CQGOrderProperty)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGOrderPropertyClassType(QueryInfo query, object[] args)
            {
                CQGOrderProperty TypeObj = (CQGOrderProperty)qObj;
                CQG.eOrderProperty TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGOrderPropertyClassValue(QueryInfo query, object[] args)
            {
                CQGOrderProperty ValueObj = (CQGOrderProperty)qObj;
                System.Object ValuePropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuePropV));
            }

            private void GetCQGOrdersClassCount(QueryInfo query, object[] args)
            {
                CQGOrders CountObj = (CQGOrders)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGOrdersClassItem(QueryInfo query, object[] args)
            {
                CQGOrders ItemObj = (CQGOrders)qObj;
                CQG.CQGOrder ItemPropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGOrdersQueryClassAccount(QueryInfo query, object[] args)
            {
                CQGOrdersQuery AccountObj = (CQGOrdersQuery)qObj;
                CQG.CQGAccount AccountPropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGOrdersQueryClassCEL(QueryInfo query, object[] args)
            {
                CQGOrdersQuery CELObj = (CQGOrdersQuery)qObj;
                CQG.CQGCEL CELPropV = CELObj.CEL;
                var CELPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
            }

            private void GetCQGOrdersQueryClassFinalError(QueryInfo query, object[] args)
            {
                CQGOrdersQuery FinalErrorObj = (CQGOrdersQuery)qObj;
                CQG.CQGError FinalErrorPropV = FinalErrorObj.FinalError;
                var FinalErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(FinalErrorPropKey, FinalErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FinalErrorPropKey));
            }

            private void GetCQGOrdersQueryClassLastChunk(QueryInfo query, object[] args)
            {
                CQGOrdersQuery LastChunkObj = (CQGOrdersQuery)qObj;
                CQG.CQGOrders LastChunkPropV = LastChunkObj.LastChunk;
                var LastChunkPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastChunkPropKey, LastChunkPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastChunkPropKey));
            }

            private void GetCQGOrdersQueryClassOrders(QueryInfo query, object[] args)
            {
                CQGOrdersQuery OrdersObj = (CQGOrdersQuery)qObj;
                CQG.CQGOrders OrdersPropV = OrdersObj.Orders;
                var OrdersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrdersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
            }

            private void GetCQGOrdersQueryClassQueryID(QueryInfo query, object[] args)
            {
                CQGOrdersQuery QueryIDObj = (CQGOrdersQuery)qObj;
                System.Int32 QueryIDPropV = QueryIDObj.QueryID;
                var QueryIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QueryIDPropKey, value: QueryIDPropV));
            }

            private void GetCQGOrdersQueryClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGOrdersQuery ServerTimestampObj = (CQGOrdersQuery)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGOrdersQueryClassStatus(QueryInfo query, object[] args)
            {
                CQGOrdersQuery StatusObj = (CQGOrdersQuery)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGOrdersQueryClassTimestamp(QueryInfo query, object[] args)
            {
                CQGOrdersQuery TimestampObj = (CQGOrdersQuery)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGOrderStatisticsClassStatisticsOnReceive(QueryInfo query, object[] args)
            {
                CQGOrderStatistics StatisticsOnReceiveObj = (CQGOrderStatistics)qObj;
                System.Object StatisticsOnReceivePropV = StatisticsOnReceiveObj.StatisticsOnReceive[(System.String)args[0]];
                var StatisticsOnReceivePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsOnReceivePropKey, value: StatisticsOnReceivePropV));
            }

            private void GetCQGParameterDefinitionClassAvailableValues(QueryInfo query, object[] args)
            {
                CQGParameterDefinition AvailableValuesObj = (CQGParameterDefinition)qObj;
                CQG.CQGStringCollection AvailableValuesPropV = AvailableValuesObj.AvailableValues;
                var AvailableValuesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AvailableValuesPropKey, AvailableValuesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvailableValuesPropKey));
            }

            private void GetCQGParameterDefinitionClassComment(QueryInfo query, object[] args)
            {
                CQGParameterDefinition CommentObj = (CQGParameterDefinition)qObj;
                System.String CommentPropV = CommentObj.Comment;
                var CommentPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommentPropKey, value: CommentPropV));
            }

            private void GetCQGParameterDefinitionClassDefaultValue(QueryInfo query, object[] args)
            {
                CQGParameterDefinition DefaultValueObj = (CQGParameterDefinition)qObj;
                System.Object DefaultValuePropV = DefaultValueObj.DefaultValue;
                var DefaultValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValuePropKey, value: DefaultValuePropV));
            }

            private void GetCQGParameterDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGParameterDefinition NameObj = (CQGParameterDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGParameterDefinitionClassType(QueryInfo query, object[] args)
            {
                CQGParameterDefinition TypeObj = (CQGParameterDefinition)qObj;
                CQG.eUserFormulaParameterType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGParameterDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions CountObj = (CQGParameterDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGParameterDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions ItemObj = (CQGParameterDefinitions)qObj;
                CQG.CQGParameterDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGParameterDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions ItemByNameObj = (CQGParameterDefinitions)qObj;
                CQG.CQGParameterDefinition ItemByNamePropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGPointAndFigureBarClassHigh(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar HighObj = (CQGPointAndFigureBar)qObj;
                System.Double HighPropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighPropV));
            }

            private void GetCQGPointAndFigureBarClassLow(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar LowObj = (CQGPointAndFigureBar)qObj;
                System.Double LowPropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowPropV));
            }

            private void GetCQGPointAndFigureBarClassMid(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar MidObj = (CQGPointAndFigureBar)qObj;
                System.Double MidPropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidPropV));
            }

            private void GetCQGPointAndFigureBarClassPFHigh(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar PFHighObj = (CQGPointAndFigureBar)qObj;
                System.Double PFHighPropV = PFHighObj.PFHigh;
                var PFHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PFHighPropKey, value: PFHighPropV));
            }

            private void GetCQGPointAndFigureBarClassPFLow(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar PFLowObj = (CQGPointAndFigureBar)qObj;
                System.Double PFLowPropV = PFLowObj.PFLow;
                var PFLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PFLowPropKey, value: PFLowPropV));
            }

            private void GetCQGPointAndFigureBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar TimestampObj = (CQGPointAndFigureBar)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGPointAndFigureBarClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar TimestampOffsetObj = (CQGPointAndFigureBar)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGPointAndFigureBarClassUp(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar UpObj = (CQGPointAndFigureBar)qObj;
                System.Boolean UpPropV = UpObj.Up;
                var UpPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpPropKey, value: UpPropV));
            }

            private void GetCQGPointAndFigureBarsClassCount(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars CountObj = (CQGPointAndFigureBars)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGPointAndFigureBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars EndTimestampObj = (CQGPointAndFigureBars)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGPointAndFigureBarsClassId(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars IdObj = (CQGPointAndFigureBars)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGPointAndFigureBarsClassItem(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars ItemObj = (CQGPointAndFigureBars)qObj;
                CQG.CQGPointAndFigureBar ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGPointAndFigureBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars LastErrorObj = (CQGPointAndFigureBars)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGPointAndFigureBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars RequestObj = (CQGPointAndFigureBars)qObj;
                CQG.CQGPointAndFigureBarsRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGPointAndFigureBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars StartTimestampObj = (CQGPointAndFigureBars)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGPointAndFigureBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars StatusObj = (CQGPointAndFigureBars)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGPointAndFigureBarsClassTag(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars TagObj = (CQGPointAndFigureBars)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGPointAndFigureBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection CountObj = (CQGPointAndFigureBarsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGPointAndFigureBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection ItemObj = (CQGPointAndFigureBarsCollection)qObj;
                CQG.CQGPointAndFigureBars ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGPointAndFigureBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection ItemByIdObj = (CQGPointAndFigureBarsCollection)qObj;
                CQG.CQGPointAndFigureBars ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGPointAndFigureBarsRequestClassBoxSize(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest BoxSizeObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Int32 BoxSizePropV = BoxSizeObj.BoxSize;
                var BoxSizePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BoxSizePropKey, value: BoxSizePropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassBoxUnits(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest BoxUnitsObj = (CQGPointAndFigureBarsRequest)qObj;
                CQG.ePfBoxUnits BoxUnitsPropV = BoxUnitsObj.BoxUnits;
                var BoxUnitsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BoxUnitsPropKey, value: BoxUnitsPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ContinuationObj = (CQGPointAndFigureBarsRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassDataSource(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest DataSourceObj = (CQGPointAndFigureBarsRequest)qObj;
                CQG.ePfDataSource DataSourcePropV = DataSourceObj.DataSource;
                var DataSourcePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSourcePropKey, value: DataSourcePropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest DaysBeforeExpirationObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest EqualizeClosesObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest IncludeEndObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RangeEndObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RangeStartObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RecalcPeriodObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassReversal(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ReversalObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Int32 ReversalPropV = ReversalObj.Reversal;
                var ReversalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReversalPropKey, value: ReversalPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SessionFlagsObj = (CQGPointAndFigureBarsRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SessionsFilterObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SubscriptionLevelObj = (CQGPointAndFigureBarsRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SymbolObj = (CQGPointAndFigureBarsRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGPointAndFigureBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest UpdatesEnabledObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGPositionClassAccount(QueryInfo query, object[] args)
            {
                CQGPosition AccountObj = (CQGPosition)qObj;
                CQG.CQGAccount AccountPropV = AccountObj.Account;
                var AccountPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
            }

            private void GetCQGPositionClassAveragePrice(QueryInfo query, object[] args)
            {
                CQGPosition AveragePriceObj = (CQGPosition)qObj;
                System.Double AveragePricePropV = AveragePriceObj.AveragePrice;
                var AveragePricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AveragePricePropKey, value: AveragePricePropV));
            }

            private void GetCQGPositionClassInstrument(QueryInfo query, object[] args)
            {
                CQGPosition InstrumentObj = (CQGPosition)qObj;
                CQG.CQGInstrument InstrumentPropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGPositionClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGPosition InstrumentNameObj = (CQGPosition)qObj;
                System.String InstrumentNamePropV = InstrumentNameObj.InstrumentName;
                var InstrumentNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamePropV));
            }

            private void GetCQGPositionClassManualFillsInvolved(QueryInfo query, object[] args)
            {
                CQGPosition ManualFillsInvolvedObj = (CQGPosition)qObj;
                System.Boolean ManualFillsInvolvedPropV = ManualFillsInvolvedObj.ManualFillsInvolved;
                var ManualFillsInvolvedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ManualFillsInvolvedPropKey, value: ManualFillsInvolvedPropV));
            }

            private void GetCQGPositionClassMatchedTrades(QueryInfo query, object[] args)
            {
                CQGPosition MatchedTradesObj = (CQGPosition)qObj;
                CQG.CQGTrades MatchedTradesPropV = MatchedTradesObj.MatchedTrades;
                var MatchedTradesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(MatchedTradesPropKey, MatchedTradesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MatchedTradesPropKey));
            }

            private void GetCQGPositionClassMVO(QueryInfo query, object[] args)
            {
                CQGPosition MVOObj = (CQGPosition)qObj;
                System.Double MVOPropV = MVOObj.MVO;
                var MVOPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MVOPropKey, value: MVOPropV));
            }

            private void GetCQGPositionClassOpenTrades(QueryInfo query, object[] args)
            {
                CQGPosition OpenTradesObj = (CQGPosition)qObj;
                CQG.CQGTrades OpenTradesPropV = OpenTradesObj.OpenTrades;
                var OpenTradesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OpenTradesPropKey, OpenTradesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenTradesPropKey));
            }

            private void GetCQGPositionClassOTE(QueryInfo query, object[] args)
            {
                CQGPosition OTEObj = (CQGPosition)qObj;
                System.Double OTEPropV = OTEObj.OTE;
                var OTEPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OTEPropKey, value: OTEPropV));
            }

            private void GetCQGPositionClassProfitLoss(QueryInfo query, object[] args)
            {
                CQGPosition ProfitLossObj = (CQGPosition)qObj;
                System.Double ProfitLossPropV = ProfitLossObj.ProfitLoss;
                var ProfitLossPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitLossPropKey, value: ProfitLossPropV));
            }

            private void GetCQGPositionClassQuantity(QueryInfo query, object[] args)
            {
                CQGPosition QuantityObj = (CQGPosition)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGPositionClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGPosition ServerTimestampObj = (CQGPosition)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGPositionClassSide(QueryInfo query, object[] args)
            {
                CQGPosition SideObj = (CQGPosition)qObj;
                CQG.eOrderSide SidePropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidePropV));
            }

            private void GetCQGPositionClassTimestamp(QueryInfo query, object[] args)
            {
                CQGPosition TimestampObj = (CQGPosition)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGPositionClassUPL(QueryInfo query, object[] args)
            {
                CQGPosition UPLObj = (CQGPosition)qObj;
                System.Double UPLPropV = UPLObj.UPL;
                var UPLPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UPLPropKey, value: UPLPropV));
            }

            private void GetCQGPositionsClassCount(QueryInfo query, object[] args)
            {
                CQGPositions CountObj = (CQGPositions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGPositionsClassItem(QueryInfo query, object[] args)
            {
                CQGPositions ItemObj = (CQGPositions)qObj;
                CQG.CQGPosition ItemPropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGPositionsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGPositions ItemByIndexObj = (CQGPositions)qObj;
                CQG.CQGPosition ItemByIndexPropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGPositionsStatementClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGPositionsStatement GWAccountIDObj = (CQGPositionsStatement)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGPositionsStatementClassPositions(QueryInfo query, object[] args)
            {
                CQGPositionsStatement PositionsObj = (CQGPositionsStatement)qObj;
                CQG.CQGPositions PositionsPropV = PositionsObj.Positions;
                var PositionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PositionsPropKey, PositionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionsPropKey));
            }

            private void GetCQGPositionsStatementClassStatementDate(QueryInfo query, object[] args)
            {
                CQGPositionsStatement StatementDateObj = (CQGPositionsStatement)qObj;
                System.DateTime StatementDatePropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatePropV));
            }

            private void GetCQGQFormulaDefinitionClassExpression(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinition ExpressionObj = (CQGQFormulaDefinition)qObj;
                System.String ExpressionPropV = ExpressionObj.Expression;
                var ExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExpressionPropKey, value: ExpressionPropV));
            }

            private void GetCQGQFormulaDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinition NameObj = (CQGQFormulaDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGQFormulaDefinitionClassNumber(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinition NumberObj = (CQGQFormulaDefinition)qObj;
                System.Int32 NumberPropV = NumberObj.Number;
                var NumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NumberPropKey, value: NumberPropV));
            }

            private void GetCQGQFormulaDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions CountObj = (CQGQFormulaDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGQFormulaDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions ItemObj = (CQGQFormulaDefinitions)qObj;
                CQG.CQGQFormulaDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGQFormulaDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions ItemByNameObj = (CQGQFormulaDefinitions)qObj;
                CQG.CQGQFormulaDefinition ItemByNamePropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGQuoteClassHasVolume(QueryInfo query, object[] args)
            {
                CQGQuote HasVolumeObj = (CQGQuote)qObj;
                System.Boolean HasVolumePropV = HasVolumeObj.HasVolume;
                var HasVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HasVolumePropKey, value: HasVolumePropV));
            }

            private void GetCQGQuoteClassInstrument(QueryInfo query, object[] args)
            {
                CQGQuote InstrumentObj = (CQGQuote)qObj;
                CQG.CQGInstrument InstrumentPropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGQuoteClassIsValid(QueryInfo query, object[] args)
            {
                CQGQuote IsValidObj = (CQGQuote)qObj;
                System.Boolean IsValidPropV = IsValidObj.IsValid;
                var IsValidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsValidPropKey, value: IsValidPropV));
            }

            private void GetCQGQuoteClassName(QueryInfo query, object[] args)
            {
                CQGQuote NameObj = (CQGQuote)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGQuoteClassPrice(QueryInfo query, object[] args)
            {
                CQGQuote PriceObj = (CQGQuote)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGQuoteClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGQuote ServerTimestampObj = (CQGQuote)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGQuoteClassTimestamp(QueryInfo query, object[] args)
            {
                CQGQuote TimestampObj = (CQGQuote)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGQuoteClassType(QueryInfo query, object[] args)
            {
                CQGQuote TypeObj = (CQGQuote)qObj;
                CQG.eQuoteType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGQuoteClassVolume(QueryInfo query, object[] args)
            {
                CQGQuote VolumeObj = (CQGQuote)qObj;
                System.Int32 VolumePropV = VolumeObj.Volume;
                var VolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumePropV));
            }

            private void GetCQGQuotesClassCount(QueryInfo query, object[] args)
            {
                CQGQuotes CountObj = (CQGQuotes)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGQuotesClassItem(QueryInfo query, object[] args)
            {
                CQGQuotes ItemObj = (CQGQuotes)qObj;
                CQG.CQGQuote ItemPropV = ItemObj[(CQG.eQuoteType)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGRemoteOpenAPISessionClassLogonName(QueryInfo query, object[] args)
            {
                CQGRemoteOpenAPISession LogonNameObj = (CQGRemoteOpenAPISession)qObj;
                System.String LogonNamePropV = LogonNameObj.LogonName;
                var LogonNamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LogonNamePropKey, value: LogonNamePropV));
            }

            private void GetCQGRemoteOpenAPISessionClassROMNumber(QueryInfo query, object[] args)
            {
                CQGRemoteOpenAPISession ROMNumberObj = (CQGRemoteOpenAPISession)qObj;
                System.Int32 ROMNumberPropV = ROMNumberObj.ROMNumber;
                var ROMNumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ROMNumberPropKey, value: ROMNumberPropV));
            }

            private void GetCQGRemoteOpenAPISessionClassServerAddress(QueryInfo query, object[] args)
            {
                CQGRemoteOpenAPISession ServerAddressObj = (CQGRemoteOpenAPISession)qObj;
                System.String ServerAddressPropV = ServerAddressObj.ServerAddress;
                var ServerAddressPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerAddressPropKey, value: ServerAddressPropV));
            }

            private void GetCQGSessionClassActivationDate(QueryInfo query, object[] args)
            {
                CQGSession ActivationDateObj = (CQGSession)qObj;
                System.DateTime ActivationDatePropV = ActivationDateObj.ActivationDate;
                var ActivationDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActivationDatePropKey, value: ActivationDatePropV));
            }

            private void GetCQGSessionClassDayCloseOffset(QueryInfo query, object[] args)
            {
                CQGSession DayCloseOffsetObj = (CQGSession)qObj;
                System.SByte DayCloseOffsetPropV = DayCloseOffsetObj.DayCloseOffset;
                var DayCloseOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayCloseOffsetPropKey, value: DayCloseOffsetPropV));
            }

            private void GetCQGSessionClassDayStartOffset(QueryInfo query, object[] args)
            {
                CQGSession DayStartOffsetObj = (CQGSession)qObj;
                System.SByte DayStartOffsetPropV = DayStartOffsetObj.DayStartOffset;
                var DayStartOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayStartOffsetPropKey, value: DayStartOffsetPropV));
            }

            private void GetCQGSessionClassDayStartsYesterday(QueryInfo query, object[] args)
            {
                CQGSession DayStartsYesterdayObj = (CQGSession)qObj;
                System.Boolean DayStartsYesterdayPropV = DayStartsYesterdayObj.DayStartsYesterday;
                var DayStartsYesterdayPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayStartsYesterdayPropKey, value: DayStartsYesterdayPropV));
            }

            private void GetCQGSessionClassEndTime(QueryInfo query, object[] args)
            {
                CQGSession EndTimeObj = (CQGSession)qObj;
                System.DateTime EndTimePropV = EndTimeObj.EndTime;
                var EndTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimePropKey, value: EndTimePropV));
            }

            private void GetCQGSessionClassInstrument(QueryInfo query, object[] args)
            {
                CQGSession InstrumentObj = (CQGSession)qObj;
                CQG.CQGInstrument InstrumentPropV = InstrumentObj.Instrument;
                var InstrumentPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
            }

            private void GetCQGSessionClassName(QueryInfo query, object[] args)
            {
                CQGSession NameObj = (CQGSession)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGSessionClassNumber(QueryInfo query, object[] args)
            {
                CQGSession NumberObj = (CQGSession)qObj;
                System.Int16 NumberPropV = NumberObj.Number;
                var NumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NumberPropKey, value: NumberPropV));
            }

            private void GetCQGSessionClassPrimaryFlag(QueryInfo query, object[] args)
            {
                CQGSession PrimaryFlagObj = (CQGSession)qObj;
                System.Boolean PrimaryFlagPropV = PrimaryFlagObj.PrimaryFlag;
                var PrimaryFlagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PrimaryFlagPropKey, value: PrimaryFlagPropV));
            }

            private void GetCQGSessionClassStartTime(QueryInfo query, object[] args)
            {
                CQGSession StartTimeObj = (CQGSession)qObj;
                System.DateTime StartTimePropV = StartTimeObj.StartTime;
                var StartTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimePropKey, value: StartTimePropV));
            }

            private void GetCQGSessionClassType(QueryInfo query, object[] args)
            {
                CQGSession TypeObj = (CQGSession)qObj;
                CQG.eSymbolSessionType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGSessionClassValidEndTime(QueryInfo query, object[] args)
            {
                CQGSession ValidEndTimeObj = (CQGSession)qObj;
                System.DateTime ValidEndTimePropV = ValidEndTimeObj.ValidEndTime;
                var ValidEndTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValidEndTimePropKey, value: ValidEndTimePropV));
            }

            private void GetCQGSessionClassValidStartTime(QueryInfo query, object[] args)
            {
                CQGSession ValidStartTimeObj = (CQGSession)qObj;
                System.DateTime ValidStartTimePropV = ValidStartTimeObj.ValidStartTime;
                var ValidStartTimePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValidStartTimePropKey, value: ValidStartTimePropV));
            }

            private void GetCQGSessionClassWorkingWeekDays(QueryInfo query, object[] args)
            {
                CQGSession WorkingWeekDaysObj = (CQGSession)qObj;
                CQG.eSessionWeekDays WorkingWeekDaysPropV = WorkingWeekDaysObj.WorkingWeekDays;
                var WorkingWeekDaysPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: WorkingWeekDaysPropKey, value: WorkingWeekDaysPropV));
            }

            private void GetCQGSessionsClassCount(QueryInfo query, object[] args)
            {
                CQGSessions CountObj = (CQGSessions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGSessionsClassDescriptionEnd(QueryInfo query, object[] args)
            {
                CQGSessions DescriptionEndObj = (CQGSessions)qObj;
                System.DateTime DescriptionEndPropV = DescriptionEndObj.DescriptionEnd;
                var DescriptionEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionEndPropKey, value: DescriptionEndPropV));
            }

            private void GetCQGSessionsClassDescriptionNumber(QueryInfo query, object[] args)
            {
                CQGSessions DescriptionNumberObj = (CQGSessions)qObj;
                System.Int32 DescriptionNumberPropV = DescriptionNumberObj.DescriptionNumber;
                var DescriptionNumberPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionNumberPropKey, value: DescriptionNumberPropV));
            }

            private void GetCQGSessionsClassDescriptionStart(QueryInfo query, object[] args)
            {
                CQGSessions DescriptionStartObj = (CQGSessions)qObj;
                System.DateTime DescriptionStartPropV = DescriptionStartObj.DescriptionStart;
                var DescriptionStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionStartPropKey, value: DescriptionStartPropV));
            }

            private void GetCQGSessionsClassHolidays(QueryInfo query, object[] args)
            {
                CQGSessions HolidaysObj = (CQGSessions)qObj;
                CQG.CQGHolidays HolidaysPropV = HolidaysObj.Holidays;
                var HolidaysPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(HolidaysPropKey, HolidaysPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HolidaysPropKey));
            }

            private void GetCQGSessionsClassItem(QueryInfo query, object[] args)
            {
                CQGSessions ItemObj = (CQGSessions)qObj;
                CQG.CQGSession ItemPropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGSessionsClassName(QueryInfo query, object[] args)
            {
                CQGSessions NameObj = (CQGSessions)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGSessionsClassType(QueryInfo query, object[] args)
            {
                CQGSessions TypeObj = (CQGSessions)qObj;
                CQG.eSymbolSessionType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGSessionsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGSessionsCollection CountObj = (CQGSessionsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGSessionsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGSessionsCollection ItemObj = (CQGSessionsCollection)qObj;
                CQG.CQGSessions ItemPropV = ItemObj[(System.Object)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGStrategyDefinitionClassClientId(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition ClientIdObj = (CQGStrategyDefinition)qObj;
                System.String ClientIdPropV = ClientIdObj.ClientId;
                var ClientIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClientIdPropKey, value: ClientIdPropV));
            }

            private void GetCQGStrategyDefinitionClassId(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition IdObj = (CQGStrategyDefinition)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGStrategyDefinitionClassLastError(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition LastErrorObj = (CQGStrategyDefinition)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGStrategyDefinitionClassRequestString(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition RequestStringObj = (CQGStrategyDefinition)qObj;
                System.String RequestStringPropV = RequestStringObj.RequestString;
                var RequestStringPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestStringPropKey, value: RequestStringPropV));
            }

            private void GetCQGStrategyDefinitionClassStatus(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition StatusObj = (CQGStrategyDefinition)qObj;
                CQG.eStrategyRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGStrategyDefinitionClassSymbol(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition SymbolObj = (CQGStrategyDefinition)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGStrategyDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions CountObj = (CQGStrategyDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGStrategyDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions ItemObj = (CQGStrategyDefinitions)qObj;
                CQG.CQGStrategyDefinition ItemPropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGStrategyDefinitionsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions ItemByIndexObj = (CQGStrategyDefinitions)qObj;
                CQG.CQGStrategyDefinition ItemByIndexPropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGStrategyLegFillClassExecutionId(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill ExecutionIdObj = (CQGStrategyLegFill)qObj;
                System.String ExecutionIdPropV = ExecutionIdObj.ExecutionId;
                var ExecutionIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionIdPropKey, value: ExecutionIdPropV));
            }

            private void GetCQGStrategyLegFillClassOrder(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill OrderObj = (CQGStrategyLegFill)qObj;
                CQG.CQGOrder OrderPropV = OrderObj.Order;
                var OrderPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
            }

            private void GetCQGStrategyLegFillClassOriginalOrderID(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill OriginalOrderIDObj = (CQGStrategyLegFill)qObj;
                System.String OriginalOrderIDPropV = OriginalOrderIDObj.OriginalOrderID;
                var OriginalOrderIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OriginalOrderIDPropKey, value: OriginalOrderIDPropV));
            }

            private void GetCQGStrategyLegFillClassQuantity(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill QuantityObj = (CQGStrategyLegFill)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGStrategyLegFillsClassCount(QueryInfo query, object[] args)
            {
                CQGStrategyLegFills CountObj = (CQGStrategyLegFills)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGStrategyLegFillsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGStrategyLegFills ItemByIndexObj = (CQGStrategyLegFills)qObj;
                CQG.CQGStrategyLegFill ItemByIndexPropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGStringCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGStringCollection CountObj = (CQGStringCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGStringCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGStringCollection ItemObj = (CQGStringCollection)qObj;
                System.String ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItemPropV));
            }

            private void GetCQGSubMinuteBarClassAskVolume(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar AskVolumeObj = (CQGSubMinuteBar)qObj;
                System.Int32 AskVolumePropV = AskVolumeObj.AskVolume;
                var AskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumePropV));
            }

            private void GetCQGSubMinuteBarClassAvg(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar AvgObj = (CQGSubMinuteBar)qObj;
                System.Double AvgPropV = AvgObj.Avg;
                var AvgPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgPropV));
            }

            private void GetCQGSubMinuteBarClassBidVolume(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar BidVolumeObj = (CQGSubMinuteBar)qObj;
                System.Int32 BidVolumePropV = BidVolumeObj.BidVolume;
                var BidVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumePropV));
            }

            private void GetCQGSubMinuteBarClassClose(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar CloseObj = (CQGSubMinuteBar)qObj;
                System.Double ClosePropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosePropV));
            }

            private void GetCQGSubMinuteBarClassHigh(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar HighObj = (CQGSubMinuteBar)qObj;
                System.Double HighPropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighPropV));
            }

            private void GetCQGSubMinuteBarClassHLC3(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar HLC3Obj = (CQGSubMinuteBar)qObj;
                System.Double HLC3PropV = HLC3Obj.HLC3;
                var HLC3PropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3PropV));
            }

            private void GetCQGSubMinuteBarClassLow(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar LowObj = (CQGSubMinuteBar)qObj;
                System.Double LowPropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowPropV));
            }

            private void GetCQGSubMinuteBarClassMid(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar MidObj = (CQGSubMinuteBar)qObj;
                System.Double MidPropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidPropV));
            }

            private void GetCQGSubMinuteBarClassOpen(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar OpenObj = (CQGSubMinuteBar)qObj;
                System.Double OpenPropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenPropV));
            }

            private void GetCQGSubMinuteBarClassRange(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar RangeObj = (CQGSubMinuteBar)qObj;
                System.Double RangePropV = RangeObj.Range;
                var RangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangePropV));
            }

            private void GetCQGSubMinuteBarClassTickVolume(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TickVolumeObj = (CQGSubMinuteBar)qObj;
                System.Int32 TickVolumePropV = TickVolumeObj.TickVolume;
                var TickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumePropV));
            }

            private void GetCQGSubMinuteBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TimestampObj = (CQGSubMinuteBar)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGSubMinuteBarClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TimestampOffsetObj = (CQGSubMinuteBar)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGSubMinuteBarClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TrueHighObj = (CQGSubMinuteBar)qObj;
                System.Double TrueHighPropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighPropV));
            }

            private void GetCQGSubMinuteBarClassTrueLow(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TrueLowObj = (CQGSubMinuteBar)qObj;
                System.Double TrueLowPropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowPropV));
            }

            private void GetCQGSubMinuteBarClassTrueRange(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar TrueRangeObj = (CQGSubMinuteBar)qObj;
                System.Double TrueRangePropV = TrueRangeObj.TrueRange;
                var TrueRangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangePropV));
            }

            private void GetCQGSubMinuteBarClassVolume(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar VolumeObj = (CQGSubMinuteBar)qObj;
                System.Int32 VolumePropV = VolumeObj.Volume;
                var VolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumePropV));
            }

            private void GetCQGSubMinuteBarsClassCount(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars CountObj = (CQGSubMinuteBars)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGSubMinuteBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars EndTimestampObj = (CQGSubMinuteBars)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGSubMinuteBarsClassId(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars IdObj = (CQGSubMinuteBars)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGSubMinuteBarsClassItem(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars ItemObj = (CQGSubMinuteBars)qObj;
                CQG.CQGSubMinuteBar ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGSubMinuteBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars LastErrorObj = (CQGSubMinuteBars)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGSubMinuteBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars RequestObj = (CQGSubMinuteBars)qObj;
                CQG.CQGSubMinuteBarsRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGSubMinuteBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars StartTimestampObj = (CQGSubMinuteBars)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGSubMinuteBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars StatusObj = (CQGSubMinuteBars)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGSubMinuteBarsClassTag(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars TagObj = (CQGSubMinuteBars)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGSubMinuteBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection CountObj = (CQGSubMinuteBarsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGSubMinuteBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection ItemObj = (CQGSubMinuteBarsCollection)qObj;
                CQG.CQGSubMinuteBars ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGSubMinuteBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection ItemByIdObj = (CQGSubMinuteBarsCollection)qObj;
                CQG.CQGSubMinuteBars ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGSubMinuteBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest ContinuationObj = (CQGSubMinuteBarsRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest DaysBeforeExpirationObj = (CQGSubMinuteBarsRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest EqualizeClosesObj = (CQGSubMinuteBarsRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassGapFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest GapFilterObj = (CQGSubMinuteBarsRequest)qObj;
                CQG.eGapFilter GapFilterPropV = GapFilterObj.GapFilter;
                var GapFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GapFilterPropKey, value: GapFilterPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest IncludeEndObj = (CQGSubMinuteBarsRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassInterval(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest IntervalObj = (CQGSubMinuteBarsRequest)qObj;
                System.Int32 IntervalPropV = IntervalObj.Interval;
                var IntervalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntervalPropKey, value: IntervalPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RangeEndObj = (CQGSubMinuteBarsRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RangeStartObj = (CQGSubMinuteBarsRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RecalcPeriodObj = (CQGSubMinuteBarsRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SessionFlagsObj = (CQGSubMinuteBarsRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SessionsFilterObj = (CQGSubMinuteBarsRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SubscriptionLevelObj = (CQGSubMinuteBarsRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SymbolObj = (CQGSubMinuteBarsRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest TickFilterObj = (CQGSubMinuteBarsRequest)qObj;
                CQG.eTickFilter TickFilterPropV = TickFilterObj.TickFilter;
                var TickFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterPropV));
            }

            private void GetCQGSubMinuteBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest UpdatesEnabledObj = (CQGSubMinuteBarsRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGSummariesStatementClassCurrencySummaries(QueryInfo query, object[] args)
            {
                CQGSummariesStatement CurrencySummariesObj = (CQGSummariesStatement)qObj;
                CQG.CQGAccountSummaries CurrencySummariesPropV = CurrencySummariesObj.CurrencySummaries;
                var CurrencySummariesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CurrencySummariesPropKey, CurrencySummariesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencySummariesPropKey));
            }

            private void GetCQGSummariesStatementClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGSummariesStatement GWAccountIDObj = (CQGSummariesStatement)qObj;
                System.Int32 GWAccountIDPropV = GWAccountIDObj.GWAccountID;
                var GWAccountIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDPropV));
            }

            private void GetCQGSummariesStatementClassStatementDate(QueryInfo query, object[] args)
            {
                CQGSummariesStatement StatementDateObj = (CQGSummariesStatement)qObj;
                System.DateTime StatementDatePropV = StatementDateObj.StatementDate;
                var StatementDatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatePropV));
            }

            private void GetCQGSummariesStatementClassSummary(QueryInfo query, object[] args)
            {
                CQGSummariesStatement SummaryObj = (CQGSummariesStatement)qObj;
                CQG.CQGAccountSummary SummaryPropV = SummaryObj.Summary;
                var SummaryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SummaryPropKey, SummaryPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SummaryPropKey));
            }

            private void GetCQGTFlowBarClassAskVolume(QueryInfo query, object[] args)
            {
                CQGTFlowBar AskVolumeObj = (CQGTFlowBar)qObj;
                System.Int32 AskVolumePropV = AskVolumeObj.AskVolume;
                var AskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumePropV));
            }

            private void GetCQGTFlowBarClassBestAskPrice(QueryInfo query, object[] args)
            {
                CQGTFlowBar BestAskPriceObj = (CQGTFlowBar)qObj;
                System.Double BestAskPricePropV = BestAskPriceObj.BestAskPrice;
                var BestAskPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BestAskPricePropKey, value: BestAskPricePropV));
            }

            private void GetCQGTFlowBarClassBestBidPrice(QueryInfo query, object[] args)
            {
                CQGTFlowBar BestBidPriceObj = (CQGTFlowBar)qObj;
                System.Double BestBidPricePropV = BestBidPriceObj.BestBidPrice;
                var BestBidPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BestBidPricePropKey, value: BestBidPricePropV));
            }

            private void GetCQGTFlowBarClassBidVolume(QueryInfo query, object[] args)
            {
                CQGTFlowBar BidVolumeObj = (CQGTFlowBar)qObj;
                System.Int32 BidVolumePropV = BidVolumeObj.BidVolume;
                var BidVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumePropV));
            }

            private void GetCQGTFlowBarClassClose(QueryInfo query, object[] args)
            {
                CQGTFlowBar CloseObj = (CQGTFlowBar)qObj;
                System.Double ClosePropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosePropV));
            }

            private void GetCQGTFlowBarClassDomAskCount(QueryInfo query, object[] args)
            {
                CQGTFlowBar DomAskCountObj = (CQGTFlowBar)qObj;
                System.Int32 DomAskCountPropV = DomAskCountObj.DomAskCount;
                var DomAskCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskCountPropKey, value: DomAskCountPropV));
            }

            private void GetCQGTFlowBarClassDomAskVolume(QueryInfo query, object[] args)
            {
                CQGTFlowBar DomAskVolumeObj = (CQGTFlowBar)qObj;
                System.Int32 DomAskVolumePropV = DomAskVolumeObj.DomAskVolume[(System.Int32)args[0]];
                var DomAskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskVolumePropKey, value: DomAskVolumePropV));
            }

            private void GetCQGTFlowBarClassDomBidCount(QueryInfo query, object[] args)
            {
                CQGTFlowBar DomBidCountObj = (CQGTFlowBar)qObj;
                System.Int32 DomBidCountPropV = DomBidCountObj.DomBidCount;
                var DomBidCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomBidCountPropKey, value: DomBidCountPropV));
            }

            private void GetCQGTFlowBarClassHigh(QueryInfo query, object[] args)
            {
                CQGTFlowBar HighObj = (CQGTFlowBar)qObj;
                System.Double HighPropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighPropV));
            }

            private void GetCQGTFlowBarClassLow(QueryInfo query, object[] args)
            {
                CQGTFlowBar LowObj = (CQGTFlowBar)qObj;
                System.Double LowPropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowPropV));
            }

            private void GetCQGTFlowBarClassMid(QueryInfo query, object[] args)
            {
                CQGTFlowBar MidObj = (CQGTFlowBar)qObj;
                System.Double MidPropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidPropV));
            }

            private void GetCQGTFlowBarClassOpen(QueryInfo query, object[] args)
            {
                CQGTFlowBar OpenObj = (CQGTFlowBar)qObj;
                System.Double OpenPropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenPropV));
            }

            private void GetCQGTFlowBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTFlowBar TimestampObj = (CQGTFlowBar)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGTFlowBarClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGTFlowBar TimestampOffsetObj = (CQGTFlowBar)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGTFlowBarClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGTFlowBar TrueHighObj = (CQGTFlowBar)qObj;
                System.Double TrueHighPropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighPropV));
            }

            private void GetCQGTFlowBarClassTrueLow(QueryInfo query, object[] args)
            {
                CQGTFlowBar TrueLowObj = (CQGTFlowBar)qObj;
                System.Double TrueLowPropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowPropV));
            }

            private void GetCQGTFlowBarClassTrueMid(QueryInfo query, object[] args)
            {
                CQGTFlowBar TrueMidObj = (CQGTFlowBar)qObj;
                System.Double TrueMidPropV = TrueMidObj.TrueMid;
                var TrueMidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueMidPropKey, value: TrueMidPropV));
            }

            private void GetCQGTFlowBarsClassCount(QueryInfo query, object[] args)
            {
                CQGTFlowBars CountObj = (CQGTFlowBars)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTFlowBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGTFlowBars EndTimestampObj = (CQGTFlowBars)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGTFlowBarsClassId(QueryInfo query, object[] args)
            {
                CQGTFlowBars IdObj = (CQGTFlowBars)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGTFlowBarsClassItem(QueryInfo query, object[] args)
            {
                CQGTFlowBars ItemObj = (CQGTFlowBars)qObj;
                CQG.CQGTFlowBar ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTFlowBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGTFlowBars LastErrorObj = (CQGTFlowBars)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGTFlowBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGTFlowBars RequestObj = (CQGTFlowBars)qObj;
                CQG.CQGTFlowBarsRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGTFlowBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGTFlowBars StartTimestampObj = (CQGTFlowBars)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGTFlowBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGTFlowBars StatusObj = (CQGTFlowBars)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGTFlowBarsClassTag(QueryInfo query, object[] args)
            {
                CQGTFlowBars TagObj = (CQGTFlowBars)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGTFlowBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection CountObj = (CQGTFlowBarsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTFlowBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection ItemObj = (CQGTFlowBarsCollection)qObj;
                CQG.CQGTFlowBars ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTFlowBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection ItemByIdObj = (CQGTFlowBarsCollection)qObj;
                CQG.CQGTFlowBars ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGTFlowBarsRequestClassAggregation(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest AggregationObj = (CQGTFlowBarsRequest)qObj;
                CQG.eTfAggregation AggregationPropV = AggregationObj.Aggregation;
                var AggregationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggregationPropKey, value: AggregationPropV));
            }

            private void GetCQGTFlowBarsRequestClassAggregationLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest AggregationLevelObj = (CQGTFlowBarsRequest)qObj;
                System.Int32 AggregationLevelPropV = AggregationLevelObj.AggregationLevel;
                var AggregationLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggregationLevelPropKey, value: AggregationLevelPropV));
            }

            private void GetCQGTFlowBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest ContinuationObj = (CQGTFlowBarsRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGTFlowBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DaysBeforeExpirationObj = (CQGTFlowBarsRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGTFlowBarsRequestClassDomAskVolumeLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DomAskVolumeLevelObj = (CQGTFlowBarsRequest)qObj;
                CQG.eTFlowRequestDomVolumeLevel DomAskVolumeLevelPropV = DomAskVolumeLevelObj.DomAskVolumeLevel;
                var DomAskVolumeLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskVolumeLevelPropKey, value: DomAskVolumeLevelPropV));
            }

            private void GetCQGTFlowBarsRequestClassDomBidVolumeLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DomBidVolumeLevelObj = (CQGTFlowBarsRequest)qObj;
                CQG.eTFlowRequestDomVolumeLevel DomBidVolumeLevelPropV = DomBidVolumeLevelObj.DomBidVolumeLevel;
                var DomBidVolumeLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomBidVolumeLevelPropKey, value: DomBidVolumeLevelPropV));
            }

            private void GetCQGTFlowBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest EqualizeClosesObj = (CQGTFlowBarsRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGTFlowBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest IncludeEndObj = (CQGTFlowBarsRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGTFlowBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RangeEndObj = (CQGTFlowBarsRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGTFlowBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RangeStartObj = (CQGTFlowBarsRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGTFlowBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RecalcPeriodObj = (CQGTFlowBarsRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGTFlowBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SessionFlagsObj = (CQGTFlowBarsRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGTFlowBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SessionsFilterObj = (CQGTFlowBarsRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGTFlowBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SubscriptionLevelObj = (CQGTFlowBarsRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGTFlowBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SymbolObj = (CQGTFlowBarsRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGTFlowBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest UpdatesEnabledObj = (CQGTFlowBarsRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGTickClassContributorId(QueryInfo query, object[] args)
            {
                CQGTick ContributorIdObj = (CQGTick)qObj;
                System.String ContributorIdPropV = ContributorIdObj.ContributorId;
                var ContributorIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContributorIdPropKey, value: ContributorIdPropV));
            }

            private void GetCQGTickClassContributorIdCode(QueryInfo query, object[] args)
            {
                CQGTick ContributorIdCodeObj = (CQGTick)qObj;
                System.Int32 ContributorIdCodePropV = ContributorIdCodeObj.ContributorIdCode;
                var ContributorIdCodePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContributorIdCodePropKey, value: ContributorIdCodePropV));
            }

            private void GetCQGTickClassCorrectionType(QueryInfo query, object[] args)
            {
                CQGTick CorrectionTypeObj = (CQGTick)qObj;
                CQG.eTickCorrectionType CorrectionTypePropV = CorrectionTypeObj.CorrectionType;
                var CorrectionTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CorrectionTypePropKey, value: CorrectionTypePropV));
            }

            private void GetCQGTickClassMarketState(QueryInfo query, object[] args)
            {
                CQGTick MarketStateObj = (CQGTick)qObj;
                CQG.eMarketState MarketStatePropV = MarketStateObj.MarketState;
                var MarketStatePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MarketStatePropKey, value: MarketStatePropV));
            }

            private void GetCQGTickClassPrice(QueryInfo query, object[] args)
            {
                CQGTick PriceObj = (CQGTick)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGTickClassPriceType(QueryInfo query, object[] args)
            {
                CQGTick PriceTypeObj = (CQGTick)qObj;
                CQG.eTickPriceType PriceTypePropV = PriceTypeObj.PriceType;
                var PriceTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PriceTypePropKey, value: PriceTypePropV));
            }

            private void GetCQGTickClassSalesConditionCode(QueryInfo query, object[] args)
            {
                CQGTick SalesConditionCodeObj = (CQGTick)qObj;
                System.Int32 SalesConditionCodePropV = SalesConditionCodeObj.SalesConditionCode;
                var SalesConditionCodePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SalesConditionCodePropKey, value: SalesConditionCodePropV));
            }

            private void GetCQGTickClassSalesConditionLabel(QueryInfo query, object[] args)
            {
                CQGTick SalesConditionLabelObj = (CQGTick)qObj;
                System.String SalesConditionLabelPropV = SalesConditionLabelObj.SalesConditionLabel;
                var SalesConditionLabelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SalesConditionLabelPropKey, value: SalesConditionLabelPropV));
            }

            private void GetCQGTickClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTick TimestampObj = (CQGTick)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGTickClassVolume(QueryInfo query, object[] args)
            {
                CQGTick VolumeObj = (CQGTick)qObj;
                System.Int32 VolumePropV = VolumeObj.Volume;
                var VolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumePropV));
            }

            private void GetCQGTicksClassCount(QueryInfo query, object[] args)
            {
                CQGTicks CountObj = (CQGTicks)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTicksClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGTicks EndTimestampObj = (CQGTicks)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGTicksClassHasUpdates(QueryInfo query, object[] args)
            {
                CQGTicks HasUpdatesObj = (CQGTicks)qObj;
                System.Boolean HasUpdatesPropV = HasUpdatesObj.HasUpdates;
                var HasUpdatesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HasUpdatesPropKey, value: HasUpdatesPropV));
            }

            private void GetCQGTicksClassId(QueryInfo query, object[] args)
            {
                CQGTicks IdObj = (CQGTicks)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGTicksClassItem(QueryInfo query, object[] args)
            {
                CQGTicks ItemObj = (CQGTicks)qObj;
                CQG.CQGTick ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTicksClassLastError(QueryInfo query, object[] args)
            {
                CQGTicks LastErrorObj = (CQGTicks)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGTicksClassRequest(QueryInfo query, object[] args)
            {
                CQGTicks RequestObj = (CQGTicks)qObj;
                CQG.CQGTicksRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGTicksClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGTicks StartTimestampObj = (CQGTicks)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGTicksClassStatus(QueryInfo query, object[] args)
            {
                CQGTicks StatusObj = (CQGTicks)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGTicksClassTag(QueryInfo query, object[] args)
            {
                CQGTicks TagObj = (CQGTicks)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGTicksCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGTicksCollection CountObj = (CQGTicksCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTicksCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGTicksCollection ItemObj = (CQGTicksCollection)qObj;
                CQG.CQGTicks ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTicksCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGTicksCollection ItemByIdObj = (CQGTicksCollection)qObj;
                CQG.CQGTicks ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGTicksRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTicksRequest RangeEndObj = (CQGTicksRequest)qObj;
                System.DateTime RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGTicksRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTicksRequest RangeStartObj = (CQGTicksRequest)qObj;
                System.DateTime RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGTicksRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTicksRequest SessionsFilterObj = (CQGTicksRequest)qObj;
                System.Int32 SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGTicksRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTicksRequest SymbolObj = (CQGTicksRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGTicksRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGTicksRequest TickFilterObj = (CQGTicksRequest)qObj;
                CQG.eTickFilter TickFilterPropV = TickFilterObj.TickFilter;
                var TickFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterPropV));
            }

            private void GetCQGTicksRequestClassType(QueryInfo query, object[] args)
            {
                CQGTicksRequest TypeObj = (CQGTicksRequest)qObj;
                CQG.eTicksRequestType TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGTimedBarClassActualVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar ActualVolumeObj = (CQGTimedBar)qObj;
                System.Int32 ActualVolumePropV = ActualVolumeObj.ActualVolume;
                var ActualVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActualVolumePropKey, value: ActualVolumePropV));
            }

            private void GetCQGTimedBarClassAskVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar AskVolumeObj = (CQGTimedBar)qObj;
                System.Int32 AskVolumePropV = AskVolumeObj.AskVolume;
                var AskVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumePropV));
            }

            private void GetCQGTimedBarClassAvg(QueryInfo query, object[] args)
            {
                CQGTimedBar AvgObj = (CQGTimedBar)qObj;
                System.Double AvgPropV = AvgObj.Avg;
                var AvgPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgPropV));
            }

            private void GetCQGTimedBarClassBidVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar BidVolumeObj = (CQGTimedBar)qObj;
                System.Int32 BidVolumePropV = BidVolumeObj.BidVolume;
                var BidVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumePropV));
            }

            private void GetCQGTimedBarClassClose(QueryInfo query, object[] args)
            {
                CQGTimedBar CloseObj = (CQGTimedBar)qObj;
                System.Double ClosePropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosePropV));
            }

            private void GetCQGTimedBarClassCommodityOpenInterest(QueryInfo query, object[] args)
            {
                CQGTimedBar CommodityOpenInterestObj = (CQGTimedBar)qObj;
                System.Int32 CommodityOpenInterestPropV = CommodityOpenInterestObj.CommodityOpenInterest;
                var CommodityOpenInterestPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityOpenInterestPropKey, value: CommodityOpenInterestPropV));
            }

            private void GetCQGTimedBarClassCommodityTickVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar CommodityTickVolumeObj = (CQGTimedBar)qObj;
                System.Int32 CommodityTickVolumePropV = CommodityTickVolumeObj.CommodityTickVolume;
                var CommodityTickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityTickVolumePropKey, value: CommodityTickVolumePropV));
            }

            private void GetCQGTimedBarClassCommodityVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar CommodityVolumeObj = (CQGTimedBar)qObj;
                System.Int32 CommodityVolumePropV = CommodityVolumeObj.CommodityVolume;
                var CommodityVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityVolumePropKey, value: CommodityVolumePropV));
            }

            private void GetCQGTimedBarClassContractOpenInterest(QueryInfo query, object[] args)
            {
                CQGTimedBar ContractOpenInterestObj = (CQGTimedBar)qObj;
                System.Int32 ContractOpenInterestPropV = ContractOpenInterestObj.ContractOpenInterest;
                var ContractOpenInterestPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractOpenInterestPropKey, value: ContractOpenInterestPropV));
            }

            private void GetCQGTimedBarClassContractTickVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar ContractTickVolumeObj = (CQGTimedBar)qObj;
                System.Int32 ContractTickVolumePropV = ContractTickVolumeObj.ContractTickVolume;
                var ContractTickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractTickVolumePropKey, value: ContractTickVolumePropV));
            }

            private void GetCQGTimedBarClassContractVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar ContractVolumeObj = (CQGTimedBar)qObj;
                System.Int32 ContractVolumePropV = ContractVolumeObj.ContractVolume;
                var ContractVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractVolumePropKey, value: ContractVolumePropV));
            }

            private void GetCQGTimedBarClassHigh(QueryInfo query, object[] args)
            {
                CQGTimedBar HighObj = (CQGTimedBar)qObj;
                System.Double HighPropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighPropV));
            }

            private void GetCQGTimedBarClassHLC3(QueryInfo query, object[] args)
            {
                CQGTimedBar HLC3Obj = (CQGTimedBar)qObj;
                System.Double HLC3PropV = HLC3Obj.HLC3;
                var HLC3PropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3PropV));
            }

            private void GetCQGTimedBarClassLow(QueryInfo query, object[] args)
            {
                CQGTimedBar LowObj = (CQGTimedBar)qObj;
                System.Double LowPropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowPropV));
            }

            private void GetCQGTimedBarClassMid(QueryInfo query, object[] args)
            {
                CQGTimedBar MidObj = (CQGTimedBar)qObj;
                System.Double MidPropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidPropV));
            }

            private void GetCQGTimedBarClassOpen(QueryInfo query, object[] args)
            {
                CQGTimedBar OpenObj = (CQGTimedBar)qObj;
                System.Double OpenPropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenPropV));
            }

            private void GetCQGTimedBarClassOpenInterest(QueryInfo query, object[] args)
            {
                CQGTimedBar OpenInterestObj = (CQGTimedBar)qObj;
                System.Int32 OpenInterestPropV = OpenInterestObj.OpenInterest;
                var OpenInterestPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenInterestPropKey, value: OpenInterestPropV));
            }

            private void GetCQGTimedBarClassRange(QueryInfo query, object[] args)
            {
                CQGTimedBar RangeObj = (CQGTimedBar)qObj;
                System.Double RangePropV = RangeObj.Range;
                var RangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangePropV));
            }

            private void GetCQGTimedBarClassTickVolume(QueryInfo query, object[] args)
            {
                CQGTimedBar TickVolumeObj = (CQGTimedBar)qObj;
                System.Int32 TickVolumePropV = TickVolumeObj.TickVolume;
                var TickVolumePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumePropV));
            }

            private void GetCQGTimedBarClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTimedBar TimestampObj = (CQGTimedBar)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGTimedBarClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGTimedBar TrueHighObj = (CQGTimedBar)qObj;
                System.Double TrueHighPropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighPropV));
            }

            private void GetCQGTimedBarClassTrueLow(QueryInfo query, object[] args)
            {
                CQGTimedBar TrueLowObj = (CQGTimedBar)qObj;
                System.Double TrueLowPropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowPropV));
            }

            private void GetCQGTimedBarClassTrueRange(QueryInfo query, object[] args)
            {
                CQGTimedBar TrueRangeObj = (CQGTimedBar)qObj;
                System.Double TrueRangePropV = TrueRangeObj.TrueRange;
                var TrueRangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangePropV));
            }

            private void GetCQGTimedBarsClassCount(QueryInfo query, object[] args)
            {
                CQGTimedBars CountObj = (CQGTimedBars)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTimedBarsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGTimedBars EndTimestampObj = (CQGTimedBars)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGTimedBarsClassId(QueryInfo query, object[] args)
            {
                CQGTimedBars IdObj = (CQGTimedBars)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGTimedBarsClassItem(QueryInfo query, object[] args)
            {
                CQGTimedBars ItemObj = (CQGTimedBars)qObj;
                CQG.CQGTimedBar ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTimedBarsClassLastError(QueryInfo query, object[] args)
            {
                CQGTimedBars LastErrorObj = (CQGTimedBars)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGTimedBarsClassRequest(QueryInfo query, object[] args)
            {
                CQGTimedBars RequestObj = (CQGTimedBars)qObj;
                CQG.CQGTimedBarsRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGTimedBarsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGTimedBars StartTimestampObj = (CQGTimedBars)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGTimedBarsClassStatus(QueryInfo query, object[] args)
            {
                CQGTimedBars StatusObj = (CQGTimedBars)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGTimedBarsClassTag(QueryInfo query, object[] args)
            {
                CQGTimedBars TagObj = (CQGTimedBars)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGTimedBarsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection CountObj = (CQGTimedBarsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTimedBarsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection ItemObj = (CQGTimedBarsCollection)qObj;
                CQG.CQGTimedBars ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTimedBarsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection ItemByIdObj = (CQGTimedBarsCollection)qObj;
                CQG.CQGTimedBars ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGTimedBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest ContinuationObj = (CQGTimedBarsRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGTimedBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest DaysBeforeExpirationObj = (CQGTimedBarsRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGTimedBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest EqualizeClosesObj = (CQGTimedBarsRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGTimedBarsRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest HistoricalPeriodObj = (CQGTimedBarsRequest)qObj;
                CQG.eHistoricalPeriod HistoricalPeriodPropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodPropV));
            }

            private void GetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IgnoreEventsOnHistoricalBarsObj = (CQGTimedBarsRequest)qObj;
                System.Boolean IgnoreEventsOnHistoricalBarsPropV = IgnoreEventsOnHistoricalBarsObj.IgnoreEventsOnHistoricalBars;
                var IgnoreEventsOnHistoricalBarsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IgnoreEventsOnHistoricalBarsPropKey, value: IgnoreEventsOnHistoricalBarsPropV));
            }

            private void GetCQGTimedBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IncludeEndObj = (CQGTimedBarsRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGTimedBarsRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IntradayPeriodObj = (CQGTimedBarsRequest)qObj;
                System.Int32 IntradayPeriodPropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodPropV));
            }

            private void GetCQGTimedBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest RangeEndObj = (CQGTimedBarsRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGTimedBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest RangeStartObj = (CQGTimedBarsRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGTimedBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SessionFlagsObj = (CQGTimedBarsRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGTimedBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SessionsFilterObj = (CQGTimedBarsRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGTimedBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SymbolObj = (CQGTimedBarsRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGTimedBarsRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest TickFilterObj = (CQGTimedBarsRequest)qObj;
                CQG.eTickFilter TickFilterPropV = TickFilterObj.TickFilter;
                var TickFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterPropV));
            }

            private void GetCQGTimedBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest UpdatesEnabledObj = (CQGTimedBarsRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void GetCQGTradeClassGroupID(QueryInfo query, object[] args)
            {
                CQGTrade GroupIDObj = (CQGTrade)qObj;
                System.Int32 GroupIDPropV = GroupIDObj.GroupID;
                var GroupIDPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GroupIDPropKey, value: GroupIDPropV));
            }

            private void GetCQGTradeClassIsMatched(QueryInfo query, object[] args)
            {
                CQGTrade IsMatchedObj = (CQGTrade)qObj;
                System.Boolean IsMatchedPropV = IsMatchedObj.IsMatched;
                var IsMatchedPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsMatchedPropKey, value: IsMatchedPropV));
            }

            private void GetCQGTradeClassPrice(QueryInfo query, object[] args)
            {
                CQGTrade PriceObj = (CQGTrade)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGTradeClassQuantity(QueryInfo query, object[] args)
            {
                CQGTrade QuantityObj = (CQGTrade)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGTradeClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGTrade ServerTimestampObj = (CQGTrade)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGTradeClassSide(QueryInfo query, object[] args)
            {
                CQGTrade SideObj = (CQGTrade)qObj;
                CQG.eOrderSide SidePropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidePropV));
            }

            private void GetCQGTradeClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTrade TimestampObj = (CQGTrade)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGTradeEntriesClassCount(QueryInfo query, object[] args)
            {
                CQGTradeEntries CountObj = (CQGTradeEntries)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradeEntriesClassItem(QueryInfo query, object[] args)
            {
                CQGTradeEntries ItemObj = (CQGTradeEntries)qObj;
                CQG.CQGTradeEntry ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradeEntryClassCanPlaceOrderSignal(QueryInfo query, object[] args)
            {
                CQGTradeEntry CanPlaceOrderSignalObj = (CQGTradeEntry)qObj;
                System.Boolean CanPlaceOrderSignalPropV = CanPlaceOrderSignalObj.CanPlaceOrderSignal;
                var CanPlaceOrderSignalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanPlaceOrderSignalPropKey, value: CanPlaceOrderSignalPropV));
            }

            private void GetCQGTradeEntryClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradeEntry DefinitionObj = (CQGTradeEntry)qObj;
                CQG.CQGTradeEntryDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradeEntryClassPrice(QueryInfo query, object[] args)
            {
                CQGTradeEntry PriceObj = (CQGTradeEntry)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGTradeEntryClassQuantity(QueryInfo query, object[] args)
            {
                CQGTradeEntry QuantityObj = (CQGTradeEntry)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGTradeEntryClassRelatedExits(QueryInfo query, object[] args)
            {
                CQGTradeEntry RelatedExitsObj = (CQGTradeEntry)qObj;
                CQG.CQGTradeExits RelatedExitsPropV = RelatedExitsObj.RelatedExits;
                var RelatedExitsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RelatedExitsPropKey, RelatedExitsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RelatedExitsPropKey));
            }

            private void GetCQGTradeEntryClassSignal(QueryInfo query, object[] args)
            {
                CQGTradeEntry SignalObj = (CQGTradeEntry)qObj;
                System.Boolean SignalPropV = SignalObj.Signal;
                var SignalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SignalPropKey, value: SignalPropV));
            }

            private void GetCQGTradeEntryClassStopLimitPrice(QueryInfo query, object[] args)
            {
                CQGTradeEntry StopLimitPriceObj = (CQGTradeEntry)qObj;
                System.Double StopLimitPricePropV = StopLimitPriceObj.StopLimitPrice;
                var StopLimitPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricePropV));
            }

            private void GetCQGTradeEntryClassTrade(QueryInfo query, object[] args)
            {
                CQGTradeEntry TradeObj = (CQGTradeEntry)qObj;
                CQG.CQGTradingSystemTrade TradePropV = TradeObj.Trade;
                var TradePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
            }

            private void GetCQGTradeEntryDefinitionClassAllowEntryOnExit(QueryInfo query, object[] args)
            {
                CQGTradeEntryDefinition AllowEntryOnExitObj = (CQGTradeEntryDefinition)qObj;
                System.Boolean AllowEntryOnExitPropV = AllowEntryOnExitObj.AllowEntryOnExit;
                var AllowEntryOnExitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowEntryOnExitPropKey, value: AllowEntryOnExitPropV));
            }

            private void GetCQGTradeEntryDefinitionClassAllowPyramids(QueryInfo query, object[] args)
            {
                CQGTradeEntryDefinition AllowPyramidsObj = (CQGTradeEntryDefinition)qObj;
                System.Boolean AllowPyramidsPropV = AllowPyramidsObj.AllowPyramids;
                var AllowPyramidsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowPyramidsPropKey, value: AllowPyramidsPropV));
            }

            private void GetCQGTradeEntryDefinitionClassOrderType(QueryInfo query, object[] args)
            {
                CQGTradeEntryDefinition OrderTypeObj = (CQGTradeEntryDefinition)qObj;
                CQG.eOrderType OrderTypePropV = OrderTypeObj.OrderType;
                var OrderTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderTypePropKey, value: OrderTypePropV));
            }

            private void GetCQGTradeExitClassCanPlaceOrderSignal(QueryInfo query, object[] args)
            {
                CQGTradeExit CanPlaceOrderSignalObj = (CQGTradeExit)qObj;
                System.Boolean CanPlaceOrderSignalPropV = CanPlaceOrderSignalObj.CanPlaceOrderSignal;
                var CanPlaceOrderSignalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanPlaceOrderSignalPropKey, value: CanPlaceOrderSignalPropV));
            }

            private void GetCQGTradeExitClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradeExit DefinitionObj = (CQGTradeExit)qObj;
                CQG.CQGTradeExitDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradeExitClassPrice(QueryInfo query, object[] args)
            {
                CQGTradeExit PriceObj = (CQGTradeExit)qObj;
                System.Double PricePropV = PriceObj.Price;
                var PricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricePropV));
            }

            private void GetCQGTradeExitClassQuantity(QueryInfo query, object[] args)
            {
                CQGTradeExit QuantityObj = (CQGTradeExit)qObj;
                System.Int32 QuantityPropV = QuantityObj.Quantity;
                var QuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantityPropV));
            }

            private void GetCQGTradeExitClassRelatedEntries(QueryInfo query, object[] args)
            {
                CQGTradeExit RelatedEntriesObj = (CQGTradeExit)qObj;
                CQG.CQGTradeEntries RelatedEntriesPropV = RelatedEntriesObj.RelatedEntries;
                var RelatedEntriesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RelatedEntriesPropKey, RelatedEntriesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RelatedEntriesPropKey));
            }

            private void GetCQGTradeExitClassSignal(QueryInfo query, object[] args)
            {
                CQGTradeExit SignalObj = (CQGTradeExit)qObj;
                System.Boolean SignalPropV = SignalObj.Signal;
                var SignalPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SignalPropKey, value: SignalPropV));
            }

            private void GetCQGTradeExitClassStopLimitPrice(QueryInfo query, object[] args)
            {
                CQGTradeExit StopLimitPriceObj = (CQGTradeExit)qObj;
                System.Double StopLimitPricePropV = StopLimitPriceObj.StopLimitPrice;
                var StopLimitPricePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricePropV));
            }

            private void GetCQGTradeExitClassTrade(QueryInfo query, object[] args)
            {
                CQGTradeExit TradeObj = (CQGTradeExit)qObj;
                CQG.CQGTradingSystemTrade TradePropV = TradeObj.Trade;
                var TradePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
            }

            private void GetCQGTradeExitDefinitionClassAllowExitOnEntry(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition AllowExitOnEntryObj = (CQGTradeExitDefinition)qObj;
                System.Boolean AllowExitOnEntryPropV = AllowExitOnEntryObj.AllowExitOnEntry;
                var AllowExitOnEntryPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowExitOnEntryPropKey, value: AllowExitOnEntryPropV));
            }

            private void GetCQGTradeExitDefinitionClassAllowMoreThanOnce(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition AllowMoreThanOnceObj = (CQGTradeExitDefinition)qObj;
                System.Boolean AllowMoreThanOncePropV = AllowMoreThanOnceObj.AllowMoreThanOnce;
                var AllowMoreThanOncePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowMoreThanOncePropKey, value: AllowMoreThanOncePropV));
            }

            private void GetCQGTradeExitDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition NameObj = (CQGTradeExitDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGTradeExitDefinitionClassOrderType(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition OrderTypeObj = (CQGTradeExitDefinition)qObj;
                CQG.eOrderType OrderTypePropV = OrderTypeObj.OrderType;
                var OrderTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderTypePropKey, value: OrderTypePropV));
            }

            private void GetCQGTradeExitDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions CountObj = (CQGTradeExitDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradeExitDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions ItemObj = (CQGTradeExitDefinitions)qObj;
                CQG.CQGTradeExitDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradeExitDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions ItemByNameObj = (CQGTradeExitDefinitions)qObj;
                CQG.CQGTradeExitDefinition ItemByNamePropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGTradeExitsClassCount(QueryInfo query, object[] args)
            {
                CQGTradeExits CountObj = (CQGTradeExits)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradeExitsClassItem(QueryInfo query, object[] args)
            {
                CQGTradeExits ItemObj = (CQGTradeExits)qObj;
                CQG.CQGTradeExit ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradeExitsClassItemByName(QueryInfo query, object[] args)
            {
                CQGTradeExits ItemByNameObj = (CQGTradeExits)qObj;
                CQG.CQGTradeExit ItemByNamePropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGTradesClassCount(QueryInfo query, object[] args)
            {
                CQGTrades CountObj = (CQGTrades)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradesClassItem(QueryInfo query, object[] args)
            {
                CQGTrades ItemObj = (CQGTrades)qObj;
                CQG.CQGTrade ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemBaseBarParameterClassName(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter NameObj = (CQGTradingSystemBaseBarParameter)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGTradingSystemBaseBarParameterClassType(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter TypeObj = (CQGTradingSystemBaseBarParameter)qObj;
                CQG.eTradingSystemBaseBarParameter TypePropV = TypeObj.Type;
                var TypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypePropV));
            }

            private void GetCQGTradingSystemBaseBarParameterClassValue(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter ValueObj = (CQGTradingSystemBaseBarParameter)qObj;
                System.Object ValuePropV = ValueObj.Value;
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuePropV));
            }

            private void GetCQGTradingSystemBaseBarParametersClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameters CountObj = (CQGTradingSystemBaseBarParameters)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradingSystemBaseBarParametersClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameters ItemObj = (CQGTradingSystemBaseBarParameters)qObj;
                CQG.CQGTradingSystemBaseBarParameter ItemPropV = ItemObj[(CQG.eTradingSystemBaseBarParameter)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradingSystem DefinitionObj = (CQGTradingSystem)qObj;
                CQG.CQGTradingSystemDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradingSystemClassId(QueryInfo query, object[] args)
            {
                CQGTradingSystem IdObj = (CQGTradingSystem)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGTradingSystemClassLastError(QueryInfo query, object[] args)
            {
                CQGTradingSystem LastErrorObj = (CQGTradingSystem)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGTradingSystemClassRequest(QueryInfo query, object[] args)
            {
                CQGTradingSystem RequestObj = (CQGTradingSystem)qObj;
                CQG.CQGTradingSystemRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGTradingSystemClassStatistics(QueryInfo query, object[] args)
            {
                CQGTradingSystem StatisticsObj = (CQGTradingSystem)qObj;
                CQG.CQGTradingSystemStatisticsCollection StatisticsPropV = StatisticsObj.Statistics;
                var StatisticsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(StatisticsPropKey, StatisticsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsPropKey));
            }

            private void GetCQGTradingSystemClassStatus(QueryInfo query, object[] args)
            {
                CQGTradingSystem StatusObj = (CQGTradingSystem)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGTradingSystemClassTag(QueryInfo query, object[] args)
            {
                CQGTradingSystem TagObj = (CQGTradingSystem)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGTradingSystemClassTradesRows(QueryInfo query, object[] args)
            {
                CQGTradingSystem TradesRowsObj = (CQGTradingSystem)qObj;
                CQG.CQGTradingSystemTradesRows TradesRowsPropV = TradesRowsObj.TradesRows;
                var TradesRowsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradesRowsPropKey, TradesRowsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradesRowsPropKey));
            }

            private void GetCQGTradingSystemDefinitionClassAbbreviation(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition AbbreviationObj = (CQGTradingSystemDefinition)qObj;
                System.String AbbreviationPropV = AbbreviationObj.Abbreviation;
                var AbbreviationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationPropV));
            }

            private void GetCQGTradingSystemDefinitionClassCommission(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition CommissionObj = (CQGTradingSystemDefinition)qObj;
                System.Double CommissionPropV = CommissionObj.Commission;
                var CommissionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommissionPropKey, value: CommissionPropV));
            }

            private void GetCQGTradingSystemDefinitionClassCommissionType(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition CommissionTypeObj = (CQGTradingSystemDefinition)qObj;
                CQG.eTradingSystemCommissionType CommissionTypePropV = CommissionTypeObj.CommissionType;
                var CommissionTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommissionTypePropKey, value: CommissionTypePropV));
            }

            private void GetCQGTradingSystemDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition NameObj = (CQGTradingSystemDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGTradingSystemDefinitionClassParameterDefinitions(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition ParameterDefinitionsObj = (CQGTradingSystemDefinition)qObj;
                CQG.CQGParameterDefinitions ParameterDefinitionsPropV = ParameterDefinitionsObj.ParameterDefinitions;
                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
            }

            private void GetCQGTradingSystemDefinitionClassTradeDefinitions(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition TradeDefinitionsObj = (CQGTradingSystemDefinition)qObj;
                CQG.CQGTradingSystemTradeDefinitions TradeDefinitionsPropV = TradeDefinitionsObj.TradeDefinitions;
                var TradeDefinitionsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeDefinitionsPropKey, TradeDefinitionsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeDefinitionsPropKey));
            }

            private void GetCQGTradingSystemDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions CountObj = (CQGTradingSystemDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradingSystemDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions ItemObj = (CQGTradingSystemDefinitions)qObj;
                CQG.CQGTradingSystemDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemDefinitionsClassItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions ItemByAbbreviationObj = (CQGTradingSystemDefinitions)qObj;
                CQG.CQGTradingSystemDefinition ItemByAbbreviationPropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
            }

            private void GetCQGTradingSystemInsertInfoClassIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemInsertInfo IndexObj = (CQGTradingSystemInsertInfo)qObj;
                System.Int32 IndexPropV = IndexObj.Index;
                var IndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexPropV));
            }

            private void GetCQGTradingSystemRelationAddInfoClassEntry(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo EntryObj = (CQGTradingSystemRelationAddInfo)qObj;
                CQG.CQGTradeEntry EntryPropV = EntryObj.Entry;
                var EntryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(EntryPropKey, EntryPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryPropKey));
            }

            private void GetCQGTradingSystemRelationAddInfoClassEntryRowIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo EntryRowIndexObj = (CQGTradingSystemRelationAddInfo)qObj;
                System.Int32 EntryRowIndexPropV = EntryRowIndexObj.EntryRowIndex;
                var EntryRowIndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryRowIndexPropKey, value: EntryRowIndexPropV));
            }

            private void GetCQGTradingSystemRelationAddInfoClassExit(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo ExitObj = (CQGTradingSystemRelationAddInfo)qObj;
                CQG.CQGTradeExit ExitPropV = ExitObj.Exit;
                var ExitPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ExitPropKey, ExitPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitPropKey));
            }

            private void GetCQGTradingSystemRelationAddInfoClassExitRowIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo ExitRowIndexObj = (CQGTradingSystemRelationAddInfo)qObj;
                System.Int32 ExitRowIndexPropV = ExitRowIndexObj.ExitRowIndex;
                var ExitRowIndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitRowIndexPropKey, value: ExitRowIndexPropV));
            }

            private void GetCQGTradingSystemRemoveInfoClassIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemRemoveInfo IndexObj = (CQGTradingSystemRemoveInfo)qObj;
                System.Int32 IndexPropV = IndexObj.Index;
                var IndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexPropV));
            }

            private void GetCQGTradingSystemRequestClassBaseBarParameters(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseBarParametersObj = (CQGTradingSystemRequest)qObj;
                CQG.CQGTradingSystemBaseBarParameters BaseBarParametersPropV = BaseBarParametersObj.BaseBarParameters;
                var BaseBarParametersPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(BaseBarParametersPropKey, BaseBarParametersPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseBarParametersPropKey));
            }

            private void GetCQGTradingSystemRequestClassBaseBarType(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseBarTypeObj = (CQGTradingSystemRequest)qObj;
                CQG.eTradingSystemBaseBar BaseBarTypePropV = BaseBarTypeObj.BaseBarType;
                var BaseBarTypePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseBarTypePropKey, value: BaseBarTypePropV));
            }

            private void GetCQGTradingSystemRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseExpressionObj = (CQGTradingSystemRequest)qObj;
                System.String BaseExpressionPropV = BaseExpressionObj.BaseExpression;
                var BaseExpressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionPropV));
            }

            private void GetCQGTradingSystemRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ContinuationObj = (CQGTradingSystemRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGTradingSystemRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest DaysBeforeExpirationObj = (CQGTradingSystemRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGTradingSystemRequestClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest DefinitionObj = (CQGTradingSystemRequest)qObj;
                CQG.CQGTradingSystemDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradingSystemRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest EqualizeClosesObj = (CQGTradingSystemRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGTradingSystemRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest HistoricalPeriodObj = (CQGTradingSystemRequest)qObj;
                CQG.eHistoricalPeriod HistoricalPeriodPropV = HistoricalPeriodObj.HistoricalPeriod;
                var HistoricalPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodPropV));
            }

            private void GetCQGTradingSystemRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IncludeEndObj = (CQGTradingSystemRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGTradingSystemRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IntradayPeriodObj = (CQGTradingSystemRequest)qObj;
                System.Int32 IntradayPeriodPropV = IntradayPeriodObj.IntradayPeriod;
                var IntradayPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodPropV));
            }

            private void GetCQGTradingSystemRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ParameterObj = (CQGTradingSystemRequest)qObj;
                System.Object ParameterPropV = ParameterObj.Parameter[(System.Object)args[0]];
                var ParameterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterPropV));
            }

            private void GetCQGTradingSystemRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RangeEndObj = (CQGTradingSystemRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGTradingSystemRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RangeStartObj = (CQGTradingSystemRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGTradingSystemRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RecalcPeriodObj = (CQGTradingSystemRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGTradingSystemRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SessionFlagsObj = (CQGTradingSystemRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGTradingSystemRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SessionsFilterObj = (CQGTradingSystemRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGTradingSystemRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SubscriptionLevelObj = (CQGTradingSystemRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGTradingSystemsClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystems CountObj = (CQGTradingSystems)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradingSystemsClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystems ItemObj = (CQGTradingSystems)qObj;
                CQG.CQGTradingSystem ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemsClassItemById(QueryInfo query, object[] args)
            {
                CQGTradingSystems ItemByIdObj = (CQGTradingSystems)qObj;
                CQG.CQGTradingSystem ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGTradingSystemStatisticsChangeInfoClassStatistics(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsChangeInfo StatisticsObj = (CQGTradingSystemStatisticsChangeInfo)qObj;
                CQG.CQGTradingSystemStatistics StatisticsPropV = StatisticsObj.Statistics;
                var StatisticsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(StatisticsPropKey, StatisticsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsPropKey));
            }

            private void GetCQGTradingSystemStatisticsClassAverageDuration(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics AverageDurationObj = (CQGTradingSystemStatistics)qObj;
                System.Double AverageDurationPropV = AverageDurationObj.AverageDuration;
                var AverageDurationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageDurationPropKey, value: AverageDurationPropV));
            }

            private void GetCQGTradingSystemStatisticsClassAverageLoss(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics AverageLossObj = (CQGTradingSystemStatistics)qObj;
                System.Double AverageLossPropV = AverageLossObj.AverageLoss;
                var AverageLossPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageLossPropKey, value: AverageLossPropV));
            }

            private void GetCQGTradingSystemStatisticsClassAverageProfit(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics AverageProfitObj = (CQGTradingSystemStatistics)qObj;
                System.Double AverageProfitPropV = AverageProfitObj.AverageProfit;
                var AverageProfitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageProfitPropKey, value: AverageProfitPropV));
            }

            private void GetCQGTradingSystemStatisticsClassAverageWin(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics AverageWinObj = (CQGTradingSystemStatistics)qObj;
                System.Double AverageWinPropV = AverageWinObj.AverageWin;
                var AverageWinPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageWinPropKey, value: AverageWinPropV));
            }

            private void GetCQGTradingSystemStatisticsClassClosedNetProfit(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ClosedNetProfitObj = (CQGTradingSystemStatistics)qObj;
                System.Double ClosedNetProfitPropV = ClosedNetProfitObj.ClosedNetProfit;
                var ClosedNetProfitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosedNetProfitPropKey, value: ClosedNetProfitPropV));
            }

            private void GetCQGTradingSystemStatisticsClassCurConsecLosses(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics CurConsecLossesObj = (CQGTradingSystemStatistics)qObj;
                System.Double CurConsecLossesPropV = CurConsecLossesObj.CurConsecLosses;
                var CurConsecLossesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurConsecLossesPropKey, value: CurConsecLossesPropV));
            }

            private void GetCQGTradingSystemStatisticsClassCurConsecWins(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics CurConsecWinsObj = (CQGTradingSystemStatistics)qObj;
                System.Double CurConsecWinsPropV = CurConsecWinsObj.CurConsecWins;
                var CurConsecWinsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurConsecWinsPropKey, value: CurConsecWinsPropV));
            }

            private void GetCQGTradingSystemStatisticsClassCurDrawDown(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics CurDrawDownObj = (CQGTradingSystemStatistics)qObj;
                System.Double CurDrawDownPropV = CurDrawDownObj.CurDrawDown;
                var CurDrawDownPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurDrawDownPropKey, value: CurDrawDownPropV));
            }

            private void GetCQGTradingSystemStatisticsClassLinearRegression(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics LinearRegressionObj = (CQGTradingSystemStatistics)qObj;
                System.Double LinearRegressionPropV = LinearRegressionObj.LinearRegression;
                var LinearRegressionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LinearRegressionPropKey, value: LinearRegressionPropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxClosedDraw(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxClosedDrawObj = (CQGTradingSystemStatistics)qObj;
                System.Double MaxClosedDrawPropV = MaxClosedDrawObj.MaxClosedDraw;
                var MaxClosedDrawPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxClosedDrawPropKey, value: MaxClosedDrawPropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxConsecLosses(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxConsecLossesObj = (CQGTradingSystemStatistics)qObj;
                System.Double MaxConsecLossesPropV = MaxConsecLossesObj.MaxConsecLosses;
                var MaxConsecLossesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxConsecLossesPropKey, value: MaxConsecLossesPropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxConsecWins(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxConsecWinsObj = (CQGTradingSystemStatistics)qObj;
                System.Double MaxConsecWinsPropV = MaxConsecWinsObj.MaxConsecWins;
                var MaxConsecWinsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxConsecWinsPropKey, value: MaxConsecWinsPropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxDrawAmount(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxDrawAmountObj = (CQGTradingSystemStatistics)qObj;
                System.Double MaxDrawAmountPropV = MaxDrawAmountObj.MaxDrawAmount;
                var MaxDrawAmountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxDrawAmountPropKey, value: MaxDrawAmountPropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaxDrawDuration(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaxDrawDurationObj = (CQGTradingSystemStatistics)qObj;
                System.Double MaxDrawDurationPropV = MaxDrawDurationObj.MaxDrawDuration;
                var MaxDrawDurationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxDrawDurationPropKey, value: MaxDrawDurationPropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaximumLoss(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaximumLossObj = (CQGTradingSystemStatistics)qObj;
                System.Double MaximumLossPropV = MaximumLossObj.MaximumLoss;
                var MaximumLossPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaximumLossPropKey, value: MaximumLossPropV));
            }

            private void GetCQGTradingSystemStatisticsClassMaximumWin(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics MaximumWinObj = (CQGTradingSystemStatistics)qObj;
                System.Double MaximumWinPropV = MaximumWinObj.MaximumWin;
                var MaximumWinPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaximumWinPropKey, value: MaximumWinPropV));
            }

            private void GetCQGTradingSystemStatisticsClassOpenPosition(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics OpenPositionObj = (CQGTradingSystemStatistics)qObj;
                System.Double OpenPositionPropV = OpenPositionObj.OpenPosition;
                var OpenPositionPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPositionPropKey, value: OpenPositionPropV));
            }

            private void GetCQGTradingSystemStatisticsClassPercentLong(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics PercentLongObj = (CQGTradingSystemStatistics)qObj;
                System.Double PercentLongPropV = PercentLongObj.PercentLong;
                var PercentLongPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PercentLongPropKey, value: PercentLongPropV));
            }

            private void GetCQGTradingSystemStatisticsClassPercentWinners(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics PercentWinnersObj = (CQGTradingSystemStatistics)qObj;
                System.Double PercentWinnersPropV = PercentWinnersObj.PercentWinners;
                var PercentWinnersPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PercentWinnersPropKey, value: PercentWinnersPropV));
            }

            private void GetCQGTradingSystemStatisticsClassProfitLossRatio(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ProfitLossRatioObj = (CQGTradingSystemStatistics)qObj;
                System.Double ProfitLossRatioPropV = ProfitLossRatioObj.ProfitLossRatio;
                var ProfitLossRatioPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitLossRatioPropKey, value: ProfitLossRatioPropV));
            }

            private void GetCQGTradingSystemStatisticsClassProfitToMaxDraw(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ProfitToMaxDrawObj = (CQGTradingSystemStatistics)qObj;
                System.Double ProfitToMaxDrawPropV = ProfitToMaxDrawObj.ProfitToMaxDraw;
                var ProfitToMaxDrawPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitToMaxDrawPropKey, value: ProfitToMaxDrawPropV));
            }

            private void GetCQGTradingSystemStatisticsClassRemoveToNeutral(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics RemoveToNeutralObj = (CQGTradingSystemStatistics)qObj;
                System.Double RemoveToNeutralPropV = RemoveToNeutralObj.RemoveToNeutral;
                var RemoveToNeutralPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoveToNeutralPropKey, value: RemoveToNeutralPropV));
            }

            private void GetCQGTradingSystemStatisticsClassReturnRetracement(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ReturnRetracementObj = (CQGTradingSystemStatistics)qObj;
                System.Double ReturnRetracementPropV = ReturnRetracementObj.ReturnRetracement;
                var ReturnRetracementPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReturnRetracementPropKey, value: ReturnRetracementPropV));
            }

            private void GetCQGTradingSystemStatisticsClassTimePercentage(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TimePercentageObj = (CQGTradingSystemStatistics)qObj;
                System.Double TimePercentagePropV = TimePercentageObj.TimePercentage;
                var TimePercentagePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimePercentagePropKey, value: TimePercentagePropV));
            }

            private void GetCQGTradingSystemStatisticsClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TimestampObj = (CQGTradingSystemStatistics)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGTradingSystemStatisticsClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TimestampOffsetObj = (CQGTradingSystemStatistics)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGTradingSystemStatisticsClassTotalNetProfit(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TotalNetProfitObj = (CQGTradingSystemStatistics)qObj;
                System.Double TotalNetProfitPropV = TotalNetProfitObj.TotalNetProfit;
                var TotalNetProfitPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalNetProfitPropKey, value: TotalNetProfitPropV));
            }

            private void GetCQGTradingSystemStatisticsClassTotalTradeCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics TotalTradeCountObj = (CQGTradingSystemStatistics)qObj;
                System.Double TotalTradeCountPropV = TotalTradeCountObj.TotalTradeCount;
                var TotalTradeCountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalTradeCountPropKey, value: TotalTradeCountPropV));
            }

            private void GetCQGTradingSystemStatisticsClassValue(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ValueObj = (CQGTradingSystemStatistics)qObj;
                System.Double ValuePropV = ValueObj[(CQG.eTradingSystemStatistic)args[0]];
                var ValuePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuePropV));
            }

            private void GetCQGTradingSystemStatisticsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsCollection CountObj = (CQGTradingSystemStatisticsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradingSystemStatisticsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsCollection ItemObj = (CQGTradingSystemStatisticsCollection)qObj;
                CQG.CQGTradingSystemStatistics ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemTradeClassDefinition(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade DefinitionObj = (CQGTradingSystemTrade)qObj;
                CQG.CQGTradingSystemTradeDefinition DefinitionPropV = DefinitionObj.Definition;
                var DefinitionPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
            }

            private void GetCQGTradingSystemTradeClassIsActive(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade IsActiveObj = (CQGTradingSystemTrade)qObj;
                System.Boolean IsActivePropV = IsActiveObj.IsActive;
                var IsActivePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsActivePropKey, value: IsActivePropV));
            }

            private void GetCQGTradingSystemTradeClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TimestampObj = (CQGTradingSystemTrade)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGTradingSystemTradeClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TimestampOffsetObj = (CQGTradingSystemTrade)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGTradingSystemTradeClassTradeEntry(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TradeEntryObj = (CQGTradingSystemTrade)qObj;
                CQG.CQGTradeEntry TradeEntryPropV = TradeEntryObj.TradeEntry;
                var TradeEntryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeEntryPropKey, TradeEntryPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeEntryPropKey));
            }

            private void GetCQGTradingSystemTradeClassTradeExits(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TradeExitsObj = (CQGTradingSystemTrade)qObj;
                CQG.CQGTradeExits TradeExitsPropV = TradeExitsObj.TradeExits;
                var TradeExitsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradeExitsPropKey, TradeExitsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeExitsPropKey));
            }

            private void GetCQGTradingSystemTradeClassTradesRow(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade TradesRowObj = (CQGTradingSystemTrade)qObj;
                CQG.CQGTradingSystemTradesRow TradesRowPropV = TradesRowObj.TradesRow;
                var TradesRowPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(TradesRowPropKey, TradesRowPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradesRowPropKey));
            }

            private void GetCQGTradingSystemTradeDefinitionClassEntry(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition EntryObj = (CQGTradingSystemTradeDefinition)qObj;
                CQG.CQGTradeEntryDefinition EntryPropV = EntryObj.Entry;
                var EntryPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(EntryPropKey, EntryPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryPropKey));
            }

            private void GetCQGTradingSystemTradeDefinitionClassExits(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition ExitsObj = (CQGTradingSystemTradeDefinition)qObj;
                CQG.CQGTradeExitDefinitions ExitsPropV = ExitsObj.Exits;
                var ExitsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ExitsPropKey, ExitsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitsPropKey));
            }

            private void GetCQGTradingSystemTradeDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition NameObj = (CQGTradingSystemTradeDefinition)qObj;
                System.String NamePropV = NameObj.Name;
                var NamePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamePropV));
            }

            private void GetCQGTradingSystemTradeDefinitionClassSide(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition SideObj = (CQGTradingSystemTradeDefinition)qObj;
                CQG.eTradeSide SidePropV = SideObj.Side;
                var SidePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidePropV));
            }

            private void GetCQGTradingSystemTradeDefinitionsClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions CountObj = (CQGTradingSystemTradeDefinitions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradingSystemTradeDefinitionsClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions ItemObj = (CQGTradingSystemTradeDefinitions)qObj;
                CQG.CQGTradingSystemTradeDefinition ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemTradeDefinitionsClassItemByName(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions ItemByNameObj = (CQGTradingSystemTradeDefinitions)qObj;
                CQG.CQGTradingSystemTradeDefinition ItemByNamePropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGTradingSystemTradesRowClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow CountObj = (CQGTradingSystemTradesRow)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradingSystemTradesRowClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow ItemObj = (CQGTradingSystemTradesRow)qObj;
                CQG.CQGTradingSystemTrade ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemTradesRowClassItemByName(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow ItemByNameObj = (CQGTradingSystemTradesRow)qObj;
                CQG.CQGTradingSystemTrade ItemByNamePropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                var ItemByNamePropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamePropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
            }

            private void GetCQGTradingSystemTradesRowClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow TimestampObj = (CQGTradingSystemTradesRow)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGTradingSystemTradesRowClassTimestampOffset(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow TimestampOffsetObj = (CQGTradingSystemTradesRow)qObj;
                System.Int32 TimestampOffsetPropV = TimestampOffsetObj.TimestampOffset;
                var TimestampOffsetPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetPropV));
            }

            private void GetCQGTradingSystemTradesRowsClassCount(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRows CountObj = (CQGTradingSystemTradesRows)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTradingSystemTradesRowsClassItem(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRows ItemObj = (CQGTradingSystemTradesRows)qObj;
                CQG.CQGTradingSystemTradesRow ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTradingSystemUpdateInfoClassIndex(QueryInfo query, object[] args)
            {
                CQGTradingSystemUpdateInfo IndexObj = (CQGTradingSystemUpdateInfo)qObj;
                System.Int32 IndexPropV = IndexObj.Index;
                var IndexPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexPropV));
            }

            private void GetCQGTradingSystemUpdateInfoClassStatisticsChangeInfo(QueryInfo query, object[] args)
            {
                CQGTradingSystemUpdateInfo StatisticsChangeInfoObj = (CQGTradingSystemUpdateInfo)qObj;
                CQG.CQGTradingSystemStatisticsChangeInfo StatisticsChangeInfoPropV = StatisticsChangeInfoObj.StatisticsChangeInfo;
                var StatisticsChangeInfoPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(StatisticsChangeInfoPropKey, StatisticsChangeInfoPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsChangeInfoPropKey));
            }

            private void GetCQGTransactionClassExecutionId(QueryInfo query, object[] args)
            {
                CQGTransaction ExecutionIdObj = (CQGTransaction)qObj;
                System.String ExecutionIdPropV = ExecutionIdObj.ExecutionId;
                var ExecutionIdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionIdPropKey, value: ExecutionIdPropV));
            }

            private void GetCQGTransactionClassFill(QueryInfo query, object[] args)
            {
                CQGTransaction FillObj = (CQGTransaction)qObj;
                CQG.CQGFill FillPropV = FillObj.Fill;
                var FillPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(FillPropKey, FillPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillPropKey));
            }

            private void GetCQGTransactionClassHangOrderIds(QueryInfo query, object[] args)
            {
                CQGTransaction HangOrderIdsObj = (CQGTransaction)qObj;
                CQG.CQGStringCollection HangOrderIdsPropV = HangOrderIdsObj.HangOrderIds;
                var HangOrderIdsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(HangOrderIdsPropKey, HangOrderIdsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HangOrderIdsPropKey));
            }

            private void GetCQGTransactionClassHangQuantity(QueryInfo query, object[] args)
            {
                CQGTransaction HangQuantityObj = (CQGTransaction)qObj;
                System.Int32 HangQuantityPropV = HangQuantityObj.HangQuantity;
                var HangQuantityPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HangQuantityPropKey, value: HangQuantityPropV));
            }

            private void GetCQGTransactionClassId(QueryInfo query, object[] args)
            {
                CQGTransaction IdObj = (CQGTransaction)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGTransactionClassOrder(QueryInfo query, object[] args)
            {
                CQGTransaction OrderObj = (CQGTransaction)qObj;
                CQG.CQGOrder OrderPropV = OrderObj.Order;
                var OrderPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
            }

            private void GetCQGTransactionClassProperties(QueryInfo query, object[] args)
            {
                CQGTransaction PropertiesObj = (CQGTransaction)qObj;
                CQG.CQGModifiedProperties PropertiesPropV = PropertiesObj.Properties;
                var PropertiesPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiesPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
            }

            private void GetCQGTransactionClassRejectReason(QueryInfo query, object[] args)
            {
                CQGTransaction RejectReasonObj = (CQGTransaction)qObj;
                System.String RejectReasonPropV = RejectReasonObj.RejectReason;
                var RejectReasonPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RejectReasonPropKey, value: RejectReasonPropV));
            }

            private void GetCQGTransactionClassServerTimestamp(QueryInfo query, object[] args)
            {
                CQGTransaction ServerTimestampObj = (CQGTransaction)qObj;
                System.DateTime ServerTimestampPropV = ServerTimestampObj.ServerTimestamp;
                var ServerTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestampPropV));
            }

            private void GetCQGTransactionClassStatus(QueryInfo query, object[] args)
            {
                CQGTransaction StatusObj = (CQGTransaction)qObj;
                CQG.eOrderEvent StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGTransactionClassStrategyLegFills(QueryInfo query, object[] args)
            {
                CQGTransaction StrategyLegFillsObj = (CQGTransaction)qObj;
                CQG.CQGStrategyLegFills StrategyLegFillsPropV = StrategyLegFillsObj.StrategyLegFills;
                var StrategyLegFillsPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(StrategyLegFillsPropKey, StrategyLegFillsPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrategyLegFillsPropKey));
            }

            private void GetCQGTransactionClassTimestamp(QueryInfo query, object[] args)
            {
                CQGTransaction TimestampObj = (CQGTransaction)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGTransactionsClassCount(QueryInfo query, object[] args)
            {
                CQGTransactions CountObj = (CQGTransactions)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGTransactionsClassItem(QueryInfo query, object[] args)
            {
                CQGTransactions ItemObj = (CQGTransactions)qObj;
                CQG.CQGTransaction ItemPropV = ItemObj[(System.String)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGTransactionsClassItemByIndex(QueryInfo query, object[] args)
            {
                CQGTransactions ItemByIndexObj = (CQGTransactions)qObj;
                CQG.CQGTransaction ItemByIndexPropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                var ItemByIndexPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
            }

            private void GetCQGYieldClassAvg(QueryInfo query, object[] args)
            {
                CQGYield AvgObj = (CQGYield)qObj;
                System.Double AvgPropV = AvgObj.Avg;
                var AvgPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgPropV));
            }

            private void GetCQGYieldClassClose(QueryInfo query, object[] args)
            {
                CQGYield CloseObj = (CQGYield)qObj;
                System.Double ClosePropV = CloseObj.Close;
                var ClosePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosePropV));
            }

            private void GetCQGYieldClassHigh(QueryInfo query, object[] args)
            {
                CQGYield HighObj = (CQGYield)qObj;
                System.Double HighPropV = HighObj.High;
                var HighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighPropV));
            }

            private void GetCQGYieldClassHLC3(QueryInfo query, object[] args)
            {
                CQGYield HLC3Obj = (CQGYield)qObj;
                System.Double HLC3PropV = HLC3Obj.HLC3;
                var HLC3PropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3PropV));
            }

            private void GetCQGYieldClassLow(QueryInfo query, object[] args)
            {
                CQGYield LowObj = (CQGYield)qObj;
                System.Double LowPropV = LowObj.Low;
                var LowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowPropV));
            }

            private void GetCQGYieldClassMid(QueryInfo query, object[] args)
            {
                CQGYield MidObj = (CQGYield)qObj;
                System.Double MidPropV = MidObj.Mid;
                var MidPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidPropV));
            }

            private void GetCQGYieldClassOpen(QueryInfo query, object[] args)
            {
                CQGYield OpenObj = (CQGYield)qObj;
                System.Double OpenPropV = OpenObj.Open;
                var OpenPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenPropV));
            }

            private void GetCQGYieldClassRange(QueryInfo query, object[] args)
            {
                CQGYield RangeObj = (CQGYield)qObj;
                System.Double RangePropV = RangeObj.Range;
                var RangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangePropV));
            }

            private void GetCQGYieldClassTimestamp(QueryInfo query, object[] args)
            {
                CQGYield TimestampObj = (CQGYield)qObj;
                System.DateTime TimestampPropV = TimestampObj.Timestamp;
                var TimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestampPropV));
            }

            private void GetCQGYieldClassTrueHigh(QueryInfo query, object[] args)
            {
                CQGYield TrueHighObj = (CQGYield)qObj;
                System.Double TrueHighPropV = TrueHighObj.TrueHigh;
                var TrueHighPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighPropV));
            }

            private void GetCQGYieldClassTrueLow(QueryInfo query, object[] args)
            {
                CQGYield TrueLowObj = (CQGYield)qObj;
                System.Double TrueLowPropV = TrueLowObj.TrueLow;
                var TrueLowPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowPropV));
            }

            private void GetCQGYieldClassTrueRange(QueryInfo query, object[] args)
            {
                CQGYield TrueRangeObj = (CQGYield)qObj;
                System.Double TrueRangePropV = TrueRangeObj.TrueRange;
                var TrueRangePropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangePropV));
            }

            private void GetCQGYieldsClassCount(QueryInfo query, object[] args)
            {
                CQGYields CountObj = (CQGYields)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGYieldsClassEndTimestamp(QueryInfo query, object[] args)
            {
                CQGYields EndTimestampObj = (CQGYields)qObj;
                System.DateTime EndTimestampPropV = EndTimestampObj.EndTimestamp;
                var EndTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestampPropV));
            }

            private void GetCQGYieldsClassId(QueryInfo query, object[] args)
            {
                CQGYields IdObj = (CQGYields)qObj;
                System.String IdPropV = IdObj.Id;
                var IdPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdPropV));
            }

            private void GetCQGYieldsClassItem(QueryInfo query, object[] args)
            {
                CQGYields ItemObj = (CQGYields)qObj;
                CQG.CQGYield ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGYieldsClassLastError(QueryInfo query, object[] args)
            {
                CQGYields LastErrorObj = (CQGYields)qObj;
                CQG.CQGError LastErrorPropV = LastErrorObj.LastError;
                var LastErrorPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
            }

            private void GetCQGYieldsClassRequest(QueryInfo query, object[] args)
            {
                CQGYields RequestObj = (CQGYields)qObj;
                CQG.CQGYieldsRequest RequestPropV = RequestObj.Request;
                var RequestPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
            }

            private void GetCQGYieldsClassStartTimestamp(QueryInfo query, object[] args)
            {
                CQGYields StartTimestampObj = (CQGYields)qObj;
                System.DateTime StartTimestampPropV = StartTimestampObj.StartTimestamp;
                var StartTimestampPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestampPropV));
            }

            private void GetCQGYieldsClassStatus(QueryInfo query, object[] args)
            {
                CQGYields StatusObj = (CQGYields)qObj;
                CQG.eRequestStatus StatusPropV = StatusObj.Status;
                var StatusPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatusPropV));
            }

            private void GetCQGYieldsClassTag(QueryInfo query, object[] args)
            {
                CQGYields TagObj = (CQGYields)qObj;
                System.Object TagPropV = TagObj.Tag[(System.String)args[0]];
                var TagPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagPropV));
            }

            private void GetCQGYieldsCollectionClassCount(QueryInfo query, object[] args)
            {
                CQGYieldsCollection CountObj = (CQGYieldsCollection)qObj;
                System.Int32 CountPropV = CountObj.Count;
                var CountPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountPropV));
            }

            private void GetCQGYieldsCollectionClassItem(QueryInfo query, object[] args)
            {
                CQGYieldsCollection ItemObj = (CQGYieldsCollection)qObj;
                CQG.CQGYields ItemPropV = ItemObj[(System.Int32)args[0]];
                var ItemPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItemPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
            }

            private void GetCQGYieldsCollectionClassItemById(QueryInfo query, object[] args)
            {
                CQGYieldsCollection ItemByIdObj = (CQGYieldsCollection)qObj;
                CQG.CQGYields ItemByIdPropV = ItemByIdObj.ItemById[(System.String)args[0]];
                var ItemByIdPropKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdPropV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
            }

            private void GetCQGYieldsRequestClassCompound(QueryInfo query, object[] args)
            {
                CQGYieldsRequest CompoundObj = (CQGYieldsRequest)qObj;
                CQG.eYieldCompound CompoundPropV = CompoundObj.Compound;
                var CompoundPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CompoundPropKey, value: CompoundPropV));
            }

            private void GetCQGYieldsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ContinuationObj = (CQGYieldsRequest)qObj;
                CQG.eTimeSeriesContinuationType ContinuationPropV = ContinuationObj.Continuation;
                var ContinuationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationPropV));
            }

            private void GetCQGYieldsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGYieldsRequest DaysBeforeExpirationObj = (CQGYieldsRequest)qObj;
                System.Int32 DaysBeforeExpirationPropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                var DaysBeforeExpirationPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationPropV));
            }

            private void GetCQGYieldsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGYieldsRequest EqualizeClosesObj = (CQGYieldsRequest)qObj;
                System.Boolean EqualizeClosesPropV = EqualizeClosesObj.EqualizeCloses;
                var EqualizeClosesPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosesPropV));
            }

            private void GetCQGYieldsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGYieldsRequest IncludeEndObj = (CQGYieldsRequest)qObj;
                System.Boolean IncludeEndPropV = IncludeEndObj.IncludeEnd;
                var IncludeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndPropV));
            }

            private void GetCQGYieldsRequestClassModel(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ModelObj = (CQGYieldsRequest)qObj;
                CQG.eYieldModel ModelPropV = ModelObj.Model;
                var ModelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ModelPropKey, value: ModelPropV));
            }

            private void GetCQGYieldsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RangeEndObj = (CQGYieldsRequest)qObj;
                System.Object RangeEndPropV = RangeEndObj.RangeEnd;
                var RangeEndPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndPropV));
            }

            private void GetCQGYieldsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RangeStartObj = (CQGYieldsRequest)qObj;
                System.Object RangeStartPropV = RangeStartObj.RangeStart;
                var RangeStartPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartPropV));
            }

            private void GetCQGYieldsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RecalcPeriodObj = (CQGYieldsRequest)qObj;
                System.Int32 RecalcPeriodPropV = RecalcPeriodObj.RecalcPeriod;
                var RecalcPeriodPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodPropV));
            }

            private void GetCQGYieldsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SessionFlagsObj = (CQGYieldsRequest)qObj;
                CQG.eSessionFlag SessionFlagsPropV = SessionFlagsObj.SessionFlags;
                var SessionFlagsPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagsPropV));
            }

            private void GetCQGYieldsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SessionsFilterObj = (CQGYieldsRequest)qObj;
                System.Object SessionsFilterPropV = SessionsFilterObj.SessionsFilter;
                var SessionsFilterPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterPropV));
            }

            private void GetCQGYieldsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SubscriptionLevelObj = (CQGYieldsRequest)qObj;
                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelPropV = SubscriptionLevelObj.SubscriptionLevel;
                var SubscriptionLevelPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelPropV));
            }

            private void GetCQGYieldsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SymbolObj = (CQGYieldsRequest)qObj;
                System.String SymbolPropV = SymbolObj.Symbol;
                var SymbolPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolPropV));
            }

            private void GetCQGYieldsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGYieldsRequest UpdatesEnabledObj = (CQGYieldsRequest)qObj;
                System.Boolean UpdatesEnabledPropV = UpdatesEnabledObj.UpdatesEnabled;
                var UpdatesEnabledPropKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledPropV));
            }

            private void SetCQGAccountClassAccountMarginDetailing(QueryInfo query, object[] args)
            {
                CQGAccount AccountMarginDetailingObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AccountMarginDetailingval = (CQG.eAccountMarginDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountMarginDetailingObj.AccountMarginDetailing = AccountMarginDetailingval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAccountClassAutoSubscribeInstruments(QueryInfo query, object[] args)
            {
                CQGAccount AutoSubscribeInstrumentsObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AutoSubscribeInstrumentsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AutoSubscribeInstrumentsObj.AutoSubscribeInstruments = AutoSubscribeInstrumentsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAccountClassPositionSubcriptionLevel(QueryInfo query, object[] args)
            {
                CQGAccount PositionSubcriptionLevelObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PositionSubcriptionLevelval = (CQG.ePositionSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PositionSubcriptionLevelObj.PositionSubcriptionLevel = PositionSubcriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyClassTag(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy TagObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest BaseExpressionObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseExpressionObj.BaseExpression = BaseExpressionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ContinuationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest DaysBeforeExpirationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest EqualizeClosesObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest HistoricalPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IncludeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IntradayPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ParameterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RangeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RangeStartObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest RecalcPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SessionFlagsObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SessionsFilterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest SubscriptionLevelObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAdvancedStudyRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest UpdatesEnabledObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassDefaultValue(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition DefaultValueObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultValueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultValueObj.DefaultValue = DefaultValueval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassDefaultValueIndex(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition DefaultValueIndexObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultValueIndexval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultValueIndexObj.DefaultValueIndex = DefaultValueIndexval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassName(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition NameObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Nameval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NameObj.Name = Nameval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassType(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition TypeObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Typeval = (CQG.eAlgorithmicOrderPropertyType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TypeObj.Type = Typeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAlgorithmicOrderDefinitionClassUnit(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition UnitObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Unitval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UnitObj.Unit = Unitval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassAccountMarginAndPositionsThrottleInterval(QueryInfo query, object[] args)
            {
                CQGAPIConfig AccountMarginAndPositionsThrottleIntervalObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AccountMarginAndPositionsThrottleIntervalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountMarginAndPositionsThrottleIntervalObj.AccountMarginAndPositionsThrottleInterval = AccountMarginAndPositionsThrottleIntervalval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassAgeToDeleteLogFileDays(QueryInfo query, object[] args)
            {
                CQGAPIConfig AgeToDeleteLogFileDaysObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AgeToDeleteLogFileDaysval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AgeToDeleteLogFileDaysObj.AgeToDeleteLogFileDays = AgeToDeleteLogFileDaysval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassApplyDaylightSavingChanges(QueryInfo query, object[] args)
            {
                CQGAPIConfig ApplyDaylightSavingChangesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var ApplyDaylightSavingChangesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ApplyDaylightSavingChangesObj.ApplyDaylightSavingChanges = ApplyDaylightSavingChangesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassCollectionsThrowException(QueryInfo query, object[] args)
            {
                CQGAPIConfig CollectionsThrowExceptionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var CollectionsThrowExceptionval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                CollectionsThrowExceptionObj.CollectionsThrowException = CollectionsThrowExceptionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDefaultAccountMarginDetailing(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultAccountMarginDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultAccountMarginDetailingval = (CQG.eAccountMarginDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultAccountMarginDetailingObj.DefaultAccountMarginDetailing = DefaultAccountMarginDetailingval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDefaultInstrumentBBAType(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultInstrumentBBATypeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultInstrumentBBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultInstrumentBBATypeObj.DefaultInstrumentBBAType = DefaultInstrumentBBATypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDefaultInstrumentSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefaultInstrumentSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefaultInstrumentSubscriptionLevelval = (CQG.eDataSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefaultInstrumentSubscriptionLevelObj.DefaultInstrumentSubscriptionLevel = DefaultInstrumentSubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDefPositionSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGAPIConfig DefPositionSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DefPositionSubscriptionLevelval = (CQG.ePositionSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DefPositionSubscriptionLevelObj.DefPositionSubscriptionLevel = DefPositionSubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDOMUpdatesMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig DOMUpdatesModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMUpdatesModeval = (CQG.eDOMUpdatesMode)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMUpdatesModeObj.DOMUpdatesMode = DOMUpdatesModeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassDOMUpdatesPeriod(QueryInfo query, object[] args)
            {
                CQGAPIConfig DOMUpdatesPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMUpdatesPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMUpdatesPeriodObj.DOMUpdatesPeriod = DOMUpdatesPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassFireEventOnChangedPrices(QueryInfo query, object[] args)
            {
                CQGAPIConfig FireEventOnChangedPricesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var FireEventOnChangedPricesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                FireEventOnChangedPricesObj.FireEventOnChangedPrices = FireEventOnChangedPricesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassGatewayEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig GatewayEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var GatewayEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                GatewayEnabledObj.GatewayEnabled = GatewayEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassIncludeOrderTransactions(QueryInfo query, object[] args)
            {
                CQGAPIConfig IncludeOrderTransactionsObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeOrderTransactionsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeOrderTransactionsObj.IncludeOrderTransactions = IncludeOrderTransactionsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassLogSeverity(QueryInfo query, object[] args)
            {
                CQGAPIConfig LogSeverityObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var LogSeverityval = (CQG.eLogSeverity)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                LogSeverityObj.LogSeverity = LogSeverityval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMaxLogFileCount(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileCountObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MaxLogFileCountval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MaxLogFileCountObj.MaxLogFileCount = MaxLogFileCountval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMaxLogFileDuration(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileDurationObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MaxLogFileDurationval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MaxLogFileDurationObj.MaxLogFileDuration = MaxLogFileDurationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMaxLogFileSize(QueryInfo query, object[] args)
            {
                CQGAPIConfig MaxLogFileSizeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MaxLogFileSizeval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MaxLogFileSizeObj.MaxLogFileSize = MaxLogFileSizeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMessageProcessingTimeout(QueryInfo query, object[] args)
            {
                CQGAPIConfig MessageProcessingTimeoutObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MessageProcessingTimeoutval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MessageProcessingTimeoutObj.MessageProcessingTimeout = MessageProcessingTimeoutval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassMetaDataEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig MetaDataEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var MetaDataEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                MetaDataEnabledObj.MetaDataEnabled = MetaDataEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassNewInstrumentChangeMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig NewInstrumentChangeModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var NewInstrumentChangeModeval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NewInstrumentChangeModeObj.NewInstrumentChangeMode = NewInstrumentChangeModeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassNewInstrumentMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig NewInstrumentModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var NewInstrumentModeval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NewInstrumentModeObj.NewInstrumentMode = NewInstrumentModeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassNonsynchronizedData(QueryInfo query, object[] args)
            {
                CQGAPIConfig NonsynchronizedDataObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var NonsynchronizedDataval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NonsynchronizedDataObj.NonsynchronizedData = NonsynchronizedDataval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassPendingOrderActionEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig PendingOrderActionEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PendingOrderActionEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PendingOrderActionEnabledObj.PendingOrderActionEnabled = PendingOrderActionEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassPositionDetailing(QueryInfo query, object[] args)
            {
                CQGAPIConfig PositionDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PositionDetailingval = (CQG.ePositionDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PositionDetailingObj.PositionDetailing = PositionDetailingval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassPriceMode(QueryInfo query, object[] args)
            {
                CQGAPIConfig PriceModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PriceModeval = (CQG.ePriceMode)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PriceModeObj.PriceMode = PriceModeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassProviderPassword(QueryInfo query, object[] args)
            {
                CQGAPIConfig ProviderPasswordObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var ProviderPasswordval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ProviderPasswordObj.ProviderPassword = ProviderPasswordval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassQueryAllAuthorizedTraders(QueryInfo query, object[] args)
            {
                CQGAPIConfig QueryAllAuthorizedTradersObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var QueryAllAuthorizedTradersval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                QueryAllAuthorizedTradersObj.QueryAllAuthorizedTraders = QueryAllAuthorizedTradersval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassReadyStatusCheck(QueryInfo query, object[] args)
            {
                CQGAPIConfig ReadyStatusCheckObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var ReadyStatusCheckval = (CQG.eReadyStatusCheck)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ReadyStatusCheckObj.ReadyStatusCheck = ReadyStatusCheckval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassRemoteOpenAPILoginService(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPILoginServiceObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RemoteOpenAPILoginServiceval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RemoteOpenAPILoginServiceObj.RemoteOpenAPILoginService = RemoteOpenAPILoginServiceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassRemoteOpenAPIServer(QueryInfo query, object[] args)
            {
                CQGAPIConfig RemoteOpenAPIServerObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RemoteOpenAPIServerval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RemoteOpenAPIServerObj.RemoteOpenAPIServer = RemoteOpenAPIServerval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassReplaceLoginSession(QueryInfo query, object[] args)
            {
                CQGAPIConfig ReplaceLoginSessionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var ReplaceLoginSessionval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ReplaceLoginSessionObj.ReplaceLoginSession = ReplaceLoginSessionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassSnapshotPeriod(QueryInfo query, object[] args)
            {
                CQGAPIConfig SnapshotPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SnapshotPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SnapshotPeriodObj.SnapshotPeriod = SnapshotPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassStrategyManagerEnabled(QueryInfo query, object[] args)
            {
                CQGAPIConfig StrategyManagerEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var StrategyManagerEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                StrategyManagerEnabledObj.StrategyManagerEnabled = StrategyManagerEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassTimeZoneCode(QueryInfo query, object[] args)
            {
                CQGAPIConfig TimeZoneCodeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TimeZoneCodeval = (CQG.eTimeZone)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TimeZoneCodeObj.TimeZoneCode = TimeZoneCodeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassUsedFromATLClient(QueryInfo query, object[] args)
            {
                CQGAPIConfig UsedFromATLClientObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UsedFromATLClientval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UsedFromATLClientObj.UsedFromATLClient = UsedFromATLClientval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGAPIConfigClassUseOrderSide(QueryInfo query, object[] args)
            {
                CQGAPIConfig UseOrderSideObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UseOrderSideval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UseOrderSideObj.UseOrderSide = UseOrderSideval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCELClassAccountSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGCEL AccountSubscriptionLevelObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AccountSubscriptionLevelval = (CQG.eAccountSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountSubscriptionLevelObj.AccountSubscriptionLevel = AccountSubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCELClassConfiguration(QueryInfo query, object[] args)
            {
                CQGCEL ConfigurationObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Configurationval = (CQG.CQGCELConfiguration)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ConfigurationObj.set_Configuration(ref Configurationval);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionClassTag(QueryInfo query, object[] args)
            {
                CQGCondition TagObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGConditionRequest BaseExpressionObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseExpressionObj.BaseExpression = BaseExpressionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGConditionRequest ContinuationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGConditionRequest DaysBeforeExpirationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGConditionRequest EqualizeClosesObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest HistoricalPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGConditionRequest IncludeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest IntradayPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGConditionRequest ParameterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGConditionRequest RangeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGConditionRequest RangeStartObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGConditionRequest RecalcPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGConditionRequest SessionFlagsObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGConditionRequest SessionsFilterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGConditionRequest SubscriptionLevelObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConditionRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGConditionRequest UpdatesEnabledObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsClassTag(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars TagObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest ContinuationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest DaysBeforeExpirationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest EqualizeClosesObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest IncludeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassIncludeFlatTicks(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest IncludeFlatTicksObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeFlatTicksval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeFlatTicksObj.IncludeFlatTicks = IncludeFlatTicksval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RangeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RangeStartObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest RecalcPeriodObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SessionFlagsObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SessionsFilterObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SubscriptionLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest SymbolObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest UpdatesEnabledObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassVolumeLevel(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest VolumeLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var VolumeLevelval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                VolumeLevelObj.VolumeLevel = VolumeLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGConstantVolumeBarsRequestClassVolumeType(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest VolumeTypeObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var VolumeTypeval = (CQG.eCvbVolumeType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                VolumeTypeObj.VolumeType = VolumeTypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyClassTag(QueryInfo query, object[] args)
            {
                CQGCustomStudy TagObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest BaseExpressionObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseExpressionObj.BaseExpression = BaseExpressionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ContinuationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest DaysBeforeExpirationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest EqualizeClosesObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest HistoricalPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IncludeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IntradayPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ParameterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RangeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RangeStartObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest RecalcPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SessionFlagsObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SessionsFilterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest SubscriptionLevelObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGCustomStudyRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest UpdatesEnabledObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExecutionPatternParameterClassValue(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter ValueObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Valueval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ValueObj.Value = Valueval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionClassTag(QueryInfo query, object[] args)
            {
                CQGExpression TagObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGExpressionRequest ContinuationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGExpressionRequest DaysBeforeExpirationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGExpressionRequest EqualizeClosesObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest HistoricalPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGExpressionRequest IncludeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest IntradayPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RangeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RangeStartObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGExpressionRequest RecalcPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SessionFlagsObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SessionsFilterObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGExpressionRequest SubscriptionLevelObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGExpressionRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGExpressionRequest UpdatesEnabledObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGHistoricalSessionsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest RangeEndObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGHistoricalSessionsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest RangeStartObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGHistoricalSessionsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest SymbolObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGHistoricalSessionsRequestClassType(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest TypeObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Typeval = (CQG.eHistoricalSessionsRequestType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TypeObj.Type = Typeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassBBAType(QueryInfo query, object[] args)
            {
                CQGInstrument BBATypeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BBATypeObj.BBAType = BBATypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassDataSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGInstrument DataSubscriptionLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DataSubscriptionLevelval = (CQG.eDataSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DataSubscriptionLevelObj.DataSubscriptionLevel = DataSubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassDOMBookLimit(QueryInfo query, object[] args)
            {
                CQGInstrument DOMBookLimitObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMBookLimitval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMBookLimitObj.DOMBookLimit = DOMBookLimitval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassDOMStatus(QueryInfo query, object[] args)
            {
                CQGInstrument DOMStatusObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMStatusval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMStatusObj.DOMStatus = DOMStatusval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentClassTag(QueryInfo query, object[] args)
            {
                CQGInstrument TagObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassCommodity(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest CommodityObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Commodityval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                CommodityObj.Commodity = Commodityval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassInstrumentTypes(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest InstrumentTypesObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var InstrumentTypesval = (CQG.eInstrumentType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                InstrumentTypesObj.InstrumentTypes = InstrumentTypesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest RangeEndObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest RangeStartObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentsGroupRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest SubscriptionLevelObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eGroupSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassDOMBBAType(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest DOMBBATypeObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMBBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMBBATypeObj.DOMBBAType = DOMBBATypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassDOMStatus(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest DOMStatusObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DOMStatusval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DOMStatusObj.DOMStatus = DOMStatusval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassPropertyLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest PropertyLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var PropertyLevelval = (CQG.ePropertySubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PropertyLevelObj.PropertyLevel = PropertyLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassQuoteLevel(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest QuoteLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var QuoteLevelval = (CQG.eQuoteSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                QuoteLevelObj.QuoteLevel = QuoteLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGInstrumentSubscriptionRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest SymbolObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassGWAccountID(QueryInfo query, object[] args)
            {
                CQGManualFillRequest GWAccountIDObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var GWAccountIDval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                GWAccountIDObj.GWAccountID = GWAccountIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassInstrumentName(QueryInfo query, object[] args)
            {
                CQGManualFillRequest InstrumentNameObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var InstrumentNameval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                InstrumentNameObj.InstrumentName = InstrumentNameval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassNote(QueryInfo query, object[] args)
            {
                CQGManualFillRequest NoteObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Noteval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                NoteObj.Note = Noteval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassPrice(QueryInfo query, object[] args)
            {
                CQGManualFillRequest PriceObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Priceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                PriceObj.Price = Priceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassQuantity(QueryInfo query, object[] args)
            {
                CQGManualFillRequest QuantityObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Quantityval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                QuantityObj.Quantity = Quantityval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassSide(QueryInfo query, object[] args)
            {
                CQGManualFillRequest SideObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Sideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SideObj.Side = Sideval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassStatementDate(QueryInfo query, object[] args)
            {
                CQGManualFillRequest StatementDateObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var StatementDateval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                StatementDateObj.StatementDate = StatementDateval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassTradeId(QueryInfo query, object[] args)
            {
                CQGManualFillRequest TradeIdObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TradeIdval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TradeIdObj.TradeId = TradeIdval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGManualFillRequestClassTradeTimestamp(QueryInfo query, object[] args)
            {
                CQGManualFillRequest TradeTimestampObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TradeTimestampval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TradeTimestampObj.TradeTimestamp = TradeTimestampval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassAccount(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AccountObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Accountval = (CQG.CQGAccount)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountObj.Account = Accountval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AlgorithmIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest AlgorithmStringIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassFromAllTraders(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest FromAllTradersObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var FromAllTradersval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                FromAllTradersObj.FromAllTraders = FromAllTradersval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassInstrument(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest InstrumentObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Instrumentval = (CQG.CQGInstrument)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                InstrumentObj.Instrument = Instrumentval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassOrderSide(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest OrderSideObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var OrderSideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                OrderSideObj.OrderSide = OrderSideval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderActionRequestClassParked(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest ParkedObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parkedval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParkedObj.Parked = Parkedval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderChainClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrderChain AlgorithmIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderChainClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrderChain AlgorithmStringIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassAccount(QueryInfo query, object[] args)
            {
                CQGOrder AccountObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Accountval = (CQG.CQGAccount)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AccountObj.Account = Accountval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassAlgorithmID(QueryInfo query, object[] args)
            {
                CQGOrder AlgorithmIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassAlgorithmStringID(QueryInfo query, object[] args)
            {
                CQGOrder AlgorithmStringIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassCancelationInstruction(QueryInfo query, object[] args)
            {
                CQGOrder CancelationInstructionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var CancelationInstructionval = (CQG.eOrderCancelationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                CancelationInstructionObj.CancelationInstruction = CancelationInstructionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassDescription(QueryInfo query, object[] args)
            {
                CQGOrder DescriptionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Descriptionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DescriptionObj.Description = Descriptionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassDurationType(QueryInfo query, object[] args)
            {
                CQGOrder DurationTypeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DurationTypeval = (CQG.eOrderDuration)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DurationTypeObj.DurationType = DurationTypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassInstrument(QueryInfo query, object[] args)
            {
                CQGOrder InstrumentObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Instrumentval = (CQG.CQGInstrument)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                InstrumentObj.Instrument = Instrumentval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassLimitPrice(QueryInfo query, object[] args)
            {
                CQGOrder LimitPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var LimitPriceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                LimitPriceObj.LimitPrice = LimitPriceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassOrderCheckMark(QueryInfo query, object[] args)
            {
                CQGOrder OrderCheckMarkObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var OrderCheckMarkval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                OrderCheckMarkObj.OrderCheckMark = OrderCheckMarkval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassQuantity(QueryInfo query, object[] args)
            {
                CQGOrder QuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Quantityval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                QuantityObj.Quantity = Quantityval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassSide(QueryInfo query, object[] args)
            {
                CQGOrder SideObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Sideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SideObj.Side = Sideval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassStopPrice(QueryInfo query, object[] args)
            {
                CQGOrder StopPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var StopPriceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                StopPriceObj.StopPrice = StopPriceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderClassTag(QueryInfo query, object[] args)
            {
                CQGOrder TagObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderPropertyClassValue(QueryInfo query, object[] args)
            {
                CQGOrderProperty ValueObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Valueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ValueObj.Value = Valueval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGOrderStatisticsClassSwitch(QueryInfo query, object[] args)
            {
                CQGOrderStatistics SwitchObj = (CQGOrderStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Switchval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SwitchObj.Switch = Switchval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsClassTag(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars TagObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassBoxSize(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest BoxSizeObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BoxSizeval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BoxSizeObj.BoxSize = BoxSizeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassBoxUnits(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest BoxUnitsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BoxUnitsval = (CQG.ePfBoxUnits)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BoxUnitsObj.BoxUnits = BoxUnitsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ContinuationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassDataSource(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest DataSourceObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DataSourceval = (CQG.ePfDataSource)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DataSourceObj.DataSource = DataSourceval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest DaysBeforeExpirationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest EqualizeClosesObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest IncludeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RangeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RangeStartObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest RecalcPeriodObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassReversal(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ReversalObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Reversalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ReversalObj.Reversal = Reversalval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SessionFlagsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SessionsFilterObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SubscriptionLevelObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest SymbolObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGPointAndFigureBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest UpdatesEnabledObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsClassTag(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars TagObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest ContinuationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest DaysBeforeExpirationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest EqualizeClosesObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassGapFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest GapFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var GapFilterval = (CQG.eGapFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                GapFilterObj.GapFilter = GapFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest IncludeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassInterval(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest IntervalObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Intervalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntervalObj.Interval = Intervalval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RangeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RangeStartObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest RecalcPeriodObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SessionFlagsObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SessionsFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SubscriptionLevelObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest SymbolObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest TickFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TickFilterObj.TickFilter = TickFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGSubMinuteBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest UpdatesEnabledObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsClassTag(QueryInfo query, object[] args)
            {
                CQGTFlowBars TagObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassAggregation(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest AggregationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Aggregationval = (CQG.eTfAggregation)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AggregationObj.Aggregation = Aggregationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassAggregationLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest AggregationLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var AggregationLevelval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                AggregationLevelObj.AggregationLevel = AggregationLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest ContinuationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DaysBeforeExpirationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassDomAskVolumeLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DomAskVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DomAskVolumeLevelval = (CQG.eTFlowRequestDomVolumeLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DomAskVolumeLevelObj.DomAskVolumeLevel = DomAskVolumeLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassDomBidVolumeLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest DomBidVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DomBidVolumeLevelval = (CQG.eTFlowRequestDomVolumeLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DomBidVolumeLevelObj.DomBidVolumeLevel = DomBidVolumeLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest EqualizeClosesObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest IncludeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RangeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RangeStartObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest RecalcPeriodObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SessionFlagsObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SessionsFilterObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SubscriptionLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest SymbolObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTFlowBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest UpdatesEnabledObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksClassTag(QueryInfo query, object[] args)
            {
                CQGTicks TagObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTicksRequest RangeEndObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTicksRequest RangeStartObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTicksRequest SessionsFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTicksRequest SymbolObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGTicksRequest TickFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TickFilterObj.TickFilter = TickFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTicksRequestClassType(QueryInfo query, object[] args)
            {
                CQGTicksRequest TypeObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Typeval = (CQG.eTicksRequestType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TypeObj.Type = Typeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsClassTag(QueryInfo query, object[] args)
            {
                CQGTimedBars TagObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest ContinuationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest DaysBeforeExpirationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest EqualizeClosesObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest HistoricalPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassIgnoreEventsOnHistoricalBars(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IgnoreEventsOnHistoricalBarsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IgnoreEventsOnHistoricalBarsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IgnoreEventsOnHistoricalBarsObj.IgnoreEventsOnHistoricalBars = IgnoreEventsOnHistoricalBarsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IncludeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IntradayPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest RangeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest RangeStartObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SessionFlagsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SessionsFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest SymbolObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassTickFilter(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest TickFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TickFilterObj.TickFilter = TickFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTimedBarsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest UpdatesEnabledObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemBaseBarParameterClassValue(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter ValueObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Valueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ValueObj.Value = Valueval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemClassTag(QueryInfo query, object[] args)
            {
                CQGTradingSystem TagObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassBaseBarType(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseBarTypeObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseBarTypeval = (CQG.eTradingSystemBaseBar)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseBarTypeObj.BaseBarType = BaseBarTypeval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassBaseExpression(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest BaseExpressionObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                BaseExpressionObj.BaseExpression = BaseExpressionval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ContinuationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest DaysBeforeExpirationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest EqualizeClosesObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassHistoricalPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest HistoricalPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IncludeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassIntradayPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IntradayPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassParameter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ParameterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RangeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RangeStartObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest RecalcPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SessionFlagsObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SessionsFilterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGTradingSystemRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest SubscriptionLevelObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsClassTag(QueryInfo query, object[] args)
            {
                CQGYields TagObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                TagObj.Tag[(System.String)args[0]] = Tagval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassCompound(QueryInfo query, object[] args)
            {
                CQGYieldsRequest CompoundObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Compoundval = (CQG.eYieldCompound)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                CompoundObj.Compound = Compoundval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassContinuation(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ContinuationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ContinuationObj.Continuation = Continuationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassDaysBeforeExpiration(QueryInfo query, object[] args)
            {
                CQGYieldsRequest DaysBeforeExpirationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassEqualizeCloses(QueryInfo query, object[] args)
            {
                CQGYieldsRequest EqualizeClosesObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassIncludeEnd(QueryInfo query, object[] args)
            {
                CQGYieldsRequest IncludeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                IncludeEndObj.IncludeEnd = IncludeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassModel(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ModelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Modelval = (CQG.eYieldModel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                ModelObj.Model = Modelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassRangeEnd(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RangeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeEndObj.RangeEnd = RangeEndval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassRangeStart(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RangeStartObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RangeStartObj.RangeStart = RangeStartval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassRecalcPeriod(QueryInfo query, object[] args)
            {
                CQGYieldsRequest RecalcPeriodObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassSessionFlags(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SessionFlagsObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionFlagsObj.SessionFlags = SessionFlagsval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassSessionsFilter(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SessionsFilterObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassSubscriptionLevel(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SubscriptionLevelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassSymbol(QueryInfo query, object[] args)
            {
                CQGYieldsRequest SymbolObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                SymbolObj.Symbol = Symbolval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void SetCQGYieldsRequestClassUpdatesEnabled(QueryInfo query, object[] args)
            {
                CQGYieldsRequest UpdatesEnabledObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAccountChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AccountChangedObj = (_ICQGCELEvents)qObj;
                AccountChangedObj.AccountChanged((CQG.eAccountChangeType)args[0],(CQG.CQGAccount)args[1],(CQG.CQGPosition)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAdvancedStudyAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AdvancedStudyAddedObj = (_ICQGCELEvents)qObj;
                AdvancedStudyAddedObj.AdvancedStudyAdded((CQG.CQGAdvancedStudy)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAdvancedStudyDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AdvancedStudyDefinitionsResolvedObj = (_ICQGCELEvents)qObj;
                AdvancedStudyDefinitionsResolvedObj.AdvancedStudyDefinitionsResolved((CQG.CQGAdvancedStudyDefinitions)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAdvancedStudyInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AdvancedStudyInsertedObj = (_ICQGCELEvents)qObj;
                AdvancedStudyInsertedObj.AdvancedStudyInserted((CQG.CQGAdvancedStudy)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAdvancedStudyRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AdvancedStudyRemovedObj = (_ICQGCELEvents)qObj;
                AdvancedStudyRemovedObj.AdvancedStudyRemoved((CQG.CQGAdvancedStudy)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAdvancedStudyResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AdvancedStudyResolvedObj = (_ICQGCELEvents)qObj;
                AdvancedStudyResolvedObj.AdvancedStudyResolved((CQG.CQGAdvancedStudy)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAdvancedStudyUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AdvancedStudyUpdatedObj = (_ICQGCELEvents)qObj;
                AdvancedStudyUpdatedObj.AdvancedStudyUpdated((CQG.CQGAdvancedStudy)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAlgorithmicOrderPlaced(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AlgorithmicOrderPlacedObj = (_ICQGCELEvents)qObj;
                AlgorithmicOrderPlacedObj.AlgorithmicOrderPlaced((System.String)args[0],(CQG.CQGAlgorithmicOrderParameters)args[1],(CQG.CQGAlgorithmicOrderProperties)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAlgorithmicOrderRegistrationComplete(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AlgorithmicOrderRegistrationCompleteObj = (_ICQGCELEvents)qObj;
                AlgorithmicOrderRegistrationCompleteObj.AlgorithmicOrderRegistrationComplete((System.String)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAllOrdersCanceled(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AllOrdersCanceledObj = (_ICQGCELEvents)qObj;
                AllOrdersCanceledObj.AllOrdersCanceled((CQG.eOrderSideFilter)args[0],(CQG.CQGIntegerCollection)args[1],(CQG.CQGStringCollection)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperAuthenticationStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents AuthenticationStatusChangedObj = (_ICQGCELEvents)qObj;
                AuthenticationStatusChangedObj.AuthenticationStatusChanged((CQG.eSessionStatus)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperBarsTimestampsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents BarsTimestampsResolvedObj = (_ICQGCELEvents)qObj;
                BarsTimestampsResolvedObj.BarsTimestampsResolved((CQG.CQGBarsTimestamps)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCELStarted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CELStartedObj = (_ICQGCELEvents)qObj;
                CELStartedObj.CELStarted();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCommodityInstrumentsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CommodityInstrumentsResolvedObj = (_ICQGCELEvents)qObj;
                CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved((System.String)args[0],(CQG.eInstrumentType)args[1],(CQG.CQGCommodityInstruments)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConditionAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConditionAddedObj = (_ICQGCELEvents)qObj;
                ConditionAddedObj.ConditionAdded((CQG.CQGCondition)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConditionDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConditionDefinitionsResolvedObj = (_ICQGCELEvents)qObj;
                ConditionDefinitionsResolvedObj.ConditionDefinitionsResolved((CQG.CQGConditionDefinitions)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConditionInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConditionInsertedObj = (_ICQGCELEvents)qObj;
                ConditionInsertedObj.ConditionInserted((CQG.CQGCondition)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConditionRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConditionRemovedObj = (_ICQGCELEvents)qObj;
                ConditionRemovedObj.ConditionRemoved((CQG.CQGCondition)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConditionResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConditionResolvedObj = (_ICQGCELEvents)qObj;
                ConditionResolvedObj.ConditionResolved((CQG.CQGCondition)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConditionUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConditionUpdatedObj = (_ICQGCELEvents)qObj;
                ConditionUpdatedObj.ConditionUpdated((CQG.CQGCondition)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConstantVolumeBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConstantVolumeBarsAddedObj = (_ICQGCELEvents)qObj;
                ConstantVolumeBarsAddedObj.ConstantVolumeBarsAdded((CQG.CQGConstantVolumeBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConstantVolumeBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConstantVolumeBarsInsertedObj = (_ICQGCELEvents)qObj;
                ConstantVolumeBarsInsertedObj.ConstantVolumeBarsInserted((CQG.CQGConstantVolumeBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConstantVolumeBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConstantVolumeBarsRemovedObj = (_ICQGCELEvents)qObj;
                ConstantVolumeBarsRemovedObj.ConstantVolumeBarsRemoved((CQG.CQGConstantVolumeBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConstantVolumeBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConstantVolumeBarsResolvedObj = (_ICQGCELEvents)qObj;
                ConstantVolumeBarsResolvedObj.ConstantVolumeBarsResolved((CQG.CQGConstantVolumeBars)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperConstantVolumeBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ConstantVolumeBarsUpdatedObj = (_ICQGCELEvents)qObj;
                ConstantVolumeBarsUpdatedObj.ConstantVolumeBarsUpdated((CQG.CQGConstantVolumeBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCurrencyRatesChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CurrencyRatesChangedObj = (_ICQGCELEvents)qObj;
                CurrencyRatesChangedObj.CurrencyRatesChanged((CQG.CQGCurrencyRates)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCustomSessionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CustomSessionsResolvedObj = (_ICQGCELEvents)qObj;
                CustomSessionsResolvedObj.CustomSessionsResolved((CQG.CQGSessionsCollection)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCustomStudyAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CustomStudyAddedObj = (_ICQGCELEvents)qObj;
                CustomStudyAddedObj.CustomStudyAdded((CQG.CQGCustomStudy)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCustomStudyDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CustomStudyDefinitionsResolvedObj = (_ICQGCELEvents)qObj;
                CustomStudyDefinitionsResolvedObj.CustomStudyDefinitionsResolved((CQG.CQGCustomStudyDefinitions)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCustomStudyInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CustomStudyInsertedObj = (_ICQGCELEvents)qObj;
                CustomStudyInsertedObj.CustomStudyInserted((CQG.CQGCustomStudy)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCustomStudyRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CustomStudyRemovedObj = (_ICQGCELEvents)qObj;
                CustomStudyRemovedObj.CustomStudyRemoved((CQG.CQGCustomStudy)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCustomStudyResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CustomStudyResolvedObj = (_ICQGCELEvents)qObj;
                CustomStudyResolvedObj.CustomStudyResolved((CQG.CQGCustomStudy)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperCustomStudyUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents CustomStudyUpdatedObj = (_ICQGCELEvents)qObj;
                CustomStudyUpdatedObj.CustomStudyUpdated((CQG.CQGCustomStudy)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperDataConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents DataConnectionStatusChangedObj = (_ICQGCELEvents)qObj;
                DataConnectionStatusChangedObj.DataConnectionStatusChanged((CQG.eConnectionStatus)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperDataError(QueryInfo query, object[] args)
            {
                _ICQGCELEvents DataErrorObj = (_ICQGCELEvents)qObj;
                DataErrorObj.DataError((System.Object)args[0],(System.String)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperDataSourcesResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents DataSourcesResolvedObj = (_ICQGCELEvents)qObj;
                DataSourcesResolvedObj.DataSourcesResolved((CQG.CQGDataSources)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperDataSourceSymbolsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents DataSourceSymbolsResolvedObj = (_ICQGCELEvents)qObj;
                DataSourceSymbolsResolvedObj.DataSourceSymbolsResolved((System.String)args[0],(CQG.CQGDataSourceSymbols)args[1],(CQG.CQGError)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperExpressionAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ExpressionAddedObj = (_ICQGCELEvents)qObj;
                ExpressionAddedObj.ExpressionAdded((CQG.CQGExpression)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperExpressionInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ExpressionInsertedObj = (_ICQGCELEvents)qObj;
                ExpressionInsertedObj.ExpressionInserted((CQG.CQGExpression)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperExpressionRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ExpressionRemovedObj = (_ICQGCELEvents)qObj;
                ExpressionRemovedObj.ExpressionRemoved((CQG.CQGExpression)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperExpressionResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ExpressionResolvedObj = (_ICQGCELEvents)qObj;
                ExpressionResolvedObj.ExpressionResolved((CQG.CQGExpression)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperExpressionUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ExpressionUpdatedObj = (_ICQGCELEvents)qObj;
                ExpressionUpdatedObj.ExpressionUpdated((CQG.CQGExpression)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperGetHashCode(QueryInfo query, object[] args)
            {
                _ICQGCELEvents GetHashCodeObj = (_ICQGCELEvents)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void Method_ICQGCELEvents_SinkHelperGWConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents GWConnectionStatusChangedObj = (_ICQGCELEvents)qObj;
                GWConnectionStatusChangedObj.GWConnectionStatusChanged((CQG.eConnectionStatus)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperGWEnvironmentChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents GWEnvironmentChangedObj = (_ICQGCELEvents)qObj;
                GWEnvironmentChangedObj.GWEnvironmentChanged((CQG.eGWEnvChangeCode)args[0],(System.Int32)args[1],(System.Int32)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperHistoricalSessionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents HistoricalSessionsResolvedObj = (_ICQGCELEvents)qObj;
                HistoricalSessionsResolvedObj.HistoricalSessionsResolved((CQG.CQGSessionsCollection)args[0],(CQG.CQGHistoricalSessionsRequest)args[1],(CQG.CQGError)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperICConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ICConnectionStatusChangedObj = (_ICQGCELEvents)qObj;
                ICConnectionStatusChangedObj.ICConnectionStatusChanged((CQG.eICConnectionStatus)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperIncorrectSymbol(QueryInfo query, object[] args)
            {
                _ICQGCELEvents IncorrectSymbolObj = (_ICQGCELEvents)qObj;
                IncorrectSymbolObj.IncorrectSymbol((System.String)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperInstrumentChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents InstrumentChangedObj = (_ICQGCELEvents)qObj;
                InstrumentChangedObj.InstrumentChanged((CQG.CQGInstrument)args[0],(CQG.CQGQuotes)args[1],(CQG.CQGInstrumentProperties)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperInstrumentDOMChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents InstrumentDOMChangedObj = (_ICQGCELEvents)qObj;
                InstrumentDOMChangedObj.InstrumentDOMChanged((CQG.CQGInstrument)args[0],(CQG.CQGDOMQuotes)args[1],(CQG.CQGDOMQuotes)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperInstrumentsGroupChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents InstrumentsGroupChangedObj = (_ICQGCELEvents)qObj;
                InstrumentsGroupChangedObj.InstrumentsGroupChanged((CQG.eChangeType)args[0],(CQG.CQGInstrumentsGroup)args[1],(CQG.CQGStringCollection)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperInstrumentsGroupResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents InstrumentsGroupResolvedObj = (_ICQGCELEvents)qObj;
                InstrumentsGroupResolvedObj.InstrumentsGroupResolved((CQG.CQGInstrumentsGroup)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperInstrumentSubscribed(QueryInfo query, object[] args)
            {
                _ICQGCELEvents InstrumentSubscribedObj = (_ICQGCELEvents)qObj;
                InstrumentSubscribedObj.InstrumentSubscribed((System.String)args[0],(CQG.CQGInstrument)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperIsReady(QueryInfo query, object[] args)
            {
                var arg0 = (CQG.eReadyStatus)args[0];
                _ICQGCELEvents IsReadyObj = (_ICQGCELEvents)qObj;
                IsReadyObj.IsReady(out arg0);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperLineTimeChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents LineTimeChangedObj = (_ICQGCELEvents)qObj;
                LineTimeChangedObj.LineTimeChanged((System.DateTime)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperManualFillChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ManualFillChangedObj = (_ICQGCELEvents)qObj;
                ManualFillChangedObj.ManualFillChanged((CQG.CQGManualFill)args[0],(CQG.eManualFillUpdateType)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperManualFillsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ManualFillsResolvedObj = (_ICQGCELEvents)qObj;
                ManualFillsResolvedObj.ManualFillsResolved((CQG.CQGManualFills)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperManualFillUpdateResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ManualFillUpdateResolvedObj = (_ICQGCELEvents)qObj;
                ManualFillUpdateResolvedObj.ManualFillUpdateResolved((CQG.CQGManualFillRequest)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperOnIdle(QueryInfo query, object[] args)
            {
                _ICQGCELEvents OnIdleObj = (_ICQGCELEvents)qObj;
                OnIdleObj.OnIdle();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperOnQueryProgress(QueryInfo query, object[] args)
            {
                _ICQGCELEvents OnQueryProgressObj = (_ICQGCELEvents)qObj;
                OnQueryProgressObj.OnQueryProgress((CQG.CQGOrdersQuery)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperOrderChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents OrderChangedObj = (_ICQGCELEvents)qObj;
                OrderChangedObj.OrderChanged((CQG.eChangeType)args[0],(CQG.CQGOrder)args[1],(CQG.CQGOrderProperties)args[2],(CQG.CQGFill)args[3],(CQG.CQGError)args[4]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperPasswordChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents PasswordChangedObj = (_ICQGCELEvents)qObj;
                PasswordChangedObj.PasswordChanged((CQG.eSessionStatus)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperPointAndFigureBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents PointAndFigureBarsAddedObj = (_ICQGCELEvents)qObj;
                PointAndFigureBarsAddedObj.PointAndFigureBarsAdded((CQG.CQGPointAndFigureBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperPointAndFigureBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents PointAndFigureBarsInsertedObj = (_ICQGCELEvents)qObj;
                PointAndFigureBarsInsertedObj.PointAndFigureBarsInserted((CQG.CQGPointAndFigureBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperPointAndFigureBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents PointAndFigureBarsRemovedObj = (_ICQGCELEvents)qObj;
                PointAndFigureBarsRemovedObj.PointAndFigureBarsRemoved((CQG.CQGPointAndFigureBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperPointAndFigureBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents PointAndFigureBarsResolvedObj = (_ICQGCELEvents)qObj;
                PointAndFigureBarsResolvedObj.PointAndFigureBarsResolved((CQG.CQGPointAndFigureBars)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperPointAndFigureBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents PointAndFigureBarsUpdatedObj = (_ICQGCELEvents)qObj;
                PointAndFigureBarsUpdatedObj.PointAndFigureBarsUpdated((CQG.CQGPointAndFigureBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperPositionsStatementResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents PositionsStatementResolvedObj = (_ICQGCELEvents)qObj;
                PositionsStatementResolvedObj.PositionsStatementResolved((CQG.CQGPositionsStatement)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperQFormulaDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents QFormulaDefinitionsResolvedObj = (_ICQGCELEvents)qObj;
                QFormulaDefinitionsResolvedObj.QFormulaDefinitionsResolved((CQG.CQGQFormulaDefinitions)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperStrategyDefinitionProgress(QueryInfo query, object[] args)
            {
                _ICQGCELEvents StrategyDefinitionProgressObj = (_ICQGCELEvents)qObj;
                StrategyDefinitionProgressObj.StrategyDefinitionProgress((CQG.CQGStrategyDefinition)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperSubMinuteBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents SubMinuteBarsAddedObj = (_ICQGCELEvents)qObj;
                SubMinuteBarsAddedObj.SubMinuteBarsAdded((CQG.CQGSubMinuteBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperSubMinuteBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents SubMinuteBarsInsertedObj = (_ICQGCELEvents)qObj;
                SubMinuteBarsInsertedObj.SubMinuteBarsInserted((CQG.CQGSubMinuteBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperSubMinuteBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents SubMinuteBarsRemovedObj = (_ICQGCELEvents)qObj;
                SubMinuteBarsRemovedObj.SubMinuteBarsRemoved((CQG.CQGSubMinuteBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperSubMinuteBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents SubMinuteBarsResolvedObj = (_ICQGCELEvents)qObj;
                SubMinuteBarsResolvedObj.SubMinuteBarsResolved((CQG.CQGSubMinuteBars)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperSubMinuteBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents SubMinuteBarsUpdatedObj = (_ICQGCELEvents)qObj;
                SubMinuteBarsUpdatedObj.SubMinuteBarsUpdated((CQG.CQGSubMinuteBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperSummariesStatementResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents SummariesStatementResolvedObj = (_ICQGCELEvents)qObj;
                SummariesStatementResolvedObj.SummariesStatementResolved((CQG.CQGSummariesStatement)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTFlowBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TFlowBarsAddedObj = (_ICQGCELEvents)qObj;
                TFlowBarsAddedObj.TFlowBarsAdded((CQG.CQGTFlowBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTFlowBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TFlowBarsInsertedObj = (_ICQGCELEvents)qObj;
                TFlowBarsInsertedObj.TFlowBarsInserted((CQG.CQGTFlowBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTFlowBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TFlowBarsRemovedObj = (_ICQGCELEvents)qObj;
                TFlowBarsRemovedObj.TFlowBarsRemoved((CQG.CQGTFlowBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTFlowBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TFlowBarsResolvedObj = (_ICQGCELEvents)qObj;
                TFlowBarsResolvedObj.TFlowBarsResolved((CQG.CQGTFlowBars)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTFlowBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TFlowBarsUpdatedObj = (_ICQGCELEvents)qObj;
                TFlowBarsUpdatedObj.TFlowBarsUpdated((CQG.CQGTFlowBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTicksAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TicksAddedObj = (_ICQGCELEvents)qObj;
                TicksAddedObj.TicksAdded((CQG.CQGTicks)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTicksResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TicksResolvedObj = (_ICQGCELEvents)qObj;
                TicksResolvedObj.TicksResolved((CQG.CQGTicks)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTimedBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TimedBarsAddedObj = (_ICQGCELEvents)qObj;
                TimedBarsAddedObj.TimedBarsAdded((CQG.CQGTimedBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTimedBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TimedBarsInsertedObj = (_ICQGCELEvents)qObj;
                TimedBarsInsertedObj.TimedBarsInserted((CQG.CQGTimedBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTimedBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TimedBarsRemovedObj = (_ICQGCELEvents)qObj;
                TimedBarsRemovedObj.TimedBarsRemoved((CQG.CQGTimedBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTimedBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TimedBarsResolvedObj = (_ICQGCELEvents)qObj;
                TimedBarsResolvedObj.TimedBarsResolved((CQG.CQGTimedBars)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTimedBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TimedBarsUpdatedObj = (_ICQGCELEvents)qObj;
                TimedBarsUpdatedObj.TimedBarsUpdated((CQG.CQGTimedBars)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperToString(QueryInfo query, object[] args)
            {
                _ICQGCELEvents ToStringObj = (_ICQGCELEvents)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void Method_ICQGCELEvents_SinkHelperTradableCommoditiesResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradableCommoditiesResolvedObj = (_ICQGCELEvents)qObj;
                TradableCommoditiesResolvedObj.TradableCommoditiesResolved((System.Int32)args[0],(CQG.CQGCommodities)args[1],(CQG.CQGError)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTradableExchangesResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradableExchangesResolvedObj = (_ICQGCELEvents)qObj;
                TradableExchangesResolvedObj.TradableExchangesResolved((System.Int32)args[0],(CQG.CQGExchanges)args[1],(CQG.CQGError)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTradingSystemAddNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradingSystemAddNotificationObj = (_ICQGCELEvents)qObj;
                TradingSystemAddNotificationObj.TradingSystemAddNotification((CQG.CQGTradingSystem)args[0],(CQG.CQGTradingSystemAddInfo)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTradingSystemDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradingSystemDefinitionsResolvedObj = (_ICQGCELEvents)qObj;
                TradingSystemDefinitionsResolvedObj.TradingSystemDefinitionsResolved((CQG.CQGTradingSystemDefinitions)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTradingSystemInsertNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradingSystemInsertNotificationObj = (_ICQGCELEvents)qObj;
                TradingSystemInsertNotificationObj.TradingSystemInsertNotification((CQG.CQGTradingSystem)args[0],(CQG.CQGTradingSystemInsertInfo)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTradingSystemRemoveNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradingSystemRemoveNotificationObj = (_ICQGCELEvents)qObj;
                TradingSystemRemoveNotificationObj.TradingSystemRemoveNotification((CQG.CQGTradingSystem)args[0],(CQG.CQGTradingSystemRemoveInfo)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTradingSystemResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradingSystemResolvedObj = (_ICQGCELEvents)qObj;
                TradingSystemResolvedObj.TradingSystemResolved((CQG.CQGTradingSystem)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTradingSystemTradeRelationAddNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradingSystemTradeRelationAddNotificationObj = (_ICQGCELEvents)qObj;
                TradingSystemTradeRelationAddNotificationObj.TradingSystemTradeRelationAddNotification((CQG.CQGTradingSystem)args[0],(CQG.CQGTradingSystemRelationAddInfo)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperTradingSystemUpdateNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents TradingSystemUpdateNotificationObj = (_ICQGCELEvents)qObj;
                TradingSystemUpdateNotificationObj.TradingSystemUpdateNotification((CQG.CQGTradingSystem)args[0],(CQG.CQGTradingSystemUpdateInfo)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperYieldsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents YieldsAddedObj = (_ICQGCELEvents)qObj;
                YieldsAddedObj.YieldsAdded((CQG.CQGYields)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperYieldsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents YieldsInsertedObj = (_ICQGCELEvents)qObj;
                YieldsInsertedObj.YieldsInserted((CQG.CQGYields)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperYieldsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents YieldsRemovedObj = (_ICQGCELEvents)qObj;
                YieldsRemovedObj.YieldsRemoved((CQG.CQGYields)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperYieldsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents YieldsResolvedObj = (_ICQGCELEvents)qObj;
                YieldsResolvedObj.YieldsResolved((CQG.CQGYields)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELEvents_SinkHelperYieldsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents YieldsUpdatedObj = (_ICQGCELEvents)qObj;
                YieldsUpdatedObj.YieldsUpdated((CQG.CQGYields)args[0],(System.Int32)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperCELStarted(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents CELStartedObj = (_ICQGCELGeneralEvents)qObj;
                CELStartedObj.CELStarted();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperCurrencyRatesChanged(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents CurrencyRatesChangedObj = (_ICQGCELGeneralEvents)qObj;
                CurrencyRatesChangedObj.CurrencyRatesChanged((CQG.CQGCurrencyRates)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperDataConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents DataConnectionStatusChangedObj = (_ICQGCELGeneralEvents)qObj;
                DataConnectionStatusChangedObj.DataConnectionStatusChanged((CQG.eConnectionStatus)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperDataError(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents DataErrorObj = (_ICQGCELGeneralEvents)qObj;
                DataErrorObj.DataError((System.Object)args[0],(System.String)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperGetHashCode(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents GetHashCodeObj = (_ICQGCELGeneralEvents)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperGWConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents GWConnectionStatusChangedObj = (_ICQGCELGeneralEvents)qObj;
                GWConnectionStatusChangedObj.GWConnectionStatusChanged((CQG.eConnectionStatus)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperIsReady(QueryInfo query, object[] args)
            {
                var arg0 = (CQG.eReadyStatus)args[0];
                _ICQGCELGeneralEvents IsReadyObj = (_ICQGCELGeneralEvents)qObj;
                IsReadyObj.IsReady(out arg0);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperLineTimeChanged(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents LineTimeChangedObj = (_ICQGCELGeneralEvents)qObj;
                LineTimeChangedObj.LineTimeChanged((System.DateTime)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperOnIdle(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents OnIdleObj = (_ICQGCELGeneralEvents)qObj;
                OnIdleObj.OnIdle();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELGeneralEvents_SinkHelperToString(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents ToStringObj = (_ICQGCELGeneralEvents)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperCommodityInstrumentsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents CommodityInstrumentsResolvedObj = (_ICQGCELInstrumentEvents)qObj;
                CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved((System.String)args[0],(CQG.eInstrumentType)args[1],(CQG.CQGCommodityInstruments)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperGetHashCode(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents GetHashCodeObj = (_ICQGCELInstrumentEvents)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperIncorrectSymbol(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents IncorrectSymbolObj = (_ICQGCELInstrumentEvents)qObj;
                IncorrectSymbolObj.IncorrectSymbol((System.String)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperInstrumentChanged(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents InstrumentChangedObj = (_ICQGCELInstrumentEvents)qObj;
                InstrumentChangedObj.InstrumentChanged((CQG.CQGInstrument)args[0],(CQG.CQGQuotes)args[1],(CQG.CQGInstrumentProperties)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperInstrumentDOMChanged(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents InstrumentDOMChangedObj = (_ICQGCELInstrumentEvents)qObj;
                InstrumentDOMChangedObj.InstrumentDOMChanged((CQG.CQGInstrument)args[0],(CQG.CQGDOMQuotes)args[1],(CQG.CQGDOMQuotes)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperInstrumentsGroupChanged(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents InstrumentsGroupChangedObj = (_ICQGCELInstrumentEvents)qObj;
                InstrumentsGroupChangedObj.InstrumentsGroupChanged((CQG.eChangeType)args[0],(CQG.CQGInstrumentsGroup)args[1],(CQG.CQGStringCollection)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperInstrumentsGroupResolved(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents InstrumentsGroupResolvedObj = (_ICQGCELInstrumentEvents)qObj;
                InstrumentsGroupResolvedObj.InstrumentsGroupResolved((CQG.CQGInstrumentsGroup)args[0],(CQG.CQGError)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperInstrumentSubscribed(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents InstrumentSubscribedObj = (_ICQGCELInstrumentEvents)qObj;
                InstrumentSubscribedObj.InstrumentSubscribed((System.String)args[0],(CQG.CQGInstrument)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void Method_ICQGCELInstrumentEvents_SinkHelperToString(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents ToStringObj = (_ICQGCELInstrumentEvents)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAccountClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAccount GetHashCodeObj = (CQGAccount)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAccountClassToString(QueryInfo query, object[] args)
            {
                CQGAccount ToStringObj = (CQGAccount)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAccountsClassAdd(QueryInfo query, object[] args)
            {
                CQGAccounts AddObj = (CQGAccounts)qObj;
                AddObj.Add((CQG.CQGAccount)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGAccountsClassget_ItemByFCM(QueryInfo query, object[] args)
            {
                CQGAccounts get_ItemByFCMObj = (CQGAccounts)qObj;
                CQG.CQGAccount get_ItemByFCMReturnV = get_ItemByFCMObj.get_ItemByFCM((System.String)args[0],(System.Int32)args[1]);
                var get_ItemByFCMValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByFCMValKey, get_ItemByFCMReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByFCMValKey));
            }

            private void MethodCQGAccountsClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGAccounts get_ItemByIndexObj = (CQGAccounts)qObj;
                CQG.CQGAccount get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGAccountsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGAccounts GetEnumeratorObj = (CQGAccounts)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGAccountsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAccounts GetHashCodeObj = (CQGAccounts)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAccountsClassToString(QueryInfo query, object[] args)
            {
                CQGAccounts ToStringObj = (CQGAccounts)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAccountSummariesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGAccountSummaries GetEnumeratorObj = (CQGAccountSummaries)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGAccountSummariesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAccountSummaries GetHashCodeObj = (CQGAccountSummaries)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAccountSummariesClassToString(QueryInfo query, object[] args)
            {
                CQGAccountSummaries ToStringObj = (CQGAccountSummaries)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAccountSummaryClassBalance(QueryInfo query, object[] args)
            {
                CQGAccountSummary BalanceObj = (CQGAccountSummary)qObj;
                System.Double BalanceReturnV = BalanceObj.Balance((System.Int32)args[0]);
                var BalanceValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BalanceValKey, value: BalanceReturnV));
            }

            private void MethodCQGAccountSummaryClassCashExcess(QueryInfo query, object[] args)
            {
                CQGAccountSummary CashExcessObj = (CQGAccountSummary)qObj;
                System.Double CashExcessReturnV = CashExcessObj.CashExcess((System.Int32)args[0]);
                var CashExcessValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CashExcessValKey, value: CashExcessReturnV));
            }

            private void MethodCQGAccountSummaryClassCollaterals(QueryInfo query, object[] args)
            {
                CQGAccountSummary CollateralsObj = (CQGAccountSummary)qObj;
                System.Double CollateralsReturnV = CollateralsObj.Collaterals((System.Int32)args[0]);
                var CollateralsValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CollateralsValKey, value: CollateralsReturnV));
            }

            private void MethodCQGAccountSummaryClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAccountSummary GetHashCodeObj = (CQGAccountSummary)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAccountSummaryClassInitialMargin(QueryInfo query, object[] args)
            {
                CQGAccountSummary InitialMarginObj = (CQGAccountSummary)qObj;
                System.Double InitialMarginReturnV = InitialMarginObj.InitialMargin((System.Int32)args[0]);
                var InitialMarginValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InitialMarginValKey, value: InitialMarginReturnV));
            }

            private void MethodCQGAccountSummaryClassMaintenanceMargin(QueryInfo query, object[] args)
            {
                CQGAccountSummary MaintenanceMarginObj = (CQGAccountSummary)qObj;
                System.Double MaintenanceMarginReturnV = MaintenanceMarginObj.MaintenanceMargin((System.Int32)args[0]);
                var MaintenanceMarginValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaintenanceMarginValKey, value: MaintenanceMarginReturnV));
            }

            private void MethodCQGAccountSummaryClassMVO(QueryInfo query, object[] args)
            {
                CQGAccountSummary MVOObj = (CQGAccountSummary)qObj;
                System.Double MVOReturnV = MVOObj.MVO((System.Int32)args[0]);
                var MVOValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MVOValKey, value: MVOReturnV));
            }

            private void MethodCQGAccountSummaryClassNLV(QueryInfo query, object[] args)
            {
                CQGAccountSummary NLVObj = (CQGAccountSummary)qObj;
                System.Double NLVReturnV = NLVObj.NLV((System.Int32)args[0]);
                var NLVValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NLVValKey, value: NLVReturnV));
            }

            private void MethodCQGAccountSummaryClassOTE(QueryInfo query, object[] args)
            {
                CQGAccountSummary OTEObj = (CQGAccountSummary)qObj;
                System.Double OTEReturnV = OTEObj.OTE((System.Int32)args[0]);
                var OTEValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OTEValKey, value: OTEReturnV));
            }

            private void MethodCQGAccountSummaryClassProfitLoss(QueryInfo query, object[] args)
            {
                CQGAccountSummary ProfitLossObj = (CQGAccountSummary)qObj;
                System.Double ProfitLossReturnV = ProfitLossObj.ProfitLoss((System.Int32)args[0]);
                var ProfitLossValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitLossValKey, value: ProfitLossReturnV));
            }

            private void MethodCQGAccountSummaryClassToString(QueryInfo query, object[] args)
            {
                CQGAccountSummary ToStringObj = (CQGAccountSummary)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAccountSummaryClassUPL(QueryInfo query, object[] args)
            {
                CQGAccountSummary UPLObj = (CQGAccountSummary)qObj;
                System.Double UPLReturnV = UPLObj.UPL((System.Int32)args[0]);
                var UPLValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UPLValKey, value: UPLReturnV));
            }

            private void MethodCQGAdvancedStudiesClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies get_ItemByIdObj = (CQGAdvancedStudies)qObj;
                CQG.CQGAdvancedStudy get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGAdvancedStudiesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies GetEnumeratorObj = (CQGAdvancedStudies)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGAdvancedStudiesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies GetHashCodeObj = (CQGAdvancedStudies)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAdvancedStudiesClassToString(QueryInfo query, object[] args)
            {
                CQGAdvancedStudies ToStringObj = (CQGAdvancedStudies)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAdvancedStudyClassget_Tag(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy get_TagObj = (CQGAdvancedStudy)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGAdvancedStudyClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy GetEnumeratorObj = (CQGAdvancedStudy)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGAdvancedStudyClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy GetHashCodeObj = (CQGAdvancedStudy)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAdvancedStudyClassIndexForDate(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy IndexForDateObj = (CQGAdvancedStudy)qObj;
                System.Int32 IndexForDateReturnV = IndexForDateObj.IndexForDate((System.DateTime)args[0]);
                var IndexForDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexForDateValKey, value: IndexForDateReturnV));
            }

            private void MethodCQGAdvancedStudyClassset_Tag(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy set_TagObj = (CQGAdvancedStudy)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGAdvancedStudyClassToString(QueryInfo query, object[] args)
            {
                CQGAdvancedStudy ToStringObj = (CQGAdvancedStudy)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAdvancedStudyDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition GetHashCodeObj = (CQGAdvancedStudyDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAdvancedStudyDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinition ToStringObj = (CQGAdvancedStudyDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAdvancedStudyDefinitionsClassget_ItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions get_ItemByAbbreviationObj = (CQGAdvancedStudyDefinitions)qObj;
                CQG.CQGAdvancedStudyDefinition get_ItemByAbbreviationReturnV = get_ItemByAbbreviationObj.get_ItemByAbbreviation((System.String)args[0]);
                var get_ItemByAbbreviationValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByAbbreviationValKey, get_ItemByAbbreviationReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByAbbreviationValKey));
            }

            private void MethodCQGAdvancedStudyDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions get_ItemByNameObj = (CQGAdvancedStudyDefinitions)qObj;
                CQG.CQGAdvancedStudyDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGAdvancedStudyDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions GetEnumeratorObj = (CQGAdvancedStudyDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGAdvancedStudyDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions GetHashCodeObj = (CQGAdvancedStudyDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAdvancedStudyDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyDefinitions ToStringObj = (CQGAdvancedStudyDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAdvancedStudyRequestClassget_Parameter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest get_ParameterObj = (CQGAdvancedStudyRequest)qObj;
                System.Object get_ParameterReturnV = get_ParameterObj.get_Parameter((System.Object)args[0]);
                var get_ParameterValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ParameterValKey, value: get_ParameterReturnV));
            }

            private void MethodCQGAdvancedStudyRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest GetHashCodeObj = (CQGAdvancedStudyRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAdvancedStudyRequestClassIncludeCurve(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IncludeCurveObj = (CQGAdvancedStudyRequest)qObj;
                IncludeCurveObj.IncludeCurve((System.Object)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGAdvancedStudyRequestClassIsCurveIncluded(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest IsCurveIncludedObj = (CQGAdvancedStudyRequest)qObj;
                System.Boolean IsCurveIncludedReturnV = IsCurveIncludedObj.IsCurveIncluded((System.Object)args[0]);
                var IsCurveIncludedValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsCurveIncludedValKey, value: IsCurveIncludedReturnV));
            }

            private void MethodCQGAdvancedStudyRequestClassset_Parameter(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest set_ParameterObj = (CQGAdvancedStudyRequest)qObj;
                set_ParameterObj.set_Parameter((System.Object)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGAdvancedStudyRequestClassToString(QueryInfo query, object[] args)
            {
                CQGAdvancedStudyRequest ToStringObj = (CQGAdvancedStudyRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAlgorithmicOrderDefinitionClassAddValue(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition AddValueObj = (CQGAlgorithmicOrderDefinition)qObj;
                AddValueObj.AddValue((System.String)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGAlgorithmicOrderDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition GetHashCodeObj = (CQGAlgorithmicOrderDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAlgorithmicOrderDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinition ToStringObj = (CQGAlgorithmicOrderDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAlgorithmicOrderDefinitionsClassAdd(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions AddObj = (CQGAlgorithmicOrderDefinitions)qObj;
                AddObj.Add((CQG.CQGAlgorithmicOrderDefinition)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGAlgorithmicOrderDefinitionsClassCreateDefinition(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions CreateDefinitionObj = (CQGAlgorithmicOrderDefinitions)qObj;
                CQG.CQGAlgorithmicOrderDefinition CreateDefinitionReturnV = CreateDefinitionObj.CreateDefinition();
                var CreateDefinitionValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateDefinitionValKey, CreateDefinitionReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateDefinitionValKey));
            }

            private void MethodCQGAlgorithmicOrderDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions GetEnumeratorObj = (CQGAlgorithmicOrderDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGAlgorithmicOrderDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions GetHashCodeObj = (CQGAlgorithmicOrderDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAlgorithmicOrderDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderDefinitions ToStringObj = (CQGAlgorithmicOrderDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAlgorithmicOrderParametersClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters GetHashCodeObj = (CQGAlgorithmicOrderParameters)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAlgorithmicOrderParametersClassToString(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderParameters ToStringObj = (CQGAlgorithmicOrderParameters)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAlgorithmicOrderPropertiesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperties GetEnumeratorObj = (CQGAlgorithmicOrderProperties)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGAlgorithmicOrderPropertiesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperties GetHashCodeObj = (CQGAlgorithmicOrderProperties)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAlgorithmicOrderPropertiesClassToString(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperties ToStringObj = (CQGAlgorithmicOrderProperties)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAlgorithmicOrderPropertyClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperty GetHashCodeObj = (CQGAlgorithmicOrderProperty)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAlgorithmicOrderPropertyClassToString(QueryInfo query, object[] args)
            {
                CQGAlgorithmicOrderProperty ToStringObj = (CQGAlgorithmicOrderProperty)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGAPIConfigClassAddRemoteOpenAPIServer(QueryInfo query, object[] args)
            {
                CQGAPIConfig AddRemoteOpenAPIServerObj = (CQGAPIConfig)qObj;
                AddRemoteOpenAPIServerObj.AddRemoteOpenAPIServer((System.String)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGAPIConfigClassClearRemoteOpenAPIServers(QueryInfo query, object[] args)
            {
                CQGAPIConfig ClearRemoteOpenAPIServersObj = (CQGAPIConfig)qObj;
                ClearRemoteOpenAPIServersObj.ClearRemoteOpenAPIServers();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGAPIConfigClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGAPIConfig GetHashCodeObj = (CQGAPIConfig)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGAPIConfigClassToString(QueryInfo query, object[] args)
            {
                CQGAPIConfig ToStringObj = (CQGAPIConfig)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGBarsTimestampsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps GetEnumeratorObj = (CQGBarsTimestamps)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGBarsTimestampsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps GetHashCodeObj = (CQGBarsTimestamps)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGBarsTimestampsClassToString(QueryInfo query, object[] args)
            {
                CQGBarsTimestamps ToStringObj = (CQGBarsTimestamps)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCELClassActivateAllOrders(QueryInfo query, object[] args)
            {
                CQGCEL ActivateAllOrdersObj = (CQGCEL)qObj;
                ActivateAllOrdersObj.ActivateAllOrders((CQG.CQGAccount)args[0],(CQG.CQGInstrument)args[1],(System.Boolean)args[2],(CQG.eOrderSide)args[3]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassActivateAllOrdersEx(QueryInfo query, object[] args)
            {
                CQGCEL ActivateAllOrdersExObj = (CQGCEL)qObj;
                ActivateAllOrdersExObj.ActivateAllOrdersEx((CQG.CQGOrderActionRequest)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassCancelAllOrders(QueryInfo query, object[] args)
            {
                CQGCEL CancelAllOrdersObj = (CQGCEL)qObj;
                CancelAllOrdersObj.CancelAllOrders((CQG.CQGAccount)args[0],(CQG.CQGInstrument)args[1],(System.Boolean)args[2],(System.Boolean)args[3],(CQG.eOrderSide)args[4]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassCancelAllOrdersEx(QueryInfo query, object[] args)
            {
                CQGCEL CancelAllOrdersExObj = (CQGCEL)qObj;
                CancelAllOrdersExObj.CancelAllOrdersEx((CQG.CQGOrderActionRequest)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassChangePassword(QueryInfo query, object[] args)
            {
                CQGCEL ChangePasswordObj = (CQGCEL)qObj;
                ChangePasswordObj.ChangePassword((System.String)args[0],(System.String)args[1],(System.String)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassChangeRemoteOpenAPIServer(QueryInfo query, object[] args)
            {
                CQGCEL ChangeRemoteOpenAPIServerObj = (CQGCEL)qObj;
                ChangeRemoteOpenAPIServerObj.ChangeRemoteOpenAPIServer((System.String)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassCreateAccountsCollection(QueryInfo query, object[] args)
            {
                CQGCEL CreateAccountsCollectionObj = (CQGCEL)qObj;
                CQG.CQGAccounts CreateAccountsCollectionReturnV = CreateAccountsCollectionObj.CreateAccountsCollection();
                var CreateAccountsCollectionValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateAccountsCollectionValKey, CreateAccountsCollectionReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateAccountsCollectionValKey));
            }

            private void MethodCQGCELClassCreateAdvancedStudyRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateAdvancedStudyRequestObj = (CQGCEL)qObj;
                CQG.CQGAdvancedStudyRequest CreateAdvancedStudyRequestReturnV = CreateAdvancedStudyRequestObj.CreateAdvancedStudyRequest((System.String)args[0]);
                var CreateAdvancedStudyRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateAdvancedStudyRequestValKey, CreateAdvancedStudyRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateAdvancedStudyRequestValKey));
            }

            private void MethodCQGCELClassCreateAlgorithmicOrderDefinitions(QueryInfo query, object[] args)
            {
                CQGCEL CreateAlgorithmicOrderDefinitionsObj = (CQGCEL)qObj;
                CQG.CQGAlgorithmicOrderDefinitions CreateAlgorithmicOrderDefinitionsReturnV = CreateAlgorithmicOrderDefinitionsObj.CreateAlgorithmicOrderDefinitions();
                var CreateAlgorithmicOrderDefinitionsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateAlgorithmicOrderDefinitionsValKey, CreateAlgorithmicOrderDefinitionsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateAlgorithmicOrderDefinitionsValKey));
            }

            private void MethodCQGCELClassCreateConditionRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateConditionRequestObj = (CQGCEL)qObj;
                CQG.CQGConditionRequest CreateConditionRequestReturnV = CreateConditionRequestObj.CreateConditionRequest((System.String)args[0]);
                var CreateConditionRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateConditionRequestValKey, CreateConditionRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateConditionRequestValKey));
            }

            private void MethodCQGCELClassCreateConstantVolumeBarsRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateConstantVolumeBarsRequestObj = (CQGCEL)qObj;
                CQG.CQGConstantVolumeBarsRequest CreateConstantVolumeBarsRequestReturnV = CreateConstantVolumeBarsRequestObj.CreateConstantVolumeBarsRequest();
                var CreateConstantVolumeBarsRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateConstantVolumeBarsRequestValKey, CreateConstantVolumeBarsRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateConstantVolumeBarsRequestValKey));
            }

            private void MethodCQGCELClassCreateCustomStudyRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateCustomStudyRequestObj = (CQGCEL)qObj;
                CQG.CQGCustomStudyRequest CreateCustomStudyRequestReturnV = CreateCustomStudyRequestObj.CreateCustomStudyRequest((System.String)args[0]);
                var CreateCustomStudyRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateCustomStudyRequestValKey, CreateCustomStudyRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateCustomStudyRequestValKey));
            }

            private void MethodCQGCELClassCreateExecutionPattern(QueryInfo query, object[] args)
            {
                CQGCEL CreateExecutionPatternObj = (CQGCEL)qObj;
                CQG.CQGExecutionPattern CreateExecutionPatternReturnV = CreateExecutionPatternObj.CreateExecutionPattern((CQG.CQGStrategyDefinition)args[0],(CQG.eOrderType)args[1]);
                var CreateExecutionPatternValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateExecutionPatternValKey, CreateExecutionPatternReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateExecutionPatternValKey));
            }

            private void MethodCQGCELClassCreateExpressionRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateExpressionRequestObj = (CQGCEL)qObj;
                CQG.CQGExpressionRequest CreateExpressionRequestReturnV = CreateExpressionRequestObj.CreateExpressionRequest();
                var CreateExpressionRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateExpressionRequestValKey, CreateExpressionRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateExpressionRequestValKey));
            }

            private void MethodCQGCELClassCreateHistoricalSessionsRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateHistoricalSessionsRequestObj = (CQGCEL)qObj;
                CQG.CQGHistoricalSessionsRequest CreateHistoricalSessionsRequestReturnV = CreateHistoricalSessionsRequestObj.CreateHistoricalSessionsRequest();
                var CreateHistoricalSessionsRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateHistoricalSessionsRequestValKey, CreateHistoricalSessionsRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateHistoricalSessionsRequestValKey));
            }

            private void MethodCQGCELClassCreateInstrumentRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateInstrumentRequestObj = (CQGCEL)qObj;
                CQG.CQGInstrumentSubscriptionRequest CreateInstrumentRequestReturnV = CreateInstrumentRequestObj.CreateInstrumentRequest();
                var CreateInstrumentRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateInstrumentRequestValKey, CreateInstrumentRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateInstrumentRequestValKey));
            }

            private void MethodCQGCELClassCreateInstrumentsGroupRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateInstrumentsGroupRequestObj = (CQGCEL)qObj;
                CQG.CQGInstrumentsGroupRequest CreateInstrumentsGroupRequestReturnV = CreateInstrumentsGroupRequestObj.CreateInstrumentsGroupRequest();
                var CreateInstrumentsGroupRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateInstrumentsGroupRequestValKey, CreateInstrumentsGroupRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateInstrumentsGroupRequestValKey));
            }

            private void MethodCQGCELClassCreateManualFillRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateManualFillRequestObj = (CQGCEL)qObj;
                CQG.CQGManualFillRequest CreateManualFillRequestReturnV = CreateManualFillRequestObj.CreateManualFillRequest((CQG.eManualFillUpdateType)args[0],(CQG.CQGManualFill)args[1]);
                var CreateManualFillRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateManualFillRequestValKey, CreateManualFillRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateManualFillRequestValKey));
            }

            private void MethodCQGCELClassCreateOrder(QueryInfo query, object[] args)
            {
                CQGCEL CreateOrderObj = (CQGCEL)qObj;
                CQG.CQGOrder CreateOrderReturnV = CreateOrderObj.CreateOrder((CQG.eOrderType)args[0],(CQG.CQGInstrument)args[1],(CQG.CQGAccount)args[2],(System.Int32)args[3],(CQG.eOrderSide)args[4],(System.Double)args[5],(System.Double)args[6],(System.String)args[7]);
                var CreateOrderValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateOrderValKey, CreateOrderReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateOrderValKey));
            }

            private void MethodCQGCELClassCreateOrderActionRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateOrderActionRequestObj = (CQGCEL)qObj;
                CQG.CQGOrderActionRequest CreateOrderActionRequestReturnV = CreateOrderActionRequestObj.CreateOrderActionRequest();
                var CreateOrderActionRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateOrderActionRequestValKey, CreateOrderActionRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateOrderActionRequestValKey));
            }

            private void MethodCQGCELClassCreateOrderByInstrumentName(QueryInfo query, object[] args)
            {
                CQGCEL CreateOrderByInstrumentNameObj = (CQGCEL)qObj;
                CQG.CQGOrder CreateOrderByInstrumentNameReturnV = CreateOrderByInstrumentNameObj.CreateOrderByInstrumentName((CQG.eOrderType)args[0],(System.String)args[1],(CQG.CQGAccount)args[2],(System.Int32)args[3],(CQG.eOrderSide)args[4],(System.Double)args[5],(System.Double)args[6],(System.String)args[7]);
                var CreateOrderByInstrumentNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateOrderByInstrumentNameValKey, CreateOrderByInstrumentNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateOrderByInstrumentNameValKey));
            }

            private void MethodCQGCELClassCreateOrderChain(QueryInfo query, object[] args)
            {
                CQGCEL CreateOrderChainObj = (CQGCEL)qObj;
                CQG.CQGOrderChain CreateOrderChainReturnV = CreateOrderChainObj.CreateOrderChain();
                var CreateOrderChainValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateOrderChainValKey, CreateOrderChainReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateOrderChainValKey));
            }

            private void MethodCQGCELClassCreatePointAndFigureBarsRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreatePointAndFigureBarsRequestObj = (CQGCEL)qObj;
                CQG.CQGPointAndFigureBarsRequest CreatePointAndFigureBarsRequestReturnV = CreatePointAndFigureBarsRequestObj.CreatePointAndFigureBarsRequest();
                var CreatePointAndFigureBarsRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreatePointAndFigureBarsRequestValKey, CreatePointAndFigureBarsRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreatePointAndFigureBarsRequestValKey));
            }

            private void MethodCQGCELClassCreateStrategyOrder(QueryInfo query, object[] args)
            {
                CQGCEL CreateStrategyOrderObj = (CQGCEL)qObj;
                CQG.CQGOrder CreateStrategyOrderReturnV = CreateStrategyOrderObj.CreateStrategyOrder((CQG.eOrderType)args[0],(CQG.CQGStrategyDefinition)args[1],(CQG.CQGAccount)args[2],(CQG.CQGAccounts)args[3],(System.Int32)args[4],(CQG.eOrderSide)args[5],(System.Double)args[6],(System.Double)args[7],(System.String)args[8]);
                var CreateStrategyOrderValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateStrategyOrderValKey, CreateStrategyOrderReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateStrategyOrderValKey));
            }

            private void MethodCQGCELClassCreateStrategyOrderByExpression(QueryInfo query, object[] args)
            {
                CQGCEL CreateStrategyOrderByExpressionObj = (CQGCEL)qObj;
                CQG.CQGOrder CreateStrategyOrderByExpressionReturnV = CreateStrategyOrderByExpressionObj.CreateStrategyOrderByExpression((CQG.eOrderType)args[0],(System.String)args[1],(CQG.CQGAccount)args[2],(CQG.CQGAccounts)args[3],(System.Int32)args[4],(CQG.eOrderSide)args[5],(System.Double)args[6],(System.Double)args[7],(System.String)args[8]);
                var CreateStrategyOrderByExpressionValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateStrategyOrderByExpressionValKey, CreateStrategyOrderByExpressionReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateStrategyOrderByExpressionValKey));
            }

            private void MethodCQGCELClassCreateSubMinuteBarsRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateSubMinuteBarsRequestObj = (CQGCEL)qObj;
                CQG.CQGSubMinuteBarsRequest CreateSubMinuteBarsRequestReturnV = CreateSubMinuteBarsRequestObj.CreateSubMinuteBarsRequest();
                var CreateSubMinuteBarsRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateSubMinuteBarsRequestValKey, CreateSubMinuteBarsRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateSubMinuteBarsRequestValKey));
            }

            private void MethodCQGCELClassCreateTFlowBarsRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateTFlowBarsRequestObj = (CQGCEL)qObj;
                CQG.CQGTFlowBarsRequest CreateTFlowBarsRequestReturnV = CreateTFlowBarsRequestObj.CreateTFlowBarsRequest();
                var CreateTFlowBarsRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateTFlowBarsRequestValKey, CreateTFlowBarsRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateTFlowBarsRequestValKey));
            }

            private void MethodCQGCELClassCreateTicksRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateTicksRequestObj = (CQGCEL)qObj;
                CQG.CQGTicksRequest CreateTicksRequestReturnV = CreateTicksRequestObj.CreateTicksRequest();
                var CreateTicksRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateTicksRequestValKey, CreateTicksRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateTicksRequestValKey));
            }

            private void MethodCQGCELClassCreateTimedBarsRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateTimedBarsRequestObj = (CQGCEL)qObj;
                CQG.CQGTimedBarsRequest CreateTimedBarsRequestReturnV = CreateTimedBarsRequestObj.CreateTimedBarsRequest();
                var CreateTimedBarsRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateTimedBarsRequestValKey, CreateTimedBarsRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateTimedBarsRequestValKey));
            }

            private void MethodCQGCELClassCreateTradingSystemRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateTradingSystemRequestObj = (CQGCEL)qObj;
                CQG.CQGTradingSystemRequest CreateTradingSystemRequestReturnV = CreateTradingSystemRequestObj.CreateTradingSystemRequest((System.String)args[0]);
                var CreateTradingSystemRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateTradingSystemRequestValKey, CreateTradingSystemRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateTradingSystemRequestValKey));
            }

            private void MethodCQGCELClassCreateYieldsRequest(QueryInfo query, object[] args)
            {
                CQGCEL CreateYieldsRequestObj = (CQGCEL)qObj;
                CQG.CQGYieldsRequest CreateYieldsRequestReturnV = CreateYieldsRequestObj.CreateYieldsRequest();
                var CreateYieldsRequestValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(CreateYieldsRequestValKey, CreateYieldsRequestReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CreateYieldsRequestValKey));
            }

            private void MethodCQGCELClassDefineStrategy(QueryInfo query, object[] args)
            {
                CQGCEL DefineStrategyObj = (CQGCEL)qObj;
                CQG.CQGStrategyDefinition DefineStrategyReturnV = DefineStrategyObj.DefineStrategy((System.String)args[0]);
                var DefineStrategyValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(DefineStrategyValKey, DefineStrategyReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefineStrategyValKey));
            }

            private void MethodCQGCELClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCEL GetHashCodeObj = (CQGCEL)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCELClassGWLogoff(QueryInfo query, object[] args)
            {
                CQGCEL GWLogoffObj = (CQGCEL)qObj;
                GWLogoffObj.GWLogoff();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassGWLogon(QueryInfo query, object[] args)
            {
                CQGCEL GWLogonObj = (CQGCEL)qObj;
                GWLogonObj.GWLogon((System.String)args[0],(System.String)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassGWOTPLogon(QueryInfo query, object[] args)
            {
                CQGCEL GWOTPLogonObj = (CQGCEL)qObj;
                GWOTPLogonObj.GWOTPLogon((System.String)args[0],(System.String)args[1],(System.String)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassIsValid(QueryInfo query, object[] args)
            {
                CQGCEL IsValidObj = (CQGCEL)qObj;
                System.Boolean IsValidReturnV = IsValidObj.IsValid((System.Object)args[0]);
                var IsValidValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsValidValKey, value: IsValidReturnV));
            }

            private void MethodCQGCELClassLogOn(QueryInfo query, object[] args)
            {
                CQGCEL LogOnObj = (CQGCEL)qObj;
                LogOnObj.LogOn((System.String)args[0],(System.String)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassModifyCompoundOrder(QueryInfo query, object[] args)
            {
                CQGCEL ModifyCompoundOrderObj = (CQGCEL)qObj;
                ModifyCompoundOrderObj.ModifyCompoundOrder((System.Int32)args[0],(System.String)args[1],(CQG.CQGOrderChain)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassNewInstrument(QueryInfo query, object[] args)
            {
                CQGCEL NewInstrumentObj = (CQGCEL)qObj;
                NewInstrumentObj.NewInstrument((System.String)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassPlaceCompoundOrder(QueryInfo query, object[] args)
            {
                CQGCEL PlaceCompoundOrderObj = (CQGCEL)qObj;
                PlaceCompoundOrderObj.PlaceCompoundOrder((CQG.CQGOrderChain)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassQueryOrders(QueryInfo query, object[] args)
            {
                CQGCEL QueryOrdersObj = (CQGCEL)qObj;
                CQG.CQGOrdersQuery QueryOrdersReturnV = QueryOrdersObj.QueryOrders((CQG.CQGAccount)args[0],(CQG.CQGInstrument)args[1],(CQG.eOrderStatusFilter)args[2],(System.DateTime)args[3],(CQG.eOrderSide)args[4]);
                var QueryOrdersValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(QueryOrdersValKey, QueryOrdersReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QueryOrdersValKey));
            }

            private void MethodCQGCELClassQueryPositionsStatement(QueryInfo query, object[] args)
            {
                CQGCEL QueryPositionsStatementObj = (CQGCEL)qObj;
                QueryPositionsStatementObj.QueryPositionsStatement((System.Int32)args[0],(System.DateTime)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassQuerySummariesStatement(QueryInfo query, object[] args)
            {
                CQGCEL QuerySummariesStatementObj = (CQGCEL)qObj;
                QuerySummariesStatementObj.QuerySummariesStatement((System.Int32)args[0],(System.DateTime)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRegisterAlgorithmicOrder(QueryInfo query, object[] args)
            {
                CQGCEL RegisterAlgorithmicOrderObj = (CQGCEL)qObj;
                RegisterAlgorithmicOrderObj.RegisterAlgorithmicOrder((System.String)args[0],(System.String)args[1],(System.String)args[2],(System.String)args[3],(CQG.CQGAlgorithmicOrderDefinitions)args[4],(System.Int32)args[5]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAdvancedStudy(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAdvancedStudyObj = (CQGCEL)qObj;
                RemoveAdvancedStudyObj.RemoveAdvancedStudy((CQG.CQGAdvancedStudy)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllAdvancedStudies(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllAdvancedStudiesObj = (CQGCEL)qObj;
                RemoveAllAdvancedStudiesObj.RemoveAllAdvancedStudies();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllConditions(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllConditionsObj = (CQGCEL)qObj;
                RemoveAllConditionsObj.RemoveAllConditions();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllConstantVolumeBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllConstantVolumeBarsObj = (CQGCEL)qObj;
                RemoveAllConstantVolumeBarsObj.RemoveAllConstantVolumeBars();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllCustomStudies(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllCustomStudiesObj = (CQGCEL)qObj;
                RemoveAllCustomStudiesObj.RemoveAllCustomStudies();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllExpressions(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllExpressionsObj = (CQGCEL)qObj;
                RemoveAllExpressionsObj.RemoveAllExpressions();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllInstruments(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllInstrumentsObj = (CQGCEL)qObj;
                RemoveAllInstrumentsObj.RemoveAllInstruments();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllPointAndFigureBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllPointAndFigureBarsObj = (CQGCEL)qObj;
                RemoveAllPointAndFigureBarsObj.RemoveAllPointAndFigureBars();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllSubMinuteBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllSubMinuteBarsObj = (CQGCEL)qObj;
                RemoveAllSubMinuteBarsObj.RemoveAllSubMinuteBars();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllTFlowBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllTFlowBarsObj = (CQGCEL)qObj;
                RemoveAllTFlowBarsObj.RemoveAllTFlowBars();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllTicks(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllTicksObj = (CQGCEL)qObj;
                RemoveAllTicksObj.RemoveAllTicks();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllTimedBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllTimedBarsObj = (CQGCEL)qObj;
                RemoveAllTimedBarsObj.RemoveAllTimedBars();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllTradingSystems(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllTradingSystemsObj = (CQGCEL)qObj;
                RemoveAllTradingSystemsObj.RemoveAllTradingSystems();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveAllYields(QueryInfo query, object[] args)
            {
                CQGCEL RemoveAllYieldsObj = (CQGCEL)qObj;
                RemoveAllYieldsObj.RemoveAllYields();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveCondition(QueryInfo query, object[] args)
            {
                CQGCEL RemoveConditionObj = (CQGCEL)qObj;
                RemoveConditionObj.RemoveCondition((CQG.CQGCondition)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveConstantVolumeBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveConstantVolumeBarsObj = (CQGCEL)qObj;
                RemoveConstantVolumeBarsObj.RemoveConstantVolumeBars((CQG.CQGConstantVolumeBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveCustomStudy(QueryInfo query, object[] args)
            {
                CQGCEL RemoveCustomStudyObj = (CQGCEL)qObj;
                RemoveCustomStudyObj.RemoveCustomStudy((CQG.CQGCustomStudy)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveExpression(QueryInfo query, object[] args)
            {
                CQGCEL RemoveExpressionObj = (CQGCEL)qObj;
                RemoveExpressionObj.RemoveExpression((CQG.CQGExpression)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveInstrument(QueryInfo query, object[] args)
            {
                CQGCEL RemoveInstrumentObj = (CQGCEL)qObj;
                RemoveInstrumentObj.RemoveInstrument((CQG.CQGInstrument)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveInstrumentsGroup(QueryInfo query, object[] args)
            {
                CQGCEL RemoveInstrumentsGroupObj = (CQGCEL)qObj;
                RemoveInstrumentsGroupObj.RemoveInstrumentsGroup((CQG.CQGInstrumentsGroup)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemovePointAndFigureBars(QueryInfo query, object[] args)
            {
                CQGCEL RemovePointAndFigureBarsObj = (CQGCEL)qObj;
                RemovePointAndFigureBarsObj.RemovePointAndFigureBars((CQG.CQGPointAndFigureBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveSubMinuteBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveSubMinuteBarsObj = (CQGCEL)qObj;
                RemoveSubMinuteBarsObj.RemoveSubMinuteBars((CQG.CQGSubMinuteBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveTFlowBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveTFlowBarsObj = (CQGCEL)qObj;
                RemoveTFlowBarsObj.RemoveTFlowBars((CQG.CQGTFlowBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveTicks(QueryInfo query, object[] args)
            {
                CQGCEL RemoveTicksObj = (CQGCEL)qObj;
                RemoveTicksObj.RemoveTicks((CQG.CQGTicks)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveTimedBars(QueryInfo query, object[] args)
            {
                CQGCEL RemoveTimedBarsObj = (CQGCEL)qObj;
                RemoveTimedBarsObj.RemoveTimedBars((CQG.CQGTimedBars)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveTradingSystem(QueryInfo query, object[] args)
            {
                CQGCEL RemoveTradingSystemObj = (CQGCEL)qObj;
                RemoveTradingSystemObj.RemoveTradingSystem((CQG.CQGTradingSystem)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRemoveYields(QueryInfo query, object[] args)
            {
                CQGCEL RemoveYieldsObj = (CQGCEL)qObj;
                RemoveYieldsObj.RemoveYields((CQG.CQGYields)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestAdvancedStudy(QueryInfo query, object[] args)
            {
                CQGCEL RequestAdvancedStudyObj = (CQGCEL)qObj;
                CQG.CQGAdvancedStudy RequestAdvancedStudyReturnV = RequestAdvancedStudyObj.RequestAdvancedStudy((CQG.CQGAdvancedStudyRequest)args[0]);
                var RequestAdvancedStudyValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestAdvancedStudyValKey, RequestAdvancedStudyReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestAdvancedStudyValKey));
            }

            private void MethodCQGCELClassRequestAdvancedStudyDefinitions(QueryInfo query, object[] args)
            {
                CQGCEL RequestAdvancedStudyDefinitionsObj = (CQGCEL)qObj;
                RequestAdvancedStudyDefinitionsObj.RequestAdvancedStudyDefinitions();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestBarsTimestamps(QueryInfo query, object[] args)
            {
                CQGCEL RequestBarsTimestampsObj = (CQGCEL)qObj;
                CQG.CQGBarsTimestamps RequestBarsTimestampsReturnV = RequestBarsTimestampsObj.RequestBarsTimestamps((CQG.CQGTimedBarsRequest)args[0]);
                var RequestBarsTimestampsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestBarsTimestampsValKey, RequestBarsTimestampsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestBarsTimestampsValKey));
            }

            private void MethodCQGCELClassRequestCommodityInstruments(QueryInfo query, object[] args)
            {
                CQGCEL RequestCommodityInstrumentsObj = (CQGCEL)qObj;
                RequestCommodityInstrumentsObj.RequestCommodityInstruments((System.String)args[0],(CQG.eInstrumentType)args[1],(System.Boolean)args[2]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestCondition(QueryInfo query, object[] args)
            {
                CQGCEL RequestConditionObj = (CQGCEL)qObj;
                CQG.CQGCondition RequestConditionReturnV = RequestConditionObj.RequestCondition((CQG.CQGConditionRequest)args[0]);
                var RequestConditionValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestConditionValKey, RequestConditionReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestConditionValKey));
            }

            private void MethodCQGCELClassRequestConditionDefinitions(QueryInfo query, object[] args)
            {
                CQGCEL RequestConditionDefinitionsObj = (CQGCEL)qObj;
                RequestConditionDefinitionsObj.RequestConditionDefinitions();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestConstantVolumeBars(QueryInfo query, object[] args)
            {
                CQGCEL RequestConstantVolumeBarsObj = (CQGCEL)qObj;
                CQG.CQGConstantVolumeBars RequestConstantVolumeBarsReturnV = RequestConstantVolumeBarsObj.RequestConstantVolumeBars((CQG.CQGConstantVolumeBarsRequest)args[0]);
                var RequestConstantVolumeBarsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestConstantVolumeBarsValKey, RequestConstantVolumeBarsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestConstantVolumeBarsValKey));
            }

            private void MethodCQGCELClassRequestCustomSessions(QueryInfo query, object[] args)
            {
                CQGCEL RequestCustomSessionsObj = (CQGCEL)qObj;
                RequestCustomSessionsObj.RequestCustomSessions();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestCustomStudy(QueryInfo query, object[] args)
            {
                CQGCEL RequestCustomStudyObj = (CQGCEL)qObj;
                CQG.CQGCustomStudy RequestCustomStudyReturnV = RequestCustomStudyObj.RequestCustomStudy((CQG.CQGCustomStudyRequest)args[0]);
                var RequestCustomStudyValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestCustomStudyValKey, RequestCustomStudyReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestCustomStudyValKey));
            }

            private void MethodCQGCELClassRequestCustomStudyDefinitions(QueryInfo query, object[] args)
            {
                CQGCEL RequestCustomStudyDefinitionsObj = (CQGCEL)qObj;
                RequestCustomStudyDefinitionsObj.RequestCustomStudyDefinitions();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestDataSources(QueryInfo query, object[] args)
            {
                CQGCEL RequestDataSourcesObj = (CQGCEL)qObj;
                RequestDataSourcesObj.RequestDataSources();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestDataSourceSymbols(QueryInfo query, object[] args)
            {
                CQGCEL RequestDataSourceSymbolsObj = (CQGCEL)qObj;
                RequestDataSourceSymbolsObj.RequestDataSourceSymbols((System.String)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestExpression(QueryInfo query, object[] args)
            {
                CQGCEL RequestExpressionObj = (CQGCEL)qObj;
                CQG.CQGExpression RequestExpressionReturnV = RequestExpressionObj.RequestExpression((CQG.CQGExpressionRequest)args[0]);
                var RequestExpressionValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestExpressionValKey, RequestExpressionReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestExpressionValKey));
            }

            private void MethodCQGCELClassRequestHistoricalSessions(QueryInfo query, object[] args)
            {
                CQGCEL RequestHistoricalSessionsObj = (CQGCEL)qObj;
                RequestHistoricalSessionsObj.RequestHistoricalSessions((CQG.CQGHistoricalSessionsRequest)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestInstrumentsGroup(QueryInfo query, object[] args)
            {
                CQGCEL RequestInstrumentsGroupObj = (CQGCEL)qObj;
                RequestInstrumentsGroupObj.RequestInstrumentsGroup((CQG.CQGInstrumentsGroupRequest)args[0],(System.Boolean)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestManualFills(QueryInfo query, object[] args)
            {
                CQGCEL RequestManualFillsObj = (CQGCEL)qObj;
                RequestManualFillsObj.RequestManualFills((System.Int32)args[0],(CQG.eManualFillsDataLevel)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestManualFillUpdate(QueryInfo query, object[] args)
            {
                CQGCEL RequestManualFillUpdateObj = (CQGCEL)qObj;
                RequestManualFillUpdateObj.RequestManualFillUpdate((CQG.CQGManualFillRequest)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestPointAndFigureBars(QueryInfo query, object[] args)
            {
                CQGCEL RequestPointAndFigureBarsObj = (CQGCEL)qObj;
                CQG.CQGPointAndFigureBars RequestPointAndFigureBarsReturnV = RequestPointAndFigureBarsObj.RequestPointAndFigureBars((CQG.CQGPointAndFigureBarsRequest)args[0]);
                var RequestPointAndFigureBarsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestPointAndFigureBarsValKey, RequestPointAndFigureBarsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPointAndFigureBarsValKey));
            }

            private void MethodCQGCELClassRequestQFormulaDefinitions(QueryInfo query, object[] args)
            {
                CQGCEL RequestQFormulaDefinitionsObj = (CQGCEL)qObj;
                RequestQFormulaDefinitionsObj.RequestQFormulaDefinitions();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestSubMinuteBars(QueryInfo query, object[] args)
            {
                CQGCEL RequestSubMinuteBarsObj = (CQGCEL)qObj;
                CQG.CQGSubMinuteBars RequestSubMinuteBarsReturnV = RequestSubMinuteBarsObj.RequestSubMinuteBars((CQG.CQGSubMinuteBarsRequest)args[0]);
                var RequestSubMinuteBarsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestSubMinuteBarsValKey, RequestSubMinuteBarsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestSubMinuteBarsValKey));
            }

            private void MethodCQGCELClassRequestTFlowBars(QueryInfo query, object[] args)
            {
                CQGCEL RequestTFlowBarsObj = (CQGCEL)qObj;
                CQG.CQGTFlowBars RequestTFlowBarsReturnV = RequestTFlowBarsObj.RequestTFlowBars((CQG.CQGTFlowBarsRequest)args[0]);
                var RequestTFlowBarsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestTFlowBarsValKey, RequestTFlowBarsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestTFlowBarsValKey));
            }

            private void MethodCQGCELClassRequestTicks(QueryInfo query, object[] args)
            {
                CQGCEL RequestTicksObj = (CQGCEL)qObj;
                CQG.CQGTicks RequestTicksReturnV = RequestTicksObj.RequestTicks((CQG.CQGTicksRequest)args[0]);
                var RequestTicksValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestTicksValKey, RequestTicksReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestTicksValKey));
            }

            private void MethodCQGCELClassRequestTimedBars(QueryInfo query, object[] args)
            {
                CQGCEL RequestTimedBarsObj = (CQGCEL)qObj;
                CQG.CQGTimedBars RequestTimedBarsReturnV = RequestTimedBarsObj.RequestTimedBars((CQG.CQGTimedBarsRequest)args[0]);
                var RequestTimedBarsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestTimedBarsValKey, RequestTimedBarsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestTimedBarsValKey));
            }

            private void MethodCQGCELClassRequestTradableCommodities(QueryInfo query, object[] args)
            {
                CQGCEL RequestTradableCommoditiesObj = (CQGCEL)qObj;
                RequestTradableCommoditiesObj.RequestTradableCommodities((System.Int32)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestTradableExchanges(QueryInfo query, object[] args)
            {
                CQGCEL RequestTradableExchangesObj = (CQGCEL)qObj;
                RequestTradableExchangesObj.RequestTradableExchanges((System.Int32)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestTradingSystem(QueryInfo query, object[] args)
            {
                CQGCEL RequestTradingSystemObj = (CQGCEL)qObj;
                CQG.CQGTradingSystem RequestTradingSystemReturnV = RequestTradingSystemObj.RequestTradingSystem((CQG.CQGTradingSystemRequest)args[0]);
                var RequestTradingSystemValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestTradingSystemValKey, RequestTradingSystemReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestTradingSystemValKey));
            }

            private void MethodCQGCELClassRequestTradingSystemDefinitions(QueryInfo query, object[] args)
            {
                CQGCEL RequestTradingSystemDefinitionsObj = (CQGCEL)qObj;
                RequestTradingSystemDefinitionsObj.RequestTradingSystemDefinitions();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassRequestYields(QueryInfo query, object[] args)
            {
                CQGCEL RequestYieldsObj = (CQGCEL)qObj;
                CQG.CQGYields RequestYieldsReturnV = RequestYieldsObj.RequestYields((CQG.CQGYieldsRequest)args[0]);
                var RequestYieldsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(RequestYieldsValKey, RequestYieldsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestYieldsValKey));
            }

            private void MethodCQGCELClassShutdown(QueryInfo query, object[] args)
            {
                var returnKey = "true";
                var answer = new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: returnKey);PushAnswerAndDeleteQuery(answer);
            }

            private void MethodCQGCELClassStartup(QueryInfo query, object[] args)
            {
                CQGCEL StartupObj = (CQGCEL)qObj;
                StartupObj.Startup();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassSubscribeNewInstrument(QueryInfo query, object[] args)
            {
                CQGCEL SubscribeNewInstrumentObj = (CQGCEL)qObj;
                SubscribeNewInstrumentObj.SubscribeNewInstrument((CQG.CQGInstrumentSubscriptionRequest)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassTerminateCQGIC(QueryInfo query, object[] args)
            {
                CQGCEL TerminateCQGICObj = (CQGCEL)qObj;
                TerminateCQGICObj.TerminateCQGIC((System.Boolean)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCELClassToString(QueryInfo query, object[] args)
            {
                CQGCEL ToStringObj = (CQGCEL)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCELClassUnregisterAlgorithmicOrder(QueryInfo query, object[] args)
            {
                CQGCEL UnregisterAlgorithmicOrderObj = (CQGCEL)qObj;
                UnregisterAlgorithmicOrderObj.UnregisterAlgorithmicOrder((System.String)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGChangedTradeEntriesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries GetEnumeratorObj = (CQGChangedTradeEntries)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGChangedTradeEntriesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries GetHashCodeObj = (CQGChangedTradeEntries)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGChangedTradeEntriesClassToString(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntries ToStringObj = (CQGChangedTradeEntries)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGChangedTradeEntryClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntry GetHashCodeObj = (CQGChangedTradeEntry)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGChangedTradeEntryClassToString(QueryInfo query, object[] args)
            {
                CQGChangedTradeEntry ToStringObj = (CQGChangedTradeEntry)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGChangedTradeExitClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGChangedTradeExit GetHashCodeObj = (CQGChangedTradeExit)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGChangedTradeExitClassToString(QueryInfo query, object[] args)
            {
                CQGChangedTradeExit ToStringObj = (CQGChangedTradeExit)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGChangedTradeExitsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits GetEnumeratorObj = (CQGChangedTradeExits)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGChangedTradeExitsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits GetHashCodeObj = (CQGChangedTradeExits)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGChangedTradeExitsClassToString(QueryInfo query, object[] args)
            {
                CQGChangedTradeExits ToStringObj = (CQGChangedTradeExits)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCommoditiesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCommodities GetEnumeratorObj = (CQGCommodities)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCommoditiesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCommodities GetHashCodeObj = (CQGCommodities)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCommoditiesClassToString(QueryInfo query, object[] args)
            {
                CQGCommodities ToStringObj = (CQGCommodities)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCommodityInstrumentsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments GetEnumeratorObj = (CQGCommodityInstruments)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCommodityInstrumentsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments GetHashCodeObj = (CQGCommodityInstruments)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCommodityInstrumentsClassToString(QueryInfo query, object[] args)
            {
                CQGCommodityInstruments ToStringObj = (CQGCommodityInstruments)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConditionClassget_Tag(QueryInfo query, object[] args)
            {
                CQGCondition get_TagObj = (CQGCondition)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGConditionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCondition GetEnumeratorObj = (CQGCondition)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGConditionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCondition GetHashCodeObj = (CQGCondition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConditionClassIndexForDate(QueryInfo query, object[] args)
            {
                CQGCondition IndexForDateObj = (CQGCondition)qObj;
                System.Int32 IndexForDateReturnV = IndexForDateObj.IndexForDate((System.DateTime)args[0]);
                var IndexForDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexForDateValKey, value: IndexForDateReturnV));
            }

            private void MethodCQGConditionClassset_Tag(QueryInfo query, object[] args)
            {
                CQGCondition set_TagObj = (CQGCondition)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGConditionClassToString(QueryInfo query, object[] args)
            {
                CQGCondition ToStringObj = (CQGCondition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConditionDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConditionDefinition GetHashCodeObj = (CQGConditionDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConditionDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGConditionDefinition ToStringObj = (CQGConditionDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConditionDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions get_ItemByNameObj = (CQGConditionDefinitions)qObj;
                CQG.CQGConditionDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGConditionDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions GetEnumeratorObj = (CQGConditionDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGConditionDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions GetHashCodeObj = (CQGConditionDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConditionDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGConditionDefinitions ToStringObj = (CQGConditionDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConditionRequestClassget_Parameter(QueryInfo query, object[] args)
            {
                CQGConditionRequest get_ParameterObj = (CQGConditionRequest)qObj;
                System.Object get_ParameterReturnV = get_ParameterObj.get_Parameter((System.Object)args[0]);
                var get_ParameterValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ParameterValKey, value: get_ParameterReturnV));
            }

            private void MethodCQGConditionRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConditionRequest GetHashCodeObj = (CQGConditionRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConditionRequestClassset_Parameter(QueryInfo query, object[] args)
            {
                CQGConditionRequest set_ParameterObj = (CQGConditionRequest)qObj;
                set_ParameterObj.set_Parameter((System.Object)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGConditionRequestClassToString(QueryInfo query, object[] args)
            {
                CQGConditionRequest ToStringObj = (CQGConditionRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConditionResultClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConditionResult GetHashCodeObj = (CQGConditionResult)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConditionResultClassToString(QueryInfo query, object[] args)
            {
                CQGConditionResult ToStringObj = (CQGConditionResult)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConditionsClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGConditions get_ItemByIdObj = (CQGConditions)qObj;
                CQG.CQGCondition get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGConditionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGConditions GetEnumeratorObj = (CQGConditions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGConditionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConditions GetHashCodeObj = (CQGConditions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConditionsClassToString(QueryInfo query, object[] args)
            {
                CQGConditions ToStringObj = (CQGConditions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConstantVolumeBarClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar GetHashCodeObj = (CQGConstantVolumeBar)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConstantVolumeBarClassToString(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBar ToStringObj = (CQGConstantVolumeBar)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConstantVolumeBarsClassget_Tag(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars get_TagObj = (CQGConstantVolumeBars)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGConstantVolumeBarsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars GetEnumeratorObj = (CQGConstantVolumeBars)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGConstantVolumeBarsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars GetHashCodeObj = (CQGConstantVolumeBars)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConstantVolumeBarsClassset_Tag(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars set_TagObj = (CQGConstantVolumeBars)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGConstantVolumeBarsClassToString(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBars ToStringObj = (CQGConstantVolumeBars)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConstantVolumeBarsCollectionClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection get_ItemByIdObj = (CQGConstantVolumeBarsCollection)qObj;
                CQG.CQGConstantVolumeBars get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGConstantVolumeBarsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection GetEnumeratorObj = (CQGConstantVolumeBarsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGConstantVolumeBarsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection GetHashCodeObj = (CQGConstantVolumeBarsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConstantVolumeBarsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsCollection ToStringObj = (CQGConstantVolumeBarsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGConstantVolumeBarsRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest GetHashCodeObj = (CQGConstantVolumeBarsRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGConstantVolumeBarsRequestClassToString(QueryInfo query, object[] args)
            {
                CQGConstantVolumeBarsRequest ToStringObj = (CQGConstantVolumeBarsRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCurrencyRateClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCurrencyRate GetHashCodeObj = (CQGCurrencyRate)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCurrencyRateClassToString(QueryInfo query, object[] args)
            {
                CQGCurrencyRate ToStringObj = (CQGCurrencyRate)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCurrencyRatesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCurrencyRates GetEnumeratorObj = (CQGCurrencyRates)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCurrencyRatesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCurrencyRates GetHashCodeObj = (CQGCurrencyRates)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCurrencyRatesClassToString(QueryInfo query, object[] args)
            {
                CQGCurrencyRates ToStringObj = (CQGCurrencyRates)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCurveDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCurveDefinition GetHashCodeObj = (CQGCurveDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCurveDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGCurveDefinition ToStringObj = (CQGCurveDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCurveDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions get_ItemByNameObj = (CQGCurveDefinitions)qObj;
                CQG.CQGCurveDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGCurveDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions GetEnumeratorObj = (CQGCurveDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCurveDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions GetHashCodeObj = (CQGCurveDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCurveDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGCurveDefinitions ToStringObj = (CQGCurveDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCurveHeadersClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCurveHeaders GetEnumeratorObj = (CQGCurveHeaders)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCurveHeadersClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCurveHeaders GetHashCodeObj = (CQGCurveHeaders)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCurveHeadersClassToString(QueryInfo query, object[] args)
            {
                CQGCurveHeaders ToStringObj = (CQGCurveHeaders)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCurvesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCurves GetEnumeratorObj = (CQGCurves)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCurvesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCurves GetHashCodeObj = (CQGCurves)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCurvesClassToString(QueryInfo query, object[] args)
            {
                CQGCurves ToStringObj = (CQGCurves)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCustomStudiesClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGCustomStudies get_ItemByIdObj = (CQGCustomStudies)qObj;
                CQG.CQGCustomStudy get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGCustomStudiesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCustomStudies GetEnumeratorObj = (CQGCustomStudies)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCustomStudiesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCustomStudies GetHashCodeObj = (CQGCustomStudies)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCustomStudiesClassToString(QueryInfo query, object[] args)
            {
                CQGCustomStudies ToStringObj = (CQGCustomStudies)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCustomStudyClassget_Tag(QueryInfo query, object[] args)
            {
                CQGCustomStudy get_TagObj = (CQGCustomStudy)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGCustomStudyClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCustomStudy GetEnumeratorObj = (CQGCustomStudy)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCustomStudyClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCustomStudy GetHashCodeObj = (CQGCustomStudy)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCustomStudyClassIndexForDate(QueryInfo query, object[] args)
            {
                CQGCustomStudy IndexForDateObj = (CQGCustomStudy)qObj;
                System.Int32 IndexForDateReturnV = IndexForDateObj.IndexForDate((System.DateTime)args[0]);
                var IndexForDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexForDateValKey, value: IndexForDateReturnV));
            }

            private void MethodCQGCustomStudyClassset_Tag(QueryInfo query, object[] args)
            {
                CQGCustomStudy set_TagObj = (CQGCustomStudy)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCustomStudyClassToString(QueryInfo query, object[] args)
            {
                CQGCustomStudy ToStringObj = (CQGCustomStudy)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCustomStudyDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition GetHashCodeObj = (CQGCustomStudyDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCustomStudyDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinition ToStringObj = (CQGCustomStudyDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCustomStudyDefinitionsClassget_ItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions get_ItemByAbbreviationObj = (CQGCustomStudyDefinitions)qObj;
                CQG.CQGCustomStudyDefinition get_ItemByAbbreviationReturnV = get_ItemByAbbreviationObj.get_ItemByAbbreviation((System.String)args[0]);
                var get_ItemByAbbreviationValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByAbbreviationValKey, get_ItemByAbbreviationReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByAbbreviationValKey));
            }

            private void MethodCQGCustomStudyDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions get_ItemByNameObj = (CQGCustomStudyDefinitions)qObj;
                CQG.CQGCustomStudyDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGCustomStudyDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions GetEnumeratorObj = (CQGCustomStudyDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGCustomStudyDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions GetHashCodeObj = (CQGCustomStudyDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCustomStudyDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGCustomStudyDefinitions ToStringObj = (CQGCustomStudyDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGCustomStudyRequestClassget_Parameter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest get_ParameterObj = (CQGCustomStudyRequest)qObj;
                System.Object get_ParameterReturnV = get_ParameterObj.get_Parameter((System.Object)args[0]);
                var get_ParameterValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ParameterValKey, value: get_ParameterReturnV));
            }

            private void MethodCQGCustomStudyRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest GetHashCodeObj = (CQGCustomStudyRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGCustomStudyRequestClassIncludeCurve(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IncludeCurveObj = (CQGCustomStudyRequest)qObj;
                IncludeCurveObj.IncludeCurve((System.Object)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCustomStudyRequestClassIsCurveIncluded(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest IsCurveIncludedObj = (CQGCustomStudyRequest)qObj;
                System.Boolean IsCurveIncludedReturnV = IsCurveIncludedObj.IsCurveIncluded((System.Object)args[0]);
                var IsCurveIncludedValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsCurveIncludedValKey, value: IsCurveIncludedReturnV));
            }

            private void MethodCQGCustomStudyRequestClassset_Parameter(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest set_ParameterObj = (CQGCustomStudyRequest)qObj;
                set_ParameterObj.set_Parameter((System.Object)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGCustomStudyRequestClassToString(QueryInfo query, object[] args)
            {
                CQGCustomStudyRequest ToStringObj = (CQGCustomStudyRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGDataSourceClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGDataSource GetHashCodeObj = (CQGDataSource)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGDataSourceClassToString(QueryInfo query, object[] args)
            {
                CQGDataSource ToStringObj = (CQGDataSource)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGDataSourcesClassget_ItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGDataSources get_ItemByAbbreviationObj = (CQGDataSources)qObj;
                CQG.CQGDataSource get_ItemByAbbreviationReturnV = get_ItemByAbbreviationObj.get_ItemByAbbreviation((System.String)args[0]);
                var get_ItemByAbbreviationValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByAbbreviationValKey, get_ItemByAbbreviationReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByAbbreviationValKey));
            }

            private void MethodCQGDataSourcesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGDataSources GetEnumeratorObj = (CQGDataSources)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGDataSourcesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGDataSources GetHashCodeObj = (CQGDataSources)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGDataSourcesClassToString(QueryInfo query, object[] args)
            {
                CQGDataSources ToStringObj = (CQGDataSources)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGDataSourceSymbolClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbol GetHashCodeObj = (CQGDataSourceSymbol)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGDataSourceSymbolClassToString(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbol ToStringObj = (CQGDataSourceSymbol)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGDataSourceSymbolsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols GetEnumeratorObj = (CQGDataSourceSymbols)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGDataSourceSymbolsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols GetHashCodeObj = (CQGDataSourceSymbols)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGDataSourceSymbolsClassToString(QueryInfo query, object[] args)
            {
                CQGDataSourceSymbols ToStringObj = (CQGDataSourceSymbols)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGDirectEventsAccessorClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor GetHashCodeObj = (CQGDirectEventsAccessor)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGDirectEventsAccessorClassToString(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor ToStringObj = (CQGDirectEventsAccessor)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGDOMQuotesClassget_ItemByPrice(QueryInfo query, object[] args)
            {
                CQGDOMQuotes get_ItemByPriceObj = (CQGDOMQuotes)qObj;
                CQG.CQGQuote get_ItemByPriceReturnV = get_ItemByPriceObj.get_ItemByPrice((System.Double)args[0],(System.Boolean)args[1]);
                var get_ItemByPriceValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByPriceValKey, get_ItemByPriceReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByPriceValKey));
            }

            private void MethodCQGDOMQuotesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGDOMQuotes GetEnumeratorObj = (CQGDOMQuotes)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGDOMQuotesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGDOMQuotes GetHashCodeObj = (CQGDOMQuotes)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGDOMQuotesClassToString(QueryInfo query, object[] args)
            {
                CQGDOMQuotes ToStringObj = (CQGDOMQuotes)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGEnvironmentClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGEnvironment GetHashCodeObj = (CQGEnvironment)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGEnvironmentClassToString(QueryInfo query, object[] args)
            {
                CQGEnvironment ToStringObj = (CQGEnvironment)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGErrorClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGError GetHashCodeObj = (CQGError)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGErrorClassToString(QueryInfo query, object[] args)
            {
                CQGError ToStringObj = (CQGError)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExchangesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGExchanges GetEnumeratorObj = (CQGExchanges)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGExchangesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExchanges GetHashCodeObj = (CQGExchanges)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExchangesClassToString(QueryInfo query, object[] args)
            {
                CQGExchanges ToStringObj = (CQGExchanges)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExecutionPatternClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExecutionPattern GetHashCodeObj = (CQGExecutionPattern)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExecutionPatternClassToString(QueryInfo query, object[] args)
            {
                CQGExecutionPattern ToStringObj = (CQGExecutionPattern)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExecutionPatternParameterClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter GetHashCodeObj = (CQGExecutionPatternParameter)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExecutionPatternParameterClassToString(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameter ToStringObj = (CQGExecutionPatternParameter)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExecutionPatternParametersClassAdd(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters AddObj = (CQGExecutionPatternParameters)qObj;
                CQG.CQGExecutionPatternParameter AddReturnV = AddObj.Add((System.String)args[0],(CQG.eExecutionPatternParameterType)args[1],(System.String)args[2]);
                var AddValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(AddValKey, AddReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AddValKey));
            }

            private void MethodCQGExecutionPatternParametersClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters GetEnumeratorObj = (CQGExecutionPatternParameters)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGExecutionPatternParametersClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters GetHashCodeObj = (CQGExecutionPatternParameters)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExecutionPatternParametersClassRemove(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters RemoveObj = (CQGExecutionPatternParameters)qObj;
                RemoveObj.Remove((System.Object)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGExecutionPatternParametersClassToString(QueryInfo query, object[] args)
            {
                CQGExecutionPatternParameters ToStringObj = (CQGExecutionPatternParameters)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExpressionClassget_Tag(QueryInfo query, object[] args)
            {
                CQGExpression get_TagObj = (CQGExpression)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGExpressionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGExpression GetEnumeratorObj = (CQGExpression)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGExpressionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExpression GetHashCodeObj = (CQGExpression)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExpressionClassIndexForDate(QueryInfo query, object[] args)
            {
                CQGExpression IndexForDateObj = (CQGExpression)qObj;
                System.Int32 IndexForDateReturnV = IndexForDateObj.IndexForDate((System.DateTime)args[0]);
                var IndexForDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexForDateValKey, value: IndexForDateReturnV));
            }

            private void MethodCQGExpressionClassset_Tag(QueryInfo query, object[] args)
            {
                CQGExpression set_TagObj = (CQGExpression)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGExpressionClassToString(QueryInfo query, object[] args)
            {
                CQGExpression ToStringObj = (CQGExpression)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExpressionOutputHeadersClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGExpressionOutputHeaders GetEnumeratorObj = (CQGExpressionOutputHeaders)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGExpressionOutputHeadersClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExpressionOutputHeaders GetHashCodeObj = (CQGExpressionOutputHeaders)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExpressionOutputHeadersClassToString(QueryInfo query, object[] args)
            {
                CQGExpressionOutputHeaders ToStringObj = (CQGExpressionOutputHeaders)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExpressionOutputsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs GetEnumeratorObj = (CQGExpressionOutputs)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGExpressionOutputsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs GetHashCodeObj = (CQGExpressionOutputs)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExpressionOutputsClassToString(QueryInfo query, object[] args)
            {
                CQGExpressionOutputs ToStringObj = (CQGExpressionOutputs)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExpressionRequestClassAddSubExpression(QueryInfo query, object[] args)
            {
                CQGExpressionRequest AddSubExpressionObj = (CQGExpressionRequest)qObj;
                AddSubExpressionObj.AddSubExpression((System.String)args[0],(System.String)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGExpressionRequestClassget_SubExpression(QueryInfo query, object[] args)
            {
                CQGExpressionRequest get_SubExpressionObj = (CQGExpressionRequest)qObj;
                System.String get_SubExpressionReturnV = get_SubExpressionObj.get_SubExpression((System.Int32)args[0]);
                var get_SubExpressionValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_SubExpressionValKey, value: get_SubExpressionReturnV));
            }

            private void MethodCQGExpressionRequestClassget_SubExpressionAlias(QueryInfo query, object[] args)
            {
                CQGExpressionRequest get_SubExpressionAliasObj = (CQGExpressionRequest)qObj;
                System.String get_SubExpressionAliasReturnV = get_SubExpressionAliasObj.get_SubExpressionAlias((System.Int32)args[0]);
                var get_SubExpressionAliasValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_SubExpressionAliasValKey, value: get_SubExpressionAliasReturnV));
            }

            private void MethodCQGExpressionRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExpressionRequest GetHashCodeObj = (CQGExpressionRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExpressionRequestClassToString(QueryInfo query, object[] args)
            {
                CQGExpressionRequest ToStringObj = (CQGExpressionRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGExpressionsClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGExpressions get_ItemByIdObj = (CQGExpressions)qObj;
                CQG.CQGExpression get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGExpressionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGExpressions GetEnumeratorObj = (CQGExpressions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGExpressionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGExpressions GetHashCodeObj = (CQGExpressions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGExpressionsClassToString(QueryInfo query, object[] args)
            {
                CQGExpressions ToStringObj = (CQGExpressions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGFillClassget_Aggressive(QueryInfo query, object[] args)
            {
                CQGFill get_AggressiveObj = (CQGFill)qObj;
                System.Boolean get_AggressiveReturnV = get_AggressiveObj.get_Aggressive((System.Int32)args[0]);
                var get_AggressiveValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_AggressiveValKey, value: get_AggressiveReturnV));
            }

            private void MethodCQGFillClassget_Currency(QueryInfo query, object[] args)
            {
                CQGFill get_CurrencyObj = (CQGFill)qObj;
                System.String get_CurrencyReturnV = get_CurrencyObj.get_Currency((System.Int32)args[0]);
                var get_CurrencyValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_CurrencyValKey, value: get_CurrencyReturnV));
            }

            private void MethodCQGFillClassget_DisplayPrice(QueryInfo query, object[] args)
            {
                CQGFill get_DisplayPriceObj = (CQGFill)qObj;
                System.String get_DisplayPriceReturnV = get_DisplayPriceObj.get_DisplayPrice((System.Int32)args[0]);
                var get_DisplayPriceValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_DisplayPriceValKey, value: get_DisplayPriceReturnV));
            }

            private void MethodCQGFillClassget_ExchangeTradeDate(QueryInfo query, object[] args)
            {
                CQGFill get_ExchangeTradeDateObj = (CQGFill)qObj;
                System.DateTime get_ExchangeTradeDateReturnV = get_ExchangeTradeDateObj.get_ExchangeTradeDate((System.Int32)args[0]);
                var get_ExchangeTradeDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ExchangeTradeDateValKey, value: get_ExchangeTradeDateReturnV));
            }

            private void MethodCQGFillClassget_GWTradeId(QueryInfo query, object[] args)
            {
                CQGFill get_GWTradeIdObj = (CQGFill)qObj;
                System.String get_GWTradeIdReturnV = get_GWTradeIdObj.get_GWTradeId((System.Int32)args[0]);
                var get_GWTradeIdValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_GWTradeIdValKey, value: get_GWTradeIdReturnV));
            }

            private void MethodCQGFillClassget_GWTrades(QueryInfo query, object[] args)
            {
                CQGFill get_GWTradesObj = (CQGFill)qObj;
                CQG.CQGGWTrades get_GWTradesReturnV = get_GWTradesObj.get_GWTrades((System.Int32)args[0]);
                var get_GWTradesValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_GWTradesValKey, get_GWTradesReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_GWTradesValKey));
            }

            private void MethodCQGFillClassget_GWTradesCount(QueryInfo query, object[] args)
            {
                CQGFill get_GWTradesCountObj = (CQGFill)qObj;
                System.Int32 get_GWTradesCountReturnV = get_GWTradesCountObj.get_GWTradesCount((System.Int32)args[0]);
                var get_GWTradesCountValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_GWTradesCountValKey, value: get_GWTradesCountReturnV));
            }

            private void MethodCQGFillClassget_InstrumentName(QueryInfo query, object[] args)
            {
                CQGFill get_InstrumentNameObj = (CQGFill)qObj;
                System.String get_InstrumentNameReturnV = get_InstrumentNameObj.get_InstrumentName((System.Int32)args[0]);
                var get_InstrumentNameValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_InstrumentNameValKey, value: get_InstrumentNameReturnV));
            }

            private void MethodCQGFillClassget_Price(QueryInfo query, object[] args)
            {
                CQGFill get_PriceObj = (CQGFill)qObj;
                System.Double get_PriceReturnV = get_PriceObj.get_Price((System.Int32)args[0]);
                var get_PriceValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_PriceValKey, value: get_PriceReturnV));
            }

            private void MethodCQGFillClassget_Quantity(QueryInfo query, object[] args)
            {
                CQGFill get_QuantityObj = (CQGFill)qObj;
                System.Int32 get_QuantityReturnV = get_QuantityObj.get_Quantity((System.Int32)args[0]);
                var get_QuantityValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_QuantityValKey, value: get_QuantityReturnV));
            }

            private void MethodCQGFillClassget_Side(QueryInfo query, object[] args)
            {
                CQGFill get_SideObj = (CQGFill)qObj;
                CQG.eOrderSide get_SideReturnV = get_SideObj.get_Side((System.Int32)args[0]);
                var get_SideValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_SideValKey, value: get_SideReturnV));
            }

            private void MethodCQGFillClassget_StatementDate(QueryInfo query, object[] args)
            {
                CQGFill get_StatementDateObj = (CQGFill)qObj;
                System.DateTime get_StatementDateReturnV = get_StatementDateObj.get_StatementDate((System.Int32)args[0]);
                var get_StatementDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_StatementDateValKey, value: get_StatementDateReturnV));
            }

            private void MethodCQGFillClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGFill GetHashCodeObj = (CQGFill)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGFillClassToString(QueryInfo query, object[] args)
            {
                CQGFill ToStringObj = (CQGFill)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGFillsClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGFills get_ItemByIndexObj = (CQGFills)qObj;
                CQG.CQGFill get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGFillsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGFills GetEnumeratorObj = (CQGFills)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGFillsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGFills GetHashCodeObj = (CQGFills)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGFillsClassToString(QueryInfo query, object[] args)
            {
                CQGFills ToStringObj = (CQGFills)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGGWTradeClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGGWTrade GetHashCodeObj = (CQGGWTrade)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGGWTradeClassToString(QueryInfo query, object[] args)
            {
                CQGGWTrade ToStringObj = (CQGGWTrade)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGGWTradesClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGGWTrades get_ItemByIndexObj = (CQGGWTrades)qObj;
                CQG.CQGGWTrade get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGGWTradesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGGWTrades GetEnumeratorObj = (CQGGWTrades)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGGWTradesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGGWTrades GetHashCodeObj = (CQGGWTrades)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGGWTradesClassToString(QueryInfo query, object[] args)
            {
                CQGGWTrades ToStringObj = (CQGGWTrades)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGHistoricalSessionsRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest GetHashCodeObj = (CQGHistoricalSessionsRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGHistoricalSessionsRequestClassToString(QueryInfo query, object[] args)
            {
                CQGHistoricalSessionsRequest ToStringObj = (CQGHistoricalSessionsRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGHolidayClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGHoliday GetHashCodeObj = (CQGHoliday)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGHolidayClassToString(QueryInfo query, object[] args)
            {
                CQGHoliday ToStringObj = (CQGHoliday)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGHolidaysClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGHolidays GetEnumeratorObj = (CQGHolidays)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGHolidaysClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGHolidays GetHashCodeObj = (CQGHolidays)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGHolidaysClassToString(QueryInfo query, object[] args)
            {
                CQGHolidays ToStringObj = (CQGHolidays)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGInstrumentClassFromDisplayPrice(QueryInfo query, object[] args)
            {
                CQGInstrument FromDisplayPriceObj = (CQGInstrument)qObj;
                System.Double FromDisplayPriceReturnV = FromDisplayPriceObj.FromDisplayPrice((System.String)args[0]);
                var FromDisplayPriceValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FromDisplayPriceValKey, value: FromDisplayPriceReturnV));
            }

            private void MethodCQGInstrumentClassget_Tag(QueryInfo query, object[] args)
            {
                CQGInstrument get_TagObj = (CQGInstrument)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGInstrumentClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGInstrument GetHashCodeObj = (CQGInstrument)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGInstrumentClassGetNearestTradeablePrice(QueryInfo query, object[] args)
            {
                CQGInstrument GetNearestTradeablePriceObj = (CQGInstrument)qObj;
                System.Double GetNearestTradeablePriceReturnV = GetNearestTradeablePriceObj.GetNearestTradeablePrice((System.Double)args[0]);
                var GetNearestTradeablePriceValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetNearestTradeablePriceValKey, value: GetNearestTradeablePriceReturnV));
            }

            private void MethodCQGInstrumentClassGetTickSizeFor(QueryInfo query, object[] args)
            {
                CQGInstrument GetTickSizeForObj = (CQGInstrument)qObj;
                System.Double GetTickSizeForReturnV = GetTickSizeForObj.GetTickSizeFor((System.Double)args[0]);
                var GetTickSizeForValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetTickSizeForValKey, value: GetTickSizeForReturnV));
            }

            private void MethodCQGInstrumentClassGetTickValueFor(QueryInfo query, object[] args)
            {
                CQGInstrument GetTickValueForObj = (CQGInstrument)qObj;
                System.Double GetTickValueForReturnV = GetTickValueForObj.GetTickValueFor((System.Double)args[0]);
                var GetTickValueForValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetTickValueForValKey, value: GetTickValueForReturnV));
            }

            private void MethodCQGInstrumentClassset_Tag(QueryInfo query, object[] args)
            {
                CQGInstrument set_TagObj = (CQGInstrument)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGInstrumentClassToDisplayPrice(QueryInfo query, object[] args)
            {
                CQGInstrument ToDisplayPriceObj = (CQGInstrument)qObj;
                System.String ToDisplayPriceReturnV = ToDisplayPriceObj.ToDisplayPrice((System.Double)args[0]);
                var ToDisplayPriceValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToDisplayPriceValKey, value: ToDisplayPriceReturnV));
            }

            private void MethodCQGInstrumentClassToString(QueryInfo query, object[] args)
            {
                CQGInstrument ToStringObj = (CQGInstrument)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGInstrumentPropertiesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGInstrumentProperties GetEnumeratorObj = (CQGInstrumentProperties)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGInstrumentPropertiesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGInstrumentProperties GetHashCodeObj = (CQGInstrumentProperties)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGInstrumentPropertiesClassToString(QueryInfo query, object[] args)
            {
                CQGInstrumentProperties ToStringObj = (CQGInstrumentProperties)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGInstrumentPropertyClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty GetHashCodeObj = (CQGInstrumentProperty)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGInstrumentPropertyClassToString(QueryInfo query, object[] args)
            {
                CQGInstrumentProperty ToStringObj = (CQGInstrumentProperty)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGInstrumentsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGInstruments GetEnumeratorObj = (CQGInstruments)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGInstrumentsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGInstruments GetHashCodeObj = (CQGInstruments)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGInstrumentsClassToString(QueryInfo query, object[] args)
            {
                CQGInstruments ToStringObj = (CQGInstruments)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGInstrumentsGroupClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroup GetHashCodeObj = (CQGInstrumentsGroup)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGInstrumentsGroupClassToString(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroup ToStringObj = (CQGInstrumentsGroup)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGInstrumentsGroupRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest GetHashCodeObj = (CQGInstrumentsGroupRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGInstrumentsGroupRequestClassToString(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroupRequest ToStringObj = (CQGInstrumentsGroupRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGInstrumentsGroupsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroups GetEnumeratorObj = (CQGInstrumentsGroups)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGInstrumentsGroupsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroups GetHashCodeObj = (CQGInstrumentsGroups)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGInstrumentsGroupsClassToString(QueryInfo query, object[] args)
            {
                CQGInstrumentsGroups ToStringObj = (CQGInstrumentsGroups)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGInstrumentSubscriptionRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest GetHashCodeObj = (CQGInstrumentSubscriptionRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGInstrumentSubscriptionRequestClassToString(QueryInfo query, object[] args)
            {
                CQGInstrumentSubscriptionRequest ToStringObj = (CQGInstrumentSubscriptionRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGIntegerCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGIntegerCollection GetEnumeratorObj = (CQGIntegerCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGIntegerCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGIntegerCollection GetHashCodeObj = (CQGIntegerCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGIntegerCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGIntegerCollection ToStringObj = (CQGIntegerCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGLoggerClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGLogger GetHashCodeObj = (CQGLogger)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGLoggerClassLog(QueryInfo query, object[] args)
            {
                CQGLogger LogObj = (CQGLogger)qObj;
                LogObj.Log((System.String)args[0],(CQG.eLogSeverity)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGLoggerClassToString(QueryInfo query, object[] args)
            {
                CQGLogger ToStringObj = (CQGLogger)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGManualFillClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGManualFill GetHashCodeObj = (CQGManualFill)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGManualFillClassToString(QueryInfo query, object[] args)
            {
                CQGManualFill ToStringObj = (CQGManualFill)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGManualFillRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGManualFillRequest GetHashCodeObj = (CQGManualFillRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGManualFillRequestClassToString(QueryInfo query, object[] args)
            {
                CQGManualFillRequest ToStringObj = (CQGManualFillRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGManualFillsClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGManualFills get_ItemByIndexObj = (CQGManualFills)qObj;
                CQG.CQGManualFill get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGManualFillsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGManualFills GetEnumeratorObj = (CQGManualFills)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGManualFillsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGManualFills GetHashCodeObj = (CQGManualFills)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGManualFillsClassToString(QueryInfo query, object[] args)
            {
                CQGManualFills ToStringObj = (CQGManualFills)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGManualFillsCollectionClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGManualFillsCollection get_ItemByIndexObj = (CQGManualFillsCollection)qObj;
                CQG.CQGManualFills get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGManualFillsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGManualFillsCollection GetEnumeratorObj = (CQGManualFillsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGManualFillsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGManualFillsCollection GetHashCodeObj = (CQGManualFillsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGManualFillsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGManualFillsCollection ToStringObj = (CQGManualFillsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGModifiedPropertiesClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGModifiedProperties get_ItemByIndexObj = (CQGModifiedProperties)qObj;
                CQG.CQGModifiedProperty get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGModifiedPropertiesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGModifiedProperties GetEnumeratorObj = (CQGModifiedProperties)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGModifiedPropertiesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGModifiedProperties GetHashCodeObj = (CQGModifiedProperties)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGModifiedPropertiesClassToString(QueryInfo query, object[] args)
            {
                CQGModifiedProperties ToStringObj = (CQGModifiedProperties)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGModifiedPropertyClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGModifiedProperty GetHashCodeObj = (CQGModifiedProperty)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGModifiedPropertyClassToString(QueryInfo query, object[] args)
            {
                CQGModifiedProperty ToStringObj = (CQGModifiedProperty)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrderActionRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest GetHashCodeObj = (CQGOrderActionRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrderActionRequestClassToString(QueryInfo query, object[] args)
            {
                CQGOrderActionRequest ToStringObj = (CQGOrderActionRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrderChainClassAddOrder(QueryInfo query, object[] args)
            {
                CQGOrderChain AddOrderObj = (CQGOrderChain)qObj;
                AddOrderObj.AddOrder((CQG.CQGOrder)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrderChainClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrderChain GetHashCodeObj = (CQGOrderChain)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrderChainClassToString(QueryInfo query, object[] args)
            {
                CQGOrderChain ToStringObj = (CQGOrderChain)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrderClassActivate(QueryInfo query, object[] args)
            {
                CQGOrder ActivateObj = (CQGOrder)qObj;
                ActivateObj.Activate();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrderClassCancel(QueryInfo query, object[] args)
            {
                CQGOrder CancelObj = (CQGOrder)qObj;
                CancelObj.Cancel();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrderClassget_Tag(QueryInfo query, object[] args)
            {
                CQGOrder get_TagObj = (CQGOrder)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGOrderClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrder GetHashCodeObj = (CQGOrder)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrderClassModify(QueryInfo query, object[] args)
            {
                CQGOrder ModifyObj = (CQGOrder)qObj;
                ModifyObj.Modify((CQG.CQGOrderModify)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrderClassPlace(QueryInfo query, object[] args)
            {
                CQGOrder PlaceObj = (CQGOrder)qObj;
                PlaceObj.Place();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrderClassPrepareModify(QueryInfo query, object[] args)
            {
                CQGOrder PrepareModifyObj = (CQGOrder)qObj;
                CQG.CQGOrderModify PrepareModifyReturnV = PrepareModifyObj.PrepareModify();
                var PrepareModifyValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(PrepareModifyValKey, PrepareModifyReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PrepareModifyValKey));
            }

            private void MethodCQGOrderClassSendCareOrderAck(QueryInfo query, object[] args)
            {
                CQGOrder SendCareOrderAckObj = (CQGOrder)qObj;
                SendCareOrderAckObj.SendCareOrderAck();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrderClassset_Tag(QueryInfo query, object[] args)
            {
                CQGOrder set_TagObj = (CQGOrder)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrderClassToString(QueryInfo query, object[] args)
            {
                CQGOrder ToStringObj = (CQGOrder)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrderModifyClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrderModify GetHashCodeObj = (CQGOrderModify)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrderModifyClassToString(QueryInfo query, object[] args)
            {
                CQGOrderModify ToStringObj = (CQGOrderModify)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrderPropertiesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGOrderProperties GetEnumeratorObj = (CQGOrderProperties)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGOrderPropertiesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrderProperties GetHashCodeObj = (CQGOrderProperties)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrderPropertiesClassToString(QueryInfo query, object[] args)
            {
                CQGOrderProperties ToStringObj = (CQGOrderProperties)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrderPropertyClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrderProperty GetHashCodeObj = (CQGOrderProperty)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrderPropertyClassToString(QueryInfo query, object[] args)
            {
                CQGOrderProperty ToStringObj = (CQGOrderProperty)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrdersClassAddToLiveOrders(QueryInfo query, object[] args)
            {
                CQGOrders AddToLiveOrdersObj = (CQGOrders)qObj;
                AddToLiveOrdersObj.AddToLiveOrders();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrdersClassget_ItemByGuid(QueryInfo query, object[] args)
            {
                CQGOrders get_ItemByGuidObj = (CQGOrders)qObj;
                CQG.CQGOrder get_ItemByGuidReturnV = get_ItemByGuidObj.get_ItemByGuid((System.String)args[0]);
                var get_ItemByGuidValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByGuidValKey, get_ItemByGuidReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByGuidValKey));
            }

            private void MethodCQGOrdersClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGOrders GetEnumeratorObj = (CQGOrders)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGOrdersClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrders GetHashCodeObj = (CQGOrders)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrdersClassSelectByInstrumentName(QueryInfo query, object[] args)
            {
                CQGOrders SelectByInstrumentNameObj = (CQGOrders)qObj;
                CQG.CQGOrders SelectByInstrumentNameReturnV = SelectByInstrumentNameObj.SelectByInstrumentName((System.String)args[0]);
                var SelectByInstrumentNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SelectByInstrumentNameValKey, SelectByInstrumentNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SelectByInstrumentNameValKey));
            }

            private void MethodCQGOrdersClassSelectByOrderStatus(QueryInfo query, object[] args)
            {
                CQGOrders SelectByOrderStatusObj = (CQGOrders)qObj;
                CQG.CQGOrders SelectByOrderStatusReturnV = SelectByOrderStatusObj.SelectByOrderStatus((CQG.eOrderStatus)args[0]);
                var SelectByOrderStatusValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SelectByOrderStatusValKey, SelectByOrderStatusReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SelectByOrderStatusValKey));
            }

            private void MethodCQGOrdersClassSelectByOrderType(QueryInfo query, object[] args)
            {
                CQGOrders SelectByOrderTypeObj = (CQGOrders)qObj;
                CQG.CQGOrders SelectByOrderTypeReturnV = SelectByOrderTypeObj.SelectByOrderType((CQG.eOrderType)args[0]);
                var SelectByOrderTypeValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SelectByOrderTypeValKey, SelectByOrderTypeReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SelectByOrderTypeValKey));
            }

            private void MethodCQGOrdersClassSelectByProperty(QueryInfo query, object[] args)
            {
                CQGOrders SelectByPropertyObj = (CQGOrders)qObj;
                CQG.CQGOrders SelectByPropertyReturnV = SelectByPropertyObj.SelectByProperty((CQG.eOrderProperty)args[0],(System.Object)args[1]);
                var SelectByPropertyValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SelectByPropertyValKey, SelectByPropertyReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SelectByPropertyValKey));
            }

            private void MethodCQGOrdersClassSelectBySide(QueryInfo query, object[] args)
            {
                CQGOrders SelectBySideObj = (CQGOrders)qObj;
                CQG.CQGOrders SelectBySideReturnV = SelectBySideObj.SelectBySide((CQG.eOrderSide)args[0]);
                var SelectBySideValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SelectBySideValKey, SelectBySideReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SelectBySideValKey));
            }

            private void MethodCQGOrdersClassSelectByTag(QueryInfo query, object[] args)
            {
                CQGOrders SelectByTagObj = (CQGOrders)qObj;
                CQG.CQGOrders SelectByTagReturnV = SelectByTagObj.SelectByTag((System.String)args[0],(System.Object)args[1]);
                var SelectByTagValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(SelectByTagValKey, SelectByTagReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SelectByTagValKey));
            }

            private void MethodCQGOrdersClassToString(QueryInfo query, object[] args)
            {
                CQGOrders ToStringObj = (CQGOrders)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrdersQueryClassCancel(QueryInfo query, object[] args)
            {
                CQGOrdersQuery CancelObj = (CQGOrdersQuery)qObj;
                CancelObj.Cancel();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGOrdersQueryClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrdersQuery GetHashCodeObj = (CQGOrdersQuery)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrdersQueryClassToString(QueryInfo query, object[] args)
            {
                CQGOrdersQuery ToStringObj = (CQGOrdersQuery)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGOrderStatisticsClassget_StatisticsOnReceive(QueryInfo query, object[] args)
            {
                CQGOrderStatistics get_StatisticsOnReceiveObj = (CQGOrderStatistics)qObj;
                System.Object get_StatisticsOnReceiveReturnV = get_StatisticsOnReceiveObj.get_StatisticsOnReceive((System.String)args[0]);
                var get_StatisticsOnReceiveValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_StatisticsOnReceiveValKey, value: get_StatisticsOnReceiveReturnV));
            }

            private void MethodCQGOrderStatisticsClassget_StatisticsOnSend(QueryInfo query, object[] args)
            {
                CQGOrderStatistics get_StatisticsOnSendObj = (CQGOrderStatistics)qObj;
                System.Object get_StatisticsOnSendReturnV = get_StatisticsOnSendObj.get_StatisticsOnSend((System.String)args[0]);
                var get_StatisticsOnSendValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_StatisticsOnSendValKey, value: get_StatisticsOnSendReturnV));
            }

            private void MethodCQGOrderStatisticsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGOrderStatistics GetHashCodeObj = (CQGOrderStatistics)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGOrderStatisticsClassToString(QueryInfo query, object[] args)
            {
                CQGOrderStatistics ToStringObj = (CQGOrderStatistics)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGParameterDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGParameterDefinition GetHashCodeObj = (CQGParameterDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGParameterDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGParameterDefinition ToStringObj = (CQGParameterDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGParameterDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions get_ItemByNameObj = (CQGParameterDefinitions)qObj;
                CQG.CQGParameterDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGParameterDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions GetEnumeratorObj = (CQGParameterDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGParameterDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions GetHashCodeObj = (CQGParameterDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGParameterDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGParameterDefinitions ToStringObj = (CQGParameterDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGPointAndFigureBarClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar GetHashCodeObj = (CQGPointAndFigureBar)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGPointAndFigureBarClassToString(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBar ToStringObj = (CQGPointAndFigureBar)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGPointAndFigureBarsClassget_Tag(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars get_TagObj = (CQGPointAndFigureBars)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGPointAndFigureBarsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars GetEnumeratorObj = (CQGPointAndFigureBars)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGPointAndFigureBarsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars GetHashCodeObj = (CQGPointAndFigureBars)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGPointAndFigureBarsClassset_Tag(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars set_TagObj = (CQGPointAndFigureBars)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGPointAndFigureBarsClassToString(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBars ToStringObj = (CQGPointAndFigureBars)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGPointAndFigureBarsCollectionClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection get_ItemByIdObj = (CQGPointAndFigureBarsCollection)qObj;
                CQG.CQGPointAndFigureBars get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGPointAndFigureBarsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection GetEnumeratorObj = (CQGPointAndFigureBarsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGPointAndFigureBarsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection GetHashCodeObj = (CQGPointAndFigureBarsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGPointAndFigureBarsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsCollection ToStringObj = (CQGPointAndFigureBarsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGPointAndFigureBarsRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest GetHashCodeObj = (CQGPointAndFigureBarsRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGPointAndFigureBarsRequestClassToString(QueryInfo query, object[] args)
            {
                CQGPointAndFigureBarsRequest ToStringObj = (CQGPointAndFigureBarsRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGPositionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGPosition GetHashCodeObj = (CQGPosition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGPositionClassToString(QueryInfo query, object[] args)
            {
                CQGPosition ToStringObj = (CQGPosition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGPositionsClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGPositions get_ItemByIndexObj = (CQGPositions)qObj;
                CQG.CQGPosition get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGPositionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGPositions GetEnumeratorObj = (CQGPositions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGPositionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGPositions GetHashCodeObj = (CQGPositions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGPositionsClassToString(QueryInfo query, object[] args)
            {
                CQGPositions ToStringObj = (CQGPositions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGPositionsStatementClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGPositionsStatement GetHashCodeObj = (CQGPositionsStatement)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGPositionsStatementClassToString(QueryInfo query, object[] args)
            {
                CQGPositionsStatement ToStringObj = (CQGPositionsStatement)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGQFormulaDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinition GetHashCodeObj = (CQGQFormulaDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGQFormulaDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinition ToStringObj = (CQGQFormulaDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGQFormulaDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions get_ItemByNameObj = (CQGQFormulaDefinitions)qObj;
                CQG.CQGQFormulaDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGQFormulaDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions GetEnumeratorObj = (CQGQFormulaDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGQFormulaDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions GetHashCodeObj = (CQGQFormulaDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGQFormulaDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGQFormulaDefinitions ToStringObj = (CQGQFormulaDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGQuoteClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGQuote GetHashCodeObj = (CQGQuote)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGQuoteClassToString(QueryInfo query, object[] args)
            {
                CQGQuote ToStringObj = (CQGQuote)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGQuotesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGQuotes GetEnumeratorObj = (CQGQuotes)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGQuotesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGQuotes GetHashCodeObj = (CQGQuotes)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGQuotesClassToString(QueryInfo query, object[] args)
            {
                CQGQuotes ToStringObj = (CQGQuotes)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGRemoteOpenAPISessionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGRemoteOpenAPISession GetHashCodeObj = (CQGRemoteOpenAPISession)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGRemoteOpenAPISessionClassToString(QueryInfo query, object[] args)
            {
                CQGRemoteOpenAPISession ToStringObj = (CQGRemoteOpenAPISession)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGSessionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGSession GetHashCodeObj = (CQGSession)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGSessionClassIsTimeInSession(QueryInfo query, object[] args)
            {
                CQGSession IsTimeInSessionObj = (CQGSession)qObj;
                System.Boolean IsTimeInSessionReturnV = IsTimeInSessionObj.IsTimeInSession((System.DateTime)args[0],(System.Boolean)args[1]);
                var IsTimeInSessionValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsTimeInSessionValKey, value: IsTimeInSessionReturnV));
            }

            private void MethodCQGSessionClassToString(QueryInfo query, object[] args)
            {
                CQGSession ToStringObj = (CQGSession)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGSessionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGSessions GetEnumeratorObj = (CQGSessions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGSessionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGSessions GetHashCodeObj = (CQGSessions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGSessionsClassIsTimeInSession(QueryInfo query, object[] args)
            {
                CQGSessions IsTimeInSessionObj = (CQGSessions)qObj;
                System.Boolean IsTimeInSessionReturnV = IsTimeInSessionObj.IsTimeInSession((System.DateTime)args[0],(System.Boolean)args[1]);
                var IsTimeInSessionValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsTimeInSessionValKey, value: IsTimeInSessionReturnV));
            }

            private void MethodCQGSessionsClassToString(QueryInfo query, object[] args)
            {
                CQGSessions ToStringObj = (CQGSessions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGSessionsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGSessionsCollection GetEnumeratorObj = (CQGSessionsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGSessionsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGSessionsCollection GetHashCodeObj = (CQGSessionsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGSessionsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGSessionsCollection ToStringObj = (CQGSessionsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGStrategyDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition GetHashCodeObj = (CQGStrategyDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGStrategyDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGStrategyDefinition ToStringObj = (CQGStrategyDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGStrategyDefinitionsClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions get_ItemByIndexObj = (CQGStrategyDefinitions)qObj;
                CQG.CQGStrategyDefinition get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGStrategyDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions GetEnumeratorObj = (CQGStrategyDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGStrategyDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions GetHashCodeObj = (CQGStrategyDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGStrategyDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGStrategyDefinitions ToStringObj = (CQGStrategyDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGStrategyLegFillClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill GetHashCodeObj = (CQGStrategyLegFill)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGStrategyLegFillClassToString(QueryInfo query, object[] args)
            {
                CQGStrategyLegFill ToStringObj = (CQGStrategyLegFill)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGStrategyLegFillsClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGStrategyLegFills get_ItemByIndexObj = (CQGStrategyLegFills)qObj;
                CQG.CQGStrategyLegFill get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGStrategyLegFillsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGStrategyLegFills GetHashCodeObj = (CQGStrategyLegFills)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGStrategyLegFillsClassToString(QueryInfo query, object[] args)
            {
                CQGStrategyLegFills ToStringObj = (CQGStrategyLegFills)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGStringCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGStringCollection GetEnumeratorObj = (CQGStringCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGStringCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGStringCollection GetHashCodeObj = (CQGStringCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGStringCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGStringCollection ToStringObj = (CQGStringCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGSubMinuteBarClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar GetHashCodeObj = (CQGSubMinuteBar)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGSubMinuteBarClassToString(QueryInfo query, object[] args)
            {
                CQGSubMinuteBar ToStringObj = (CQGSubMinuteBar)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGSubMinuteBarsClassget_Tag(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars get_TagObj = (CQGSubMinuteBars)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGSubMinuteBarsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars GetEnumeratorObj = (CQGSubMinuteBars)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGSubMinuteBarsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars GetHashCodeObj = (CQGSubMinuteBars)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGSubMinuteBarsClassset_Tag(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars set_TagObj = (CQGSubMinuteBars)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGSubMinuteBarsClassToString(QueryInfo query, object[] args)
            {
                CQGSubMinuteBars ToStringObj = (CQGSubMinuteBars)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGSubMinuteBarsCollectionClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection get_ItemByIdObj = (CQGSubMinuteBarsCollection)qObj;
                CQG.CQGSubMinuteBars get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGSubMinuteBarsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection GetEnumeratorObj = (CQGSubMinuteBarsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGSubMinuteBarsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection GetHashCodeObj = (CQGSubMinuteBarsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGSubMinuteBarsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsCollection ToStringObj = (CQGSubMinuteBarsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGSubMinuteBarsRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest GetHashCodeObj = (CQGSubMinuteBarsRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGSubMinuteBarsRequestClassToString(QueryInfo query, object[] args)
            {
                CQGSubMinuteBarsRequest ToStringObj = (CQGSubMinuteBarsRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGSummariesStatementClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGSummariesStatement GetHashCodeObj = (CQGSummariesStatement)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGSummariesStatementClassToString(QueryInfo query, object[] args)
            {
                CQGSummariesStatement ToStringObj = (CQGSummariesStatement)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTFlowBarClassget_DomAskVolume(QueryInfo query, object[] args)
            {
                CQGTFlowBar get_DomAskVolumeObj = (CQGTFlowBar)qObj;
                System.Int32 get_DomAskVolumeReturnV = get_DomAskVolumeObj.get_DomAskVolume((System.Int32)args[0]);
                var get_DomAskVolumeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_DomAskVolumeValKey, value: get_DomAskVolumeReturnV));
            }

            private void MethodCQGTFlowBarClassget_DomBidVolume(QueryInfo query, object[] args)
            {
                CQGTFlowBar get_DomBidVolumeObj = (CQGTFlowBar)qObj;
                System.Int32 get_DomBidVolumeReturnV = get_DomBidVolumeObj.get_DomBidVolume((System.Int32)args[0]);
                var get_DomBidVolumeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_DomBidVolumeValKey, value: get_DomBidVolumeReturnV));
            }

            private void MethodCQGTFlowBarClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTFlowBar GetHashCodeObj = (CQGTFlowBar)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTFlowBarClassToString(QueryInfo query, object[] args)
            {
                CQGTFlowBar ToStringObj = (CQGTFlowBar)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTFlowBarsClassget_Tag(QueryInfo query, object[] args)
            {
                CQGTFlowBars get_TagObj = (CQGTFlowBars)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGTFlowBarsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTFlowBars GetEnumeratorObj = (CQGTFlowBars)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTFlowBarsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTFlowBars GetHashCodeObj = (CQGTFlowBars)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTFlowBarsClassset_Tag(QueryInfo query, object[] args)
            {
                CQGTFlowBars set_TagObj = (CQGTFlowBars)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTFlowBarsClassToString(QueryInfo query, object[] args)
            {
                CQGTFlowBars ToStringObj = (CQGTFlowBars)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTFlowBarsCollectionClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection get_ItemByIdObj = (CQGTFlowBarsCollection)qObj;
                CQG.CQGTFlowBars get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGTFlowBarsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection GetEnumeratorObj = (CQGTFlowBarsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTFlowBarsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection GetHashCodeObj = (CQGTFlowBarsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTFlowBarsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGTFlowBarsCollection ToStringObj = (CQGTFlowBarsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTFlowBarsRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest GetHashCodeObj = (CQGTFlowBarsRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTFlowBarsRequestClassToString(QueryInfo query, object[] args)
            {
                CQGTFlowBarsRequest ToStringObj = (CQGTFlowBarsRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTickClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTick GetHashCodeObj = (CQGTick)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTickClassToString(QueryInfo query, object[] args)
            {
                CQGTick ToStringObj = (CQGTick)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTicksClassget_Tag(QueryInfo query, object[] args)
            {
                CQGTicks get_TagObj = (CQGTicks)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGTicksClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTicks GetEnumeratorObj = (CQGTicks)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTicksClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTicks GetHashCodeObj = (CQGTicks)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTicksClassIndexForDate(QueryInfo query, object[] args)
            {
                CQGTicks IndexForDateObj = (CQGTicks)qObj;
                System.Int32 IndexForDateReturnV = IndexForDateObj.IndexForDate((System.DateTime)args[0]);
                var IndexForDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexForDateValKey, value: IndexForDateReturnV));
            }

            private void MethodCQGTicksClassIndicesForDates(QueryInfo query, object[] args)
            {
                var arg2 = (System.Int32)args[2];
                var arg3 = (System.Int32)args[3];
                CQGTicks IndicesForDatesObj = (CQGTicks)qObj;
                IndicesForDatesObj.IndicesForDates((System.DateTime)args[0],(System.DateTime)args[1],out arg2,out arg3);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTicksClassset_Tag(QueryInfo query, object[] args)
            {
                CQGTicks set_TagObj = (CQGTicks)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTicksClassToString(QueryInfo query, object[] args)
            {
                CQGTicks ToStringObj = (CQGTicks)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTicksCollectionClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGTicksCollection get_ItemByIdObj = (CQGTicksCollection)qObj;
                CQG.CQGTicks get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGTicksCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTicksCollection GetEnumeratorObj = (CQGTicksCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTicksCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTicksCollection GetHashCodeObj = (CQGTicksCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTicksCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGTicksCollection ToStringObj = (CQGTicksCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTicksRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTicksRequest GetHashCodeObj = (CQGTicksRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTicksRequestClassToString(QueryInfo query, object[] args)
            {
                CQGTicksRequest ToStringObj = (CQGTicksRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTimedBarClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTimedBar GetHashCodeObj = (CQGTimedBar)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTimedBarClassToString(QueryInfo query, object[] args)
            {
                CQGTimedBar ToStringObj = (CQGTimedBar)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTimedBarsClassget_Tag(QueryInfo query, object[] args)
            {
                CQGTimedBars get_TagObj = (CQGTimedBars)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGTimedBarsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTimedBars GetEnumeratorObj = (CQGTimedBars)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTimedBarsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTimedBars GetHashCodeObj = (CQGTimedBars)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTimedBarsClassIndexForDate(QueryInfo query, object[] args)
            {
                CQGTimedBars IndexForDateObj = (CQGTimedBars)qObj;
                System.Int32 IndexForDateReturnV = IndexForDateObj.IndexForDate((System.DateTime)args[0]);
                var IndexForDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexForDateValKey, value: IndexForDateReturnV));
            }

            private void MethodCQGTimedBarsClassset_Tag(QueryInfo query, object[] args)
            {
                CQGTimedBars set_TagObj = (CQGTimedBars)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTimedBarsClassToString(QueryInfo query, object[] args)
            {
                CQGTimedBars ToStringObj = (CQGTimedBars)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTimedBarsCollectionClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection get_ItemByIdObj = (CQGTimedBarsCollection)qObj;
                CQG.CQGTimedBars get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGTimedBarsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection GetEnumeratorObj = (CQGTimedBarsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTimedBarsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection GetHashCodeObj = (CQGTimedBarsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTimedBarsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGTimedBarsCollection ToStringObj = (CQGTimedBarsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTimedBarsRequestClassExcludeAllOutputs(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest ExcludeAllOutputsObj = (CQGTimedBarsRequest)qObj;
                ExcludeAllOutputsObj.ExcludeAllOutputs();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTimedBarsRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest GetHashCodeObj = (CQGTimedBarsRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTimedBarsRequestClassIncludeOutput(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IncludeOutputObj = (CQGTimedBarsRequest)qObj;
                IncludeOutputObj.IncludeOutput((CQG.eTimedBarsRequestOutputs)args[0],(System.Boolean)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTimedBarsRequestClassIsOutputIncluded(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest IsOutputIncludedObj = (CQGTimedBarsRequest)qObj;
                System.Boolean IsOutputIncludedReturnV = IsOutputIncludedObj.IsOutputIncluded((CQG.eTimedBarsRequestOutputs)args[0]);
                var IsOutputIncludedValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsOutputIncludedValKey, value: IsOutputIncludedReturnV));
            }

            private void MethodCQGTimedBarsRequestClassToString(QueryInfo query, object[] args)
            {
                CQGTimedBarsRequest ToStringObj = (CQGTimedBarsRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradeClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTrade GetHashCodeObj = (CQGTrade)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradeClassToString(QueryInfo query, object[] args)
            {
                CQGTrade ToStringObj = (CQGTrade)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradeEntriesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradeEntries GetEnumeratorObj = (CQGTradeEntries)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradeEntriesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradeEntries GetHashCodeObj = (CQGTradeEntries)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradeEntriesClassToString(QueryInfo query, object[] args)
            {
                CQGTradeEntries ToStringObj = (CQGTradeEntries)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradeEntryClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradeEntry GetHashCodeObj = (CQGTradeEntry)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradeEntryClassToString(QueryInfo query, object[] args)
            {
                CQGTradeEntry ToStringObj = (CQGTradeEntry)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradeEntryDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradeEntryDefinition GetHashCodeObj = (CQGTradeEntryDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradeEntryDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGTradeEntryDefinition ToStringObj = (CQGTradeEntryDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradeExitClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradeExit GetHashCodeObj = (CQGTradeExit)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradeExitClassToString(QueryInfo query, object[] args)
            {
                CQGTradeExit ToStringObj = (CQGTradeExit)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradeExitDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition GetHashCodeObj = (CQGTradeExitDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradeExitDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinition ToStringObj = (CQGTradeExitDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradeExitDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions get_ItemByNameObj = (CQGTradeExitDefinitions)qObj;
                CQG.CQGTradeExitDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGTradeExitDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions GetEnumeratorObj = (CQGTradeExitDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradeExitDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions GetHashCodeObj = (CQGTradeExitDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradeExitDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGTradeExitDefinitions ToStringObj = (CQGTradeExitDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradeExitsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGTradeExits get_ItemByNameObj = (CQGTradeExits)qObj;
                CQG.CQGTradeExit get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGTradeExitsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradeExits GetEnumeratorObj = (CQGTradeExits)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradeExitsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradeExits GetHashCodeObj = (CQGTradeExits)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradeExitsClassToString(QueryInfo query, object[] args)
            {
                CQGTradeExits ToStringObj = (CQGTradeExits)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradesClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTrades GetEnumeratorObj = (CQGTrades)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradesClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTrades GetHashCodeObj = (CQGTrades)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradesClassToString(QueryInfo query, object[] args)
            {
                CQGTrades ToStringObj = (CQGTrades)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemAddInfoClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemAddInfo GetHashCodeObj = (CQGTradingSystemAddInfo)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemAddInfoClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemAddInfo ToStringObj = (CQGTradingSystemAddInfo)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemBaseBarParameterClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter GetHashCodeObj = (CQGTradingSystemBaseBarParameter)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemBaseBarParameterClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameter ToStringObj = (CQGTradingSystemBaseBarParameter)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemBaseBarParametersClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameters GetEnumeratorObj = (CQGTradingSystemBaseBarParameters)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradingSystemBaseBarParametersClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameters GetHashCodeObj = (CQGTradingSystemBaseBarParameters)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemBaseBarParametersClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemBaseBarParameters ToStringObj = (CQGTradingSystemBaseBarParameters)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemClassget_Tag(QueryInfo query, object[] args)
            {
                CQGTradingSystem get_TagObj = (CQGTradingSystem)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGTradingSystemClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystem GetHashCodeObj = (CQGTradingSystem)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemClassset_Tag(QueryInfo query, object[] args)
            {
                CQGTradingSystem set_TagObj = (CQGTradingSystem)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTradingSystemClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystem ToStringObj = (CQGTradingSystem)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition GetHashCodeObj = (CQGTradingSystemDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinition ToStringObj = (CQGTradingSystemDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemDefinitionsClassget_ItemByAbbreviation(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions get_ItemByAbbreviationObj = (CQGTradingSystemDefinitions)qObj;
                CQG.CQGTradingSystemDefinition get_ItemByAbbreviationReturnV = get_ItemByAbbreviationObj.get_ItemByAbbreviation((System.String)args[0]);
                var get_ItemByAbbreviationValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByAbbreviationValKey, get_ItemByAbbreviationReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByAbbreviationValKey));
            }

            private void MethodCQGTradingSystemDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions get_ItemByNameObj = (CQGTradingSystemDefinitions)qObj;
                CQG.CQGTradingSystemDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGTradingSystemDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions GetEnumeratorObj = (CQGTradingSystemDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradingSystemDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions GetHashCodeObj = (CQGTradingSystemDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemDefinitions ToStringObj = (CQGTradingSystemDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemInsertInfoClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemInsertInfo GetHashCodeObj = (CQGTradingSystemInsertInfo)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemInsertInfoClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemInsertInfo ToStringObj = (CQGTradingSystemInsertInfo)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemRelationAddInfoClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo GetHashCodeObj = (CQGTradingSystemRelationAddInfo)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemRelationAddInfoClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemRelationAddInfo ToStringObj = (CQGTradingSystemRelationAddInfo)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemRemoveInfoClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemRemoveInfo GetHashCodeObj = (CQGTradingSystemRemoveInfo)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemRemoveInfoClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemRemoveInfo ToStringObj = (CQGTradingSystemRemoveInfo)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemRequestClassExcludeAllStatistics(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ExcludeAllStatisticsObj = (CQGTradingSystemRequest)qObj;
                ExcludeAllStatisticsObj.ExcludeAllStatistics();
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTradingSystemRequestClassget_Parameter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest get_ParameterObj = (CQGTradingSystemRequest)qObj;
                System.Object get_ParameterReturnV = get_ParameterObj.get_Parameter((System.Object)args[0]);
                var get_ParameterValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ParameterValKey, value: get_ParameterReturnV));
            }

            private void MethodCQGTradingSystemRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest GetHashCodeObj = (CQGTradingSystemRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemRequestClassIncludeStatistic(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IncludeStatisticObj = (CQGTradingSystemRequest)qObj;
                IncludeStatisticObj.IncludeStatistic((CQG.eTradingSystemStatistic)args[0]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTradingSystemRequestClassIsStatisticIncluded(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest IsStatisticIncludedObj = (CQGTradingSystemRequest)qObj;
                System.Boolean IsStatisticIncludedReturnV = IsStatisticIncludedObj.IsStatisticIncluded((CQG.eTradingSystemStatistic)args[0]);
                var IsStatisticIncludedValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsStatisticIncludedValKey, value: IsStatisticIncludedReturnV));
            }

            private void MethodCQGTradingSystemRequestClassset_Parameter(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest set_ParameterObj = (CQGTradingSystemRequest)qObj;
                set_ParameterObj.set_Parameter((System.Object)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTradingSystemRequestClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemRequest ToStringObj = (CQGTradingSystemRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemsClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGTradingSystems get_ItemByIdObj = (CQGTradingSystems)qObj;
                CQG.CQGTradingSystem get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGTradingSystemsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradingSystems GetEnumeratorObj = (CQGTradingSystems)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradingSystemsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystems GetHashCodeObj = (CQGTradingSystems)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemsClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystems ToStringObj = (CQGTradingSystems)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemStatisticsChangeInfoClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsChangeInfo GetHashCodeObj = (CQGTradingSystemStatisticsChangeInfo)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemStatisticsChangeInfoClassIsStatisticChanged(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsChangeInfo IsStatisticChangedObj = (CQGTradingSystemStatisticsChangeInfo)qObj;
                System.Boolean IsStatisticChangedReturnV = IsStatisticChangedObj.IsStatisticChanged((CQG.eTradingSystemStatistic)args[0]);
                var IsStatisticChangedValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsStatisticChangedValKey, value: IsStatisticChangedReturnV));
            }

            private void MethodCQGTradingSystemStatisticsChangeInfoClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsChangeInfo ToStringObj = (CQGTradingSystemStatisticsChangeInfo)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemStatisticsClassget_Value(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics get_ValueObj = (CQGTradingSystemStatistics)qObj;
                System.Double get_ValueReturnV = get_ValueObj[(CQG.eTradingSystemStatistic)args[0]];
                var get_ValueValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ValueValKey, value: get_ValueReturnV));
            }

            private void MethodCQGTradingSystemStatisticsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics GetHashCodeObj = (CQGTradingSystemStatistics)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemStatisticsClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatistics ToStringObj = (CQGTradingSystemStatistics)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemStatisticsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsCollection GetEnumeratorObj = (CQGTradingSystemStatisticsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradingSystemStatisticsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsCollection GetHashCodeObj = (CQGTradingSystemStatisticsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemStatisticsCollectionClassIndexForDate(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsCollection IndexForDateObj = (CQGTradingSystemStatisticsCollection)qObj;
                System.Int32 IndexForDateReturnV = IndexForDateObj.IndexForDate((System.DateTime)args[0]);
                var IndexForDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexForDateValKey, value: IndexForDateReturnV));
            }

            private void MethodCQGTradingSystemStatisticsCollectionClassIndicesForDates(QueryInfo query, object[] args)
            {
                var arg2 = (System.Int32)args[2];
                var arg3 = (System.Int32)args[3];
                CQGTradingSystemStatisticsCollection IndicesForDatesObj = (CQGTradingSystemStatisticsCollection)qObj;
                IndicesForDatesObj.IndicesForDates((System.DateTime)args[0],(System.DateTime)args[1],out arg2,out arg3);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGTradingSystemStatisticsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemStatisticsCollection ToStringObj = (CQGTradingSystemStatisticsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemTradeClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade GetHashCodeObj = (CQGTradingSystemTrade)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemTradeClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemTrade ToStringObj = (CQGTradingSystemTrade)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemTradeDefinitionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition GetHashCodeObj = (CQGTradingSystemTradeDefinition)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemTradeDefinitionClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinition ToStringObj = (CQGTradingSystemTradeDefinition)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemTradeDefinitionsClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions get_ItemByNameObj = (CQGTradingSystemTradeDefinitions)qObj;
                CQG.CQGTradingSystemTradeDefinition get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGTradingSystemTradeDefinitionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions GetEnumeratorObj = (CQGTradingSystemTradeDefinitions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradingSystemTradeDefinitionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions GetHashCodeObj = (CQGTradingSystemTradeDefinitions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemTradeDefinitionsClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradeDefinitions ToStringObj = (CQGTradingSystemTradeDefinitions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemTradesRowClassget_ItemByName(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow get_ItemByNameObj = (CQGTradingSystemTradesRow)qObj;
                CQG.CQGTradingSystemTrade get_ItemByNameReturnV = get_ItemByNameObj.get_ItemByName((System.String)args[0]);
                var get_ItemByNameValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByNameValKey, get_ItemByNameReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByNameValKey));
            }

            private void MethodCQGTradingSystemTradesRowClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow GetEnumeratorObj = (CQGTradingSystemTradesRow)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradingSystemTradesRowClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow GetHashCodeObj = (CQGTradingSystemTradesRow)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemTradesRowClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRow ToStringObj = (CQGTradingSystemTradesRow)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemTradesRowsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRows GetEnumeratorObj = (CQGTradingSystemTradesRows)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTradingSystemTradesRowsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRows GetHashCodeObj = (CQGTradingSystemTradesRows)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemTradesRowsClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemTradesRows ToStringObj = (CQGTradingSystemTradesRows)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTradingSystemUpdateInfoClassget_ChangedEntries(QueryInfo query, object[] args)
            {
                CQGTradingSystemUpdateInfo get_ChangedEntriesObj = (CQGTradingSystemUpdateInfo)qObj;
                CQG.CQGChangedTradeEntries get_ChangedEntriesReturnV = get_ChangedEntriesObj.get_ChangedEntries((CQG.eTradeChangeCategory)args[0]);
                var get_ChangedEntriesValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ChangedEntriesValKey, get_ChangedEntriesReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ChangedEntriesValKey));
            }

            private void MethodCQGTradingSystemUpdateInfoClassget_ChangedExits(QueryInfo query, object[] args)
            {
                CQGTradingSystemUpdateInfo get_ChangedExitsObj = (CQGTradingSystemUpdateInfo)qObj;
                CQG.CQGChangedTradeExits get_ChangedExitsReturnV = get_ChangedExitsObj.get_ChangedExits((CQG.eTradeChangeCategory)args[0]);
                var get_ChangedExitsValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ChangedExitsValKey, get_ChangedExitsReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ChangedExitsValKey));
            }

            private void MethodCQGTradingSystemUpdateInfoClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTradingSystemUpdateInfo GetHashCodeObj = (CQGTradingSystemUpdateInfo)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTradingSystemUpdateInfoClassToString(QueryInfo query, object[] args)
            {
                CQGTradingSystemUpdateInfo ToStringObj = (CQGTradingSystemUpdateInfo)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTransactionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTransaction GetHashCodeObj = (CQGTransaction)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTransactionClassToString(QueryInfo query, object[] args)
            {
                CQGTransaction ToStringObj = (CQGTransaction)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGTransactionsClassget_ItemByIndex(QueryInfo query, object[] args)
            {
                CQGTransactions get_ItemByIndexObj = (CQGTransactions)qObj;
                CQG.CQGTransaction get_ItemByIndexReturnV = get_ItemByIndexObj.get_ItemByIndex((System.Int32)args[0]);
                var get_ItemByIndexValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIndexValKey, get_ItemByIndexReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIndexValKey));
            }

            private void MethodCQGTransactionsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGTransactions GetEnumeratorObj = (CQGTransactions)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGTransactionsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGTransactions GetHashCodeObj = (CQGTransactions)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGTransactionsClassToString(QueryInfo query, object[] args)
            {
                CQGTransactions ToStringObj = (CQGTransactions)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGYieldClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGYield GetHashCodeObj = (CQGYield)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGYieldClassToString(QueryInfo query, object[] args)
            {
                CQGYield ToStringObj = (CQGYield)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGYieldsClassget_Tag(QueryInfo query, object[] args)
            {
                CQGYields get_TagObj = (CQGYields)qObj;
                System.Object get_TagReturnV = get_TagObj.get_Tag((System.String)args[0]);
                var get_TagValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_TagValKey, value: get_TagReturnV));
            }

            private void MethodCQGYieldsClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGYields GetEnumeratorObj = (CQGYields)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGYieldsClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGYields GetHashCodeObj = (CQGYields)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGYieldsClassIndexForDate(QueryInfo query, object[] args)
            {
                CQGYields IndexForDateObj = (CQGYields)qObj;
                System.Int32 IndexForDateReturnV = IndexForDateObj.IndexForDate((System.DateTime)args[0]);
                var IndexForDateValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexForDateValKey, value: IndexForDateReturnV));
            }

            private void MethodCQGYieldsClassset_Tag(QueryInfo query, object[] args)
            {
                CQGYields set_TagObj = (CQGYields)qObj;
                set_TagObj.set_Tag((System.String)args[0],(System.Object)args[1]);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
            }

            private void MethodCQGYieldsClassToString(QueryInfo query, object[] args)
            {
                CQGYields ToStringObj = (CQGYields)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGYieldsCollectionClassget_ItemById(QueryInfo query, object[] args)
            {
                CQGYieldsCollection get_ItemByIdObj = (CQGYieldsCollection)qObj;
                CQG.CQGYields get_ItemByIdReturnV = get_ItemByIdObj.get_ItemById((System.String)args[0]);
                var get_ItemByIdValKey = Core.CreateUniqueKey();
                ServerDictionaries.PutObjectToTheDictionary(get_ItemByIdValKey, get_ItemByIdReturnV);
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: get_ItemByIdValKey));
            }

            private void MethodCQGYieldsCollectionClassGetEnumerator(QueryInfo query, object[] args)
            {
                CQGYieldsCollection GetEnumeratorObj = (CQGYieldsCollection)qObj;
                System.Collections.IEnumerator GetEnumeratorReturnV = GetEnumeratorObj.GetEnumerator();
                var GetEnumeratorValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetEnumeratorValKey, value: GetEnumeratorReturnV));
            }

            private void MethodCQGYieldsCollectionClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGYieldsCollection GetHashCodeObj = (CQGYieldsCollection)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGYieldsCollectionClassToString(QueryInfo query, object[] args)
            {
                CQGYieldsCollection ToStringObj = (CQGYieldsCollection)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void MethodCQGYieldsRequestClassGetHashCode(QueryInfo query, object[] args)
            {
                CQGYieldsRequest GetHashCodeObj = (CQGYieldsRequest)qObj;
                System.Int32 GetHashCodeReturnV = GetHashCodeObj.GetHashCode();
                var GetHashCodeValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GetHashCodeValKey, value: GetHashCodeReturnV));
            }

            private void MethodCQGYieldsRequestClassToString(QueryInfo query, object[] args)
            {
                CQGYieldsRequest ToStringObj = (CQGYieldsRequest)qObj;
                System.String ToStringReturnV = ToStringObj.ToString();
                var ToStringValKey = "value";
                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ToStringValKey, value: ToStringReturnV));
            }

            private void Event_ICQGCELEvents_EventAccountChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AccountChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AccountChangedObj.AccountChanged += new CQG._ICQGCELEvents_AccountChangedEventHandler(CQGEventHandlers._ICQGCELEvents_AccountChangedEventHandlerImpl);

                }
                else
                {
                    AccountChangedObj.AccountChanged += new CQG._ICQGCELEvents_AccountChangedEventHandler(CQGEventHandlers._ICQGCELEvents_AccountChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAdvancedStudyAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AdvancedStudyAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyAddedObj.AdvancedStudyAdded += new CQG._ICQGCELEvents_AdvancedStudyAddedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyAddedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyAddedObj.AdvancedStudyAdded += new CQG._ICQGCELEvents_AdvancedStudyAddedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAdvancedStudyDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AdvancedStudyDefinitionsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyDefinitionsResolvedObj.AdvancedStudyDefinitionsResolved += new CQG._ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyDefinitionsResolvedObj.AdvancedStudyDefinitionsResolved += new CQG._ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAdvancedStudyInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AdvancedStudyInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyInsertedObj.AdvancedStudyInserted += new CQG._ICQGCELEvents_AdvancedStudyInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyInsertedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyInsertedObj.AdvancedStudyInserted += new CQG._ICQGCELEvents_AdvancedStudyInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAdvancedStudyRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AdvancedStudyRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyRemovedObj.AdvancedStudyRemoved += new CQG._ICQGCELEvents_AdvancedStudyRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyRemovedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyRemovedObj.AdvancedStudyRemoved += new CQG._ICQGCELEvents_AdvancedStudyRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAdvancedStudyResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AdvancedStudyResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyResolvedObj.AdvancedStudyResolved += new CQG._ICQGCELEvents_AdvancedStudyResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyResolvedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyResolvedObj.AdvancedStudyResolved += new CQG._ICQGCELEvents_AdvancedStudyResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAdvancedStudyUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AdvancedStudyUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyUpdatedObj.AdvancedStudyUpdated += new CQG._ICQGCELEvents_AdvancedStudyUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyUpdatedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyUpdatedObj.AdvancedStudyUpdated += new CQG._ICQGCELEvents_AdvancedStudyUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAlgorithmicOrderPlaced(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AlgorithmicOrderPlacedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AlgorithmicOrderPlacedObj.AlgorithmicOrderPlaced += new CQG._ICQGCELEvents_AlgorithmicOrderPlacedEventHandler(CQGEventHandlers._ICQGCELEvents_AlgorithmicOrderPlacedEventHandlerImpl);

                }
                else
                {
                    AlgorithmicOrderPlacedObj.AlgorithmicOrderPlaced += new CQG._ICQGCELEvents_AlgorithmicOrderPlacedEventHandler(CQGEventHandlers._ICQGCELEvents_AlgorithmicOrderPlacedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAlgorithmicOrderRegistrationComplete(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AlgorithmicOrderRegistrationCompleteObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AlgorithmicOrderRegistrationCompleteObj.AlgorithmicOrderRegistrationComplete += new CQG._ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandler(CQGEventHandlers._ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandlerImpl);

                }
                else
                {
                    AlgorithmicOrderRegistrationCompleteObj.AlgorithmicOrderRegistrationComplete += new CQG._ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandler(CQGEventHandlers._ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAllOrdersCanceled(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AllOrdersCanceledObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AllOrdersCanceledObj.AllOrdersCanceled += new CQG._ICQGCELEvents_AllOrdersCanceledEventHandler(CQGEventHandlers._ICQGCELEvents_AllOrdersCanceledEventHandlerImpl);

                }
                else
                {
                    AllOrdersCanceledObj.AllOrdersCanceled += new CQG._ICQGCELEvents_AllOrdersCanceledEventHandler(CQGEventHandlers._ICQGCELEvents_AllOrdersCanceledEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventAuthenticationStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event AuthenticationStatusChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AuthenticationStatusChangedObj.AuthenticationStatusChanged += new CQG._ICQGCELEvents_AuthenticationStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_AuthenticationStatusChangedEventHandlerImpl);

                }
                else
                {
                    AuthenticationStatusChangedObj.AuthenticationStatusChanged += new CQG._ICQGCELEvents_AuthenticationStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_AuthenticationStatusChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventBarsTimestampsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event BarsTimestampsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    BarsTimestampsResolvedObj.BarsTimestampsResolved += new CQG._ICQGCELEvents_BarsTimestampsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_BarsTimestampsResolvedEventHandlerImpl);

                }
                else
                {
                    BarsTimestampsResolvedObj.BarsTimestampsResolved += new CQG._ICQGCELEvents_BarsTimestampsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_BarsTimestampsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCELStarted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CELStartedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CELStartedObj.CELStarted += new CQG._ICQGCELEvents_CELStartedEventHandler(CQGEventHandlers._ICQGCELEvents_CELStartedEventHandlerImpl);

                }
                else
                {
                    CELStartedObj.CELStarted += new CQG._ICQGCELEvents_CELStartedEventHandler(CQGEventHandlers._ICQGCELEvents_CELStartedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCommodityInstrumentsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CommodityInstrumentsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved += new CQG._ICQGCELEvents_CommodityInstrumentsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CommodityInstrumentsResolvedEventHandlerImpl);

                }
                else
                {
                    CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved += new CQG._ICQGCELEvents_CommodityInstrumentsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CommodityInstrumentsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConditionAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConditionAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionAddedObj.ConditionAdded += new CQG._ICQGCELEvents_ConditionAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionAddedEventHandlerImpl);

                }
                else
                {
                    ConditionAddedObj.ConditionAdded += new CQG._ICQGCELEvents_ConditionAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConditionDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConditionDefinitionsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionDefinitionsResolvedObj.ConditionDefinitionsResolved += new CQG._ICQGCELEvents_ConditionDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    ConditionDefinitionsResolvedObj.ConditionDefinitionsResolved += new CQG._ICQGCELEvents_ConditionDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConditionInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConditionInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionInsertedObj.ConditionInserted += new CQG._ICQGCELEvents_ConditionInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionInsertedEventHandlerImpl);

                }
                else
                {
                    ConditionInsertedObj.ConditionInserted += new CQG._ICQGCELEvents_ConditionInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConditionRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConditionRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionRemovedObj.ConditionRemoved += new CQG._ICQGCELEvents_ConditionRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionRemovedEventHandlerImpl);

                }
                else
                {
                    ConditionRemovedObj.ConditionRemoved += new CQG._ICQGCELEvents_ConditionRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConditionResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConditionResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionResolvedObj.ConditionResolved += new CQG._ICQGCELEvents_ConditionResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionResolvedEventHandlerImpl);

                }
                else
                {
                    ConditionResolvedObj.ConditionResolved += new CQG._ICQGCELEvents_ConditionResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConditionUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConditionUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionUpdatedObj.ConditionUpdated += new CQG._ICQGCELEvents_ConditionUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionUpdatedEventHandlerImpl);

                }
                else
                {
                    ConditionUpdatedObj.ConditionUpdated += new CQG._ICQGCELEvents_ConditionUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConstantVolumeBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConstantVolumeBarsAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsAddedObj.ConstantVolumeBarsAdded += new CQG._ICQGCELEvents_ConstantVolumeBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsAddedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsAddedObj.ConstantVolumeBarsAdded += new CQG._ICQGCELEvents_ConstantVolumeBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConstantVolumeBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConstantVolumeBarsInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsInsertedObj.ConstantVolumeBarsInserted += new CQG._ICQGCELEvents_ConstantVolumeBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsInsertedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsInsertedObj.ConstantVolumeBarsInserted += new CQG._ICQGCELEvents_ConstantVolumeBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConstantVolumeBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConstantVolumeBarsRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsRemovedObj.ConstantVolumeBarsRemoved += new CQG._ICQGCELEvents_ConstantVolumeBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsRemovedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsRemovedObj.ConstantVolumeBarsRemoved += new CQG._ICQGCELEvents_ConstantVolumeBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConstantVolumeBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConstantVolumeBarsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsResolvedObj.ConstantVolumeBarsResolved += new CQG._ICQGCELEvents_ConstantVolumeBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsResolvedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsResolvedObj.ConstantVolumeBarsResolved += new CQG._ICQGCELEvents_ConstantVolumeBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventConstantVolumeBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ConstantVolumeBarsUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsUpdatedObj.ConstantVolumeBarsUpdated += new CQG._ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsUpdatedObj.ConstantVolumeBarsUpdated += new CQG._ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCurrencyRatesChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CurrencyRatesChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CurrencyRatesChangedObj.CurrencyRatesChanged += new CQG._ICQGCELEvents_CurrencyRatesChangedEventHandler(CQGEventHandlers._ICQGCELEvents_CurrencyRatesChangedEventHandlerImpl);

                }
                else
                {
                    CurrencyRatesChangedObj.CurrencyRatesChanged += new CQG._ICQGCELEvents_CurrencyRatesChangedEventHandler(CQGEventHandlers._ICQGCELEvents_CurrencyRatesChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCustomSessionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CustomSessionsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomSessionsResolvedObj.CustomSessionsResolved += new CQG._ICQGCELEvents_CustomSessionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomSessionsResolvedEventHandlerImpl);

                }
                else
                {
                    CustomSessionsResolvedObj.CustomSessionsResolved += new CQG._ICQGCELEvents_CustomSessionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomSessionsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCustomStudyAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CustomStudyAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyAddedObj.CustomStudyAdded += new CQG._ICQGCELEvents_CustomStudyAddedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyAddedEventHandlerImpl);

                }
                else
                {
                    CustomStudyAddedObj.CustomStudyAdded += new CQG._ICQGCELEvents_CustomStudyAddedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCustomStudyDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CustomStudyDefinitionsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyDefinitionsResolvedObj.CustomStudyDefinitionsResolved += new CQG._ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    CustomStudyDefinitionsResolvedObj.CustomStudyDefinitionsResolved += new CQG._ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCustomStudyInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CustomStudyInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyInsertedObj.CustomStudyInserted += new CQG._ICQGCELEvents_CustomStudyInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyInsertedEventHandlerImpl);

                }
                else
                {
                    CustomStudyInsertedObj.CustomStudyInserted += new CQG._ICQGCELEvents_CustomStudyInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCustomStudyRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CustomStudyRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyRemovedObj.CustomStudyRemoved += new CQG._ICQGCELEvents_CustomStudyRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyRemovedEventHandlerImpl);

                }
                else
                {
                    CustomStudyRemovedObj.CustomStudyRemoved += new CQG._ICQGCELEvents_CustomStudyRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCustomStudyResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CustomStudyResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyResolvedObj.CustomStudyResolved += new CQG._ICQGCELEvents_CustomStudyResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyResolvedEventHandlerImpl);

                }
                else
                {
                    CustomStudyResolvedObj.CustomStudyResolved += new CQG._ICQGCELEvents_CustomStudyResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventCustomStudyUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event CustomStudyUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyUpdatedObj.CustomStudyUpdated += new CQG._ICQGCELEvents_CustomStudyUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyUpdatedEventHandlerImpl);

                }
                else
                {
                    CustomStudyUpdatedObj.CustomStudyUpdated += new CQG._ICQGCELEvents_CustomStudyUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventDataConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event DataConnectionStatusChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataConnectionStatusChangedObj.DataConnectionStatusChanged += new CQG._ICQGCELEvents_DataConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_DataConnectionStatusChangedEventHandlerImpl);

                }
                else
                {
                    DataConnectionStatusChangedObj.DataConnectionStatusChanged += new CQG._ICQGCELEvents_DataConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_DataConnectionStatusChangedEventHandlerImpl);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    // Fire this event explicitly, because data collector connects to real CQG beforehand and does not fire it anymore
                    CQGEventHandlers._ICQGCELEvents_DataConnectionStatusChangedEventHandlerImpl(CqgDataManagement.currConnStat);
                }
            }
            private void Event_ICQGCELEvents_EventDataError(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event DataErrorObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataErrorObj.DataError += new CQG._ICQGCELEvents_DataErrorEventHandler(CQGEventHandlers._ICQGCELEvents_DataErrorEventHandlerImpl);

                }
                else
                {
                    DataErrorObj.DataError += new CQG._ICQGCELEvents_DataErrorEventHandler(CQGEventHandlers._ICQGCELEvents_DataErrorEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventDataSourcesResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event DataSourcesResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataSourcesResolvedObj.DataSourcesResolved += new CQG._ICQGCELEvents_DataSourcesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_DataSourcesResolvedEventHandlerImpl);

                }
                else
                {
                    DataSourcesResolvedObj.DataSourcesResolved += new CQG._ICQGCELEvents_DataSourcesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_DataSourcesResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventDataSourceSymbolsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event DataSourceSymbolsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataSourceSymbolsResolvedObj.DataSourceSymbolsResolved += new CQG._ICQGCELEvents_DataSourceSymbolsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_DataSourceSymbolsResolvedEventHandlerImpl);

                }
                else
                {
                    DataSourceSymbolsResolvedObj.DataSourceSymbolsResolved += new CQG._ICQGCELEvents_DataSourceSymbolsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_DataSourceSymbolsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventExpressionAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ExpressionAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionAddedObj.ExpressionAdded += new CQG._ICQGCELEvents_ExpressionAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionAddedEventHandlerImpl);

                }
                else
                {
                    ExpressionAddedObj.ExpressionAdded += new CQG._ICQGCELEvents_ExpressionAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventExpressionInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ExpressionInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionInsertedObj.ExpressionInserted += new CQG._ICQGCELEvents_ExpressionInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionInsertedEventHandlerImpl);

                }
                else
                {
                    ExpressionInsertedObj.ExpressionInserted += new CQG._ICQGCELEvents_ExpressionInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventExpressionRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ExpressionRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionRemovedObj.ExpressionRemoved += new CQG._ICQGCELEvents_ExpressionRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionRemovedEventHandlerImpl);

                }
                else
                {
                    ExpressionRemovedObj.ExpressionRemoved += new CQG._ICQGCELEvents_ExpressionRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventExpressionResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ExpressionResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionResolvedObj.ExpressionResolved += new CQG._ICQGCELEvents_ExpressionResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionResolvedEventHandlerImpl);

                }
                else
                {
                    ExpressionResolvedObj.ExpressionResolved += new CQG._ICQGCELEvents_ExpressionResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventExpressionUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ExpressionUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionUpdatedObj.ExpressionUpdated += new CQG._ICQGCELEvents_ExpressionUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionUpdatedEventHandlerImpl);

                }
                else
                {
                    ExpressionUpdatedObj.ExpressionUpdated += new CQG._ICQGCELEvents_ExpressionUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventGWConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event GWConnectionStatusChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    GWConnectionStatusChangedObj.GWConnectionStatusChanged += new CQG._ICQGCELEvents_GWConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_GWConnectionStatusChangedEventHandlerImpl);

                }
                else
                {
                    GWConnectionStatusChangedObj.GWConnectionStatusChanged += new CQG._ICQGCELEvents_GWConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_GWConnectionStatusChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventGWEnvironmentChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event GWEnvironmentChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    GWEnvironmentChangedObj.GWEnvironmentChanged += new CQG._ICQGCELEvents_GWEnvironmentChangedEventHandler(CQGEventHandlers._ICQGCELEvents_GWEnvironmentChangedEventHandlerImpl);

                }
                else
                {
                    GWEnvironmentChangedObj.GWEnvironmentChanged += new CQG._ICQGCELEvents_GWEnvironmentChangedEventHandler(CQGEventHandlers._ICQGCELEvents_GWEnvironmentChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventHistoricalSessionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event HistoricalSessionsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    HistoricalSessionsResolvedObj.HistoricalSessionsResolved += new CQG._ICQGCELEvents_HistoricalSessionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_HistoricalSessionsResolvedEventHandlerImpl);

                }
                else
                {
                    HistoricalSessionsResolvedObj.HistoricalSessionsResolved += new CQG._ICQGCELEvents_HistoricalSessionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_HistoricalSessionsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventICConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ICConnectionStatusChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ICConnectionStatusChangedObj.ICConnectionStatusChanged += new CQG._ICQGCELEvents_ICConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_ICConnectionStatusChangedEventHandlerImpl);

                }
                else
                {
                    ICConnectionStatusChangedObj.ICConnectionStatusChanged += new CQG._ICQGCELEvents_ICConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_ICConnectionStatusChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventIncorrectSymbol(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event IncorrectSymbolObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    IncorrectSymbolObj.IncorrectSymbol += new CQG._ICQGCELEvents_IncorrectSymbolEventHandler(CQGEventHandlers._ICQGCELEvents_IncorrectSymbolEventHandlerImpl);

                }
                else
                {
                    IncorrectSymbolObj.IncorrectSymbol += new CQG._ICQGCELEvents_IncorrectSymbolEventHandler(CQGEventHandlers._ICQGCELEvents_IncorrectSymbolEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventInstrumentChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event InstrumentChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentChangedObj.InstrumentChanged += new CQG._ICQGCELEvents_InstrumentChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentChangedObj.InstrumentChanged += new CQG._ICQGCELEvents_InstrumentChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventInstrumentDOMChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event InstrumentDOMChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentDOMChangedObj.InstrumentDOMChanged += new CQG._ICQGCELEvents_InstrumentDOMChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentDOMChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentDOMChangedObj.InstrumentDOMChanged += new CQG._ICQGCELEvents_InstrumentDOMChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentDOMChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventInstrumentsGroupChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event InstrumentsGroupChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentsGroupChangedObj.InstrumentsGroupChanged += new CQG._ICQGCELEvents_InstrumentsGroupChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentsGroupChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentsGroupChangedObj.InstrumentsGroupChanged += new CQG._ICQGCELEvents_InstrumentsGroupChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentsGroupChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventInstrumentsGroupResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event InstrumentsGroupResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentsGroupResolvedObj.InstrumentsGroupResolved += new CQG._ICQGCELEvents_InstrumentsGroupResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentsGroupResolvedEventHandlerImpl);

                }
                else
                {
                    InstrumentsGroupResolvedObj.InstrumentsGroupResolved += new CQG._ICQGCELEvents_InstrumentsGroupResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentsGroupResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventInstrumentSubscribed(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event InstrumentSubscribedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentSubscribedObj.InstrumentSubscribed += new CQG._ICQGCELEvents_InstrumentSubscribedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentSubscribedEventHandlerImpl);

                }
                else
                {
                    InstrumentSubscribedObj.InstrumentSubscribed += new CQG._ICQGCELEvents_InstrumentSubscribedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentSubscribedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventLineTimeChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event LineTimeChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    LineTimeChangedObj.LineTimeChanged += new CQG._ICQGCELEvents_LineTimeChangedEventHandler(CQGEventHandlers._ICQGCELEvents_LineTimeChangedEventHandlerImpl);

                }
                else
                {
                    LineTimeChangedObj.LineTimeChanged += new CQG._ICQGCELEvents_LineTimeChangedEventHandler(CQGEventHandlers._ICQGCELEvents_LineTimeChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventManualFillChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ManualFillChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ManualFillChangedObj.ManualFillChanged += new CQG._ICQGCELEvents_ManualFillChangedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillChangedEventHandlerImpl);

                }
                else
                {
                    ManualFillChangedObj.ManualFillChanged += new CQG._ICQGCELEvents_ManualFillChangedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventManualFillsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ManualFillsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ManualFillsResolvedObj.ManualFillsResolved += new CQG._ICQGCELEvents_ManualFillsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillsResolvedEventHandlerImpl);

                }
                else
                {
                    ManualFillsResolvedObj.ManualFillsResolved += new CQG._ICQGCELEvents_ManualFillsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventManualFillUpdateResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event ManualFillUpdateResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ManualFillUpdateResolvedObj.ManualFillUpdateResolved += new CQG._ICQGCELEvents_ManualFillUpdateResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillUpdateResolvedEventHandlerImpl);

                }
                else
                {
                    ManualFillUpdateResolvedObj.ManualFillUpdateResolved += new CQG._ICQGCELEvents_ManualFillUpdateResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillUpdateResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventOnIdle(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event OnIdleObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    OnIdleObj.OnIdle += new CQG._ICQGCELEvents_OnIdleEventHandler(CQGEventHandlers._ICQGCELEvents_OnIdleEventHandlerImpl);

                }
                else
                {
                    OnIdleObj.OnIdle += new CQG._ICQGCELEvents_OnIdleEventHandler(CQGEventHandlers._ICQGCELEvents_OnIdleEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventOnQueryProgress(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event OnQueryProgressObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    OnQueryProgressObj.OnQueryProgress += new CQG._ICQGCELEvents_OnQueryProgressEventHandler(CQGEventHandlers._ICQGCELEvents_OnQueryProgressEventHandlerImpl);

                }
                else
                {
                    OnQueryProgressObj.OnQueryProgress += new CQG._ICQGCELEvents_OnQueryProgressEventHandler(CQGEventHandlers._ICQGCELEvents_OnQueryProgressEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventOrderChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event OrderChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    OrderChangedObj.OrderChanged += new CQG._ICQGCELEvents_OrderChangedEventHandler(CQGEventHandlers._ICQGCELEvents_OrderChangedEventHandlerImpl);

                }
                else
                {
                    OrderChangedObj.OrderChanged += new CQG._ICQGCELEvents_OrderChangedEventHandler(CQGEventHandlers._ICQGCELEvents_OrderChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventPasswordChanged(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event PasswordChangedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PasswordChangedObj.PasswordChanged += new CQG._ICQGCELEvents_PasswordChangedEventHandler(CQGEventHandlers._ICQGCELEvents_PasswordChangedEventHandlerImpl);

                }
                else
                {
                    PasswordChangedObj.PasswordChanged += new CQG._ICQGCELEvents_PasswordChangedEventHandler(CQGEventHandlers._ICQGCELEvents_PasswordChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventPointAndFigureBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event PointAndFigureBarsAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsAddedObj.PointAndFigureBarsAdded += new CQG._ICQGCELEvents_PointAndFigureBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsAddedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsAddedObj.PointAndFigureBarsAdded += new CQG._ICQGCELEvents_PointAndFigureBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventPointAndFigureBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event PointAndFigureBarsInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsInsertedObj.PointAndFigureBarsInserted += new CQG._ICQGCELEvents_PointAndFigureBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsInsertedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsInsertedObj.PointAndFigureBarsInserted += new CQG._ICQGCELEvents_PointAndFigureBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventPointAndFigureBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event PointAndFigureBarsRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsRemovedObj.PointAndFigureBarsRemoved += new CQG._ICQGCELEvents_PointAndFigureBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsRemovedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsRemovedObj.PointAndFigureBarsRemoved += new CQG._ICQGCELEvents_PointAndFigureBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventPointAndFigureBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event PointAndFigureBarsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsResolvedObj.PointAndFigureBarsResolved += new CQG._ICQGCELEvents_PointAndFigureBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsResolvedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsResolvedObj.PointAndFigureBarsResolved += new CQG._ICQGCELEvents_PointAndFigureBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventPointAndFigureBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event PointAndFigureBarsUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsUpdatedObj.PointAndFigureBarsUpdated += new CQG._ICQGCELEvents_PointAndFigureBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsUpdatedObj.PointAndFigureBarsUpdated += new CQG._ICQGCELEvents_PointAndFigureBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventPositionsStatementResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event PositionsStatementResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PositionsStatementResolvedObj.PositionsStatementResolved += new CQG._ICQGCELEvents_PositionsStatementResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_PositionsStatementResolvedEventHandlerImpl);

                }
                else
                {
                    PositionsStatementResolvedObj.PositionsStatementResolved += new CQG._ICQGCELEvents_PositionsStatementResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_PositionsStatementResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventQFormulaDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event QFormulaDefinitionsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    QFormulaDefinitionsResolvedObj.QFormulaDefinitionsResolved += new CQG._ICQGCELEvents_QFormulaDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_QFormulaDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    QFormulaDefinitionsResolvedObj.QFormulaDefinitionsResolved += new CQG._ICQGCELEvents_QFormulaDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_QFormulaDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventStrategyDefinitionProgress(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event StrategyDefinitionProgressObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    StrategyDefinitionProgressObj.StrategyDefinitionProgress += new CQG._ICQGCELEvents_StrategyDefinitionProgressEventHandler(CQGEventHandlers._ICQGCELEvents_StrategyDefinitionProgressEventHandlerImpl);

                }
                else
                {
                    StrategyDefinitionProgressObj.StrategyDefinitionProgress += new CQG._ICQGCELEvents_StrategyDefinitionProgressEventHandler(CQGEventHandlers._ICQGCELEvents_StrategyDefinitionProgressEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventSubMinuteBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event SubMinuteBarsAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsAddedObj.SubMinuteBarsAdded += new CQG._ICQGCELEvents_SubMinuteBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsAddedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsAddedObj.SubMinuteBarsAdded += new CQG._ICQGCELEvents_SubMinuteBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventSubMinuteBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event SubMinuteBarsInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsInsertedObj.SubMinuteBarsInserted += new CQG._ICQGCELEvents_SubMinuteBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsInsertedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsInsertedObj.SubMinuteBarsInserted += new CQG._ICQGCELEvents_SubMinuteBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventSubMinuteBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event SubMinuteBarsRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsRemovedObj.SubMinuteBarsRemoved += new CQG._ICQGCELEvents_SubMinuteBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsRemovedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsRemovedObj.SubMinuteBarsRemoved += new CQG._ICQGCELEvents_SubMinuteBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventSubMinuteBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event SubMinuteBarsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsResolvedObj.SubMinuteBarsResolved += new CQG._ICQGCELEvents_SubMinuteBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsResolvedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsResolvedObj.SubMinuteBarsResolved += new CQG._ICQGCELEvents_SubMinuteBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventSubMinuteBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event SubMinuteBarsUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsUpdatedObj.SubMinuteBarsUpdated += new CQG._ICQGCELEvents_SubMinuteBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsUpdatedObj.SubMinuteBarsUpdated += new CQG._ICQGCELEvents_SubMinuteBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventSummariesStatementResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event SummariesStatementResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SummariesStatementResolvedObj.SummariesStatementResolved += new CQG._ICQGCELEvents_SummariesStatementResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_SummariesStatementResolvedEventHandlerImpl);

                }
                else
                {
                    SummariesStatementResolvedObj.SummariesStatementResolved += new CQG._ICQGCELEvents_SummariesStatementResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_SummariesStatementResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTFlowBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TFlowBarsAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsAddedObj.TFlowBarsAdded += new CQG._ICQGCELEvents_TFlowBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsAddedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsAddedObj.TFlowBarsAdded += new CQG._ICQGCELEvents_TFlowBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTFlowBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TFlowBarsInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsInsertedObj.TFlowBarsInserted += new CQG._ICQGCELEvents_TFlowBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsInsertedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsInsertedObj.TFlowBarsInserted += new CQG._ICQGCELEvents_TFlowBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTFlowBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TFlowBarsRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsRemovedObj.TFlowBarsRemoved += new CQG._ICQGCELEvents_TFlowBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsRemovedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsRemovedObj.TFlowBarsRemoved += new CQG._ICQGCELEvents_TFlowBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTFlowBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TFlowBarsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsResolvedObj.TFlowBarsResolved += new CQG._ICQGCELEvents_TFlowBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsResolvedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsResolvedObj.TFlowBarsResolved += new CQG._ICQGCELEvents_TFlowBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTFlowBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TFlowBarsUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsUpdatedObj.TFlowBarsUpdated += new CQG._ICQGCELEvents_TFlowBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsUpdatedObj.TFlowBarsUpdated += new CQG._ICQGCELEvents_TFlowBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTicksAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TicksAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TicksAddedObj.TicksAdded += new CQG._ICQGCELEvents_TicksAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TicksAddedEventHandlerImpl);

                }
                else
                {
                    TicksAddedObj.TicksAdded += new CQG._ICQGCELEvents_TicksAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TicksAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTicksResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TicksResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TicksResolvedObj.TicksResolved += new CQG._ICQGCELEvents_TicksResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TicksResolvedEventHandlerImpl);

                }
                else
                {
                    TicksResolvedObj.TicksResolved += new CQG._ICQGCELEvents_TicksResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TicksResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTimedBarsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TimedBarsAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsAddedObj.TimedBarsAdded += new CQG._ICQGCELEvents_TimedBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsAddedEventHandlerImpl);

                }
                else
                {
                    TimedBarsAddedObj.TimedBarsAdded += new CQG._ICQGCELEvents_TimedBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTimedBarsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TimedBarsInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsInsertedObj.TimedBarsInserted += new CQG._ICQGCELEvents_TimedBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsInsertedEventHandlerImpl);

                }
                else
                {
                    TimedBarsInsertedObj.TimedBarsInserted += new CQG._ICQGCELEvents_TimedBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTimedBarsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TimedBarsRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsRemovedObj.TimedBarsRemoved += new CQG._ICQGCELEvents_TimedBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsRemovedEventHandlerImpl);

                }
                else
                {
                    TimedBarsRemovedObj.TimedBarsRemoved += new CQG._ICQGCELEvents_TimedBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTimedBarsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TimedBarsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsResolvedObj.TimedBarsResolved += new CQG._ICQGCELEvents_TimedBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsResolvedEventHandlerImpl);

                }
                else
                {
                    TimedBarsResolvedObj.TimedBarsResolved += new CQG._ICQGCELEvents_TimedBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTimedBarsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TimedBarsUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsUpdatedObj.TimedBarsUpdated += new CQG._ICQGCELEvents_TimedBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    TimedBarsUpdatedObj.TimedBarsUpdated += new CQG._ICQGCELEvents_TimedBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradableCommoditiesResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradableCommoditiesResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradableCommoditiesResolvedObj.TradableCommoditiesResolved += new CQG._ICQGCELEvents_TradableCommoditiesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradableCommoditiesResolvedEventHandlerImpl);

                }
                else
                {
                    TradableCommoditiesResolvedObj.TradableCommoditiesResolved += new CQG._ICQGCELEvents_TradableCommoditiesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradableCommoditiesResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradableExchangesResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradableExchangesResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradableExchangesResolvedObj.TradableExchangesResolved += new CQG._ICQGCELEvents_TradableExchangesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradableExchangesResolvedEventHandlerImpl);

                }
                else
                {
                    TradableExchangesResolvedObj.TradableExchangesResolved += new CQG._ICQGCELEvents_TradableExchangesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradableExchangesResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradingSystemAddNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradingSystemAddNotificationObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemAddNotificationObj.TradingSystemAddNotification += new CQG._ICQGCELEvents_TradingSystemAddNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemAddNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemAddNotificationObj.TradingSystemAddNotification += new CQG._ICQGCELEvents_TradingSystemAddNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemAddNotificationEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradingSystemDefinitionsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradingSystemDefinitionsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemDefinitionsResolvedObj.TradingSystemDefinitionsResolved += new CQG._ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    TradingSystemDefinitionsResolvedObj.TradingSystemDefinitionsResolved += new CQG._ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradingSystemInsertNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradingSystemInsertNotificationObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemInsertNotificationObj.TradingSystemInsertNotification += new CQG._ICQGCELEvents_TradingSystemInsertNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemInsertNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemInsertNotificationObj.TradingSystemInsertNotification += new CQG._ICQGCELEvents_TradingSystemInsertNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemInsertNotificationEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradingSystemRemoveNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradingSystemRemoveNotificationObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemRemoveNotificationObj.TradingSystemRemoveNotification += new CQG._ICQGCELEvents_TradingSystemRemoveNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemRemoveNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemRemoveNotificationObj.TradingSystemRemoveNotification += new CQG._ICQGCELEvents_TradingSystemRemoveNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemRemoveNotificationEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradingSystemResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradingSystemResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemResolvedObj.TradingSystemResolved += new CQG._ICQGCELEvents_TradingSystemResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemResolvedEventHandlerImpl);

                }
                else
                {
                    TradingSystemResolvedObj.TradingSystemResolved += new CQG._ICQGCELEvents_TradingSystemResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradingSystemTradeRelationAddNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradingSystemTradeRelationAddNotificationObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemTradeRelationAddNotificationObj.TradingSystemTradeRelationAddNotification += new CQG._ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemTradeRelationAddNotificationObj.TradingSystemTradeRelationAddNotification += new CQG._ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventTradingSystemUpdateNotification(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event TradingSystemUpdateNotificationObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemUpdateNotificationObj.TradingSystemUpdateNotification += new CQG._ICQGCELEvents_TradingSystemUpdateNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemUpdateNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemUpdateNotificationObj.TradingSystemUpdateNotification += new CQG._ICQGCELEvents_TradingSystemUpdateNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemUpdateNotificationEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventYieldsAdded(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event YieldsAddedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsAddedObj.YieldsAdded += new CQG._ICQGCELEvents_YieldsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsAddedEventHandlerImpl);

                }
                else
                {
                    YieldsAddedObj.YieldsAdded += new CQG._ICQGCELEvents_YieldsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsAddedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventYieldsInserted(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event YieldsInsertedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsInsertedObj.YieldsInserted += new CQG._ICQGCELEvents_YieldsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsInsertedEventHandlerImpl);

                }
                else
                {
                    YieldsInsertedObj.YieldsInserted += new CQG._ICQGCELEvents_YieldsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsInsertedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventYieldsRemoved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event YieldsRemovedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsRemovedObj.YieldsRemoved += new CQG._ICQGCELEvents_YieldsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsRemovedEventHandlerImpl);

                }
                else
                {
                    YieldsRemovedObj.YieldsRemoved += new CQG._ICQGCELEvents_YieldsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsRemovedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventYieldsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event YieldsResolvedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsResolvedObj.YieldsResolved += new CQG._ICQGCELEvents_YieldsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsResolvedEventHandlerImpl);

                }
                else
                {
                    YieldsResolvedObj.YieldsResolved += new CQG._ICQGCELEvents_YieldsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELEvents_EventYieldsUpdated(QueryInfo query, object[] args)
            {
                _ICQGCELEvents_Event YieldsUpdatedObj = (_ICQGCELEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsUpdatedObj.YieldsUpdated += new CQG._ICQGCELEvents_YieldsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsUpdatedEventHandlerImpl);

                }
                else
                {
                    YieldsUpdatedObj.YieldsUpdated += new CQG._ICQGCELEvents_YieldsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsUpdatedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELGeneralEvents_EventCELStarted(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents_Event CELStartedObj = (_ICQGCELGeneralEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CELStartedObj.CELStarted += new CQG._ICQGCELGeneralEvents_CELStartedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_CELStartedEventHandlerImpl);

                }
                else
                {
                    CELStartedObj.CELStarted += new CQG._ICQGCELGeneralEvents_CELStartedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_CELStartedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELGeneralEvents_EventCurrencyRatesChanged(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents_Event CurrencyRatesChangedObj = (_ICQGCELGeneralEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CurrencyRatesChangedObj.CurrencyRatesChanged += new CQG._ICQGCELGeneralEvents_CurrencyRatesChangedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_CurrencyRatesChangedEventHandlerImpl);

                }
                else
                {
                    CurrencyRatesChangedObj.CurrencyRatesChanged += new CQG._ICQGCELGeneralEvents_CurrencyRatesChangedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_CurrencyRatesChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELGeneralEvents_EventDataConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents_Event DataConnectionStatusChangedObj = (_ICQGCELGeneralEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataConnectionStatusChangedObj.DataConnectionStatusChanged += new CQG._ICQGCELGeneralEvents_DataConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_DataConnectionStatusChangedEventHandlerImpl);

                }
                else
                {
                    DataConnectionStatusChangedObj.DataConnectionStatusChanged += new CQG._ICQGCELGeneralEvents_DataConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_DataConnectionStatusChangedEventHandlerImpl);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    // Fire this event explicitly, because data collector connects to real CQG beforehand and does not fire it anymore
                    CQGEventHandlers._ICQGCELEvents_DataConnectionStatusChangedEventHandlerImpl(CqgDataManagement.currConnStat);
                }
            }
            private void Event_ICQGCELGeneralEvents_EventDataError(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents_Event DataErrorObj = (_ICQGCELGeneralEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataErrorObj.DataError += new CQG._ICQGCELGeneralEvents_DataErrorEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_DataErrorEventHandlerImpl);

                }
                else
                {
                    DataErrorObj.DataError += new CQG._ICQGCELGeneralEvents_DataErrorEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_DataErrorEventHandlerImpl);
                }
            }
            private void Event_ICQGCELGeneralEvents_EventGWConnectionStatusChanged(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents_Event GWConnectionStatusChangedObj = (_ICQGCELGeneralEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    GWConnectionStatusChangedObj.GWConnectionStatusChanged += new CQG._ICQGCELGeneralEvents_GWConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_GWConnectionStatusChangedEventHandlerImpl);

                }
                else
                {
                    GWConnectionStatusChangedObj.GWConnectionStatusChanged += new CQG._ICQGCELGeneralEvents_GWConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_GWConnectionStatusChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELGeneralEvents_EventLineTimeChanged(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents_Event LineTimeChangedObj = (_ICQGCELGeneralEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    LineTimeChangedObj.LineTimeChanged += new CQG._ICQGCELGeneralEvents_LineTimeChangedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_LineTimeChangedEventHandlerImpl);

                }
                else
                {
                    LineTimeChangedObj.LineTimeChanged += new CQG._ICQGCELGeneralEvents_LineTimeChangedEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_LineTimeChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELGeneralEvents_EventOnIdle(QueryInfo query, object[] args)
            {
                _ICQGCELGeneralEvents_Event OnIdleObj = (_ICQGCELGeneralEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    OnIdleObj.OnIdle += new CQG._ICQGCELGeneralEvents_OnIdleEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_OnIdleEventHandlerImpl);

                }
                else
                {
                    OnIdleObj.OnIdle += new CQG._ICQGCELGeneralEvents_OnIdleEventHandler(CQGEventHandlers._ICQGCELGeneralEvents_OnIdleEventHandlerImpl);
                }
            }
            private void Event_ICQGCELInstrumentEvents_EventCommodityInstrumentsResolved(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents_Event CommodityInstrumentsResolvedObj = (_ICQGCELInstrumentEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved += new CQG._ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandlerImpl);

                }
                else
                {
                    CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved += new CQG._ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELInstrumentEvents_EventIncorrectSymbol(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents_Event IncorrectSymbolObj = (_ICQGCELInstrumentEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    IncorrectSymbolObj.IncorrectSymbol += new CQG._ICQGCELInstrumentEvents_IncorrectSymbolEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_IncorrectSymbolEventHandlerImpl);

                }
                else
                {
                    IncorrectSymbolObj.IncorrectSymbol += new CQG._ICQGCELInstrumentEvents_IncorrectSymbolEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_IncorrectSymbolEventHandlerImpl);
                }
            }
            private void Event_ICQGCELInstrumentEvents_EventInstrumentChanged(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents_Event InstrumentChangedObj = (_ICQGCELInstrumentEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentChangedObj.InstrumentChanged += new CQG._ICQGCELInstrumentEvents_InstrumentChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentChangedObj.InstrumentChanged += new CQG._ICQGCELInstrumentEvents_InstrumentChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELInstrumentEvents_EventInstrumentDOMChanged(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents_Event InstrumentDOMChangedObj = (_ICQGCELInstrumentEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentDOMChangedObj.InstrumentDOMChanged += new CQG._ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentDOMChangedObj.InstrumentDOMChanged += new CQG._ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELInstrumentEvents_EventInstrumentsGroupChanged(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents_Event InstrumentsGroupChangedObj = (_ICQGCELInstrumentEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentsGroupChangedObj.InstrumentsGroupChanged += new CQG._ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentsGroupChangedObj.InstrumentsGroupChanged += new CQG._ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELInstrumentEvents_EventInstrumentsGroupResolved(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents_Event InstrumentsGroupResolvedObj = (_ICQGCELInstrumentEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentsGroupResolvedObj.InstrumentsGroupResolved += new CQG._ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandlerImpl);

                }
                else
                {
                    InstrumentsGroupResolvedObj.InstrumentsGroupResolved += new CQG._ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandlerImpl);
                }
            }
            private void Event_ICQGCELInstrumentEvents_EventInstrumentSubscribed(QueryInfo query, object[] args)
            {
                _ICQGCELInstrumentEvents_Event InstrumentSubscribedObj = (_ICQGCELInstrumentEvents_Event)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentSubscribedObj.InstrumentSubscribed += new CQG._ICQGCELInstrumentEvents_InstrumentSubscribedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentSubscribedEventHandlerImpl);

                }
                else
                {
                    InstrumentSubscribedObj.InstrumentSubscribed += new CQG._ICQGCELInstrumentEvents_InstrumentSubscribedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentSubscribedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAccountChanged(QueryInfo query, object[] args)
            {
                CQGCEL AccountChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AccountChangedObj.AccountChanged += new CQG._ICQGCELEvents_AccountChangedEventHandler(CQGEventHandlers._ICQGCELEvents_AccountChangedEventHandlerImpl);

                }
                else
                {
                    AccountChangedObj.AccountChanged += new CQG._ICQGCELEvents_AccountChangedEventHandler(CQGEventHandlers._ICQGCELEvents_AccountChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAdvancedStudyAdded(QueryInfo query, object[] args)
            {
                CQGCEL AdvancedStudyAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyAddedObj.AdvancedStudyAdded += new CQG._ICQGCELEvents_AdvancedStudyAddedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyAddedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyAddedObj.AdvancedStudyAdded += new CQG._ICQGCELEvents_AdvancedStudyAddedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAdvancedStudyDefinitionsResolved(QueryInfo query, object[] args)
            {
                CQGCEL AdvancedStudyDefinitionsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyDefinitionsResolvedObj.AdvancedStudyDefinitionsResolved += new CQG._ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyDefinitionsResolvedObj.AdvancedStudyDefinitionsResolved += new CQG._ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAdvancedStudyInserted(QueryInfo query, object[] args)
            {
                CQGCEL AdvancedStudyInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyInsertedObj.AdvancedStudyInserted += new CQG._ICQGCELEvents_AdvancedStudyInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyInsertedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyInsertedObj.AdvancedStudyInserted += new CQG._ICQGCELEvents_AdvancedStudyInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAdvancedStudyRemoved(QueryInfo query, object[] args)
            {
                CQGCEL AdvancedStudyRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyRemovedObj.AdvancedStudyRemoved += new CQG._ICQGCELEvents_AdvancedStudyRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyRemovedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyRemovedObj.AdvancedStudyRemoved += new CQG._ICQGCELEvents_AdvancedStudyRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAdvancedStudyResolved(QueryInfo query, object[] args)
            {
                CQGCEL AdvancedStudyResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyResolvedObj.AdvancedStudyResolved += new CQG._ICQGCELEvents_AdvancedStudyResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyResolvedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyResolvedObj.AdvancedStudyResolved += new CQG._ICQGCELEvents_AdvancedStudyResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAdvancedStudyUpdated(QueryInfo query, object[] args)
            {
                CQGCEL AdvancedStudyUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AdvancedStudyUpdatedObj.AdvancedStudyUpdated += new CQG._ICQGCELEvents_AdvancedStudyUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyUpdatedEventHandlerImpl);

                }
                else
                {
                    AdvancedStudyUpdatedObj.AdvancedStudyUpdated += new CQG._ICQGCELEvents_AdvancedStudyUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_AdvancedStudyUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAlgorithmicOrderPlaced(QueryInfo query, object[] args)
            {
                CQGCEL AlgorithmicOrderPlacedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AlgorithmicOrderPlacedObj.AlgorithmicOrderPlaced += new CQG._ICQGCELEvents_AlgorithmicOrderPlacedEventHandler(CQGEventHandlers._ICQGCELEvents_AlgorithmicOrderPlacedEventHandlerImpl);

                }
                else
                {
                    AlgorithmicOrderPlacedObj.AlgorithmicOrderPlaced += new CQG._ICQGCELEvents_AlgorithmicOrderPlacedEventHandler(CQGEventHandlers._ICQGCELEvents_AlgorithmicOrderPlacedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAlgorithmicOrderRegistrationComplete(QueryInfo query, object[] args)
            {
                CQGCEL AlgorithmicOrderRegistrationCompleteObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AlgorithmicOrderRegistrationCompleteObj.AlgorithmicOrderRegistrationComplete += new CQG._ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandler(CQGEventHandlers._ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandlerImpl);

                }
                else
                {
                    AlgorithmicOrderRegistrationCompleteObj.AlgorithmicOrderRegistrationComplete += new CQG._ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandler(CQGEventHandlers._ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAllOrdersCanceled(QueryInfo query, object[] args)
            {
                CQGCEL AllOrdersCanceledObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AllOrdersCanceledObj.AllOrdersCanceled += new CQG._ICQGCELEvents_AllOrdersCanceledEventHandler(CQGEventHandlers._ICQGCELEvents_AllOrdersCanceledEventHandlerImpl);

                }
                else
                {
                    AllOrdersCanceledObj.AllOrdersCanceled += new CQG._ICQGCELEvents_AllOrdersCanceledEventHandler(CQGEventHandlers._ICQGCELEvents_AllOrdersCanceledEventHandlerImpl);
                }
            }
            private void EventCQGCELClassAuthenticationStatusChanged(QueryInfo query, object[] args)
            {
                CQGCEL AuthenticationStatusChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    AuthenticationStatusChangedObj.AuthenticationStatusChanged += new CQG._ICQGCELEvents_AuthenticationStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_AuthenticationStatusChangedEventHandlerImpl);

                }
                else
                {
                    AuthenticationStatusChangedObj.AuthenticationStatusChanged += new CQG._ICQGCELEvents_AuthenticationStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_AuthenticationStatusChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassBarsTimestampsResolved(QueryInfo query, object[] args)
            {
                CQGCEL BarsTimestampsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    BarsTimestampsResolvedObj.BarsTimestampsResolved += new CQG._ICQGCELEvents_BarsTimestampsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_BarsTimestampsResolvedEventHandlerImpl);

                }
                else
                {
                    BarsTimestampsResolvedObj.BarsTimestampsResolved += new CQG._ICQGCELEvents_BarsTimestampsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_BarsTimestampsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCELStarted(QueryInfo query, object[] args)
            {
                CQGCEL CELStartedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CELStartedObj.CELStarted += new CQG._ICQGCELEvents_CELStartedEventHandler(CQGEventHandlers._ICQGCELEvents_CELStartedEventHandlerImpl);

                }
                else
                {
                    CELStartedObj.CELStarted += new CQG._ICQGCELEvents_CELStartedEventHandler(CQGEventHandlers._ICQGCELEvents_CELStartedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCommodityInstrumentsResolved(QueryInfo query, object[] args)
            {
                CQGCEL CommodityInstrumentsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved += new CQG._ICQGCELEvents_CommodityInstrumentsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CommodityInstrumentsResolvedEventHandlerImpl);

                }
                else
                {
                    CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved += new CQG._ICQGCELEvents_CommodityInstrumentsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CommodityInstrumentsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConditionAdded(QueryInfo query, object[] args)
            {
                CQGCEL ConditionAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionAddedObj.ConditionAdded += new CQG._ICQGCELEvents_ConditionAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionAddedEventHandlerImpl);

                }
                else
                {
                    ConditionAddedObj.ConditionAdded += new CQG._ICQGCELEvents_ConditionAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConditionDefinitionsResolved(QueryInfo query, object[] args)
            {
                CQGCEL ConditionDefinitionsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionDefinitionsResolvedObj.ConditionDefinitionsResolved += new CQG._ICQGCELEvents_ConditionDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    ConditionDefinitionsResolvedObj.ConditionDefinitionsResolved += new CQG._ICQGCELEvents_ConditionDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConditionInserted(QueryInfo query, object[] args)
            {
                CQGCEL ConditionInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionInsertedObj.ConditionInserted += new CQG._ICQGCELEvents_ConditionInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionInsertedEventHandlerImpl);

                }
                else
                {
                    ConditionInsertedObj.ConditionInserted += new CQG._ICQGCELEvents_ConditionInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConditionRemoved(QueryInfo query, object[] args)
            {
                CQGCEL ConditionRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionRemovedObj.ConditionRemoved += new CQG._ICQGCELEvents_ConditionRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionRemovedEventHandlerImpl);

                }
                else
                {
                    ConditionRemovedObj.ConditionRemoved += new CQG._ICQGCELEvents_ConditionRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConditionResolved(QueryInfo query, object[] args)
            {
                CQGCEL ConditionResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionResolvedObj.ConditionResolved += new CQG._ICQGCELEvents_ConditionResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionResolvedEventHandlerImpl);

                }
                else
                {
                    ConditionResolvedObj.ConditionResolved += new CQG._ICQGCELEvents_ConditionResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConditionUpdated(QueryInfo query, object[] args)
            {
                CQGCEL ConditionUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConditionUpdatedObj.ConditionUpdated += new CQG._ICQGCELEvents_ConditionUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionUpdatedEventHandlerImpl);

                }
                else
                {
                    ConditionUpdatedObj.ConditionUpdated += new CQG._ICQGCELEvents_ConditionUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ConditionUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConstantVolumeBarsAdded(QueryInfo query, object[] args)
            {
                CQGCEL ConstantVolumeBarsAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsAddedObj.ConstantVolumeBarsAdded += new CQG._ICQGCELEvents_ConstantVolumeBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsAddedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsAddedObj.ConstantVolumeBarsAdded += new CQG._ICQGCELEvents_ConstantVolumeBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConstantVolumeBarsInserted(QueryInfo query, object[] args)
            {
                CQGCEL ConstantVolumeBarsInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsInsertedObj.ConstantVolumeBarsInserted += new CQG._ICQGCELEvents_ConstantVolumeBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsInsertedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsInsertedObj.ConstantVolumeBarsInserted += new CQG._ICQGCELEvents_ConstantVolumeBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConstantVolumeBarsRemoved(QueryInfo query, object[] args)
            {
                CQGCEL ConstantVolumeBarsRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsRemovedObj.ConstantVolumeBarsRemoved += new CQG._ICQGCELEvents_ConstantVolumeBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsRemovedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsRemovedObj.ConstantVolumeBarsRemoved += new CQG._ICQGCELEvents_ConstantVolumeBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConstantVolumeBarsResolved(QueryInfo query, object[] args)
            {
                CQGCEL ConstantVolumeBarsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsResolvedObj.ConstantVolumeBarsResolved += new CQG._ICQGCELEvents_ConstantVolumeBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsResolvedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsResolvedObj.ConstantVolumeBarsResolved += new CQG._ICQGCELEvents_ConstantVolumeBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassConstantVolumeBarsUpdated(QueryInfo query, object[] args)
            {
                CQGCEL ConstantVolumeBarsUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ConstantVolumeBarsUpdatedObj.ConstantVolumeBarsUpdated += new CQG._ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    ConstantVolumeBarsUpdatedObj.ConstantVolumeBarsUpdated += new CQG._ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCurrencyRatesChanged(QueryInfo query, object[] args)
            {
                CQGCEL CurrencyRatesChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CurrencyRatesChangedObj.CurrencyRatesChanged += new CQG._ICQGCELEvents_CurrencyRatesChangedEventHandler(CQGEventHandlers._ICQGCELEvents_CurrencyRatesChangedEventHandlerImpl);

                }
                else
                {
                    CurrencyRatesChangedObj.CurrencyRatesChanged += new CQG._ICQGCELEvents_CurrencyRatesChangedEventHandler(CQGEventHandlers._ICQGCELEvents_CurrencyRatesChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCustomSessionsResolved(QueryInfo query, object[] args)
            {
                CQGCEL CustomSessionsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomSessionsResolvedObj.CustomSessionsResolved += new CQG._ICQGCELEvents_CustomSessionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomSessionsResolvedEventHandlerImpl);

                }
                else
                {
                    CustomSessionsResolvedObj.CustomSessionsResolved += new CQG._ICQGCELEvents_CustomSessionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomSessionsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCustomStudyAdded(QueryInfo query, object[] args)
            {
                CQGCEL CustomStudyAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyAddedObj.CustomStudyAdded += new CQG._ICQGCELEvents_CustomStudyAddedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyAddedEventHandlerImpl);

                }
                else
                {
                    CustomStudyAddedObj.CustomStudyAdded += new CQG._ICQGCELEvents_CustomStudyAddedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCustomStudyDefinitionsResolved(QueryInfo query, object[] args)
            {
                CQGCEL CustomStudyDefinitionsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyDefinitionsResolvedObj.CustomStudyDefinitionsResolved += new CQG._ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    CustomStudyDefinitionsResolvedObj.CustomStudyDefinitionsResolved += new CQG._ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCustomStudyInserted(QueryInfo query, object[] args)
            {
                CQGCEL CustomStudyInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyInsertedObj.CustomStudyInserted += new CQG._ICQGCELEvents_CustomStudyInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyInsertedEventHandlerImpl);

                }
                else
                {
                    CustomStudyInsertedObj.CustomStudyInserted += new CQG._ICQGCELEvents_CustomStudyInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCustomStudyRemoved(QueryInfo query, object[] args)
            {
                CQGCEL CustomStudyRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyRemovedObj.CustomStudyRemoved += new CQG._ICQGCELEvents_CustomStudyRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyRemovedEventHandlerImpl);

                }
                else
                {
                    CustomStudyRemovedObj.CustomStudyRemoved += new CQG._ICQGCELEvents_CustomStudyRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCustomStudyResolved(QueryInfo query, object[] args)
            {
                CQGCEL CustomStudyResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyResolvedObj.CustomStudyResolved += new CQG._ICQGCELEvents_CustomStudyResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyResolvedEventHandlerImpl);

                }
                else
                {
                    CustomStudyResolvedObj.CustomStudyResolved += new CQG._ICQGCELEvents_CustomStudyResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassCustomStudyUpdated(QueryInfo query, object[] args)
            {
                CQGCEL CustomStudyUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CustomStudyUpdatedObj.CustomStudyUpdated += new CQG._ICQGCELEvents_CustomStudyUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyUpdatedEventHandlerImpl);

                }
                else
                {
                    CustomStudyUpdatedObj.CustomStudyUpdated += new CQG._ICQGCELEvents_CustomStudyUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_CustomStudyUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassDataConnectionStatusChanged(QueryInfo query, object[] args)
            {
                CQGCEL DataConnectionStatusChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataConnectionStatusChangedObj.DataConnectionStatusChanged += new CQG._ICQGCELEvents_DataConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_DataConnectionStatusChangedEventHandlerImpl);

                }
                else
                {
                    DataConnectionStatusChangedObj.DataConnectionStatusChanged += new CQG._ICQGCELEvents_DataConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_DataConnectionStatusChangedEventHandlerImpl);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    // Fire this event explicitly, because data collector connects to real CQG beforehand and does not fire it anymore
                    CQGEventHandlers._ICQGCELEvents_DataConnectionStatusChangedEventHandlerImpl(CqgDataManagement.currConnStat);
                }
            }
            private void EventCQGCELClassDataError(QueryInfo query, object[] args)
            {
                CQGCEL DataErrorObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataErrorObj.DataError += new CQG._ICQGCELEvents_DataErrorEventHandler(CQGEventHandlers._ICQGCELEvents_DataErrorEventHandlerImpl);

                }
                else
                {
                    DataErrorObj.DataError += new CQG._ICQGCELEvents_DataErrorEventHandler(CQGEventHandlers._ICQGCELEvents_DataErrorEventHandlerImpl);
                }
            }
            private void EventCQGCELClassDataSourcesResolved(QueryInfo query, object[] args)
            {
                CQGCEL DataSourcesResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataSourcesResolvedObj.DataSourcesResolved += new CQG._ICQGCELEvents_DataSourcesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_DataSourcesResolvedEventHandlerImpl);

                }
                else
                {
                    DataSourcesResolvedObj.DataSourcesResolved += new CQG._ICQGCELEvents_DataSourcesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_DataSourcesResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassDataSourceSymbolsResolved(QueryInfo query, object[] args)
            {
                CQGCEL DataSourceSymbolsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    DataSourceSymbolsResolvedObj.DataSourceSymbolsResolved += new CQG._ICQGCELEvents_DataSourceSymbolsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_DataSourceSymbolsResolvedEventHandlerImpl);

                }
                else
                {
                    DataSourceSymbolsResolvedObj.DataSourceSymbolsResolved += new CQG._ICQGCELEvents_DataSourceSymbolsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_DataSourceSymbolsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassExpressionAdded(QueryInfo query, object[] args)
            {
                CQGCEL ExpressionAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionAddedObj.ExpressionAdded += new CQG._ICQGCELEvents_ExpressionAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionAddedEventHandlerImpl);

                }
                else
                {
                    ExpressionAddedObj.ExpressionAdded += new CQG._ICQGCELEvents_ExpressionAddedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassExpressionInserted(QueryInfo query, object[] args)
            {
                CQGCEL ExpressionInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionInsertedObj.ExpressionInserted += new CQG._ICQGCELEvents_ExpressionInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionInsertedEventHandlerImpl);

                }
                else
                {
                    ExpressionInsertedObj.ExpressionInserted += new CQG._ICQGCELEvents_ExpressionInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassExpressionRemoved(QueryInfo query, object[] args)
            {
                CQGCEL ExpressionRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionRemovedObj.ExpressionRemoved += new CQG._ICQGCELEvents_ExpressionRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionRemovedEventHandlerImpl);

                }
                else
                {
                    ExpressionRemovedObj.ExpressionRemoved += new CQG._ICQGCELEvents_ExpressionRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassExpressionResolved(QueryInfo query, object[] args)
            {
                CQGCEL ExpressionResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionResolvedObj.ExpressionResolved += new CQG._ICQGCELEvents_ExpressionResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionResolvedEventHandlerImpl);

                }
                else
                {
                    ExpressionResolvedObj.ExpressionResolved += new CQG._ICQGCELEvents_ExpressionResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassExpressionUpdated(QueryInfo query, object[] args)
            {
                CQGCEL ExpressionUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ExpressionUpdatedObj.ExpressionUpdated += new CQG._ICQGCELEvents_ExpressionUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionUpdatedEventHandlerImpl);

                }
                else
                {
                    ExpressionUpdatedObj.ExpressionUpdated += new CQG._ICQGCELEvents_ExpressionUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_ExpressionUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassGWConnectionStatusChanged(QueryInfo query, object[] args)
            {
                CQGCEL GWConnectionStatusChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    GWConnectionStatusChangedObj.GWConnectionStatusChanged += new CQG._ICQGCELEvents_GWConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_GWConnectionStatusChangedEventHandlerImpl);

                }
                else
                {
                    GWConnectionStatusChangedObj.GWConnectionStatusChanged += new CQG._ICQGCELEvents_GWConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_GWConnectionStatusChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassGWEnvironmentChanged(QueryInfo query, object[] args)
            {
                CQGCEL GWEnvironmentChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    GWEnvironmentChangedObj.GWEnvironmentChanged += new CQG._ICQGCELEvents_GWEnvironmentChangedEventHandler(CQGEventHandlers._ICQGCELEvents_GWEnvironmentChangedEventHandlerImpl);

                }
                else
                {
                    GWEnvironmentChangedObj.GWEnvironmentChanged += new CQG._ICQGCELEvents_GWEnvironmentChangedEventHandler(CQGEventHandlers._ICQGCELEvents_GWEnvironmentChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassHistoricalSessionsResolved(QueryInfo query, object[] args)
            {
                CQGCEL HistoricalSessionsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    HistoricalSessionsResolvedObj.HistoricalSessionsResolved += new CQG._ICQGCELEvents_HistoricalSessionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_HistoricalSessionsResolvedEventHandlerImpl);

                }
                else
                {
                    HistoricalSessionsResolvedObj.HistoricalSessionsResolved += new CQG._ICQGCELEvents_HistoricalSessionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_HistoricalSessionsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassICConnectionStatusChanged(QueryInfo query, object[] args)
            {
                CQGCEL ICConnectionStatusChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ICConnectionStatusChangedObj.ICConnectionStatusChanged += new CQG._ICQGCELEvents_ICConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_ICConnectionStatusChangedEventHandlerImpl);

                }
                else
                {
                    ICConnectionStatusChangedObj.ICConnectionStatusChanged += new CQG._ICQGCELEvents_ICConnectionStatusChangedEventHandler(CQGEventHandlers._ICQGCELEvents_ICConnectionStatusChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassIncorrectSymbol(QueryInfo query, object[] args)
            {
                CQGCEL IncorrectSymbolObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    IncorrectSymbolObj.IncorrectSymbol += new CQG._ICQGCELEvents_IncorrectSymbolEventHandler(CQGEventHandlers._ICQGCELEvents_IncorrectSymbolEventHandlerImpl);

                }
                else
                {
                    IncorrectSymbolObj.IncorrectSymbol += new CQG._ICQGCELEvents_IncorrectSymbolEventHandler(CQGEventHandlers._ICQGCELEvents_IncorrectSymbolEventHandlerImpl);
                }
            }
            private void EventCQGCELClassInstrumentChanged(QueryInfo query, object[] args)
            {
                CQGCEL InstrumentChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentChangedObj.InstrumentChanged += new CQG._ICQGCELEvents_InstrumentChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentChangedObj.InstrumentChanged += new CQG._ICQGCELEvents_InstrumentChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassInstrumentDOMChanged(QueryInfo query, object[] args)
            {
                CQGCEL InstrumentDOMChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentDOMChangedObj.InstrumentDOMChanged += new CQG._ICQGCELEvents_InstrumentDOMChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentDOMChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentDOMChangedObj.InstrumentDOMChanged += new CQG._ICQGCELEvents_InstrumentDOMChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentDOMChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassInstrumentsGroupChanged(QueryInfo query, object[] args)
            {
                CQGCEL InstrumentsGroupChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentsGroupChangedObj.InstrumentsGroupChanged += new CQG._ICQGCELEvents_InstrumentsGroupChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentsGroupChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentsGroupChangedObj.InstrumentsGroupChanged += new CQG._ICQGCELEvents_InstrumentsGroupChangedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentsGroupChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassInstrumentsGroupResolved(QueryInfo query, object[] args)
            {
                CQGCEL InstrumentsGroupResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentsGroupResolvedObj.InstrumentsGroupResolved += new CQG._ICQGCELEvents_InstrumentsGroupResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentsGroupResolvedEventHandlerImpl);

                }
                else
                {
                    InstrumentsGroupResolvedObj.InstrumentsGroupResolved += new CQG._ICQGCELEvents_InstrumentsGroupResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentsGroupResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassInstrumentSubscribed(QueryInfo query, object[] args)
            {
                CQGCEL InstrumentSubscribedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentSubscribedObj.InstrumentSubscribed += new CQG._ICQGCELEvents_InstrumentSubscribedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentSubscribedEventHandlerImpl);

                }
                else
                {
                    InstrumentSubscribedObj.InstrumentSubscribed += new CQG._ICQGCELEvents_InstrumentSubscribedEventHandler(CQGEventHandlers._ICQGCELEvents_InstrumentSubscribedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassLineTimeChanged(QueryInfo query, object[] args)
            {
                CQGCEL LineTimeChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    LineTimeChangedObj.LineTimeChanged += new CQG._ICQGCELEvents_LineTimeChangedEventHandler(CQGEventHandlers._ICQGCELEvents_LineTimeChangedEventHandlerImpl);

                }
                else
                {
                    LineTimeChangedObj.LineTimeChanged += new CQG._ICQGCELEvents_LineTimeChangedEventHandler(CQGEventHandlers._ICQGCELEvents_LineTimeChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassManualFillChanged(QueryInfo query, object[] args)
            {
                CQGCEL ManualFillChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ManualFillChangedObj.ManualFillChanged += new CQG._ICQGCELEvents_ManualFillChangedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillChangedEventHandlerImpl);

                }
                else
                {
                    ManualFillChangedObj.ManualFillChanged += new CQG._ICQGCELEvents_ManualFillChangedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassManualFillsResolved(QueryInfo query, object[] args)
            {
                CQGCEL ManualFillsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ManualFillsResolvedObj.ManualFillsResolved += new CQG._ICQGCELEvents_ManualFillsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillsResolvedEventHandlerImpl);

                }
                else
                {
                    ManualFillsResolvedObj.ManualFillsResolved += new CQG._ICQGCELEvents_ManualFillsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassManualFillUpdateResolved(QueryInfo query, object[] args)
            {
                CQGCEL ManualFillUpdateResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    ManualFillUpdateResolvedObj.ManualFillUpdateResolved += new CQG._ICQGCELEvents_ManualFillUpdateResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillUpdateResolvedEventHandlerImpl);

                }
                else
                {
                    ManualFillUpdateResolvedObj.ManualFillUpdateResolved += new CQG._ICQGCELEvents_ManualFillUpdateResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_ManualFillUpdateResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassOnIdle(QueryInfo query, object[] args)
            {
                CQGCEL OnIdleObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    OnIdleObj.OnIdle += new CQG._ICQGCELEvents_OnIdleEventHandler(CQGEventHandlers._ICQGCELEvents_OnIdleEventHandlerImpl);

                }
                else
                {
                    OnIdleObj.OnIdle += new CQG._ICQGCELEvents_OnIdleEventHandler(CQGEventHandlers._ICQGCELEvents_OnIdleEventHandlerImpl);
                }
            }
            private void EventCQGCELClassOnQueryProgress(QueryInfo query, object[] args)
            {
                CQGCEL OnQueryProgressObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    OnQueryProgressObj.OnQueryProgress += new CQG._ICQGCELEvents_OnQueryProgressEventHandler(CQGEventHandlers._ICQGCELEvents_OnQueryProgressEventHandlerImpl);

                }
                else
                {
                    OnQueryProgressObj.OnQueryProgress += new CQG._ICQGCELEvents_OnQueryProgressEventHandler(CQGEventHandlers._ICQGCELEvents_OnQueryProgressEventHandlerImpl);
                }
            }
            private void EventCQGCELClassOrderChanged(QueryInfo query, object[] args)
            {
                CQGCEL OrderChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    OrderChangedObj.OrderChanged += new CQG._ICQGCELEvents_OrderChangedEventHandler(CQGEventHandlers._ICQGCELEvents_OrderChangedEventHandlerImpl);

                }
                else
                {
                    OrderChangedObj.OrderChanged += new CQG._ICQGCELEvents_OrderChangedEventHandler(CQGEventHandlers._ICQGCELEvents_OrderChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassPasswordChanged(QueryInfo query, object[] args)
            {
                CQGCEL PasswordChangedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PasswordChangedObj.PasswordChanged += new CQG._ICQGCELEvents_PasswordChangedEventHandler(CQGEventHandlers._ICQGCELEvents_PasswordChangedEventHandlerImpl);

                }
                else
                {
                    PasswordChangedObj.PasswordChanged += new CQG._ICQGCELEvents_PasswordChangedEventHandler(CQGEventHandlers._ICQGCELEvents_PasswordChangedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassPointAndFigureBarsAdded(QueryInfo query, object[] args)
            {
                CQGCEL PointAndFigureBarsAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsAddedObj.PointAndFigureBarsAdded += new CQG._ICQGCELEvents_PointAndFigureBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsAddedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsAddedObj.PointAndFigureBarsAdded += new CQG._ICQGCELEvents_PointAndFigureBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassPointAndFigureBarsInserted(QueryInfo query, object[] args)
            {
                CQGCEL PointAndFigureBarsInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsInsertedObj.PointAndFigureBarsInserted += new CQG._ICQGCELEvents_PointAndFigureBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsInsertedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsInsertedObj.PointAndFigureBarsInserted += new CQG._ICQGCELEvents_PointAndFigureBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassPointAndFigureBarsRemoved(QueryInfo query, object[] args)
            {
                CQGCEL PointAndFigureBarsRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsRemovedObj.PointAndFigureBarsRemoved += new CQG._ICQGCELEvents_PointAndFigureBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsRemovedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsRemovedObj.PointAndFigureBarsRemoved += new CQG._ICQGCELEvents_PointAndFigureBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassPointAndFigureBarsResolved(QueryInfo query, object[] args)
            {
                CQGCEL PointAndFigureBarsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsResolvedObj.PointAndFigureBarsResolved += new CQG._ICQGCELEvents_PointAndFigureBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsResolvedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsResolvedObj.PointAndFigureBarsResolved += new CQG._ICQGCELEvents_PointAndFigureBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassPointAndFigureBarsUpdated(QueryInfo query, object[] args)
            {
                CQGCEL PointAndFigureBarsUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PointAndFigureBarsUpdatedObj.PointAndFigureBarsUpdated += new CQG._ICQGCELEvents_PointAndFigureBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    PointAndFigureBarsUpdatedObj.PointAndFigureBarsUpdated += new CQG._ICQGCELEvents_PointAndFigureBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_PointAndFigureBarsUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassPositionsStatementResolved(QueryInfo query, object[] args)
            {
                CQGCEL PositionsStatementResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    PositionsStatementResolvedObj.PositionsStatementResolved += new CQG._ICQGCELEvents_PositionsStatementResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_PositionsStatementResolvedEventHandlerImpl);

                }
                else
                {
                    PositionsStatementResolvedObj.PositionsStatementResolved += new CQG._ICQGCELEvents_PositionsStatementResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_PositionsStatementResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassQFormulaDefinitionsResolved(QueryInfo query, object[] args)
            {
                CQGCEL QFormulaDefinitionsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    QFormulaDefinitionsResolvedObj.QFormulaDefinitionsResolved += new CQG._ICQGCELEvents_QFormulaDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_QFormulaDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    QFormulaDefinitionsResolvedObj.QFormulaDefinitionsResolved += new CQG._ICQGCELEvents_QFormulaDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_QFormulaDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassStrategyDefinitionProgress(QueryInfo query, object[] args)
            {
                CQGCEL StrategyDefinitionProgressObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    StrategyDefinitionProgressObj.StrategyDefinitionProgress += new CQG._ICQGCELEvents_StrategyDefinitionProgressEventHandler(CQGEventHandlers._ICQGCELEvents_StrategyDefinitionProgressEventHandlerImpl);

                }
                else
                {
                    StrategyDefinitionProgressObj.StrategyDefinitionProgress += new CQG._ICQGCELEvents_StrategyDefinitionProgressEventHandler(CQGEventHandlers._ICQGCELEvents_StrategyDefinitionProgressEventHandlerImpl);
                }
            }
            private void EventCQGCELClassSubMinuteBarsAdded(QueryInfo query, object[] args)
            {
                CQGCEL SubMinuteBarsAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsAddedObj.SubMinuteBarsAdded += new CQG._ICQGCELEvents_SubMinuteBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsAddedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsAddedObj.SubMinuteBarsAdded += new CQG._ICQGCELEvents_SubMinuteBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassSubMinuteBarsInserted(QueryInfo query, object[] args)
            {
                CQGCEL SubMinuteBarsInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsInsertedObj.SubMinuteBarsInserted += new CQG._ICQGCELEvents_SubMinuteBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsInsertedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsInsertedObj.SubMinuteBarsInserted += new CQG._ICQGCELEvents_SubMinuteBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassSubMinuteBarsRemoved(QueryInfo query, object[] args)
            {
                CQGCEL SubMinuteBarsRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsRemovedObj.SubMinuteBarsRemoved += new CQG._ICQGCELEvents_SubMinuteBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsRemovedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsRemovedObj.SubMinuteBarsRemoved += new CQG._ICQGCELEvents_SubMinuteBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassSubMinuteBarsResolved(QueryInfo query, object[] args)
            {
                CQGCEL SubMinuteBarsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsResolvedObj.SubMinuteBarsResolved += new CQG._ICQGCELEvents_SubMinuteBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsResolvedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsResolvedObj.SubMinuteBarsResolved += new CQG._ICQGCELEvents_SubMinuteBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassSubMinuteBarsUpdated(QueryInfo query, object[] args)
            {
                CQGCEL SubMinuteBarsUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SubMinuteBarsUpdatedObj.SubMinuteBarsUpdated += new CQG._ICQGCELEvents_SubMinuteBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    SubMinuteBarsUpdatedObj.SubMinuteBarsUpdated += new CQG._ICQGCELEvents_SubMinuteBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_SubMinuteBarsUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassSummariesStatementResolved(QueryInfo query, object[] args)
            {
                CQGCEL SummariesStatementResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    SummariesStatementResolvedObj.SummariesStatementResolved += new CQG._ICQGCELEvents_SummariesStatementResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_SummariesStatementResolvedEventHandlerImpl);

                }
                else
                {
                    SummariesStatementResolvedObj.SummariesStatementResolved += new CQG._ICQGCELEvents_SummariesStatementResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_SummariesStatementResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTFlowBarsAdded(QueryInfo query, object[] args)
            {
                CQGCEL TFlowBarsAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsAddedObj.TFlowBarsAdded += new CQG._ICQGCELEvents_TFlowBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsAddedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsAddedObj.TFlowBarsAdded += new CQG._ICQGCELEvents_TFlowBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTFlowBarsInserted(QueryInfo query, object[] args)
            {
                CQGCEL TFlowBarsInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsInsertedObj.TFlowBarsInserted += new CQG._ICQGCELEvents_TFlowBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsInsertedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsInsertedObj.TFlowBarsInserted += new CQG._ICQGCELEvents_TFlowBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTFlowBarsRemoved(QueryInfo query, object[] args)
            {
                CQGCEL TFlowBarsRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsRemovedObj.TFlowBarsRemoved += new CQG._ICQGCELEvents_TFlowBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsRemovedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsRemovedObj.TFlowBarsRemoved += new CQG._ICQGCELEvents_TFlowBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTFlowBarsResolved(QueryInfo query, object[] args)
            {
                CQGCEL TFlowBarsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsResolvedObj.TFlowBarsResolved += new CQG._ICQGCELEvents_TFlowBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsResolvedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsResolvedObj.TFlowBarsResolved += new CQG._ICQGCELEvents_TFlowBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTFlowBarsUpdated(QueryInfo query, object[] args)
            {
                CQGCEL TFlowBarsUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TFlowBarsUpdatedObj.TFlowBarsUpdated += new CQG._ICQGCELEvents_TFlowBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    TFlowBarsUpdatedObj.TFlowBarsUpdated += new CQG._ICQGCELEvents_TFlowBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_TFlowBarsUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTicksAdded(QueryInfo query, object[] args)
            {
                CQGCEL TicksAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TicksAddedObj.TicksAdded += new CQG._ICQGCELEvents_TicksAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TicksAddedEventHandlerImpl);

                }
                else
                {
                    TicksAddedObj.TicksAdded += new CQG._ICQGCELEvents_TicksAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TicksAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTicksResolved(QueryInfo query, object[] args)
            {
                CQGCEL TicksResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TicksResolvedObj.TicksResolved += new CQG._ICQGCELEvents_TicksResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TicksResolvedEventHandlerImpl);

                }
                else
                {
                    TicksResolvedObj.TicksResolved += new CQG._ICQGCELEvents_TicksResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TicksResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTimedBarsAdded(QueryInfo query, object[] args)
            {
                CQGCEL TimedBarsAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsAddedObj.TimedBarsAdded += new CQG._ICQGCELEvents_TimedBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsAddedEventHandlerImpl);

                }
                else
                {
                    TimedBarsAddedObj.TimedBarsAdded += new CQG._ICQGCELEvents_TimedBarsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTimedBarsInserted(QueryInfo query, object[] args)
            {
                CQGCEL TimedBarsInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsInsertedObj.TimedBarsInserted += new CQG._ICQGCELEvents_TimedBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsInsertedEventHandlerImpl);

                }
                else
                {
                    TimedBarsInsertedObj.TimedBarsInserted += new CQG._ICQGCELEvents_TimedBarsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTimedBarsRemoved(QueryInfo query, object[] args)
            {
                CQGCEL TimedBarsRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsRemovedObj.TimedBarsRemoved += new CQG._ICQGCELEvents_TimedBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsRemovedEventHandlerImpl);

                }
                else
                {
                    TimedBarsRemovedObj.TimedBarsRemoved += new CQG._ICQGCELEvents_TimedBarsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTimedBarsResolved(QueryInfo query, object[] args)
            {
                CQGCEL TimedBarsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsResolvedObj.TimedBarsResolved += new CQG._ICQGCELEvents_TimedBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsResolvedEventHandlerImpl);

                }
                else
                {
                    TimedBarsResolvedObj.TimedBarsResolved += new CQG._ICQGCELEvents_TimedBarsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTimedBarsUpdated(QueryInfo query, object[] args)
            {
                CQGCEL TimedBarsUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TimedBarsUpdatedObj.TimedBarsUpdated += new CQG._ICQGCELEvents_TimedBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsUpdatedEventHandlerImpl);

                }
                else
                {
                    TimedBarsUpdatedObj.TimedBarsUpdated += new CQG._ICQGCELEvents_TimedBarsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_TimedBarsUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradableCommoditiesResolved(QueryInfo query, object[] args)
            {
                CQGCEL TradableCommoditiesResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradableCommoditiesResolvedObj.TradableCommoditiesResolved += new CQG._ICQGCELEvents_TradableCommoditiesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradableCommoditiesResolvedEventHandlerImpl);

                }
                else
                {
                    TradableCommoditiesResolvedObj.TradableCommoditiesResolved += new CQG._ICQGCELEvents_TradableCommoditiesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradableCommoditiesResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradableExchangesResolved(QueryInfo query, object[] args)
            {
                CQGCEL TradableExchangesResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradableExchangesResolvedObj.TradableExchangesResolved += new CQG._ICQGCELEvents_TradableExchangesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradableExchangesResolvedEventHandlerImpl);

                }
                else
                {
                    TradableExchangesResolvedObj.TradableExchangesResolved += new CQG._ICQGCELEvents_TradableExchangesResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradableExchangesResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradingSystemAddNotification(QueryInfo query, object[] args)
            {
                CQGCEL TradingSystemAddNotificationObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemAddNotificationObj.TradingSystemAddNotification += new CQG._ICQGCELEvents_TradingSystemAddNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemAddNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemAddNotificationObj.TradingSystemAddNotification += new CQG._ICQGCELEvents_TradingSystemAddNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemAddNotificationEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradingSystemDefinitionsResolved(QueryInfo query, object[] args)
            {
                CQGCEL TradingSystemDefinitionsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemDefinitionsResolvedObj.TradingSystemDefinitionsResolved += new CQG._ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandlerImpl);

                }
                else
                {
                    TradingSystemDefinitionsResolvedObj.TradingSystemDefinitionsResolved += new CQG._ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradingSystemInsertNotification(QueryInfo query, object[] args)
            {
                CQGCEL TradingSystemInsertNotificationObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemInsertNotificationObj.TradingSystemInsertNotification += new CQG._ICQGCELEvents_TradingSystemInsertNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemInsertNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemInsertNotificationObj.TradingSystemInsertNotification += new CQG._ICQGCELEvents_TradingSystemInsertNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemInsertNotificationEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradingSystemRemoveNotification(QueryInfo query, object[] args)
            {
                CQGCEL TradingSystemRemoveNotificationObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemRemoveNotificationObj.TradingSystemRemoveNotification += new CQG._ICQGCELEvents_TradingSystemRemoveNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemRemoveNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemRemoveNotificationObj.TradingSystemRemoveNotification += new CQG._ICQGCELEvents_TradingSystemRemoveNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemRemoveNotificationEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradingSystemResolved(QueryInfo query, object[] args)
            {
                CQGCEL TradingSystemResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemResolvedObj.TradingSystemResolved += new CQG._ICQGCELEvents_TradingSystemResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemResolvedEventHandlerImpl);

                }
                else
                {
                    TradingSystemResolvedObj.TradingSystemResolved += new CQG._ICQGCELEvents_TradingSystemResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradingSystemTradeRelationAddNotification(QueryInfo query, object[] args)
            {
                CQGCEL TradingSystemTradeRelationAddNotificationObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemTradeRelationAddNotificationObj.TradingSystemTradeRelationAddNotification += new CQG._ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemTradeRelationAddNotificationObj.TradingSystemTradeRelationAddNotification += new CQG._ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandlerImpl);
                }
            }
            private void EventCQGCELClassTradingSystemUpdateNotification(QueryInfo query, object[] args)
            {
                CQGCEL TradingSystemUpdateNotificationObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    TradingSystemUpdateNotificationObj.TradingSystemUpdateNotification += new CQG._ICQGCELEvents_TradingSystemUpdateNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemUpdateNotificationEventHandlerImpl);

                }
                else
                {
                    TradingSystemUpdateNotificationObj.TradingSystemUpdateNotification += new CQG._ICQGCELEvents_TradingSystemUpdateNotificationEventHandler(CQGEventHandlers._ICQGCELEvents_TradingSystemUpdateNotificationEventHandlerImpl);
                }
            }
            private void EventCQGCELClassYieldsAdded(QueryInfo query, object[] args)
            {
                CQGCEL YieldsAddedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsAddedObj.YieldsAdded += new CQG._ICQGCELEvents_YieldsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsAddedEventHandlerImpl);

                }
                else
                {
                    YieldsAddedObj.YieldsAdded += new CQG._ICQGCELEvents_YieldsAddedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsAddedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassYieldsInserted(QueryInfo query, object[] args)
            {
                CQGCEL YieldsInsertedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsInsertedObj.YieldsInserted += new CQG._ICQGCELEvents_YieldsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsInsertedEventHandlerImpl);

                }
                else
                {
                    YieldsInsertedObj.YieldsInserted += new CQG._ICQGCELEvents_YieldsInsertedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsInsertedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassYieldsRemoved(QueryInfo query, object[] args)
            {
                CQGCEL YieldsRemovedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsRemovedObj.YieldsRemoved += new CQG._ICQGCELEvents_YieldsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsRemovedEventHandlerImpl);

                }
                else
                {
                    YieldsRemovedObj.YieldsRemoved += new CQG._ICQGCELEvents_YieldsRemovedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsRemovedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassYieldsResolved(QueryInfo query, object[] args)
            {
                CQGCEL YieldsResolvedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsResolvedObj.YieldsResolved += new CQG._ICQGCELEvents_YieldsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsResolvedEventHandlerImpl);

                }
                else
                {
                    YieldsResolvedObj.YieldsResolved += new CQG._ICQGCELEvents_YieldsResolvedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGCELClassYieldsUpdated(QueryInfo query, object[] args)
            {
                CQGCEL YieldsUpdatedObj = (CQGCEL)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    YieldsUpdatedObj.YieldsUpdated += new CQG._ICQGCELEvents_YieldsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsUpdatedEventHandlerImpl);

                }
                else
                {
                    YieldsUpdatedObj.YieldsUpdated += new CQG._ICQGCELEvents_YieldsUpdatedEventHandler(CQGEventHandlers._ICQGCELEvents_YieldsUpdatedEventHandlerImpl);
                }
            }
            private void EventCQGDirectEventsAccessorClassCommodityInstrumentsResolved(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor CommodityInstrumentsResolvedObj = (CQGDirectEventsAccessor)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved += new CQG._ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandlerImpl);

                }
                else
                {
                    CommodityInstrumentsResolvedObj.CommodityInstrumentsResolved += new CQG._ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandlerImpl);
                }
            }
            private void EventCQGDirectEventsAccessorClassIncorrectSymbol(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor IncorrectSymbolObj = (CQGDirectEventsAccessor)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    IncorrectSymbolObj.IncorrectSymbol += new CQG._ICQGCELInstrumentEvents_IncorrectSymbolEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_IncorrectSymbolEventHandlerImpl);

                }
                else
                {
                    IncorrectSymbolObj.IncorrectSymbol += new CQG._ICQGCELInstrumentEvents_IncorrectSymbolEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_IncorrectSymbolEventHandlerImpl);
                }
            }
            private void EventCQGDirectEventsAccessorClassInstrumentChanged(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor InstrumentChangedObj = (CQGDirectEventsAccessor)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentChangedObj.InstrumentChanged += new CQG._ICQGCELInstrumentEvents_InstrumentChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentChangedObj.InstrumentChanged += new CQG._ICQGCELInstrumentEvents_InstrumentChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentChangedEventHandlerImpl);
                }
            }
            private void EventCQGDirectEventsAccessorClassInstrumentDOMChanged(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor InstrumentDOMChangedObj = (CQGDirectEventsAccessor)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentDOMChangedObj.InstrumentDOMChanged += new CQG._ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentDOMChangedObj.InstrumentDOMChanged += new CQG._ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandlerImpl);
                }
            }
            private void EventCQGDirectEventsAccessorClassInstrumentsGroupChanged(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor InstrumentsGroupChangedObj = (CQGDirectEventsAccessor)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentsGroupChangedObj.InstrumentsGroupChanged += new CQG._ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandlerImpl);

                }
                else
                {
                    InstrumentsGroupChangedObj.InstrumentsGroupChanged += new CQG._ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandlerImpl);
                }
            }
            private void EventCQGDirectEventsAccessorClassInstrumentsGroupResolved(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor InstrumentsGroupResolvedObj = (CQGDirectEventsAccessor)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentsGroupResolvedObj.InstrumentsGroupResolved += new CQG._ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandlerImpl);

                }
                else
                {
                    InstrumentsGroupResolvedObj.InstrumentsGroupResolved += new CQG._ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandlerImpl);
                }
            }
            private void EventCQGDirectEventsAccessorClassInstrumentSubscribed(QueryInfo query, object[] args)
            {
                CQGDirectEventsAccessor InstrumentSubscribedObj = (CQGDirectEventsAccessor)qObj;
                if (EventHandler.EventAppsSubscribersNum.ContainsKey(query.MemberName))
                {
                    EventHandler.EventAppsSubscribersNum[query.MemberName] =
                    query.QueryType == QueryType.SubscribeToEvent ?
                    EventHandler.EventAppsSubscribersNum[query.MemberName] + 1 :
                    EventHandler.EventAppsSubscribersNum[query.MemberName] - 1;
                }
                else
                {
                    EventHandler.EventAppsSubscribersNum.Add(query.MemberName, 1);
                }
                if (query.QueryType == QueryType.SubscribeToEvent)
                {
                    InstrumentSubscribedObj.InstrumentSubscribed += new CQG._ICQGCELInstrumentEvents_InstrumentSubscribedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentSubscribedEventHandlerImpl);

                }
                else
                {
                    InstrumentSubscribedObj.InstrumentSubscribed += new CQG._ICQGCELInstrumentEvents_InstrumentSubscribedEventHandler(CQGEventHandlers._ICQGCELInstrumentEvents_InstrumentSubscribedEventHandlerImpl);
                }
            }
    }
}
