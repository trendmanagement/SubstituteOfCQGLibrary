// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
// WARNING                                                                         WARNING
// WARNING    THIS .CS FILE WAS AUTOGENERATED!                                     WARNING
// WARNING    DO NOT EDIT IT BY HAND, BECAUSE ALL YOUR CHANGES WILL BE LOST!       WARNING
// WARNING    MAKE ALL CHANGES DIRECTLY TO THE FILE GENERATOR CODE!                WARNING
// WARNING                                                                         WARNING
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

// Disable two warnings caused by CQG API specific:
// CS3003: Type of 'variable' is not CLS-compliant
// CS3008: Identifier 'identifier' differing only in case is not CLS-compliant
#pragma warning disable 3003, 3008

using CQG;
using FakeCQG.Internal;
using FakeCQG.Internal.Models;
using MongoDB.Driver;

namespace DataCollectionForRealtime
{
    partial class QueryHandler
    {
        public void AutoGenQueryProcessing(QueryInfo query)
        {
            object qObj = ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
            string qObjType = qObj.GetType().ToString();
            object[] args = Core.ParseInputArgsFromQueryInfo(query);
            switch (query.QueryType)
            {
                case QueryType.GetProperty:
                    switch (qObjType)
                    {
                        case "CQG.CQGAccountClass":
                            switch (query.MemberName)
                            {
                            case "AccountMarginDetailing":
                                CQGAccount AccountMarginDetailingObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eAccountMarginDetailing AccountMarginDetailingpropV = AccountMarginDetailingObj.AccountMarginDetailing;
                                var AccountMarginDetailingPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountMarginDetailingPropKey, value: AccountMarginDetailingpropV));
                                break;
                            case "AuthorizedTraders":
                                CQGAccount AuthorizedTradersObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStringCollection AuthorizedTraderspropV = AuthorizedTradersObj.AuthorizedTraders;
                                var AuthorizedTradersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AuthorizedTradersPropKey, AuthorizedTraderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AuthorizedTradersPropKey));
                                break;
                            case "AutoSubscribeInstruments":
                                CQGAccount AutoSubscribeInstrumentsObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean AutoSubscribeInstrumentspropV = AutoSubscribeInstrumentsObj.AutoSubscribeInstruments;
                                var AutoSubscribeInstrumentsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AutoSubscribeInstrumentsPropKey, value: AutoSubscribeInstrumentspropV));
                                break;
                            case "CEL":
                                CQGAccount CELObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCEL CELpropV = CELObj.CEL;
                                var CELPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
                                break;
                            case "CurrencySummaries":
                                CQGAccount CurrencySummariesObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccountSummaries CurrencySummariespropV = CurrencySummariesObj.CurrencySummaries;
                                var CurrencySummariesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CurrencySummariesPropKey, CurrencySummariespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencySummariesPropKey));
                                break;
                            case "DateOfLastStatement":
                                CQGAccount DateOfLastStatementObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime DateOfLastStatementpropV = DateOfLastStatementObj.DateOfLastStatement;
                                var DateOfLastStatementPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DateOfLastStatementPropKey, value: DateOfLastStatementpropV));
                                break;
                            case "FcmAccountID":
                                CQGAccount FcmAccountIDObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String FcmAccountIDpropV = FcmAccountIDObj.FcmAccountID;
                                var FcmAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmAccountIDPropKey, value: FcmAccountIDpropV));
                                break;
                            case "FcmClass":
                                CQGAccount FcmClassObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eFcmClass FcmClasspropV = FcmClassObj.FcmClass;
                                var FcmClassPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmClassPropKey, value: FcmClasspropV));
                                break;
                            case "FcmID":
                                CQGAccount FcmIDObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 FcmIDpropV = FcmIDObj.FcmID;
                                var FcmIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmIDPropKey, value: FcmIDpropV));
                                break;
                            case "FcmName":
                                CQGAccount FcmNameObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String FcmNamepropV = FcmNameObj.FcmName;
                                var FcmNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmNamePropKey, value: FcmNamepropV));
                                break;
                            case "GWAccountID":
                                CQGAccount GWAccountIDObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "GWAccountName":
                                CQGAccount GWAccountNameObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String GWAccountNamepropV = GWAccountNameObj.GWAccountName;
                                var GWAccountNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountNamePropKey, value: GWAccountNamepropV));
                                break;
                            case "InternalOrders":
                                CQGAccount InternalOrdersObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrders InternalOrderspropV = InternalOrdersObj.InternalOrders;
                                var InternalOrdersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InternalOrdersPropKey, InternalOrderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InternalOrdersPropKey));
                                break;
                            case "Orders":
                                CQGAccount OrdersObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrders OrderspropV = OrdersObj.Orders;
                                var OrdersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
                                break;
                            case "Positions":
                                CQGAccount PositionsObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPositions PositionspropV = PositionsObj.Positions;
                                var PositionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(PositionsPropKey, PositionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionsPropKey));
                                break;
                            case "PositionSubcriptionLevel":
                                CQGAccount PositionSubcriptionLevelObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.ePositionSubscriptionLevel PositionSubcriptionLevelpropV = PositionSubcriptionLevelObj.PositionSubcriptionLevel;
                                var PositionSubcriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionSubcriptionLevelPropKey, value: PositionSubcriptionLevelpropV));
                                break;
                            case "ReportingCurrency":
                                CQGAccount ReportingCurrencyObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ReportingCurrencypropV = ReportingCurrencyObj.ReportingCurrency;
                                var ReportingCurrencyPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReportingCurrencyPropKey, value: ReportingCurrencypropV));
                                break;
                            case "ServerTimestamp":
                                CQGAccount ServerTimestampObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Summary":
                                CQGAccount SummaryObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccountSummary SummarypropV = SummaryObj.Summary;
                                var SummaryPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(SummaryPropKey, SummarypropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SummaryPropKey));
                                break;
                            case "Timestamp":
                                CQGAccount TimestampObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TotalMarginValue":
                                CQGAccount TotalMarginValueObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TotalMarginValuepropV = TotalMarginValueObj.TotalMarginValue;
                                var TotalMarginValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalMarginValuePropKey, value: TotalMarginValuepropV));
                                break;
                            case "TotalPurchasingPower":
                                CQGAccount TotalPurchasingPowerObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TotalPurchasingPowerpropV = TotalPurchasingPowerObj.TotalPurchasingPower;
                                var TotalPurchasingPowerPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalPurchasingPowerPropKey, value: TotalPurchasingPowerpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGAccountsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGAccounts CountObj = (CQGAccounts)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGAccounts ItemObj = (CQGAccounts)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccount ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByFCM":
                                CQGAccounts ItemByFCMObj = (CQGAccounts)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccount ItemByFCMpropV = ItemByFCMObj.ItemByFCM[(System.String)args[0],(System.Int32)args[1]];
                                var ItemByFCMPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByFCMPropKey, ItemByFCMpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByFCMPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGAccountSummariesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGAccountSummaries CountObj = (CQGAccountSummaries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGAccountSummaries ItemObj = (CQGAccountSummaries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccountSummary ItempropV = ItemObj[(System.Object)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGAccountSummaryClass":
                            switch (query.MemberName)
                            {
                            case "Account":
                                CQGAccountSummary AccountObj = (CQGAccountSummary)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccount AccountpropV = AccountObj.Account;
                                var AccountPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
                                break;
                            case "CurrencyName":
                                CQGAccountSummary CurrencyNameObj = (CQGAccountSummary)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CurrencyNamepropV = CurrencyNameObj.CurrencyName;
                                var CurrencyNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyNamePropKey, value: CurrencyNamepropV));
                                break;
                            case "ManualFillsInvolved":
                                CQGAccountSummary ManualFillsInvolvedObj = (CQGAccountSummary)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean ManualFillsInvolvedpropV = ManualFillsInvolvedObj.ManualFillsInvolved;
                                var ManualFillsInvolvedPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ManualFillsInvolvedPropKey, value: ManualFillsInvolvedpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGAdvancedStudiesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGAdvancedStudies CountObj = (CQGAdvancedStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGAdvancedStudies ItemObj = (CQGAdvancedStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAdvancedStudy ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGAdvancedStudies ItemByIdObj = (CQGAdvancedStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAdvancedStudy ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGAdvancedStudyClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGAdvancedStudy CountObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "CurveHeaders":
                                CQGAdvancedStudy CurveHeadersObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurveHeaders CurveHeaderspropV = CurveHeadersObj.CurveHeaders;
                                var CurveHeadersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CurveHeadersPropKey, CurveHeaderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveHeadersPropKey));
                                break;
                            case "Definition":
                                CQGAdvancedStudy DefinitionObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAdvancedStudyDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "EndTimestamp":
                                CQGAdvancedStudy EndTimestampObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGAdvancedStudy IdObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGAdvancedStudy ItemObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurves ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGAdvancedStudy LastErrorObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGAdvancedStudy RequestObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAdvancedStudyRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGAdvancedStudy StartTimestampObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGAdvancedStudy StatusObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGAdvancedStudy TagObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGAdvancedStudyDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "Abbreviation":
                                CQGAdvancedStudyDefinition AbbreviationObj = (CQGAdvancedStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                                var AbbreviationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
                                break;
                            case "CurveDefinitions":
                                CQGAdvancedStudyDefinition CurveDefinitionsObj = (CQGAdvancedStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurveDefinitions CurveDefinitionspropV = CurveDefinitionsObj.CurveDefinitions;
                                var CurveDefinitionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CurveDefinitionsPropKey, CurveDefinitionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveDefinitionsPropKey));
                                break;
                            case "Name":
                                CQGAdvancedStudyDefinition NameObj = (CQGAdvancedStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "ParameterDefinitions":
                                CQGAdvancedStudyDefinition ParameterDefinitionsObj = (CQGAdvancedStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGParameterDefinitions ParameterDefinitionspropV = ParameterDefinitionsObj.ParameterDefinitions;
                                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGAdvancedStudyDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGAdvancedStudyDefinitions CountObj = (CQGAdvancedStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGAdvancedStudyDefinitions ItemObj = (CQGAdvancedStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAdvancedStudyDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByAbbreviation":
                                CQGAdvancedStudyDefinitions ItemByAbbreviationObj = (CQGAdvancedStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAdvancedStudyDefinition ItemByAbbreviationpropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGAdvancedStudyRequestClass":
                            switch (query.MemberName)
                            {
                            case "BaseExpression":
                                CQGAdvancedStudyRequest BaseExpressionObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String BaseExpressionpropV = BaseExpressionObj.BaseExpression;
                                var BaseExpressionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionpropV));
                                break;
                            case "Continuation":
                                CQGAdvancedStudyRequest ContinuationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGAdvancedStudyRequest DaysBeforeExpirationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "Definition":
                                CQGAdvancedStudyRequest DefinitionObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAdvancedStudyDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "EqualizeCloses":
                                CQGAdvancedStudyRequest EqualizeClosesObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "HistoricalPeriod":
                                CQGAdvancedStudyRequest HistoricalPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                                var HistoricalPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
                                break;
                            case "IncludeEnd":
                                CQGAdvancedStudyRequest IncludeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "IntradayPeriod":
                                CQGAdvancedStudyRequest IntradayPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                                var IntradayPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
                                break;
                            case "Parameter":
                                CQGAdvancedStudyRequest ParameterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object ParameterpropV = ParameterObj.Parameter[(System.Object)args[0]];
                                var ParameterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterpropV));
                                break;
                            case "RangeEnd":
                                CQGAdvancedStudyRequest RangeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGAdvancedStudyRequest RangeStartObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGAdvancedStudyRequest RecalcPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGAdvancedStudyRequest SessionFlagsObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGAdvancedStudyRequest SessionsFilterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGAdvancedStudyRequest SubscriptionLevelObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGAdvancedStudyRequest UpdatesEnabledObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGAlgorithmicOrderDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "DefaultValue":
                                CQGAlgorithmicOrderDefinition DefaultValueObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object DefaultValuepropV = DefaultValueObj.DefaultValue;
                                var DefaultValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValuePropKey, value: DefaultValuepropV));
                                break;
                            case "DefaultValueIndex":
                                CQGAlgorithmicOrderDefinition DefaultValueIndexObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DefaultValueIndexpropV = DefaultValueIndexObj.DefaultValueIndex;
                                var DefaultValueIndexPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValueIndexPropKey, value: DefaultValueIndexpropV));
                                break;
                            case "Name":
                                CQGAlgorithmicOrderDefinition NameObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Type":
                                CQGAlgorithmicOrderDefinition TypeObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eAlgorithmicOrderPropertyType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "Unit":
                                CQGAlgorithmicOrderDefinition UnitObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String UnitpropV = UnitObj.Unit;
                                var UnitPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnitPropKey, value: UnitpropV));
                                break;
                            case "Values":
                                CQGAlgorithmicOrderDefinition ValuesObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStringCollection ValuespropV = ValuesObj.Values;
                                var ValuesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ValuesPropKey, ValuespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuesPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGAlgorithmicOrderDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGAlgorithmicOrderDefinitions CountObj = (CQGAlgorithmicOrderDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGAlgorithmicOrderDefinitions ItemObj = (CQGAlgorithmicOrderDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAlgorithmicOrderDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGAlgorithmicOrderParametersClass":
                            switch (query.MemberName)
                            {
                            case "DurationType":
                                CQGAlgorithmicOrderParameters DurationTypeObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderDuration DurationTypepropV = DurationTypeObj.DurationType;
                                var DurationTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DurationTypePropKey, value: DurationTypepropV));
                                break;
                            case "ExecutionInstructions":
                                CQGAlgorithmicOrderParameters ExecutionInstructionsObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderExecutionInstruction ExecutionInstructionspropV = ExecutionInstructionsObj.ExecutionInstructions;
                                var ExecutionInstructionsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionInstructionsPropKey, value: ExecutionInstructionspropV));
                                break;
                            case "ExecutionPattern":
                                CQGAlgorithmicOrderParameters ExecutionPatternObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ExecutionPatternpropV = ExecutionPatternObj.ExecutionPattern;
                                var ExecutionPatternPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionPatternPropKey, value: ExecutionPatternpropV));
                                break;
                            case "GTD":
                                CQGAlgorithmicOrderParameters GTDObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime GTDpropV = GTDObj.GTD;
                                var GTDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GTDPropKey, value: GTDpropV));
                                break;
                            case "GWAccountID":
                                CQGAlgorithmicOrderParameters GWAccountIDObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "InstrumentName":
                                CQGAlgorithmicOrderParameters InstrumentNameObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                                var InstrumentNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
                                break;
                            case "Parked":
                                CQGAlgorithmicOrderParameters ParkedObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean ParkedpropV = ParkedObj.Parked;
                                var ParkedPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParkedPropKey, value: ParkedpropV));
                                break;
                            case "PreferredTrailingPeg":
                                CQGAlgorithmicOrderParameters PreferredTrailingPegObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderTrailingPeg PreferredTrailingPegpropV = PreferredTrailingPegObj.PreferredTrailingPeg;
                                var PreferredTrailingPegPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreferredTrailingPegPropKey, value: PreferredTrailingPegpropV));
                                break;
                            case "Price":
                                CQGAlgorithmicOrderParameters PriceObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "Quantity":
                                CQGAlgorithmicOrderParameters QuantityObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "Side":
                                CQGAlgorithmicOrderParameters SideObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderSide SidepropV = SideObj.Side;
                                var SidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
                                break;
                            case "StopLimitPrice":
                                CQGAlgorithmicOrderParameters StopLimitPriceObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double StopLimitPricepropV = StopLimitPriceObj.StopLimitPrice;
                                var StopLimitPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricepropV));
                                break;
                            case "TrailingOffset":
                                CQGAlgorithmicOrderParameters TrailingOffsetObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrailingOffsetpropV = TrailingOffsetObj.TrailingOffset;
                                var TrailingOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrailingOffsetPropKey, value: TrailingOffsetpropV));
                                break;
                            case "TriggerQuantity":
                                CQGAlgorithmicOrderParameters TriggerQuantityObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TriggerQuantitypropV = TriggerQuantityObj.TriggerQuantity;
                                var TriggerQuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TriggerQuantityPropKey, value: TriggerQuantitypropV));
                                break;
                            case "Type":
                                CQGAlgorithmicOrderParameters TypeObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "VisibleQuantity":
                                CQGAlgorithmicOrderParameters VisibleQuantityObj = (CQGAlgorithmicOrderParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 VisibleQuantitypropV = VisibleQuantityObj.VisibleQuantity;
                                var VisibleQuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VisibleQuantityPropKey, value: VisibleQuantitypropV));
                                break;
                            }
                            break;
                        case "CQG.CQGAlgorithmicOrderPropertiesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGAlgorithmicOrderProperties CountObj = (CQGAlgorithmicOrderProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGAlgorithmicOrderProperties ItemObj = (CQGAlgorithmicOrderProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAlgorithmicOrderProperty ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGAlgorithmicOrderPropertyClass":
                            switch (query.MemberName)
                            {
                            case "Name":
                                CQGAlgorithmicOrderProperty NameObj = (CQGAlgorithmicOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Value":
                                CQGAlgorithmicOrderProperty ValueObj = (CQGAlgorithmicOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object ValuepropV = ValueObj.Value;
                                var ValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGAPIConfigClass":
                            switch (query.MemberName)
                            {
                            case "AccountMarginAndPositionsThrottleInterval":
                                CQGAPIConfig AccountMarginAndPositionsThrottleIntervalObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 AccountMarginAndPositionsThrottleIntervalpropV = AccountMarginAndPositionsThrottleIntervalObj.AccountMarginAndPositionsThrottleInterval;
                                var AccountMarginAndPositionsThrottleIntervalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountMarginAndPositionsThrottleIntervalPropKey, value: AccountMarginAndPositionsThrottleIntervalpropV));
                                break;
                            case "AgeToDeleteLogFileDays":
                                CQGAPIConfig AgeToDeleteLogFileDaysObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 AgeToDeleteLogFileDayspropV = AgeToDeleteLogFileDaysObj.AgeToDeleteLogFileDays;
                                var AgeToDeleteLogFileDaysPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AgeToDeleteLogFileDaysPropKey, value: AgeToDeleteLogFileDayspropV));
                                break;
                            case "ApplyDaylightSavingChanges":
                                CQGAPIConfig ApplyDaylightSavingChangesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean ApplyDaylightSavingChangespropV = ApplyDaylightSavingChangesObj.ApplyDaylightSavingChanges;
                                var ApplyDaylightSavingChangesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ApplyDaylightSavingChangesPropKey, value: ApplyDaylightSavingChangespropV));
                                break;
                            case "CollectionsThrowException":
                                CQGAPIConfig CollectionsThrowExceptionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean CollectionsThrowExceptionpropV = CollectionsThrowExceptionObj.CollectionsThrowException;
                                var CollectionsThrowExceptionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CollectionsThrowExceptionPropKey, value: CollectionsThrowExceptionpropV));
                                break;
                            case "DefaultAccountMarginDetailing":
                                CQGAPIConfig DefaultAccountMarginDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eAccountMarginDetailing DefaultAccountMarginDetailingpropV = DefaultAccountMarginDetailingObj.DefaultAccountMarginDetailing;
                                var DefaultAccountMarginDetailingPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultAccountMarginDetailingPropKey, value: DefaultAccountMarginDetailingpropV));
                                break;
                            case "DefaultInstrumentBBAType":
                                CQGAPIConfig DefaultInstrumentBBATypeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eDOMandBBAType DefaultInstrumentBBATypepropV = DefaultInstrumentBBATypeObj.DefaultInstrumentBBAType;
                                var DefaultInstrumentBBATypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultInstrumentBBATypePropKey, value: DefaultInstrumentBBATypepropV));
                                break;
                            case "DefaultInstrumentSubscriptionLevel":
                                CQGAPIConfig DefaultInstrumentSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eDataSubscriptionLevel DefaultInstrumentSubscriptionLevelpropV = DefaultInstrumentSubscriptionLevelObj.DefaultInstrumentSubscriptionLevel;
                                var DefaultInstrumentSubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultInstrumentSubscriptionLevelPropKey, value: DefaultInstrumentSubscriptionLevelpropV));
                                break;
                            case "DefPositionSubscriptionLevel":
                                CQGAPIConfig DefPositionSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.ePositionSubscriptionLevel DefPositionSubscriptionLevelpropV = DefPositionSubscriptionLevelObj.DefPositionSubscriptionLevel;
                                var DefPositionSubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefPositionSubscriptionLevelPropKey, value: DefPositionSubscriptionLevelpropV));
                                break;
                            case "DOMUpdatesMode":
                                CQGAPIConfig DOMUpdatesModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eDOMUpdatesMode DOMUpdatesModepropV = DOMUpdatesModeObj.DOMUpdatesMode;
                                var DOMUpdatesModePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMUpdatesModePropKey, value: DOMUpdatesModepropV));
                                break;
                            case "DOMUpdatesPeriod":
                                CQGAPIConfig DOMUpdatesPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DOMUpdatesPeriodpropV = DOMUpdatesPeriodObj.DOMUpdatesPeriod;
                                var DOMUpdatesPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMUpdatesPeriodPropKey, value: DOMUpdatesPeriodpropV));
                                break;
                            case "FireEventOnChangedPrices":
                                CQGAPIConfig FireEventOnChangedPricesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean FireEventOnChangedPricespropV = FireEventOnChangedPricesObj.FireEventOnChangedPrices;
                                var FireEventOnChangedPricesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FireEventOnChangedPricesPropKey, value: FireEventOnChangedPricespropV));
                                break;
                            case "GatewayEnabled":
                                CQGAPIConfig GatewayEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean GatewayEnabledpropV = GatewayEnabledObj.GatewayEnabled;
                                var GatewayEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GatewayEnabledPropKey, value: GatewayEnabledpropV));
                                break;
                            case "IncludeOrderTransactions":
                                CQGAPIConfig IncludeOrderTransactionsObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeOrderTransactionspropV = IncludeOrderTransactionsObj.IncludeOrderTransactions;
                                var IncludeOrderTransactionsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeOrderTransactionsPropKey, value: IncludeOrderTransactionspropV));
                                break;
                            case "LogSeverity":
                                CQGAPIConfig LogSeverityObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eLogSeverity LogSeveritypropV = LogSeverityObj.LogSeverity;
                                var LogSeverityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LogSeverityPropKey, value: LogSeveritypropV));
                                break;
                            case "MaxLogFileCount":
                                CQGAPIConfig MaxLogFileCountObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 MaxLogFileCountpropV = MaxLogFileCountObj.MaxLogFileCount;
                                var MaxLogFileCountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileCountPropKey, value: MaxLogFileCountpropV));
                                break;
                            case "MaxLogFileDuration":
                                CQGAPIConfig MaxLogFileDurationObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime MaxLogFileDurationpropV = MaxLogFileDurationObj.MaxLogFileDuration;
                                var MaxLogFileDurationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileDurationPropKey, value: MaxLogFileDurationpropV));
                                break;
                            case "MaxLogFileSize":
                                CQGAPIConfig MaxLogFileSizeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 MaxLogFileSizepropV = MaxLogFileSizeObj.MaxLogFileSize;
                                var MaxLogFileSizePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxLogFileSizePropKey, value: MaxLogFileSizepropV));
                                break;
                            case "MessageProcessingTimeout":
                                CQGAPIConfig MessageProcessingTimeoutObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 MessageProcessingTimeoutpropV = MessageProcessingTimeoutObj.MessageProcessingTimeout;
                                var MessageProcessingTimeoutPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MessageProcessingTimeoutPropKey, value: MessageProcessingTimeoutpropV));
                                break;
                            case "MetaDataEnabled":
                                CQGAPIConfig MetaDataEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean MetaDataEnabledpropV = MetaDataEnabledObj.MetaDataEnabled;
                                var MetaDataEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MetaDataEnabledPropKey, value: MetaDataEnabledpropV));
                                break;
                            case "NewInstrumentChangeMode":
                                CQGAPIConfig NewInstrumentChangeModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean NewInstrumentChangeModepropV = NewInstrumentChangeModeObj.NewInstrumentChangeMode;
                                var NewInstrumentChangeModePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewInstrumentChangeModePropKey, value: NewInstrumentChangeModepropV));
                                break;
                            case "NewInstrumentMode":
                                CQGAPIConfig NewInstrumentModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean NewInstrumentModepropV = NewInstrumentModeObj.NewInstrumentMode;
                                var NewInstrumentModePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewInstrumentModePropKey, value: NewInstrumentModepropV));
                                break;
                            case "NonsynchronizedData":
                                CQGAPIConfig NonsynchronizedDataObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean NonsynchronizedDatapropV = NonsynchronizedDataObj.NonsynchronizedData;
                                var NonsynchronizedDataPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NonsynchronizedDataPropKey, value: NonsynchronizedDatapropV));
                                break;
                            case "PendingOrderActionEnabled":
                                CQGAPIConfig PendingOrderActionEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean PendingOrderActionEnabledpropV = PendingOrderActionEnabledObj.PendingOrderActionEnabled;
                                var PendingOrderActionEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PendingOrderActionEnabledPropKey, value: PendingOrderActionEnabledpropV));
                                break;
                            case "PositionDetailing":
                                CQGAPIConfig PositionDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.ePositionDetailing PositionDetailingpropV = PositionDetailingObj.PositionDetailing;
                                var PositionDetailingPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionDetailingPropKey, value: PositionDetailingpropV));
                                break;
                            case "PriceMode":
                                CQGAPIConfig PriceModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.ePriceMode PriceModepropV = PriceModeObj.PriceMode;
                                var PriceModePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PriceModePropKey, value: PriceModepropV));
                                break;
                            case "ProviderPassword":
                                CQGAPIConfig ProviderPasswordObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ProviderPasswordpropV = ProviderPasswordObj.ProviderPassword;
                                var ProviderPasswordPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProviderPasswordPropKey, value: ProviderPasswordpropV));
                                break;
                            case "QueryAllAuthorizedTraders":
                                CQGAPIConfig QueryAllAuthorizedTradersObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean QueryAllAuthorizedTraderspropV = QueryAllAuthorizedTradersObj.QueryAllAuthorizedTraders;
                                var QueryAllAuthorizedTradersPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QueryAllAuthorizedTradersPropKey, value: QueryAllAuthorizedTraderspropV));
                                break;
                            case "ReadyStatusCheck":
                                CQGAPIConfig ReadyStatusCheckObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eReadyStatusCheck ReadyStatusCheckpropV = ReadyStatusCheckObj.ReadyStatusCheck;
                                var ReadyStatusCheckPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReadyStatusCheckPropKey, value: ReadyStatusCheckpropV));
                                break;
                            case "RemoteOpenAPILoginService":
                                CQGAPIConfig RemoteOpenAPILoginServiceObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String RemoteOpenAPILoginServicepropV = RemoteOpenAPILoginServiceObj.RemoteOpenAPILoginService;
                                var RemoteOpenAPILoginServicePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPILoginServicePropKey, value: RemoteOpenAPILoginServicepropV));
                                break;
                            case "RemoteOpenAPIServer":
                                CQGAPIConfig RemoteOpenAPIServerObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String RemoteOpenAPIServerpropV = RemoteOpenAPIServerObj.RemoteOpenAPIServer;
                                var RemoteOpenAPIServerPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPIServerPropKey, value: RemoteOpenAPIServerpropV));
                                break;
                            case "RemoteOpenAPIServers":
                                CQGAPIConfig RemoteOpenAPIServersObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStringCollection RemoteOpenAPIServerspropV = RemoteOpenAPIServersObj.RemoteOpenAPIServers;
                                var RemoteOpenAPIServersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RemoteOpenAPIServersPropKey, RemoteOpenAPIServerspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPIServersPropKey));
                                break;
                            case "ReplaceLoginSession":
                                CQGAPIConfig ReplaceLoginSessionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean ReplaceLoginSessionpropV = ReplaceLoginSessionObj.ReplaceLoginSession;
                                var ReplaceLoginSessionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReplaceLoginSessionPropKey, value: ReplaceLoginSessionpropV));
                                break;
                            case "SnapshotPeriod":
                                CQGAPIConfig SnapshotPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 SnapshotPeriodpropV = SnapshotPeriodObj.SnapshotPeriod;
                                var SnapshotPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SnapshotPeriodPropKey, value: SnapshotPeriodpropV));
                                break;
                            case "StrategyManagerEnabled":
                                CQGAPIConfig StrategyManagerEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean StrategyManagerEnabledpropV = StrategyManagerEnabledObj.StrategyManagerEnabled;
                                var StrategyManagerEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrategyManagerEnabledPropKey, value: StrategyManagerEnabledpropV));
                                break;
                            case "TimeZoneCode":
                                CQGAPIConfig TimeZoneCodeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeZone TimeZoneCodepropV = TimeZoneCodeObj.TimeZoneCode;
                                var TimeZoneCodePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimeZoneCodePropKey, value: TimeZoneCodepropV));
                                break;
                            case "UsedFromATLClient":
                                CQGAPIConfig UsedFromATLClientObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UsedFromATLClientpropV = UsedFromATLClientObj.UsedFromATLClient;
                                var UsedFromATLClientPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UsedFromATLClientPropKey, value: UsedFromATLClientpropV));
                                break;
                            case "UseOrderSide":
                                CQGAPIConfig UseOrderSideObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UseOrderSidepropV = UseOrderSideObj.UseOrderSide;
                                var UseOrderSidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UseOrderSidePropKey, value: UseOrderSidepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGBarsTimestampsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGBarsTimestamps CountObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Id":
                                CQGBarsTimestamps IdObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGBarsTimestamps ItemObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            case "LastError":
                                CQGBarsTimestamps LastErrorObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Status":
                                CQGBarsTimestamps StatusObj = (CQGBarsTimestamps)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            }
                            break;
                        case "CQG.CQGCELClass":
                            switch (query.MemberName)
                            {
                            case "Accounts":
                                CQGCEL AccountsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccounts AccountspropV = AccountsObj.Accounts;
                                var AccountsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AccountsPropKey, AccountspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountsPropKey));
                                break;
                            case "AccountSubscriptionLevel":
                                CQGCEL AccountSubscriptionLevelObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eAccountSubscriptionLevel AccountSubscriptionLevelpropV = AccountSubscriptionLevelObj.AccountSubscriptionLevel;
                                var AccountSubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountSubscriptionLevelPropKey, value: AccountSubscriptionLevelpropV));
                                break;
                            case "AllAdvancedStudies":
                                CQGCEL AllAdvancedStudiesObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAdvancedStudies AllAdvancedStudiespropV = AllAdvancedStudiesObj.AllAdvancedStudies;
                                var AllAdvancedStudiesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllAdvancedStudiesPropKey, AllAdvancedStudiespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllAdvancedStudiesPropKey));
                                break;
                            case "AllConditions":
                                CQGCEL AllConditionsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConditions AllConditionspropV = AllConditionsObj.AllConditions;
                                var AllConditionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllConditionsPropKey, AllConditionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllConditionsPropKey));
                                break;
                            case "AllConstantVolumeBars":
                                CQGCEL AllConstantVolumeBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConstantVolumeBarsCollection AllConstantVolumeBarspropV = AllConstantVolumeBarsObj.AllConstantVolumeBars;
                                var AllConstantVolumeBarsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllConstantVolumeBarsPropKey, AllConstantVolumeBarspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllConstantVolumeBarsPropKey));
                                break;
                            case "AllCustomStudies":
                                CQGCEL AllCustomStudiesObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCustomStudies AllCustomStudiespropV = AllCustomStudiesObj.AllCustomStudies;
                                var AllCustomStudiesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllCustomStudiesPropKey, AllCustomStudiespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllCustomStudiesPropKey));
                                break;
                            case "AllExpressions":
                                CQGCEL AllExpressionsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExpressions AllExpressionspropV = AllExpressionsObj.AllExpressions;
                                var AllExpressionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllExpressionsPropKey, AllExpressionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllExpressionsPropKey));
                                break;
                            case "AllInstrumentsGroups":
                                CQGCEL AllInstrumentsGroupsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrumentsGroups AllInstrumentsGroupspropV = AllInstrumentsGroupsObj.AllInstrumentsGroups;
                                var AllInstrumentsGroupsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllInstrumentsGroupsPropKey, AllInstrumentsGroupspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllInstrumentsGroupsPropKey));
                                break;
                            case "AllManualFills":
                                CQGCEL AllManualFillsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGManualFillsCollection AllManualFillspropV = AllManualFillsObj.AllManualFills;
                                var AllManualFillsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllManualFillsPropKey, AllManualFillspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllManualFillsPropKey));
                                break;
                            case "AllPointAndFigureBars":
                                CQGCEL AllPointAndFigureBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPointAndFigureBarsCollection AllPointAndFigureBarspropV = AllPointAndFigureBarsObj.AllPointAndFigureBars;
                                var AllPointAndFigureBarsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllPointAndFigureBarsPropKey, AllPointAndFigureBarspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllPointAndFigureBarsPropKey));
                                break;
                            case "AllStrategyDefinitions":
                                CQGCEL AllStrategyDefinitionsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStrategyDefinitions AllStrategyDefinitionspropV = AllStrategyDefinitionsObj.AllStrategyDefinitions;
                                var AllStrategyDefinitionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllStrategyDefinitionsPropKey, AllStrategyDefinitionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllStrategyDefinitionsPropKey));
                                break;
                            case "AllSubMinuteBars":
                                CQGCEL AllSubMinuteBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSubMinuteBarsCollection AllSubMinuteBarspropV = AllSubMinuteBarsObj.AllSubMinuteBars;
                                var AllSubMinuteBarsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllSubMinuteBarsPropKey, AllSubMinuteBarspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllSubMinuteBarsPropKey));
                                break;
                            case "AllTFlowBars":
                                CQGCEL AllTFlowBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTFlowBarsCollection AllTFlowBarspropV = AllTFlowBarsObj.AllTFlowBars;
                                var AllTFlowBarsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllTFlowBarsPropKey, AllTFlowBarspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTFlowBarsPropKey));
                                break;
                            case "AllTicks":
                                CQGCEL AllTicksObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTicksCollection AllTickspropV = AllTicksObj.AllTicks;
                                var AllTicksPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllTicksPropKey, AllTickspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTicksPropKey));
                                break;
                            case "AllTimedBars":
                                CQGCEL AllTimedBarsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTimedBarsCollection AllTimedBarspropV = AllTimedBarsObj.AllTimedBars;
                                var AllTimedBarsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllTimedBarsPropKey, AllTimedBarspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTimedBarsPropKey));
                                break;
                            case "AllTradingSystems":
                                CQGCEL AllTradingSystemsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystems AllTradingSystemspropV = AllTradingSystemsObj.AllTradingSystems;
                                var AllTradingSystemsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllTradingSystemsPropKey, AllTradingSystemspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllTradingSystemsPropKey));
                                break;
                            case "AllYields":
                                CQGCEL AllYieldsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGYieldsCollection AllYieldspropV = AllYieldsObj.AllYields;
                                var AllYieldsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AllYieldsPropKey, AllYieldspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllYieldsPropKey));
                                break;
                            case "APIConfiguration":
                                CQGCEL APIConfigurationObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAPIConfig APIConfigurationpropV = APIConfigurationObj.APIConfiguration;
                                var APIConfigurationPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(APIConfigurationPropKey, APIConfigurationpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: APIConfigurationPropKey));
                                break;
                            case "Configuration":
                                CQGCEL ConfigurationObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCELConfiguration ConfigurationpropV = ConfigurationObj.get_Configuration();
                                var ConfigurationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ConfigurationPropKey, value: ConfigurationpropV));
                                break;
                            case "CurrencyRates":
                                CQGCEL CurrencyRatesObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurrencyRates CurrencyRatespropV = CurrencyRatesObj.CurrencyRates;
                                var CurrencyRatesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CurrencyRatesPropKey, CurrencyRatespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyRatesPropKey));
                                break;
                            case "DirectEventsAccessor":
                                CQGCEL DirectEventsAccessorObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGDirectEventsAccessor DirectEventsAccessorpropV = DirectEventsAccessorObj.DirectEventsAccessor;
                                var DirectEventsAccessorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DirectEventsAccessorPropKey, DirectEventsAccessorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DirectEventsAccessorPropKey));
                                break;
                            case "Environment":
                                CQGCEL EnvironmentObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGEnvironment EnvironmentpropV = EnvironmentObj.Environment;
                                var EnvironmentPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(EnvironmentPropKey, EnvironmentpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EnvironmentPropKey));
                                break;
                            case "Instruments":
                                CQGCEL InstrumentsObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstruments InstrumentspropV = InstrumentsObj.Instruments;
                                var InstrumentsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InstrumentsPropKey, InstrumentspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentsPropKey));
                                break;
                            case "InternalOrders":
                                CQGCEL InternalOrdersObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrders InternalOrderspropV = InternalOrdersObj.InternalOrders;
                                var InternalOrdersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InternalOrdersPropKey, InternalOrderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InternalOrdersPropKey));
                                break;
                            case "IsStarted":
                                CQGCEL IsStartedObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsStartedpropV = IsStartedObj.IsStarted;
                                var IsStartedPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsStartedPropKey, value: IsStartedpropV));
                                break;
                            case "Logger":
                                CQGCEL LoggerObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGLogger LoggerpropV = LoggerObj.Logger;
                                var LoggerPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LoggerPropKey, LoggerpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LoggerPropKey));
                                break;
                            case "Orders":
                                CQGCEL OrdersObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrders OrderspropV = OrdersObj.Orders;
                                var OrdersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
                                break;
                            case "OTPRequired":
                                CQGCEL OTPRequiredObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean OTPRequiredpropV = OTPRequiredObj.OTPRequired;
                                var OTPRequiredPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OTPRequiredPropKey, value: OTPRequiredpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGChangedTradeEntriesClass":
                            switch (query.MemberName)
                            {
                            case "ChangeFilter":
                                CQGChangedTradeEntries ChangeFilterObj = (CQGChangedTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTradeChangeCategory ChangeFilterpropV = ChangeFilterObj.ChangeFilter;
                                var ChangeFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeFilterPropKey, value: ChangeFilterpropV));
                                break;
                            case "Count":
                                CQGChangedTradeEntries CountObj = (CQGChangedTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGChangedTradeEntries ItemObj = (CQGChangedTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGChangedTradeEntry ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGChangedTradeEntryClass":
                            switch (query.MemberName)
                            {
                            case "ChangeCategory":
                                CQGChangedTradeEntry ChangeCategoryObj = (CQGChangedTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTradeChangeCategory ChangeCategorypropV = ChangeCategoryObj.ChangeCategory;
                                var ChangeCategoryPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeCategoryPropKey, value: ChangeCategorypropV));
                                break;
                            case "TradeEntry":
                                CQGChangedTradeEntry TradeEntryObj = (CQGChangedTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeEntry TradeEntrypropV = TradeEntryObj.TradeEntry;
                                var TradeEntryPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradeEntryPropKey, TradeEntrypropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeEntryPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGChangedTradeExitClass":
                            switch (query.MemberName)
                            {
                            case "ChangeCategory":
                                CQGChangedTradeExit ChangeCategoryObj = (CQGChangedTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTradeChangeCategory ChangeCategorypropV = ChangeCategoryObj.ChangeCategory;
                                var ChangeCategoryPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeCategoryPropKey, value: ChangeCategorypropV));
                                break;
                            case "TradeExit":
                                CQGChangedTradeExit TradeExitObj = (CQGChangedTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExit TradeExitpropV = TradeExitObj.TradeExit;
                                var TradeExitPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradeExitPropKey, TradeExitpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeExitPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGChangedTradeExitsClass":
                            switch (query.MemberName)
                            {
                            case "ChangeFilter":
                                CQGChangedTradeExits ChangeFilterObj = (CQGChangedTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTradeChangeCategory ChangeFilterpropV = ChangeFilterObj.ChangeFilter;
                                var ChangeFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ChangeFilterPropKey, value: ChangeFilterpropV));
                                break;
                            case "Count":
                                CQGChangedTradeExits CountObj = (CQGChangedTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGChangedTradeExits ItemObj = (CQGChangedTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGChangedTradeExit ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGCommoditiesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCommodities CountObj = (CQGCommodities)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "GWAccountID":
                                CQGCommodities GWAccountIDObj = (CQGCommodities)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "Item":
                                CQGCommodities ItemObj = (CQGCommodities)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            }
                            break;
                        case "CQG.CQGCommodityInstrumentsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCommodityInstruments CountObj = (CQGCommodityInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "IsTradableOnly":
                                CQGCommodityInstruments IsTradableOnlyObj = (CQGCommodityInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsTradableOnlypropV = IsTradableOnlyObj.IsTradableOnly;
                                var IsTradableOnlyPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsTradableOnlyPropKey, value: IsTradableOnlypropV));
                                break;
                            case "Item":
                                CQGCommodityInstruments ItemObj = (CQGCommodityInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            }
                            break;
                        case "CQG.CQGConditionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCondition CountObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Definition":
                                CQGCondition DefinitionObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConditionDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "EndTimestamp":
                                CQGCondition EndTimestampObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGCondition IdObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGCondition ItemObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConditionResult ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGCondition LastErrorObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGCondition RequestObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConditionRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGCondition StartTimestampObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGCondition StatusObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGCondition TagObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGConditionDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "Name":
                                CQGConditionDefinition NameObj = (CQGConditionDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "ParameterDefinitions":
                                CQGConditionDefinition ParameterDefinitionsObj = (CQGConditionDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGParameterDefinitions ParameterDefinitionspropV = ParameterDefinitionsObj.ParameterDefinitions;
                                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGConditionDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGConditionDefinitions CountObj = (CQGConditionDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGConditionDefinitions ItemObj = (CQGConditionDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConditionDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByName":
                                CQGConditionDefinitions ItemByNameObj = (CQGConditionDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConditionDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                                var ItemByNamePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGConditionRequestClass":
                            switch (query.MemberName)
                            {
                            case "BaseExpression":
                                CQGConditionRequest BaseExpressionObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String BaseExpressionpropV = BaseExpressionObj.BaseExpression;
                                var BaseExpressionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionpropV));
                                break;
                            case "Continuation":
                                CQGConditionRequest ContinuationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGConditionRequest DaysBeforeExpirationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "Definition":
                                CQGConditionRequest DefinitionObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConditionDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "EqualizeCloses":
                                CQGConditionRequest EqualizeClosesObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "HistoricalPeriod":
                                CQGConditionRequest HistoricalPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                                var HistoricalPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
                                break;
                            case "IncludeEnd":
                                CQGConditionRequest IncludeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "IntradayPeriod":
                                CQGConditionRequest IntradayPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                                var IntradayPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
                                break;
                            case "Parameter":
                                CQGConditionRequest ParameterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object ParameterpropV = ParameterObj.Parameter[(System.Object)args[0]];
                                var ParameterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterpropV));
                                break;
                            case "RangeEnd":
                                CQGConditionRequest RangeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGConditionRequest RangeStartObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGConditionRequest RecalcPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGConditionRequest SessionFlagsObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGConditionRequest SessionsFilterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGConditionRequest SubscriptionLevelObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGConditionRequest UpdatesEnabledObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGConditionResultClass":
                            switch (query.MemberName)
                            {
                            case "Timestamp":
                                CQGConditionResult TimestampObj = (CQGConditionResult)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "Value":
                                CQGConditionResult ValueObj = (CQGConditionResult)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean ValuepropV = ValueObj.Value;
                                var ValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGConditionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGConditions CountObj = (CQGConditions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGConditions ItemObj = (CQGConditions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCondition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGConditions ItemByIdObj = (CQGConditions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCondition ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGConstantVolumeBarClass":
                            switch (query.MemberName)
                            {
                            case "ActualVolume":
                                CQGConstantVolumeBar ActualVolumeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ActualVolumepropV = ActualVolumeObj.ActualVolume;
                                var ActualVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActualVolumePropKey, value: ActualVolumepropV));
                                break;
                            case "AskVolume":
                                CQGConstantVolumeBar AskVolumeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 AskVolumepropV = AskVolumeObj.AskVolume;
                                var AskVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumepropV));
                                break;
                            case "Avg":
                                CQGConstantVolumeBar AvgObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AvgpropV = AvgObj.Avg;
                                var AvgPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgpropV));
                                break;
                            case "BidVolume":
                                CQGConstantVolumeBar BidVolumeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 BidVolumepropV = BidVolumeObj.BidVolume;
                                var BidVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumepropV));
                                break;
                            case "Close":
                                CQGConstantVolumeBar CloseObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ClosepropV = CloseObj.Close;
                                var ClosePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
                                break;
                            case "High":
                                CQGConstantVolumeBar HighObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HighpropV = HighObj.High;
                                var HighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
                                break;
                            case "HLC3":
                                CQGConstantVolumeBar HLC3Obj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HLC3propV = HLC3Obj.HLC3;
                                var HLC3PropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3propV));
                                break;
                            case "Low":
                                CQGConstantVolumeBar LowObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double LowpropV = LowObj.Low;
                                var LowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
                                break;
                            case "Mid":
                                CQGConstantVolumeBar MidObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MidpropV = MidObj.Mid;
                                var MidPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
                                break;
                            case "Open":
                                CQGConstantVolumeBar OpenObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double OpenpropV = OpenObj.Open;
                                var OpenPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
                                break;
                            case "Range":
                                CQGConstantVolumeBar RangeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double RangepropV = RangeObj.Range;
                                var RangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangepropV));
                                break;
                            case "TickVolume":
                                CQGConstantVolumeBar TickVolumeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TickVolumepropV = TickVolumeObj.TickVolume;
                                var TickVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumepropV));
                                break;
                            case "Timestamp":
                                CQGConstantVolumeBar TimestampObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGConstantVolumeBar TimestampOffsetObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            case "TrueHigh":
                                CQGConstantVolumeBar TrueHighObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                                var TrueHighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
                                break;
                            case "TrueLow":
                                CQGConstantVolumeBar TrueLowObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                                var TrueLowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
                                break;
                            case "TrueRange":
                                CQGConstantVolumeBar TrueRangeObj = (CQGConstantVolumeBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueRangepropV = TrueRangeObj.TrueRange;
                                var TrueRangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGConstantVolumeBarsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGConstantVolumeBars CountObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "EndTimestamp":
                                CQGConstantVolumeBars EndTimestampObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGConstantVolumeBars IdObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGConstantVolumeBars ItemObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConstantVolumeBar ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGConstantVolumeBars LastErrorObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGConstantVolumeBars RequestObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConstantVolumeBarsRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGConstantVolumeBars StartTimestampObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGConstantVolumeBars StatusObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGConstantVolumeBars TagObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGConstantVolumeBarsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGConstantVolumeBarsCollection CountObj = (CQGConstantVolumeBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGConstantVolumeBarsCollection ItemObj = (CQGConstantVolumeBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConstantVolumeBars ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGConstantVolumeBarsCollection ItemByIdObj = (CQGConstantVolumeBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGConstantVolumeBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGConstantVolumeBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Continuation":
                                CQGConstantVolumeBarsRequest ContinuationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGConstantVolumeBarsRequest DaysBeforeExpirationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "EqualizeCloses":
                                CQGConstantVolumeBarsRequest EqualizeClosesObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "IncludeEnd":
                                CQGConstantVolumeBarsRequest IncludeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "IncludeFlatTicks":
                                CQGConstantVolumeBarsRequest IncludeFlatTicksObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeFlatTickspropV = IncludeFlatTicksObj.IncludeFlatTicks;
                                var IncludeFlatTicksPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeFlatTicksPropKey, value: IncludeFlatTickspropV));
                                break;
                            case "RangeEnd":
                                CQGConstantVolumeBarsRequest RangeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGConstantVolumeBarsRequest RangeStartObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGConstantVolumeBarsRequest RecalcPeriodObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGConstantVolumeBarsRequest SessionFlagsObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGConstantVolumeBarsRequest SessionsFilterObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGConstantVolumeBarsRequest SubscriptionLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "Symbol":
                                CQGConstantVolumeBarsRequest SymbolObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGConstantVolumeBarsRequest UpdatesEnabledObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            case "VolumeLevel":
                                CQGConstantVolumeBarsRequest VolumeLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 VolumeLevelpropV = VolumeLevelObj.VolumeLevel;
                                var VolumeLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumeLevelPropKey, value: VolumeLevelpropV));
                                break;
                            case "VolumeType":
                                CQGConstantVolumeBarsRequest VolumeTypeObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eCvbVolumeType VolumeTypepropV = VolumeTypeObj.VolumeType;
                                var VolumeTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumeTypePropKey, value: VolumeTypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGCurrencyRateClass":
                            switch (query.MemberName)
                            {
                            case "BaseCurrencyName":
                                CQGCurrencyRate BaseCurrencyNameObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String BaseCurrencyNamepropV = BaseCurrencyNameObj.BaseCurrencyName;
                                var BaseCurrencyNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseCurrencyNamePropKey, value: BaseCurrencyNamepropV));
                                break;
                            case "CEL":
                                CQGCurrencyRate CELObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCEL CELpropV = CELObj.CEL;
                                var CELPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
                                break;
                            case "CurrencyName":
                                CQGCurrencyRate CurrencyNameObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CurrencyNamepropV = CurrencyNameObj.CurrencyName;
                                var CurrencyNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyNamePropKey, value: CurrencyNamepropV));
                                break;
                            case "FcmID":
                                CQGCurrencyRate FcmIDObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 FcmIDpropV = FcmIDObj.FcmID;
                                var FcmIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FcmIDPropKey, value: FcmIDpropV));
                                break;
                            case "Rate":
                                CQGCurrencyRate RateObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double RatepropV = RateObj.Rate;
                                var RatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RatePropKey, value: RatepropV));
                                break;
                            case "ServerTimestamp":
                                CQGCurrencyRate ServerTimestampObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Timestamp":
                                CQGCurrencyRate TimestampObj = (CQGCurrencyRate)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            }
                            break;
                        case "CQG.CQGCurrencyRatesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCurrencyRates CountObj = (CQGCurrencyRates)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGCurrencyRates ItemObj = (CQGCurrencyRates)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurrencyRate ItempropV = ItemObj[(System.Int32)args[0],(System.String)args[1],(System.String)args[2]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGCurveDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "Name":
                                CQGCurveDefinition NameObj = (CQGCurveDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGCurveDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCurveDefinitions CountObj = (CQGCurveDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGCurveDefinitions ItemObj = (CQGCurveDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurveDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByName":
                                CQGCurveDefinitions ItemByNameObj = (CQGCurveDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurveDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                                var ItemByNamePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGCurveHeadersClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCurveHeaders CountObj = (CQGCurveHeaders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGCurveHeaders ItemObj = (CQGCurveHeaders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            }
                            break;
                        case "CQG.CQGCurvesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCurves CountObj = (CQGCurves)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGCurves ItemObj = (CQGCurves)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ItempropV = ItemObj[(System.Object)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            case "Timestamp":
                                CQGCurves TimestampObj = (CQGCurves)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGCurves TimestampOffsetObj = (CQGCurves)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGCustomStudiesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCustomStudies CountObj = (CQGCustomStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGCustomStudies ItemObj = (CQGCustomStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCustomStudy ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGCustomStudies ItemByIdObj = (CQGCustomStudies)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCustomStudy ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGCustomStudyClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCustomStudy CountObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "CurveHeaders":
                                CQGCustomStudy CurveHeadersObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurveHeaders CurveHeaderspropV = CurveHeadersObj.CurveHeaders;
                                var CurveHeadersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CurveHeadersPropKey, CurveHeaderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveHeadersPropKey));
                                break;
                            case "Definition":
                                CQGCustomStudy DefinitionObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCustomStudyDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "EndTimestamp":
                                CQGCustomStudy EndTimestampObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGCustomStudy IdObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGCustomStudy ItemObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurves ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGCustomStudy LastErrorObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGCustomStudy RequestObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCustomStudyRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGCustomStudy StartTimestampObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGCustomStudy StatusObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGCustomStudy TagObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGCustomStudyDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "Abbreviation":
                                CQGCustomStudyDefinition AbbreviationObj = (CQGCustomStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                                var AbbreviationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
                                break;
                            case "CurveDefinitions":
                                CQGCustomStudyDefinition CurveDefinitionsObj = (CQGCustomStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCurveDefinitions CurveDefinitionspropV = CurveDefinitionsObj.CurveDefinitions;
                                var CurveDefinitionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CurveDefinitionsPropKey, CurveDefinitionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurveDefinitionsPropKey));
                                break;
                            case "Name":
                                CQGCustomStudyDefinition NameObj = (CQGCustomStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "ParameterDefinitions":
                                CQGCustomStudyDefinition ParameterDefinitionsObj = (CQGCustomStudyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGParameterDefinitions ParameterDefinitionspropV = ParameterDefinitionsObj.ParameterDefinitions;
                                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGCustomStudyDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGCustomStudyDefinitions CountObj = (CQGCustomStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGCustomStudyDefinitions ItemObj = (CQGCustomStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCustomStudyDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByAbbreviation":
                                CQGCustomStudyDefinitions ItemByAbbreviationObj = (CQGCustomStudyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCustomStudyDefinition ItemByAbbreviationpropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGCustomStudyRequestClass":
                            switch (query.MemberName)
                            {
                            case "BaseExpression":
                                CQGCustomStudyRequest BaseExpressionObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String BaseExpressionpropV = BaseExpressionObj.BaseExpression;
                                var BaseExpressionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionpropV));
                                break;
                            case "Continuation":
                                CQGCustomStudyRequest ContinuationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGCustomStudyRequest DaysBeforeExpirationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "Definition":
                                CQGCustomStudyRequest DefinitionObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCustomStudyDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "EqualizeCloses":
                                CQGCustomStudyRequest EqualizeClosesObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "HistoricalPeriod":
                                CQGCustomStudyRequest HistoricalPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                                var HistoricalPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
                                break;
                            case "IncludeEnd":
                                CQGCustomStudyRequest IncludeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "IntradayPeriod":
                                CQGCustomStudyRequest IntradayPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                                var IntradayPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
                                break;
                            case "Parameter":
                                CQGCustomStudyRequest ParameterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object ParameterpropV = ParameterObj.Parameter[(System.Object)args[0]];
                                var ParameterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterpropV));
                                break;
                            case "RangeEnd":
                                CQGCustomStudyRequest RangeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGCustomStudyRequest RangeStartObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGCustomStudyRequest RecalcPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGCustomStudyRequest SessionFlagsObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGCustomStudyRequest SessionsFilterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGCustomStudyRequest SubscriptionLevelObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGCustomStudyRequest UpdatesEnabledObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGDataSourceClass":
                            switch (query.MemberName)
                            {
                            case "Abbreviation":
                                CQGDataSource AbbreviationObj = (CQGDataSource)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                                var AbbreviationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
                                break;
                            case "Name":
                                CQGDataSource NameObj = (CQGDataSource)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Status":
                                CQGDataSource StatusObj = (CQGDataSource)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eDataSourceStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "SymbolTypes":
                                CQGDataSource SymbolTypesObj = (CQGDataSource)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSymbolType SymbolTypespropV = SymbolTypesObj.SymbolTypes;
                                var SymbolTypesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolTypesPropKey, value: SymbolTypespropV));
                                break;
                            }
                            break;
                        case "CQG.CQGDataSourcesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGDataSources CountObj = (CQGDataSources)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGDataSources ItemObj = (CQGDataSources)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGDataSource ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByAbbreviation":
                                CQGDataSources ItemByAbbreviationObj = (CQGDataSources)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGDataSource ItemByAbbreviationpropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGDataSourceSymbolClass":
                            switch (query.MemberName)
                            {
                            case "Abbreviation":
                                CQGDataSourceSymbol AbbreviationObj = (CQGDataSourceSymbol)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                                var AbbreviationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
                                break;
                            case "Description":
                                CQGDataSourceSymbol DescriptionObj = (CQGDataSourceSymbol)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DescriptionpropV = DescriptionObj.Description;
                                var DescriptionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
                                break;
                            case "Type":
                                CQGDataSourceSymbol TypeObj = (CQGDataSourceSymbol)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSymbolType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGDataSourceSymbolsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGDataSourceSymbols CountObj = (CQGDataSourceSymbols)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "DataSourceAbbreviation":
                                CQGDataSourceSymbols DataSourceAbbreviationObj = (CQGDataSourceSymbols)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DataSourceAbbreviationpropV = DataSourceAbbreviationObj.DataSourceAbbreviation;
                                var DataSourceAbbreviationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSourceAbbreviationPropKey, value: DataSourceAbbreviationpropV));
                                break;
                            case "Item":
                                CQGDataSourceSymbols ItemObj = (CQGDataSourceSymbols)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGDataSourceSymbol ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGDOMQuotesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGDOMQuotes CountObj = (CQGDOMQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGDOMQuotes ItemObj = (CQGDOMQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQuote ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByPrice":
                                CQGDOMQuotes ItemByPriceObj = (CQGDOMQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQuote ItemByPricepropV = ItemByPriceObj.ItemByPrice[(System.Double)args[0],(System.Boolean)args[1]];
                                var ItemByPricePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByPricePropKey, ItemByPricepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByPricePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGEnvironmentClass":
                            switch (query.MemberName)
                            {
                            case "CEL":
                                CQGEnvironment CELObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCEL CELpropV = CELObj.CEL;
                                var CELPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
                                break;
                            case "CELVersion":
                                CQGEnvironment CELVersionObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CELVersionpropV = CELVersionObj.CELVersion;
                                var CELVersionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELVersionPropKey, value: CELVersionpropV));
                                break;
                            case "CQGSerialNumber":
                                CQGEnvironment CQGSerialNumberObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CQGSerialNumberpropV = CQGSerialNumberObj.CQGSerialNumber;
                                var CQGSerialNumberPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CQGSerialNumberPropKey, value: CQGSerialNumberpropV));
                                break;
                            case "CQGVersion":
                                CQGEnvironment CQGVersionObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CQGVersionpropV = CQGVersionObj.CQGVersion;
                                var CQGVersionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CQGVersionPropKey, value: CQGVersionpropV));
                                break;
                            case "DataConnectionStatus":
                                CQGEnvironment DataConnectionStatusObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eConnectionStatus DataConnectionStatuspropV = DataConnectionStatusObj.DataConnectionStatus;
                                var DataConnectionStatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataConnectionStatusPropKey, value: DataConnectionStatuspropV));
                                break;
                            case "GWConnectionStatus":
                                CQGEnvironment GWConnectionStatusObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eConnectionStatus GWConnectionStatuspropV = GWConnectionStatusObj.GWConnectionStatus;
                                var GWConnectionStatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWConnectionStatusPropKey, value: GWConnectionStatuspropV));
                                break;
                            case "GWLogonName":
                                CQGEnvironment GWLogonNameObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String GWLogonNamepropV = GWLogonNameObj.GWLogonName;
                                var GWLogonNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWLogonNamePropKey, value: GWLogonNamepropV));
                                break;
                            case "LastError":
                                CQGEnvironment LastErrorObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "LineTime":
                                CQGEnvironment LineTimeObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime LineTimepropV = LineTimeObj.LineTime;
                                var LineTimePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LineTimePropKey, value: LineTimepropV));
                                break;
                            case "LocalTime":
                                CQGEnvironment LocalTimeObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime LocalTimepropV = LocalTimeObj.LocalTime;
                                var LocalTimePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LocalTimePropKey, value: LocalTimepropV));
                                break;
                            case "MessagesPending":
                                CQGEnvironment MessagesPendingObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 MessagesPendingpropV = MessagesPendingObj.MessagesPending;
                                var MessagesPendingPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MessagesPendingPropKey, value: MessagesPendingpropV));
                                break;
                            case "OrdersPending":
                                CQGEnvironment OrdersPendingObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 OrdersPendingpropV = OrdersPendingObj.OrdersPending;
                                var OrdersPendingPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPendingPropKey, value: OrdersPendingpropV));
                                break;
                            case "RemoteOpenAPISession":
                                CQGEnvironment RemoteOpenAPISessionObj = (CQGEnvironment)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGRemoteOpenAPISession RemoteOpenAPISessionpropV = RemoteOpenAPISessionObj.RemoteOpenAPISession;
                                var RemoteOpenAPISessionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RemoteOpenAPISessionPropKey, RemoteOpenAPISessionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoteOpenAPISessionPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGErrorClass":
                            switch (query.MemberName)
                            {
                            case "Code":
                                CQGError CodeObj = (CQGError)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CodepropV = CodeObj.Code;
                                var CodePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CodePropKey, value: CodepropV));
                                break;
                            case "Description":
                                CQGError DescriptionObj = (CQGError)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DescriptionpropV = DescriptionObj.Description;
                                var DescriptionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
                                break;
                            case "Owner":
                                CQGError OwnerObj = (CQGError)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object OwnerpropV = OwnerObj.Owner;
                                var OwnerPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OwnerPropKey, value: OwnerpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGExchangesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGExchanges CountObj = (CQGExchanges)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "GWAccountID":
                                CQGExchanges GWAccountIDObj = (CQGExchanges)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "Item":
                                CQGExchanges ItemObj = (CQGExchanges)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            }
                            break;
                        case "CQG.CQGExecutionPatternClass":
                            switch (query.MemberName)
                            {
                            case "Parameters":
                                CQGExecutionPattern ParametersObj = (CQGExecutionPattern)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExecutionPatternParameters ParameterspropV = ParametersObj.Parameters;
                                var ParametersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ParametersPropKey, ParameterspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParametersPropKey));
                                break;
                            case "PatternString":
                                CQGExecutionPattern PatternStringObj = (CQGExecutionPattern)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String PatternStringpropV = PatternStringObj.PatternString;
                                var PatternStringPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PatternStringPropKey, value: PatternStringpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGExecutionPatternParameterClass":
                            switch (query.MemberName)
                            {
                            case "Name":
                                CQGExecutionPatternParameter NameObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Parameters":
                                CQGExecutionPatternParameter ParametersObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExecutionPatternParameters ParameterspropV = ParametersObj.Parameters;
                                var ParametersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ParametersPropKey, ParameterspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParametersPropKey));
                                break;
                            case "Type":
                                CQGExecutionPatternParameter TypeObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eExecutionPatternParameterType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "Value":
                                CQGExecutionPatternParameter ValueObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ValuepropV = ValueObj.Value;
                                var ValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGExecutionPatternParametersClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGExecutionPatternParameters CountObj = (CQGExecutionPatternParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGExecutionPatternParameters ItemObj = (CQGExecutionPatternParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExecutionPatternParameter ItempropV = ItemObj[(System.Object)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGExpressionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGExpression CountObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "EndTimestamp":
                                CQGExpression EndTimestampObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGExpression IdObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGExpression ItemObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExpressionOutputs ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGExpression LastErrorObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "OutputHeaders":
                                CQGExpression OutputHeadersObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExpressionOutputHeaders OutputHeaderspropV = OutputHeadersObj.OutputHeaders;
                                var OutputHeadersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OutputHeadersPropKey, OutputHeaderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OutputHeadersPropKey));
                                break;
                            case "Request":
                                CQGExpression RequestObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExpressionRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGExpression StartTimestampObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGExpression StatusObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGExpression TagObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGExpressionOutputHeadersClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGExpressionOutputHeaders CountObj = (CQGExpressionOutputHeaders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGExpressionOutputHeaders ItemObj = (CQGExpressionOutputHeaders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            }
                            break;
                        case "CQG.CQGExpressionOutputsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGExpressionOutputs CountObj = (CQGExpressionOutputs)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGExpressionOutputs ItemObj = (CQGExpressionOutputs)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ItempropV = ItemObj[(System.Object)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            case "Timestamp":
                                CQGExpressionOutputs TimestampObj = (CQGExpressionOutputs)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGExpressionOutputs TimestampOffsetObj = (CQGExpressionOutputs)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGExpressionRequestClass":
                            switch (query.MemberName)
                            {
                            case "Continuation":
                                CQGExpressionRequest ContinuationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGExpressionRequest DaysBeforeExpirationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "EqualizeCloses":
                                CQGExpressionRequest EqualizeClosesObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "HistoricalPeriod":
                                CQGExpressionRequest HistoricalPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                                var HistoricalPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
                                break;
                            case "IncludeEnd":
                                CQGExpressionRequest IncludeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "IntradayPeriod":
                                CQGExpressionRequest IntradayPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                                var IntradayPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
                                break;
                            case "RangeEnd":
                                CQGExpressionRequest RangeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGExpressionRequest RangeStartObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGExpressionRequest RecalcPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGExpressionRequest SessionFlagsObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGExpressionRequest SessionsFilterObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubExpression":
                                CQGExpressionRequest SubExpressionObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SubExpressionpropV = SubExpressionObj.SubExpression[(System.Int32)args[0]];
                                var SubExpressionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubExpressionPropKey, value: SubExpressionpropV));
                                break;
                            case "SubExpressionCount":
                                CQGExpressionRequest SubExpressionCountObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 SubExpressionCountpropV = SubExpressionCountObj.SubExpressionCount;
                                var SubExpressionCountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubExpressionCountPropKey, value: SubExpressionCountpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGExpressionRequest SubscriptionLevelObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGExpressionRequest UpdatesEnabledObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGExpressionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGExpressions CountObj = (CQGExpressions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGExpressions ItemObj = (CQGExpressions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExpression ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGExpressions ItemByIdObj = (CQGExpressions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGExpression ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGFillClass":
                            switch (query.MemberName)
                            {
                            case "GWTradesCount":
                                CQGFill GWTradesCountObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWTradesCountpropV = GWTradesCountObj.GWTradesCount[(System.Int32)args[0]];
                                var GWTradesCountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWTradesCountPropKey, value: GWTradesCountpropV));
                                break;
                            case "Id":
                                CQGFill IdObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "LegCount":
                                CQGFill LegCountObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 LegCountpropV = LegCountObj.LegCount;
                                var LegCountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LegCountPropKey, value: LegCountpropV));
                                break;
                            case "Order":
                                CQGFill OrderObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrder OrderpropV = OrderObj.Order;
                                var OrderPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
                                break;
                            case "RefFillId":
                                CQGFill RefFillIdObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String RefFillIdpropV = RefFillIdObj.RefFillId;
                                var RefFillIdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RefFillIdPropKey, value: RefFillIdpropV));
                                break;
                            case "ServerTimestamp":
                                CQGFill ServerTimestampObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Status":
                                CQGFill StatusObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eFillStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Timestamp":
                                CQGFill TimestampObj = (CQGFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            }
                            break;
                        case "CQG.CQGFillsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGFills CountObj = (CQGFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGFills ItemObj = (CQGFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGFill ItempropV = ItemObj[(System.String)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByIndex":
                                CQGFills ItemByIndexObj = (CQGFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGFill ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                                var ItemByIndexPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGGWTradeClass":
                            switch (query.MemberName)
                            {
                            case "Aggressive":
                                CQGGWTrade AggressiveObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean AggressivepropV = AggressiveObj.Aggressive;
                                var AggressivePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggressivePropKey, value: AggressivepropV));
                                break;
                            case "Currency":
                                CQGGWTrade CurrencyObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CurrencypropV = CurrencyObj.Currency;
                                var CurrencyPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyPropKey, value: CurrencypropV));
                                break;
                            case "DisplayPrice":
                                CQGGWTrade DisplayPriceObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DisplayPricepropV = DisplayPriceObj.DisplayPrice;
                                var DisplayPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DisplayPricePropKey, value: DisplayPricepropV));
                                break;
                            case "ExchangeTradeDate":
                                CQGGWTrade ExchangeTradeDateObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ExchangeTradeDatepropV = ExchangeTradeDateObj.ExchangeTradeDate;
                                var ExchangeTradeDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeTradeDatePropKey, value: ExchangeTradeDatepropV));
                                break;
                            case "Fill":
                                CQGGWTrade FillObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGFill FillpropV = FillObj.Fill;
                                var FillPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(FillPropKey, FillpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillPropKey));
                                break;
                            case "Id":
                                CQGGWTrade IdObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "InstrumentName":
                                CQGGWTrade InstrumentNameObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                                var InstrumentNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
                                break;
                            case "Leg":
                                CQGGWTrade LegObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 LegpropV = LegObj.Leg;
                                var LegPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LegPropKey, value: LegpropV));
                                break;
                            case "Price":
                                CQGGWTrade PriceObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "Quantity":
                                CQGGWTrade QuantityObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "Side":
                                CQGGWTrade SideObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderSide SidepropV = SideObj.Side;
                                var SidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
                                break;
                            case "StatementDate":
                                CQGGWTrade StatementDateObj = (CQGGWTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                                var StatementDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGGWTradesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGGWTrades CountObj = (CQGGWTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGGWTrades ItemObj = (CQGGWTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGGWTrade ItempropV = ItemObj[(System.String)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByIndex":
                                CQGGWTrades ItemByIndexObj = (CQGGWTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGGWTrade ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                                var ItemByIndexPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGHistoricalSessionsRequestClass":
                            switch (query.MemberName)
                            {
                            case "RangeEnd":
                                CQGHistoricalSessionsRequest RangeEndObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGHistoricalSessionsRequest RangeStartObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "Symbol":
                                CQGHistoricalSessionsRequest SymbolObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            case "Type":
                                CQGHistoricalSessionsRequest TypeObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eHistoricalSessionsRequestType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGHolidayClass":
                            switch (query.MemberName)
                            {
                            case "HolidayDate":
                                CQGHoliday HolidayDateObj = (CQGHoliday)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime HolidayDatepropV = HolidayDateObj.HolidayDate;
                                var HolidayDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HolidayDatePropKey, value: HolidayDatepropV));
                                break;
                            case "IsDaily":
                                CQGHoliday IsDailyObj = (CQGHoliday)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsDailypropV = IsDailyObj.IsDaily;
                                var IsDailyPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsDailyPropKey, value: IsDailypropV));
                                break;
                            case "SessionMask":
                                CQGHoliday SessionMaskObj = (CQGHoliday)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionWeekDays SessionMaskpropV = SessionMaskObj.SessionMask;
                                var SessionMaskPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionMaskPropKey, value: SessionMaskpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGHolidaysClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGHolidays CountObj = (CQGHolidays)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGHolidays ItemObj = (CQGHolidays)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGHoliday ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "Sessions":
                                CQGHolidays SessionsObj = (CQGHolidays)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSessions SessionspropV = SessionsObj.Sessions;
                                var SessionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(SessionsPropKey, SessionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentClass":
                            switch (query.MemberName)
                            {
                            case "Ask":
                                CQGInstrument AskObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQuote AskpropV = AskObj.Ask;
                                var AskPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AskPropKey, AskpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskPropKey));
                                break;
                            case "BBAType":
                                CQGInstrument BBATypeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eDOMandBBAType BBATypepropV = BBATypeObj.BBAType;
                                var BBATypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BBATypePropKey, value: BBATypepropV));
                                break;
                            case "Bid":
                                CQGInstrument BidObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQuote BidpropV = BidObj.Bid;
                                var BidPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(BidPropKey, BidpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidPropKey));
                                break;
                            case "CEL":
                                CQGInstrument CELObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCEL CELpropV = CELObj.CEL;
                                var CELPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
                                break;
                            case "Commodity":
                                CQGInstrument CommodityObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CommoditypropV = CommodityObj.Commodity;
                                var CommodityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityPropKey, value: CommoditypropV));
                                break;
                            case "Country":
                                CQGInstrument CountryObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CountrypropV = CountryObj.Country;
                                var CountryPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountryPropKey, value: CountrypropV));
                                break;
                            case "Currency":
                                CQGInstrument CurrencyObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CurrencypropV = CurrencyObj.Currency;
                                var CurrencyPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencyPropKey, value: CurrencypropV));
                                break;
                            case "DataSubscriptionLevel":
                                CQGInstrument DataSubscriptionLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eDataSubscriptionLevel DataSubscriptionLevelpropV = DataSubscriptionLevelObj.DataSubscriptionLevel;
                                var DataSubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSubscriptionLevelPropKey, value: DataSubscriptionLevelpropV));
                                break;
                            case "Description":
                                CQGInstrument DescriptionObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DescriptionpropV = DescriptionObj.Description;
                                var DescriptionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
                                break;
                            case "DOMAsks":
                                CQGInstrument DOMAsksObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGDOMQuotes DOMAskspropV = DOMAsksObj.DOMAsks;
                                var DOMAsksPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DOMAsksPropKey, DOMAskspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMAsksPropKey));
                                break;
                            case "DOMBids":
                                CQGInstrument DOMBidsObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGDOMQuotes DOMBidspropV = DOMBidsObj.DOMBids;
                                var DOMBidsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DOMBidsPropKey, DOMBidspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBidsPropKey));
                                break;
                            case "DOMBookLimit":
                                CQGInstrument DOMBookLimitObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DOMBookLimitpropV = DOMBookLimitObj.DOMBookLimit;
                                var DOMBookLimitPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBookLimitPropKey, value: DOMBookLimitpropV));
                                break;
                            case "DOMStatus":
                                CQGInstrument DOMStatusObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean DOMStatuspropV = DOMStatusObj.DOMStatus;
                                var DOMStatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMStatusPropKey, value: DOMStatuspropV));
                                break;
                            case "DTE":
                                CQGInstrument DTEObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DTEpropV = DTEObj.DTE;
                                var DTEPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DTEPropKey, value: DTEpropV));
                                break;
                            case "ExchangeAbbreviation":
                                CQGInstrument ExchangeAbbreviationObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ExchangeAbbreviationpropV = ExchangeAbbreviationObj.ExchangeAbbreviation;
                                var ExchangeAbbreviationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeAbbreviationPropKey, value: ExchangeAbbreviationpropV));
                                break;
                            case "ExchangeID":
                                CQGInstrument ExchangeIDObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ExchangeIDpropV = ExchangeIDObj.ExchangeID;
                                var ExchangeIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExchangeIDPropKey, value: ExchangeIDpropV));
                                break;
                            case "ExpirationDate":
                                CQGInstrument ExpirationDateObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ExpirationDatepropV = ExpirationDateObj.ExpirationDate;
                                var ExpirationDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExpirationDatePropKey, value: ExpirationDatepropV));
                                break;
                            case "FullName":
                                CQGInstrument FullNameObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String FullNamepropV = FullNameObj.FullName;
                                var FullNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FullNamePropKey, value: FullNamepropV));
                                break;
                            case "InitialMargin":
                                CQGInstrument InitialMarginObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double InitialMarginpropV = InitialMarginObj.InitialMargin;
                                var InitialMarginPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InitialMarginPropKey, value: InitialMarginpropV));
                                break;
                            case "InstrumentID":
                                CQGInstrument InstrumentIDObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 InstrumentIDpropV = InstrumentIDObj.InstrumentID;
                                var InstrumentIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentIDPropKey, value: InstrumentIDpropV));
                                break;
                            case "InstrumentType":
                                CQGInstrument InstrumentTypeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eInstrumentType InstrumentTypepropV = InstrumentTypeObj.InstrumentType;
                                var InstrumentTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentTypePropKey, value: InstrumentTypepropV));
                                break;
                            case "IsDownTick":
                                CQGInstrument IsDownTickObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsDownTickpropV = IsDownTickObj.IsDownTick;
                                var IsDownTickPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsDownTickPropKey, value: IsDownTickpropV));
                                break;
                            case "IsFastMarket":
                                CQGInstrument IsFastMarketObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsFastMarketpropV = IsFastMarketObj.IsFastMarket;
                                var IsFastMarketPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsFastMarketPropKey, value: IsFastMarketpropV));
                                break;
                            case "IsUpTick":
                                CQGInstrument IsUpTickObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsUpTickpropV = IsUpTickObj.IsUpTick;
                                var IsUpTickPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsUpTickPropKey, value: IsUpTickpropV));
                                break;
                            case "MaintenanceMargin":
                                CQGInstrument MaintenanceMarginObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MaintenanceMarginpropV = MaintenanceMarginObj.MaintenanceMargin;
                                var MaintenanceMarginPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaintenanceMarginPropKey, value: MaintenanceMarginpropV));
                                break;
                            case "Month":
                                CQGInstrument MonthObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 MonthpropV = MonthObj.Month;
                                var MonthPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MonthPropKey, value: MonthpropV));
                                break;
                            case "MonthChar":
                                CQGInstrument MonthCharObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String MonthCharpropV = MonthCharObj.MonthChar;
                                var MonthCharPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MonthCharPropKey, value: MonthCharpropV));
                                break;
                            case "NetChange":
                                CQGInstrument NetChangeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double NetChangepropV = NetChangeObj.NetChange;
                                var NetChangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NetChangePropKey, value: NetChangepropV));
                                break;
                            case "PreferredSessionsName":
                                CQGInstrument PreferredSessionsNameObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String PreferredSessionsNamepropV = PreferredSessionsNameObj.PreferredSessionsName;
                                var PreferredSessionsNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreferredSessionsNamePropKey, value: PreferredSessionsNamepropV));
                                break;
                            case "Properties":
                                CQGInstrument PropertiesObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrumentProperties PropertiespropV = PropertiesObj.Properties;
                                var PropertiesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
                                break;
                            case "PropertyLevel":
                                CQGInstrument PropertyLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.ePropertySubscriptionLevel PropertyLevelpropV = PropertyLevelObj.PropertyLevel;
                                var PropertyLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertyLevelPropKey, value: PropertyLevelpropV));
                                break;
                            case "QuoteLevel":
                                CQGInstrument QuoteLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eQuoteSubscriptionLevel QuoteLevelpropV = QuoteLevelObj.QuoteLevel;
                                var QuoteLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuoteLevelPropKey, value: QuoteLevelpropV));
                                break;
                            case "Quotes":
                                CQGInstrument QuotesObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQuotes QuotespropV = QuotesObj.Quotes;
                                var QuotesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(QuotesPropKey, QuotespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuotesPropKey));
                                break;
                            case "Scale":
                                CQGInstrument ScaleObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int16 ScalepropV = ScaleObj.Scale;
                                var ScalePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ScalePropKey, value: ScalepropV));
                                break;
                            case "ServerTimestamp":
                                CQGInstrument ServerTimestampObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "SessionMask":
                                CQGInstrument SessionMaskObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 SessionMaskpropV = SessionMaskObj.SessionMask;
                                var SessionMaskPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionMaskPropKey, value: SessionMaskpropV));
                                break;
                            case "SessionNumber":
                                CQGInstrument SessionNumberObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 SessionNumberpropV = SessionNumberObj.SessionNumber;
                                var SessionNumberPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionNumberPropKey, value: SessionNumberpropV));
                                break;
                            case "Sessions":
                                CQGInstrument SessionsObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSessions SessionspropV = SessionsObj.Sessions;
                                var SessionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(SessionsPropKey, SessionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsPropKey));
                                break;
                            case "Strike":
                                CQGInstrument StrikeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 StrikepropV = StrikeObj.Strike;
                                var StrikePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrikePropKey, value: StrikepropV));
                                break;
                            case "Tag":
                                CQGInstrument TagObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            case "TickSize":
                                CQGInstrument TickSizeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TickSizepropV = TickSizeObj.TickSize;
                                var TickSizePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizePropKey, value: TickSizepropV));
                                break;
                            case "TickSizeFractionDenominator":
                                CQGInstrument TickSizeFractionDenominatorObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TickSizeFractionDenominatorpropV = TickSizeFractionDenominatorObj.TickSizeFractionDenominator;
                                var TickSizeFractionDenominatorPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizeFractionDenominatorPropKey, value: TickSizeFractionDenominatorpropV));
                                break;
                            case "TickSizeFractionNumerator":
                                CQGInstrument TickSizeFractionNumeratorObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TickSizeFractionNumeratorpropV = TickSizeFractionNumeratorObj.TickSizeFractionNumerator;
                                var TickSizeFractionNumeratorPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickSizeFractionNumeratorPropKey, value: TickSizeFractionNumeratorpropV));
                                break;
                            case "TickValue":
                                CQGInstrument TickValueObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TickValuepropV = TickValueObj.TickValue;
                                var TickValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickValuePropKey, value: TickValuepropV));
                                break;
                            case "Timestamp":
                                CQGInstrument TimestampObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TodayCTotalVolume":
                                CQGInstrument TodayCTotalVolumeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TodayCTotalVolumepropV = TodayCTotalVolumeObj.TodayCTotalVolume;
                                var TodayCTotalVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TodayCTotalVolumePropKey, value: TodayCTotalVolumepropV));
                                break;
                            case "Trade":
                                CQGInstrument TradeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQuote TradepropV = TradeObj.Trade;
                                var TradePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
                                break;
                            case "UnderlyingInstrument":
                                CQGInstrument UnderlyingInstrumentObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrument UnderlyingInstrumentpropV = UnderlyingInstrumentObj.UnderlyingInstrument;
                                var UnderlyingInstrumentPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(UnderlyingInstrumentPropKey, UnderlyingInstrumentpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnderlyingInstrumentPropKey));
                                break;
                            case "UnderlyingInstrumentName":
                                CQGInstrument UnderlyingInstrumentNameObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String UnderlyingInstrumentNamepropV = UnderlyingInstrumentNameObj.UnderlyingInstrumentName;
                                var UnderlyingInstrumentNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UnderlyingInstrumentNamePropKey, value: UnderlyingInstrumentNamepropV));
                                break;
                            case "YCOI":
                                CQGInstrument YCOIObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double YCOIpropV = YCOIObj.YCOI;
                                var YCOIPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YCOIPropKey, value: YCOIpropV));
                                break;
                            case "Year":
                                CQGInstrument YearObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 YearpropV = YearObj.Year;
                                var YearPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YearPropKey, value: YearpropV));
                                break;
                            case "YearString":
                                CQGInstrument YearStringObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String YearStringpropV = YearStringObj.YearString;
                                var YearStringPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YearStringPropKey, value: YearStringpropV));
                                break;
                            case "YesterdayCTotalVolume":
                                CQGInstrument YesterdayCTotalVolumeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double YesterdayCTotalVolumepropV = YesterdayCTotalVolumeObj.YesterdayCTotalVolume;
                                var YesterdayCTotalVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: YesterdayCTotalVolumePropKey, value: YesterdayCTotalVolumepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentPropertiesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGInstrumentProperties CountObj = (CQGInstrumentProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGInstrumentProperties ItemObj = (CQGInstrumentProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrumentProperty ItempropV = ItemObj[(CQG.eInstrumentProperty)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentPropertyClass":
                            switch (query.MemberName)
                            {
                            case "Instrument":
                                CQGInstrumentProperty InstrumentObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                                var InstrumentPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
                                break;
                            case "Name":
                                CQGInstrumentProperty NameObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "ServerTimestamp":
                                CQGInstrumentProperty ServerTimestampObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Timestamp":
                                CQGInstrumentProperty TimestampObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "Type":
                                CQGInstrumentProperty TypeObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eInstrumentProperty TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "Value":
                                CQGInstrumentProperty ValueObj = (CQGInstrumentProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object ValuepropV = ValueObj.Value;
                                var ValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGInstruments CountObj = (CQGInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGInstruments ItemObj = (CQGInstruments)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrument ItempropV = ItemObj[(System.Object)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentsGroupClass":
                            switch (query.MemberName)
                            {
                            case "Id":
                                CQGInstrumentsGroup IdObj = (CQGInstrumentsGroup)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Instruments":
                                CQGInstrumentsGroup InstrumentsObj = (CQGInstrumentsGroup)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstruments InstrumentspropV = InstrumentsObj.Instruments;
                                var InstrumentsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InstrumentsPropKey, InstrumentspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentsPropKey));
                                break;
                            case "Request":
                                CQGInstrumentsGroup RequestObj = (CQGInstrumentsGroup)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrumentsGroupRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentsGroupRequestClass":
                            switch (query.MemberName)
                            {
                            case "Commodity":
                                CQGInstrumentsGroupRequest CommodityObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CommoditypropV = CommodityObj.Commodity;
                                var CommodityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityPropKey, value: CommoditypropV));
                                break;
                            case "InstrumentTypes":
                                CQGInstrumentsGroupRequest InstrumentTypesObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eInstrumentType InstrumentTypespropV = InstrumentTypesObj.InstrumentTypes;
                                var InstrumentTypesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentTypesPropKey, value: InstrumentTypespropV));
                                break;
                            case "RangeEnd":
                                CQGInstrumentsGroupRequest RangeEndObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGInstrumentsGroupRequest RangeStartObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGInstrumentsGroupRequest SubscriptionLevelObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eGroupSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentsGroupsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGInstrumentsGroups CountObj = (CQGInstrumentsGroups)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGInstrumentsGroups ItemObj = (CQGInstrumentsGroups)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrumentsGroup ItempropV = ItemObj[(System.Object)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentSubscriptionRequestClass":
                            switch (query.MemberName)
                            {
                            case "DOMBBAType":
                                CQGInstrumentSubscriptionRequest DOMBBATypeObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eDOMandBBAType DOMBBATypepropV = DOMBBATypeObj.DOMBBAType;
                                var DOMBBATypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMBBATypePropKey, value: DOMBBATypepropV));
                                break;
                            case "DOMStatus":
                                CQGInstrumentSubscriptionRequest DOMStatusObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean DOMStatuspropV = DOMStatusObj.DOMStatus;
                                var DOMStatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DOMStatusPropKey, value: DOMStatuspropV));
                                break;
                            case "PropertyLevel":
                                CQGInstrumentSubscriptionRequest PropertyLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.ePropertySubscriptionLevel PropertyLevelpropV = PropertyLevelObj.PropertyLevel;
                                var PropertyLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertyLevelPropKey, value: PropertyLevelpropV));
                                break;
                            case "QuoteLevel":
                                CQGInstrumentSubscriptionRequest QuoteLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eQuoteSubscriptionLevel QuoteLevelpropV = QuoteLevelObj.QuoteLevel;
                                var QuoteLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuoteLevelPropKey, value: QuoteLevelpropV));
                                break;
                            case "Symbol":
                                CQGInstrumentSubscriptionRequest SymbolObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGIntegerCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGIntegerCollection CountObj = (CQGIntegerCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGIntegerCollection ItemObj = (CQGIntegerCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            }
                            break;
                        case "CQG.CQGLoggerClass":
                            switch (query.MemberName)
                            {
                            case "CEL":
                                CQGLogger CELObj = (CQGLogger)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCEL CELpropV = CELObj.CEL;
                                var CELPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGManualFillClass":
                            switch (query.MemberName)
                            {
                            case "DisplayPrice":
                                CQGManualFill DisplayPriceObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DisplayPricepropV = DisplayPriceObj.DisplayPrice;
                                var DisplayPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DisplayPricePropKey, value: DisplayPricepropV));
                                break;
                            case "GWAccountID":
                                CQGManualFill GWAccountIDObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "InstrumentName":
                                CQGManualFill InstrumentNameObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                                var InstrumentNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
                                break;
                            case "Note":
                                CQGManualFill NoteObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NotepropV = NoteObj.Note;
                                var NotePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NotePropKey, value: NotepropV));
                                break;
                            case "Price":
                                CQGManualFill PriceObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "Quantity":
                                CQGManualFill QuantityObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "Side":
                                CQGManualFill SideObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderSide SidepropV = SideObj.Side;
                                var SidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
                                break;
                            case "StatementDate":
                                CQGManualFill StatementDateObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                                var StatementDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
                                break;
                            case "TradeId":
                                CQGManualFill TradeIdObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TradeIdpropV = TradeIdObj.TradeId;
                                var TradeIdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeIdPropKey, value: TradeIdpropV));
                                break;
                            case "TradeTimestamp":
                                CQGManualFill TradeTimestampObj = (CQGManualFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TradeTimestamppropV = TradeTimestampObj.TradeTimestamp;
                                var TradeTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeTimestampPropKey, value: TradeTimestamppropV));
                                break;
                            }
                            break;
                        case "CQG.CQGManualFillRequestClass":
                            switch (query.MemberName)
                            {
                            case "GWAccountID":
                                CQGManualFillRequest GWAccountIDObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "InstrumentName":
                                CQGManualFillRequest InstrumentNameObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                                var InstrumentNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
                                break;
                            case "Note":
                                CQGManualFillRequest NoteObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NotepropV = NoteObj.Note;
                                var NotePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NotePropKey, value: NotepropV));
                                break;
                            case "Price":
                                CQGManualFillRequest PriceObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "Quantity":
                                CQGManualFillRequest QuantityObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "Side":
                                CQGManualFillRequest SideObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderSide SidepropV = SideObj.Side;
                                var SidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
                                break;
                            case "StatementDate":
                                CQGManualFillRequest StatementDateObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                                var StatementDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
                                break;
                            case "TradeId":
                                CQGManualFillRequest TradeIdObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TradeIdpropV = TradeIdObj.TradeId;
                                var TradeIdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeIdPropKey, value: TradeIdpropV));
                                break;
                            case "TradeTimestamp":
                                CQGManualFillRequest TradeTimestampObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TradeTimestamppropV = TradeTimestampObj.TradeTimestamp;
                                var TradeTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeTimestampPropKey, value: TradeTimestamppropV));
                                break;
                            }
                            break;
                        case "CQG.CQGManualFillsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGManualFills CountObj = (CQGManualFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "DataLevel":
                                CQGManualFills DataLevelObj = (CQGManualFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eManualFillsDataLevel DataLevelpropV = DataLevelObj.DataLevel;
                                var DataLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataLevelPropKey, value: DataLevelpropV));
                                break;
                            case "GWAccountID":
                                CQGManualFills GWAccountIDObj = (CQGManualFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "Item":
                                CQGManualFills ItemObj = (CQGManualFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGManualFill ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGManualFillsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGManualFillsCollection CountObj = (CQGManualFillsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGManualFillsCollection ItemObj = (CQGManualFillsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGManualFills ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGModifiedPropertiesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGModifiedProperties CountObj = (CQGModifiedProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGModifiedProperties ItemObj = (CQGModifiedProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGModifiedProperty ItempropV = ItemObj[(CQG.eOrderProperty)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByIndex":
                                CQGModifiedProperties ItemByIndexObj = (CQGModifiedProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGModifiedProperty ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                                var ItemByIndexPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGModifiedPropertyClass":
                            switch (query.MemberName)
                            {
                            case "Description":
                                CQGModifiedProperty DescriptionObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DescriptionpropV = DescriptionObj.Description;
                                var DescriptionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
                                break;
                            case "Name":
                                CQGModifiedProperty NameObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "NewValue":
                                CQGModifiedProperty NewValueObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object NewValuepropV = NewValueObj.NewValue;
                                var NewValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NewValuePropKey, value: NewValuepropV));
                                break;
                            case "PreviousValue":
                                CQGModifiedProperty PreviousValueObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object PreviousValuepropV = PreviousValueObj.PreviousValue;
                                var PreviousValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PreviousValuePropKey, value: PreviousValuepropV));
                                break;
                            case "Type":
                                CQGModifiedProperty TypeObj = (CQGModifiedProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderProperty TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderActionRequestClass":
                            switch (query.MemberName)
                            {
                            case "Account":
                                CQGOrderActionRequest AccountObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccount AccountpropV = AccountObj.Account;
                                var AccountPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
                                break;
                            case "AlgorithmID":
                                CQGOrderActionRequest AlgorithmIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.UInt32 AlgorithmIDpropV = AlgorithmIDObj.AlgorithmID;
                                var AlgorithmIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDpropV));
                                break;
                            case "AlgorithmStringID":
                                CQGOrderActionRequest AlgorithmStringIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String AlgorithmStringIDpropV = AlgorithmStringIDObj.AlgorithmStringID;
                                var AlgorithmStringIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDpropV));
                                break;
                            case "FromAllTraders":
                                CQGOrderActionRequest FromAllTradersObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean FromAllTraderspropV = FromAllTradersObj.FromAllTraders;
                                var FromAllTradersPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FromAllTradersPropKey, value: FromAllTraderspropV));
                                break;
                            case "Instrument":
                                CQGOrderActionRequest InstrumentObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                                var InstrumentPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
                                break;
                            case "OrderSide":
                                CQGOrderActionRequest OrderSideObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderSide OrderSidepropV = OrderSideObj.OrderSide;
                                var OrderSidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderSidePropKey, value: OrderSidepropV));
                                break;
                            case "Parked":
                                CQGOrderActionRequest ParkedObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean ParkedpropV = ParkedObj.Parked;
                                var ParkedPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParkedPropKey, value: ParkedpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderChainClass":
                            switch (query.MemberName)
                            {
                            case "AlgorithmID":
                                CQGOrderChain AlgorithmIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.UInt32 AlgorithmIDpropV = AlgorithmIDObj.AlgorithmID;
                                var AlgorithmIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDpropV));
                                break;
                            case "AlgorithmStringID":
                                CQGOrderChain AlgorithmStringIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String AlgorithmStringIDpropV = AlgorithmStringIDObj.AlgorithmStringID;
                                var AlgorithmStringIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDpropV));
                                break;
                            case "GWAccountID":
                                CQGOrderChain GWAccountIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderClass":
                            switch (query.MemberName)
                            {
                            case "Account":
                                CQGOrder AccountObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccount AccountpropV = AccountObj.Account;
                                var AccountPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
                                break;
                            case "AlgorithmID":
                                CQGOrder AlgorithmIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.UInt32 AlgorithmIDpropV = AlgorithmIDObj.AlgorithmID;
                                var AlgorithmIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmIDPropKey, value: AlgorithmIDpropV));
                                break;
                            case "AlgorithmStringID":
                                CQGOrder AlgorithmStringIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String AlgorithmStringIDpropV = AlgorithmStringIDObj.AlgorithmStringID;
                                var AlgorithmStringIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AlgorithmStringIDPropKey, value: AlgorithmStringIDpropV));
                                break;
                            case "CanBeCanceled":
                                CQGOrder CanBeCanceledObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean CanBeCanceledpropV = CanBeCanceledObj.CanBeCanceled;
                                var CanBeCanceledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeCanceledPropKey, value: CanBeCanceledpropV));
                                break;
                            case "CanBeModified":
                                CQGOrder CanBeModifiedObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean CanBeModifiedpropV = CanBeModifiedObj.CanBeModified;
                                var CanBeModifiedPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeModifiedPropKey, value: CanBeModifiedpropV));
                                break;
                            case "CanBeReplaced":
                                CQGOrder CanBeReplacedObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean CanBeReplacedpropV = CanBeReplacedObj.CanBeReplaced;
                                var CanBeReplacedPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeReplacedPropKey, value: CanBeReplacedpropV));
                                break;
                            case "CancelationInstruction":
                                CQGOrder CancelationInstructionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderCancelationType CancelationInstructionpropV = CancelationInstructionObj.CancelationInstruction;
                                var CancelationInstructionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CancelationInstructionPropKey, value: CancelationInstructionpropV));
                                break;
                            case "Description":
                                CQGOrder DescriptionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DescriptionpropV = DescriptionObj.Description;
                                var DescriptionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
                                break;
                            case "DurationType":
                                CQGOrder DurationTypeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderDuration DurationTypepropV = DurationTypeObj.DurationType;
                                var DurationTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DurationTypePropKey, value: DurationTypepropV));
                                break;
                            case "FilledQuantity":
                                CQGOrder FilledQuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 FilledQuantitypropV = FilledQuantityObj.FilledQuantity;
                                var FilledQuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FilledQuantityPropKey, value: FilledQuantitypropV));
                                break;
                            case "Fills":
                                CQGOrder FillsObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGFills FillspropV = FillsObj.Fills;
                                var FillsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(FillsPropKey, FillspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillsPropKey));
                                break;
                            case "GUID":
                                CQGOrder GUIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String GUIDpropV = GUIDObj.GUID;
                                var GUIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GUIDPropKey, value: GUIDpropV));
                                break;
                            case "GWOrderID":
                                CQGOrder GWOrderIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String GWOrderIDpropV = GWOrderIDObj.GWOrderID;
                                var GWOrderIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWOrderIDPropKey, value: GWOrderIDpropV));
                                break;
                            case "GWStatus":
                                CQGOrder GWStatusObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderStatus GWStatuspropV = GWStatusObj.GWStatus;
                                var GWStatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWStatusPropKey, value: GWStatuspropV));
                                break;
                            case "Instrument":
                                CQGOrder InstrumentObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                                var InstrumentPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
                                break;
                            case "InstrumentName":
                                CQGOrder InstrumentNameObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                                var InstrumentNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
                                break;
                            case "IsExternal":
                                CQGOrder IsExternalObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsExternalpropV = IsExternalObj.IsExternal;
                                var IsExternalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsExternalPropKey, value: IsExternalpropV));
                                break;
                            case "IsFinal":
                                CQGOrder IsFinalObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsFinalpropV = IsFinalObj.IsFinal;
                                var IsFinalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsFinalPropKey, value: IsFinalpropV));
                                break;
                            case "LastError":
                                CQGOrder LastErrorObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "LastEvent":
                                CQGOrder LastEventObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderEvent LastEventpropV = LastEventObj.LastEvent;
                                var LastEventPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastEventPropKey, value: LastEventpropV));
                                break;
                            case "LimitPrice":
                                CQGOrder LimitPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double LimitPricepropV = LimitPriceObj.LimitPrice;
                                var LimitPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LimitPricePropKey, value: LimitPricepropV));
                                break;
                            case "OrderCheckMark":
                                CQGOrder OrderCheckMarkObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean OrderCheckMarkpropV = OrderCheckMarkObj.OrderCheckMark;
                                var OrderCheckMarkPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderCheckMarkPropKey, value: OrderCheckMarkpropV));
                                break;
                            case "OriginalOrderID":
                                CQGOrder OriginalOrderIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String OriginalOrderIDpropV = OriginalOrderIDObj.OriginalOrderID;
                                var OriginalOrderIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OriginalOrderIDPropKey, value: OriginalOrderIDpropV));
                                break;
                            case "PlaceTime":
                                CQGOrder PlaceTimeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime PlaceTimepropV = PlaceTimeObj.PlaceTime;
                                var PlaceTimePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PlaceTimePropKey, value: PlaceTimepropV));
                                break;
                            case "Properties":
                                CQGOrder PropertiesObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrderProperties PropertiespropV = PropertiesObj.Properties;
                                var PropertiesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
                                break;
                            case "Quantity":
                                CQGOrder QuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "RemainingQuantity":
                                CQGOrder RemainingQuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RemainingQuantitypropV = RemainingQuantityObj.RemainingQuantity;
                                var RemainingQuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemainingQuantityPropKey, value: RemainingQuantitypropV));
                                break;
                            case "ServerTimestamp":
                                CQGOrder ServerTimestampObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Side":
                                CQGOrder SideObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderSide SidepropV = SideObj.Side;
                                var SidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
                                break;
                            case "State":
                                CQGOrder StateObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderLocalState StatepropV = StateObj.State;
                                var StatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatePropKey, value: StatepropV));
                                break;
                            case "StopPrice":
                                CQGOrder StopPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double StopPricepropV = StopPriceObj.StopPrice;
                                var StopPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopPricePropKey, value: StopPricepropV));
                                break;
                            case "Tag":
                                CQGOrder TagObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            case "TimeActiveAt":
                                CQGOrder TimeActiveAtObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimeActiveAtpropV = TimeActiveAtObj.TimeActiveAt;
                                var TimeActiveAtPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimeActiveAtPropKey, value: TimeActiveAtpropV));
                                break;
                            case "Timestamp":
                                CQGOrder TimestampObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "Transactions":
                                CQGOrder TransactionsObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTransactions TransactionspropV = TransactionsObj.Transactions;
                                var TransactionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TransactionsPropKey, TransactionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TransactionsPropKey));
                                break;
                            case "Type":
                                CQGOrder TypeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "UEName":
                                CQGOrder UENameObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String UENamepropV = UENameObj.UEName;
                                var UENamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UENamePropKey, value: UENamepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderModifyClass":
                            switch (query.MemberName)
                            {
                            case "Properties":
                                CQGOrderModify PropertiesObj = (CQGOrderModify)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrderProperties PropertiespropV = PropertiesObj.Properties;
                                var PropertiesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderPropertiesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGOrderProperties CountObj = (CQGOrderProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGOrderProperties ItemObj = (CQGOrderProperties)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrderProperty ItempropV = ItemObj[(CQG.eOrderProperty)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderPropertyClass":
                            switch (query.MemberName)
                            {
                            case "CanBeSet":
                                CQGOrderProperty CanBeSetObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean CanBeSetpropV = CanBeSetObj.CanBeSet;
                                var CanBeSetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanBeSetPropKey, value: CanBeSetpropV));
                                break;
                            case "Description":
                                CQGOrderProperty DescriptionObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String DescriptionpropV = DescriptionObj.Description;
                                var DescriptionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionPropKey, value: DescriptionpropV));
                                break;
                            case "Name":
                                CQGOrderProperty NameObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Order":
                                CQGOrderProperty OrderObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrder OrderpropV = OrderObj.Order;
                                var OrderPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
                                break;
                            case "Timestamp":
                                CQGOrderProperty TimestampObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "Type":
                                CQGOrderProperty TypeObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderProperty TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "Value":
                                CQGOrderProperty ValueObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object ValuepropV = ValueObj.Value;
                                var ValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGOrdersClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGOrders CountObj = (CQGOrders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGOrders ItemObj = (CQGOrders)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrder ItempropV = ItemObj[(System.String)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGOrdersQueryClass":
                            switch (query.MemberName)
                            {
                            case "Account":
                                CQGOrdersQuery AccountObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccount AccountpropV = AccountObj.Account;
                                var AccountPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
                                break;
                            case "CEL":
                                CQGOrdersQuery CELObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGCEL CELpropV = CELObj.CEL;
                                var CELPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CELPropKey, CELpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CELPropKey));
                                break;
                            case "FinalError":
                                CQGOrdersQuery FinalErrorObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError FinalErrorpropV = FinalErrorObj.FinalError;
                                var FinalErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(FinalErrorPropKey, FinalErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FinalErrorPropKey));
                                break;
                            case "LastChunk":
                                CQGOrdersQuery LastChunkObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrders LastChunkpropV = LastChunkObj.LastChunk;
                                var LastChunkPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastChunkPropKey, LastChunkpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastChunkPropKey));
                                break;
                            case "Orders":
                                CQGOrdersQuery OrdersObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrders OrderspropV = OrdersObj.Orders;
                                var OrdersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OrdersPropKey, OrderspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrdersPropKey));
                                break;
                            case "QueryID":
                                CQGOrdersQuery QueryIDObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QueryIDpropV = QueryIDObj.QueryID;
                                var QueryIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QueryIDPropKey, value: QueryIDpropV));
                                break;
                            case "ServerTimestamp":
                                CQGOrdersQuery ServerTimestampObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Status":
                                CQGOrdersQuery StatusObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Timestamp":
                                CQGOrdersQuery TimestampObj = (CQGOrdersQuery)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderStatisticsClass":
                            switch (query.MemberName)
                            {
                            case "StatisticsOnReceive":
                                CQGOrderStatistics StatisticsOnReceiveObj = (CQGOrderStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object StatisticsOnReceivepropV = StatisticsOnReceiveObj.StatisticsOnReceive[(System.String)args[0]];
                                var StatisticsOnReceivePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsOnReceivePropKey, value: StatisticsOnReceivepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGParameterDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "AvailableValues":
                                CQGParameterDefinition AvailableValuesObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStringCollection AvailableValuespropV = AvailableValuesObj.AvailableValues;
                                var AvailableValuesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AvailableValuesPropKey, AvailableValuespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvailableValuesPropKey));
                                break;
                            case "Comment":
                                CQGParameterDefinition CommentObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String CommentpropV = CommentObj.Comment;
                                var CommentPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommentPropKey, value: CommentpropV));
                                break;
                            case "DefaultValue":
                                CQGParameterDefinition DefaultValueObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object DefaultValuepropV = DefaultValueObj.DefaultValue;
                                var DefaultValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefaultValuePropKey, value: DefaultValuepropV));
                                break;
                            case "Name":
                                CQGParameterDefinition NameObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Type":
                                CQGParameterDefinition TypeObj = (CQGParameterDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eUserFormulaParameterType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGParameterDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGParameterDefinitions CountObj = (CQGParameterDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGParameterDefinitions ItemObj = (CQGParameterDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGParameterDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByName":
                                CQGParameterDefinitions ItemByNameObj = (CQGParameterDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGParameterDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                                var ItemByNamePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGPointAndFigureBarClass":
                            switch (query.MemberName)
                            {
                            case "High":
                                CQGPointAndFigureBar HighObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HighpropV = HighObj.High;
                                var HighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
                                break;
                            case "Low":
                                CQGPointAndFigureBar LowObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double LowpropV = LowObj.Low;
                                var LowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
                                break;
                            case "Mid":
                                CQGPointAndFigureBar MidObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MidpropV = MidObj.Mid;
                                var MidPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
                                break;
                            case "PFHigh":
                                CQGPointAndFigureBar PFHighObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PFHighpropV = PFHighObj.PFHigh;
                                var PFHighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PFHighPropKey, value: PFHighpropV));
                                break;
                            case "PFLow":
                                CQGPointAndFigureBar PFLowObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PFLowpropV = PFLowObj.PFLow;
                                var PFLowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PFLowPropKey, value: PFLowpropV));
                                break;
                            case "Timestamp":
                                CQGPointAndFigureBar TimestampObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGPointAndFigureBar TimestampOffsetObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            case "Up":
                                CQGPointAndFigureBar UpObj = (CQGPointAndFigureBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UppropV = UpObj.Up;
                                var UpPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpPropKey, value: UppropV));
                                break;
                            }
                            break;
                        case "CQG.CQGPointAndFigureBarsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGPointAndFigureBars CountObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "EndTimestamp":
                                CQGPointAndFigureBars EndTimestampObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGPointAndFigureBars IdObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGPointAndFigureBars ItemObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPointAndFigureBar ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGPointAndFigureBars LastErrorObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGPointAndFigureBars RequestObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPointAndFigureBarsRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGPointAndFigureBars StartTimestampObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGPointAndFigureBars StatusObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGPointAndFigureBars TagObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGPointAndFigureBarsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGPointAndFigureBarsCollection CountObj = (CQGPointAndFigureBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGPointAndFigureBarsCollection ItemObj = (CQGPointAndFigureBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPointAndFigureBars ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGPointAndFigureBarsCollection ItemByIdObj = (CQGPointAndFigureBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPointAndFigureBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGPointAndFigureBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "BoxSize":
                                CQGPointAndFigureBarsRequest BoxSizeObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 BoxSizepropV = BoxSizeObj.BoxSize;
                                var BoxSizePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BoxSizePropKey, value: BoxSizepropV));
                                break;
                            case "BoxUnits":
                                CQGPointAndFigureBarsRequest BoxUnitsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.ePfBoxUnits BoxUnitspropV = BoxUnitsObj.BoxUnits;
                                var BoxUnitsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BoxUnitsPropKey, value: BoxUnitspropV));
                                break;
                            case "Continuation":
                                CQGPointAndFigureBarsRequest ContinuationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DataSource":
                                CQGPointAndFigureBarsRequest DataSourceObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.ePfDataSource DataSourcepropV = DataSourceObj.DataSource;
                                var DataSourcePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DataSourcePropKey, value: DataSourcepropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGPointAndFigureBarsRequest DaysBeforeExpirationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "EqualizeCloses":
                                CQGPointAndFigureBarsRequest EqualizeClosesObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "IncludeEnd":
                                CQGPointAndFigureBarsRequest IncludeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "RangeEnd":
                                CQGPointAndFigureBarsRequest RangeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGPointAndFigureBarsRequest RangeStartObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGPointAndFigureBarsRequest RecalcPeriodObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "Reversal":
                                CQGPointAndFigureBarsRequest ReversalObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ReversalpropV = ReversalObj.Reversal;
                                var ReversalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReversalPropKey, value: ReversalpropV));
                                break;
                            case "SessionFlags":
                                CQGPointAndFigureBarsRequest SessionFlagsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGPointAndFigureBarsRequest SessionsFilterObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGPointAndFigureBarsRequest SubscriptionLevelObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "Symbol":
                                CQGPointAndFigureBarsRequest SymbolObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGPointAndFigureBarsRequest UpdatesEnabledObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGPositionClass":
                            switch (query.MemberName)
                            {
                            case "Account":
                                CQGPosition AccountObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccount AccountpropV = AccountObj.Account;
                                var AccountPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(AccountPropKey, AccountpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AccountPropKey));
                                break;
                            case "AveragePrice":
                                CQGPosition AveragePriceObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AveragePricepropV = AveragePriceObj.AveragePrice;
                                var AveragePricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AveragePricePropKey, value: AveragePricepropV));
                                break;
                            case "Instrument":
                                CQGPosition InstrumentObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                                var InstrumentPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
                                break;
                            case "InstrumentName":
                                CQGPosition InstrumentNameObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String InstrumentNamepropV = InstrumentNameObj.InstrumentName;
                                var InstrumentNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentNamePropKey, value: InstrumentNamepropV));
                                break;
                            case "ManualFillsInvolved":
                                CQGPosition ManualFillsInvolvedObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean ManualFillsInvolvedpropV = ManualFillsInvolvedObj.ManualFillsInvolved;
                                var ManualFillsInvolvedPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ManualFillsInvolvedPropKey, value: ManualFillsInvolvedpropV));
                                break;
                            case "MatchedTrades":
                                CQGPosition MatchedTradesObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTrades MatchedTradespropV = MatchedTradesObj.MatchedTrades;
                                var MatchedTradesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(MatchedTradesPropKey, MatchedTradespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MatchedTradesPropKey));
                                break;
                            case "MVO":
                                CQGPosition MVOObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MVOpropV = MVOObj.MVO;
                                var MVOPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MVOPropKey, value: MVOpropV));
                                break;
                            case "OpenTrades":
                                CQGPosition OpenTradesObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTrades OpenTradespropV = OpenTradesObj.OpenTrades;
                                var OpenTradesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OpenTradesPropKey, OpenTradespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenTradesPropKey));
                                break;
                            case "OTE":
                                CQGPosition OTEObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double OTEpropV = OTEObj.OTE;
                                var OTEPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OTEPropKey, value: OTEpropV));
                                break;
                            case "ProfitLoss":
                                CQGPosition ProfitLossObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ProfitLosspropV = ProfitLossObj.ProfitLoss;
                                var ProfitLossPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitLossPropKey, value: ProfitLosspropV));
                                break;
                            case "Quantity":
                                CQGPosition QuantityObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "ServerTimestamp":
                                CQGPosition ServerTimestampObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Side":
                                CQGPosition SideObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderSide SidepropV = SideObj.Side;
                                var SidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
                                break;
                            case "Timestamp":
                                CQGPosition TimestampObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "UPL":
                                CQGPosition UPLObj = (CQGPosition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double UPLpropV = UPLObj.UPL;
                                var UPLPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UPLPropKey, value: UPLpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGPositionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGPositions CountObj = (CQGPositions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGPositions ItemObj = (CQGPositions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPosition ItempropV = ItemObj[(System.String)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByIndex":
                                CQGPositions ItemByIndexObj = (CQGPositions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPosition ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                                var ItemByIndexPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGPositionsStatementClass":
                            switch (query.MemberName)
                            {
                            case "GWAccountID":
                                CQGPositionsStatement GWAccountIDObj = (CQGPositionsStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "Positions":
                                CQGPositionsStatement PositionsObj = (CQGPositionsStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGPositions PositionspropV = PositionsObj.Positions;
                                var PositionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(PositionsPropKey, PositionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PositionsPropKey));
                                break;
                            case "StatementDate":
                                CQGPositionsStatement StatementDateObj = (CQGPositionsStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                                var StatementDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGQFormulaDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "Expression":
                                CQGQFormulaDefinition ExpressionObj = (CQGQFormulaDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ExpressionpropV = ExpressionObj.Expression;
                                var ExpressionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExpressionPropKey, value: ExpressionpropV));
                                break;
                            case "Name":
                                CQGQFormulaDefinition NameObj = (CQGQFormulaDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Number":
                                CQGQFormulaDefinition NumberObj = (CQGQFormulaDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 NumberpropV = NumberObj.Number;
                                var NumberPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NumberPropKey, value: NumberpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGQFormulaDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGQFormulaDefinitions CountObj = (CQGQFormulaDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGQFormulaDefinitions ItemObj = (CQGQFormulaDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQFormulaDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByName":
                                CQGQFormulaDefinitions ItemByNameObj = (CQGQFormulaDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQFormulaDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                                var ItemByNamePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGQuoteClass":
                            switch (query.MemberName)
                            {
                            case "HasVolume":
                                CQGQuote HasVolumeObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean HasVolumepropV = HasVolumeObj.HasVolume;
                                var HasVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HasVolumePropKey, value: HasVolumepropV));
                                break;
                            case "Instrument":
                                CQGQuote InstrumentObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                                var InstrumentPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
                                break;
                            case "IsValid":
                                CQGQuote IsValidObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsValidpropV = IsValidObj.IsValid;
                                var IsValidPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsValidPropKey, value: IsValidpropV));
                                break;
                            case "Name":
                                CQGQuote NameObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Price":
                                CQGQuote PriceObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "ServerTimestamp":
                                CQGQuote ServerTimestampObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Timestamp":
                                CQGQuote TimestampObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "Type":
                                CQGQuote TypeObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eQuoteType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "Volume":
                                CQGQuote VolumeObj = (CQGQuote)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 VolumepropV = VolumeObj.Volume;
                                var VolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGQuotesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGQuotes CountObj = (CQGQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGQuotes ItemObj = (CQGQuotes)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGQuote ItempropV = ItemObj[(CQG.eQuoteType)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGRemoteOpenAPISessionClass":
                            switch (query.MemberName)
                            {
                            case "LogonName":
                                CQGRemoteOpenAPISession LogonNameObj = (CQGRemoteOpenAPISession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String LogonNamepropV = LogonNameObj.LogonName;
                                var LogonNamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LogonNamePropKey, value: LogonNamepropV));
                                break;
                            case "ROMNumber":
                                CQGRemoteOpenAPISession ROMNumberObj = (CQGRemoteOpenAPISession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ROMNumberpropV = ROMNumberObj.ROMNumber;
                                var ROMNumberPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ROMNumberPropKey, value: ROMNumberpropV));
                                break;
                            case "ServerAddress":
                                CQGRemoteOpenAPISession ServerAddressObj = (CQGRemoteOpenAPISession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ServerAddresspropV = ServerAddressObj.ServerAddress;
                                var ServerAddressPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerAddressPropKey, value: ServerAddresspropV));
                                break;
                            }
                            break;
                        case "CQG.CQGSessionClass":
                            switch (query.MemberName)
                            {
                            case "ActivationDate":
                                CQGSession ActivationDateObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ActivationDatepropV = ActivationDateObj.ActivationDate;
                                var ActivationDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActivationDatePropKey, value: ActivationDatepropV));
                                break;
                            case "DayCloseOffset":
                                CQGSession DayCloseOffsetObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.SByte DayCloseOffsetpropV = DayCloseOffsetObj.DayCloseOffset;
                                var DayCloseOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayCloseOffsetPropKey, value: DayCloseOffsetpropV));
                                break;
                            case "DayStartOffset":
                                CQGSession DayStartOffsetObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.SByte DayStartOffsetpropV = DayStartOffsetObj.DayStartOffset;
                                var DayStartOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayStartOffsetPropKey, value: DayStartOffsetpropV));
                                break;
                            case "DayStartsYesterday":
                                CQGSession DayStartsYesterdayObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean DayStartsYesterdaypropV = DayStartsYesterdayObj.DayStartsYesterday;
                                var DayStartsYesterdayPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DayStartsYesterdayPropKey, value: DayStartsYesterdaypropV));
                                break;
                            case "EndTime":
                                CQGSession EndTimeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimepropV = EndTimeObj.EndTime;
                                var EndTimePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimePropKey, value: EndTimepropV));
                                break;
                            case "Instrument":
                                CQGSession InstrumentObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGInstrument InstrumentpropV = InstrumentObj.Instrument;
                                var InstrumentPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(InstrumentPropKey, InstrumentpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: InstrumentPropKey));
                                break;
                            case "Name":
                                CQGSession NameObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Number":
                                CQGSession NumberObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int16 NumberpropV = NumberObj.Number;
                                var NumberPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NumberPropKey, value: NumberpropV));
                                break;
                            case "PrimaryFlag":
                                CQGSession PrimaryFlagObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean PrimaryFlagpropV = PrimaryFlagObj.PrimaryFlag;
                                var PrimaryFlagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PrimaryFlagPropKey, value: PrimaryFlagpropV));
                                break;
                            case "StartTime":
                                CQGSession StartTimeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimepropV = StartTimeObj.StartTime;
                                var StartTimePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimePropKey, value: StartTimepropV));
                                break;
                            case "Type":
                                CQGSession TypeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSymbolSessionType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "ValidEndTime":
                                CQGSession ValidEndTimeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ValidEndTimepropV = ValidEndTimeObj.ValidEndTime;
                                var ValidEndTimePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValidEndTimePropKey, value: ValidEndTimepropV));
                                break;
                            case "ValidStartTime":
                                CQGSession ValidStartTimeObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ValidStartTimepropV = ValidStartTimeObj.ValidStartTime;
                                var ValidStartTimePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValidStartTimePropKey, value: ValidStartTimepropV));
                                break;
                            case "WorkingWeekDays":
                                CQGSession WorkingWeekDaysObj = (CQGSession)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionWeekDays WorkingWeekDayspropV = WorkingWeekDaysObj.WorkingWeekDays;
                                var WorkingWeekDaysPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: WorkingWeekDaysPropKey, value: WorkingWeekDayspropV));
                                break;
                            }
                            break;
                        case "CQG.CQGSessionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGSessions CountObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "DescriptionEnd":
                                CQGSessions DescriptionEndObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime DescriptionEndpropV = DescriptionEndObj.DescriptionEnd;
                                var DescriptionEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionEndPropKey, value: DescriptionEndpropV));
                                break;
                            case "DescriptionNumber":
                                CQGSessions DescriptionNumberObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DescriptionNumberpropV = DescriptionNumberObj.DescriptionNumber;
                                var DescriptionNumberPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionNumberPropKey, value: DescriptionNumberpropV));
                                break;
                            case "DescriptionStart":
                                CQGSessions DescriptionStartObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime DescriptionStartpropV = DescriptionStartObj.DescriptionStart;
                                var DescriptionStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DescriptionStartPropKey, value: DescriptionStartpropV));
                                break;
                            case "Holidays":
                                CQGSessions HolidaysObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGHolidays HolidayspropV = HolidaysObj.Holidays;
                                var HolidaysPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(HolidaysPropKey, HolidayspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HolidaysPropKey));
                                break;
                            case "Item":
                                CQGSessions ItemObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSession ItempropV = ItemObj[(System.Object)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "Name":
                                CQGSessions NameObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Type":
                                CQGSessions TypeObj = (CQGSessions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSymbolSessionType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGSessionsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGSessionsCollection CountObj = (CQGSessionsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGSessionsCollection ItemObj = (CQGSessionsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSessions ItempropV = ItemObj[(System.Object)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGStrategyDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "ClientId":
                                CQGStrategyDefinition ClientIdObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ClientIdpropV = ClientIdObj.ClientId;
                                var ClientIdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClientIdPropKey, value: ClientIdpropV));
                                break;
                            case "Id":
                                CQGStrategyDefinition IdObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "LastError":
                                CQGStrategyDefinition LastErrorObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "RequestString":
                                CQGStrategyDefinition RequestStringObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String RequestStringpropV = RequestStringObj.RequestString;
                                var RequestStringPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestStringPropKey, value: RequestStringpropV));
                                break;
                            case "Status":
                                CQGStrategyDefinition StatusObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eStrategyRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Symbol":
                                CQGStrategyDefinition SymbolObj = (CQGStrategyDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGStrategyDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGStrategyDefinitions CountObj = (CQGStrategyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGStrategyDefinitions ItemObj = (CQGStrategyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStrategyDefinition ItempropV = ItemObj[(System.String)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByIndex":
                                CQGStrategyDefinitions ItemByIndexObj = (CQGStrategyDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStrategyDefinition ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                                var ItemByIndexPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGStrategyLegFillClass":
                            switch (query.MemberName)
                            {
                            case "ExecutionId":
                                CQGStrategyLegFill ExecutionIdObj = (CQGStrategyLegFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ExecutionIdpropV = ExecutionIdObj.ExecutionId;
                                var ExecutionIdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionIdPropKey, value: ExecutionIdpropV));
                                break;
                            case "Order":
                                CQGStrategyLegFill OrderObj = (CQGStrategyLegFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrder OrderpropV = OrderObj.Order;
                                var OrderPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
                                break;
                            case "OriginalOrderID":
                                CQGStrategyLegFill OriginalOrderIDObj = (CQGStrategyLegFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String OriginalOrderIDpropV = OriginalOrderIDObj.OriginalOrderID;
                                var OriginalOrderIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OriginalOrderIDPropKey, value: OriginalOrderIDpropV));
                                break;
                            case "Quantity":
                                CQGStrategyLegFill QuantityObj = (CQGStrategyLegFill)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            }
                            break;
                        case "CQG.CQGStrategyLegFillsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGStrategyLegFills CountObj = (CQGStrategyLegFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "ItemByIndex":
                                CQGStrategyLegFills ItemByIndexObj = (CQGStrategyLegFills)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStrategyLegFill ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                                var ItemByIndexPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGStringCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGStringCollection CountObj = (CQGStringCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGStringCollection ItemObj = (CQGStringCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey, value: ItempropV));
                                break;
                            }
                            break;
                        case "CQG.CQGSubMinuteBarClass":
                            switch (query.MemberName)
                            {
                            case "AskVolume":
                                CQGSubMinuteBar AskVolumeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 AskVolumepropV = AskVolumeObj.AskVolume;
                                var AskVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumepropV));
                                break;
                            case "Avg":
                                CQGSubMinuteBar AvgObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AvgpropV = AvgObj.Avg;
                                var AvgPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgpropV));
                                break;
                            case "BidVolume":
                                CQGSubMinuteBar BidVolumeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 BidVolumepropV = BidVolumeObj.BidVolume;
                                var BidVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumepropV));
                                break;
                            case "Close":
                                CQGSubMinuteBar CloseObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ClosepropV = CloseObj.Close;
                                var ClosePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
                                break;
                            case "High":
                                CQGSubMinuteBar HighObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HighpropV = HighObj.High;
                                var HighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
                                break;
                            case "HLC3":
                                CQGSubMinuteBar HLC3Obj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HLC3propV = HLC3Obj.HLC3;
                                var HLC3PropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3propV));
                                break;
                            case "Low":
                                CQGSubMinuteBar LowObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double LowpropV = LowObj.Low;
                                var LowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
                                break;
                            case "Mid":
                                CQGSubMinuteBar MidObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MidpropV = MidObj.Mid;
                                var MidPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
                                break;
                            case "Open":
                                CQGSubMinuteBar OpenObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double OpenpropV = OpenObj.Open;
                                var OpenPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
                                break;
                            case "Range":
                                CQGSubMinuteBar RangeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double RangepropV = RangeObj.Range;
                                var RangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangepropV));
                                break;
                            case "TickVolume":
                                CQGSubMinuteBar TickVolumeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TickVolumepropV = TickVolumeObj.TickVolume;
                                var TickVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumepropV));
                                break;
                            case "Timestamp":
                                CQGSubMinuteBar TimestampObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGSubMinuteBar TimestampOffsetObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            case "TrueHigh":
                                CQGSubMinuteBar TrueHighObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                                var TrueHighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
                                break;
                            case "TrueLow":
                                CQGSubMinuteBar TrueLowObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                                var TrueLowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
                                break;
                            case "TrueRange":
                                CQGSubMinuteBar TrueRangeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueRangepropV = TrueRangeObj.TrueRange;
                                var TrueRangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangepropV));
                                break;
                            case "Volume":
                                CQGSubMinuteBar VolumeObj = (CQGSubMinuteBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 VolumepropV = VolumeObj.Volume;
                                var VolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGSubMinuteBarsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGSubMinuteBars CountObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "EndTimestamp":
                                CQGSubMinuteBars EndTimestampObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGSubMinuteBars IdObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGSubMinuteBars ItemObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSubMinuteBar ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGSubMinuteBars LastErrorObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGSubMinuteBars RequestObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSubMinuteBarsRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGSubMinuteBars StartTimestampObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGSubMinuteBars StatusObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGSubMinuteBars TagObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGSubMinuteBarsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGSubMinuteBarsCollection CountObj = (CQGSubMinuteBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGSubMinuteBarsCollection ItemObj = (CQGSubMinuteBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSubMinuteBars ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGSubMinuteBarsCollection ItemByIdObj = (CQGSubMinuteBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGSubMinuteBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGSubMinuteBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Continuation":
                                CQGSubMinuteBarsRequest ContinuationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGSubMinuteBarsRequest DaysBeforeExpirationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "EqualizeCloses":
                                CQGSubMinuteBarsRequest EqualizeClosesObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "GapFilter":
                                CQGSubMinuteBarsRequest GapFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eGapFilter GapFilterpropV = GapFilterObj.GapFilter;
                                var GapFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GapFilterPropKey, value: GapFilterpropV));
                                break;
                            case "IncludeEnd":
                                CQGSubMinuteBarsRequest IncludeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "Interval":
                                CQGSubMinuteBarsRequest IntervalObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IntervalpropV = IntervalObj.Interval;
                                var IntervalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntervalPropKey, value: IntervalpropV));
                                break;
                            case "RangeEnd":
                                CQGSubMinuteBarsRequest RangeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGSubMinuteBarsRequest RangeStartObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGSubMinuteBarsRequest RecalcPeriodObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGSubMinuteBarsRequest SessionFlagsObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGSubMinuteBarsRequest SessionsFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGSubMinuteBarsRequest SubscriptionLevelObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "Symbol":
                                CQGSubMinuteBarsRequest SymbolObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            case "TickFilter":
                                CQGSubMinuteBarsRequest TickFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTickFilter TickFilterpropV = TickFilterObj.TickFilter;
                                var TickFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGSubMinuteBarsRequest UpdatesEnabledObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGSummariesStatementClass":
                            switch (query.MemberName)
                            {
                            case "CurrencySummaries":
                                CQGSummariesStatement CurrencySummariesObj = (CQGSummariesStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccountSummaries CurrencySummariespropV = CurrencySummariesObj.CurrencySummaries;
                                var CurrencySummariesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(CurrencySummariesPropKey, CurrencySummariespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurrencySummariesPropKey));
                                break;
                            case "GWAccountID":
                                CQGSummariesStatement GWAccountIDObj = (CQGSummariesStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GWAccountIDpropV = GWAccountIDObj.GWAccountID;
                                var GWAccountIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GWAccountIDPropKey, value: GWAccountIDpropV));
                                break;
                            case "StatementDate":
                                CQGSummariesStatement StatementDateObj = (CQGSummariesStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StatementDatepropV = StatementDateObj.StatementDate;
                                var StatementDatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatementDatePropKey, value: StatementDatepropV));
                                break;
                            case "Summary":
                                CQGSummariesStatement SummaryObj = (CQGSummariesStatement)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGAccountSummary SummarypropV = SummaryObj.Summary;
                                var SummaryPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(SummaryPropKey, SummarypropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SummaryPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTFlowBarClass":
                            switch (query.MemberName)
                            {
                            case "AskVolume":
                                CQGTFlowBar AskVolumeObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 AskVolumepropV = AskVolumeObj.AskVolume;
                                var AskVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumepropV));
                                break;
                            case "BestAskPrice":
                                CQGTFlowBar BestAskPriceObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double BestAskPricepropV = BestAskPriceObj.BestAskPrice;
                                var BestAskPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BestAskPricePropKey, value: BestAskPricepropV));
                                break;
                            case "BestBidPrice":
                                CQGTFlowBar BestBidPriceObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double BestBidPricepropV = BestBidPriceObj.BestBidPrice;
                                var BestBidPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BestBidPricePropKey, value: BestBidPricepropV));
                                break;
                            case "BidVolume":
                                CQGTFlowBar BidVolumeObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 BidVolumepropV = BidVolumeObj.BidVolume;
                                var BidVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumepropV));
                                break;
                            case "Close":
                                CQGTFlowBar CloseObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ClosepropV = CloseObj.Close;
                                var ClosePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
                                break;
                            case "DomAskCount":
                                CQGTFlowBar DomAskCountObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DomAskCountpropV = DomAskCountObj.DomAskCount;
                                var DomAskCountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskCountPropKey, value: DomAskCountpropV));
                                break;
                            case "DomAskVolume":
                                CQGTFlowBar DomAskVolumeObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DomAskVolumepropV = DomAskVolumeObj.DomAskVolume[(System.Int32)args[0]];
                                var DomAskVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskVolumePropKey, value: DomAskVolumepropV));
                                break;
                            case "DomBidCount":
                                CQGTFlowBar DomBidCountObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DomBidCountpropV = DomBidCountObj.DomBidCount;
                                var DomBidCountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomBidCountPropKey, value: DomBidCountpropV));
                                break;
                            case "High":
                                CQGTFlowBar HighObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HighpropV = HighObj.High;
                                var HighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
                                break;
                            case "Low":
                                CQGTFlowBar LowObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double LowpropV = LowObj.Low;
                                var LowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
                                break;
                            case "Mid":
                                CQGTFlowBar MidObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MidpropV = MidObj.Mid;
                                var MidPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
                                break;
                            case "Open":
                                CQGTFlowBar OpenObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double OpenpropV = OpenObj.Open;
                                var OpenPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
                                break;
                            case "Timestamp":
                                CQGTFlowBar TimestampObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGTFlowBar TimestampOffsetObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            case "TrueHigh":
                                CQGTFlowBar TrueHighObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                                var TrueHighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
                                break;
                            case "TrueLow":
                                CQGTFlowBar TrueLowObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                                var TrueLowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
                                break;
                            case "TrueMid":
                                CQGTFlowBar TrueMidObj = (CQGTFlowBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueMidpropV = TrueMidObj.TrueMid;
                                var TrueMidPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueMidPropKey, value: TrueMidpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTFlowBarsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTFlowBars CountObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "EndTimestamp":
                                CQGTFlowBars EndTimestampObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGTFlowBars IdObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGTFlowBars ItemObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTFlowBar ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGTFlowBars LastErrorObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGTFlowBars RequestObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTFlowBarsRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGTFlowBars StartTimestampObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGTFlowBars StatusObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGTFlowBars TagObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTFlowBarsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTFlowBarsCollection CountObj = (CQGTFlowBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTFlowBarsCollection ItemObj = (CQGTFlowBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTFlowBars ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGTFlowBarsCollection ItemByIdObj = (CQGTFlowBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTFlowBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTFlowBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Aggregation":
                                CQGTFlowBarsRequest AggregationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTfAggregation AggregationpropV = AggregationObj.Aggregation;
                                var AggregationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggregationPropKey, value: AggregationpropV));
                                break;
                            case "AggregationLevel":
                                CQGTFlowBarsRequest AggregationLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 AggregationLevelpropV = AggregationLevelObj.AggregationLevel;
                                var AggregationLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AggregationLevelPropKey, value: AggregationLevelpropV));
                                break;
                            case "Continuation":
                                CQGTFlowBarsRequest ContinuationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGTFlowBarsRequest DaysBeforeExpirationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "DomAskVolumeLevel":
                                CQGTFlowBarsRequest DomAskVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTFlowRequestDomVolumeLevel DomAskVolumeLevelpropV = DomAskVolumeLevelObj.DomAskVolumeLevel;
                                var DomAskVolumeLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomAskVolumeLevelPropKey, value: DomAskVolumeLevelpropV));
                                break;
                            case "DomBidVolumeLevel":
                                CQGTFlowBarsRequest DomBidVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTFlowRequestDomVolumeLevel DomBidVolumeLevelpropV = DomBidVolumeLevelObj.DomBidVolumeLevel;
                                var DomBidVolumeLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DomBidVolumeLevelPropKey, value: DomBidVolumeLevelpropV));
                                break;
                            case "EqualizeCloses":
                                CQGTFlowBarsRequest EqualizeClosesObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "IncludeEnd":
                                CQGTFlowBarsRequest IncludeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "RangeEnd":
                                CQGTFlowBarsRequest RangeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGTFlowBarsRequest RangeStartObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGTFlowBarsRequest RecalcPeriodObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGTFlowBarsRequest SessionFlagsObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGTFlowBarsRequest SessionsFilterObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGTFlowBarsRequest SubscriptionLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "Symbol":
                                CQGTFlowBarsRequest SymbolObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGTFlowBarsRequest UpdatesEnabledObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTickClass":
                            switch (query.MemberName)
                            {
                            case "ContributorId":
                                CQGTick ContributorIdObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ContributorIdpropV = ContributorIdObj.ContributorId;
                                var ContributorIdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContributorIdPropKey, value: ContributorIdpropV));
                                break;
                            case "ContributorIdCode":
                                CQGTick ContributorIdCodeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ContributorIdCodepropV = ContributorIdCodeObj.ContributorIdCode;
                                var ContributorIdCodePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContributorIdCodePropKey, value: ContributorIdCodepropV));
                                break;
                            case "CorrectionType":
                                CQGTick CorrectionTypeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTickCorrectionType CorrectionTypepropV = CorrectionTypeObj.CorrectionType;
                                var CorrectionTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CorrectionTypePropKey, value: CorrectionTypepropV));
                                break;
                            case "MarketState":
                                CQGTick MarketStateObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eMarketState MarketStatepropV = MarketStateObj.MarketState;
                                var MarketStatePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MarketStatePropKey, value: MarketStatepropV));
                                break;
                            case "Price":
                                CQGTick PriceObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "PriceType":
                                CQGTick PriceTypeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTickPriceType PriceTypepropV = PriceTypeObj.PriceType;
                                var PriceTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PriceTypePropKey, value: PriceTypepropV));
                                break;
                            case "SalesConditionCode":
                                CQGTick SalesConditionCodeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 SalesConditionCodepropV = SalesConditionCodeObj.SalesConditionCode;
                                var SalesConditionCodePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SalesConditionCodePropKey, value: SalesConditionCodepropV));
                                break;
                            case "SalesConditionLabel":
                                CQGTick SalesConditionLabelObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SalesConditionLabelpropV = SalesConditionLabelObj.SalesConditionLabel;
                                var SalesConditionLabelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SalesConditionLabelPropKey, value: SalesConditionLabelpropV));
                                break;
                            case "Timestamp":
                                CQGTick TimestampObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "Volume":
                                CQGTick VolumeObj = (CQGTick)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 VolumepropV = VolumeObj.Volume;
                                var VolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: VolumePropKey, value: VolumepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTicksClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTicks CountObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "EndTimestamp":
                                CQGTicks EndTimestampObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "HasUpdates":
                                CQGTicks HasUpdatesObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean HasUpdatespropV = HasUpdatesObj.HasUpdates;
                                var HasUpdatesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HasUpdatesPropKey, value: HasUpdatespropV));
                                break;
                            case "Id":
                                CQGTicks IdObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGTicks ItemObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTick ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGTicks LastErrorObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGTicks RequestObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTicksRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGTicks StartTimestampObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGTicks StatusObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGTicks TagObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTicksCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTicksCollection CountObj = (CQGTicksCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTicksCollection ItemObj = (CQGTicksCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTicks ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGTicksCollection ItemByIdObj = (CQGTicksCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTicks ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTicksRequestClass":
                            switch (query.MemberName)
                            {
                            case "RangeEnd":
                                CQGTicksRequest RangeEndObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGTicksRequest RangeStartObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "SessionsFilter":
                                CQGTicksRequest SessionsFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "Symbol":
                                CQGTicksRequest SymbolObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            case "TickFilter":
                                CQGTicksRequest TickFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTickFilter TickFilterpropV = TickFilterObj.TickFilter;
                                var TickFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterpropV));
                                break;
                            case "Type":
                                CQGTicksRequest TypeObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTicksRequestType TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTimedBarClass":
                            switch (query.MemberName)
                            {
                            case "ActualVolume":
                                CQGTimedBar ActualVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ActualVolumepropV = ActualVolumeObj.ActualVolume;
                                var ActualVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ActualVolumePropKey, value: ActualVolumepropV));
                                break;
                            case "AskVolume":
                                CQGTimedBar AskVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 AskVolumepropV = AskVolumeObj.AskVolume;
                                var AskVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AskVolumePropKey, value: AskVolumepropV));
                                break;
                            case "Avg":
                                CQGTimedBar AvgObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AvgpropV = AvgObj.Avg;
                                var AvgPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgpropV));
                                break;
                            case "BidVolume":
                                CQGTimedBar BidVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 BidVolumepropV = BidVolumeObj.BidVolume;
                                var BidVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BidVolumePropKey, value: BidVolumepropV));
                                break;
                            case "Close":
                                CQGTimedBar CloseObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ClosepropV = CloseObj.Close;
                                var ClosePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
                                break;
                            case "CommodityOpenInterest":
                                CQGTimedBar CommodityOpenInterestObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CommodityOpenInterestpropV = CommodityOpenInterestObj.CommodityOpenInterest;
                                var CommodityOpenInterestPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityOpenInterestPropKey, value: CommodityOpenInterestpropV));
                                break;
                            case "CommodityTickVolume":
                                CQGTimedBar CommodityTickVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CommodityTickVolumepropV = CommodityTickVolumeObj.CommodityTickVolume;
                                var CommodityTickVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityTickVolumePropKey, value: CommodityTickVolumepropV));
                                break;
                            case "CommodityVolume":
                                CQGTimedBar CommodityVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CommodityVolumepropV = CommodityVolumeObj.CommodityVolume;
                                var CommodityVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommodityVolumePropKey, value: CommodityVolumepropV));
                                break;
                            case "ContractOpenInterest":
                                CQGTimedBar ContractOpenInterestObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ContractOpenInterestpropV = ContractOpenInterestObj.ContractOpenInterest;
                                var ContractOpenInterestPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractOpenInterestPropKey, value: ContractOpenInterestpropV));
                                break;
                            case "ContractTickVolume":
                                CQGTimedBar ContractTickVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ContractTickVolumepropV = ContractTickVolumeObj.ContractTickVolume;
                                var ContractTickVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractTickVolumePropKey, value: ContractTickVolumepropV));
                                break;
                            case "ContractVolume":
                                CQGTimedBar ContractVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ContractVolumepropV = ContractVolumeObj.ContractVolume;
                                var ContractVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContractVolumePropKey, value: ContractVolumepropV));
                                break;
                            case "High":
                                CQGTimedBar HighObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HighpropV = HighObj.High;
                                var HighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
                                break;
                            case "HLC3":
                                CQGTimedBar HLC3Obj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HLC3propV = HLC3Obj.HLC3;
                                var HLC3PropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3propV));
                                break;
                            case "Low":
                                CQGTimedBar LowObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double LowpropV = LowObj.Low;
                                var LowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
                                break;
                            case "Mid":
                                CQGTimedBar MidObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MidpropV = MidObj.Mid;
                                var MidPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
                                break;
                            case "Open":
                                CQGTimedBar OpenObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double OpenpropV = OpenObj.Open;
                                var OpenPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
                                break;
                            case "OpenInterest":
                                CQGTimedBar OpenInterestObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 OpenInterestpropV = OpenInterestObj.OpenInterest;
                                var OpenInterestPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenInterestPropKey, value: OpenInterestpropV));
                                break;
                            case "Range":
                                CQGTimedBar RangeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double RangepropV = RangeObj.Range;
                                var RangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangepropV));
                                break;
                            case "TickVolume":
                                CQGTimedBar TickVolumeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TickVolumepropV = TickVolumeObj.TickVolume;
                                var TickVolumePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickVolumePropKey, value: TickVolumepropV));
                                break;
                            case "Timestamp":
                                CQGTimedBar TimestampObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TrueHigh":
                                CQGTimedBar TrueHighObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                                var TrueHighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
                                break;
                            case "TrueLow":
                                CQGTimedBar TrueLowObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                                var TrueLowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
                                break;
                            case "TrueRange":
                                CQGTimedBar TrueRangeObj = (CQGTimedBar)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueRangepropV = TrueRangeObj.TrueRange;
                                var TrueRangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTimedBarsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTimedBars CountObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "EndTimestamp":
                                CQGTimedBars EndTimestampObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGTimedBars IdObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGTimedBars ItemObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTimedBar ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGTimedBars LastErrorObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGTimedBars RequestObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTimedBarsRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGTimedBars StartTimestampObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGTimedBars StatusObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGTimedBars TagObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTimedBarsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTimedBarsCollection CountObj = (CQGTimedBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTimedBarsCollection ItemObj = (CQGTimedBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTimedBars ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGTimedBarsCollection ItemByIdObj = (CQGTimedBarsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTimedBars ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTimedBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Continuation":
                                CQGTimedBarsRequest ContinuationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGTimedBarsRequest DaysBeforeExpirationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "EqualizeCloses":
                                CQGTimedBarsRequest EqualizeClosesObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "HistoricalPeriod":
                                CQGTimedBarsRequest HistoricalPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                                var HistoricalPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
                                break;
                            case "IgnoreEventsOnHistoricalBars":
                                CQGTimedBarsRequest IgnoreEventsOnHistoricalBarsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IgnoreEventsOnHistoricalBarspropV = IgnoreEventsOnHistoricalBarsObj.IgnoreEventsOnHistoricalBars;
                                var IgnoreEventsOnHistoricalBarsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IgnoreEventsOnHistoricalBarsPropKey, value: IgnoreEventsOnHistoricalBarspropV));
                                break;
                            case "IncludeEnd":
                                CQGTimedBarsRequest IncludeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "IntradayPeriod":
                                CQGTimedBarsRequest IntradayPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                                var IntradayPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
                                break;
                            case "RangeEnd":
                                CQGTimedBarsRequest RangeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGTimedBarsRequest RangeStartObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "SessionFlags":
                                CQGTimedBarsRequest SessionFlagsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGTimedBarsRequest SessionsFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "Symbol":
                                CQGTimedBarsRequest SymbolObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            case "TickFilter":
                                CQGTimedBarsRequest TickFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTickFilter TickFilterpropV = TickFilterObj.TickFilter;
                                var TickFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TickFilterPropKey, value: TickFilterpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGTimedBarsRequest UpdatesEnabledObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradeClass":
                            switch (query.MemberName)
                            {
                            case "GroupID":
                                CQGTrade GroupIDObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 GroupIDpropV = GroupIDObj.GroupID;
                                var GroupIDPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: GroupIDPropKey, value: GroupIDpropV));
                                break;
                            case "IsMatched":
                                CQGTrade IsMatchedObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsMatchedpropV = IsMatchedObj.IsMatched;
                                var IsMatchedPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsMatchedPropKey, value: IsMatchedpropV));
                                break;
                            case "Price":
                                CQGTrade PriceObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "Quantity":
                                CQGTrade QuantityObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "ServerTimestamp":
                                CQGTrade ServerTimestampObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Side":
                                CQGTrade SideObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderSide SidepropV = SideObj.Side;
                                var SidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
                                break;
                            case "Timestamp":
                                CQGTrade TimestampObj = (CQGTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradeEntriesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradeEntries CountObj = (CQGTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradeEntries ItemObj = (CQGTradeEntries)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeEntry ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradeEntryClass":
                            switch (query.MemberName)
                            {
                            case "CanPlaceOrderSignal":
                                CQGTradeEntry CanPlaceOrderSignalObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean CanPlaceOrderSignalpropV = CanPlaceOrderSignalObj.CanPlaceOrderSignal;
                                var CanPlaceOrderSignalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanPlaceOrderSignalPropKey, value: CanPlaceOrderSignalpropV));
                                break;
                            case "Definition":
                                CQGTradeEntry DefinitionObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeEntryDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "Price":
                                CQGTradeEntry PriceObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "Quantity":
                                CQGTradeEntry QuantityObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "RelatedExits":
                                CQGTradeEntry RelatedExitsObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExits RelatedExitspropV = RelatedExitsObj.RelatedExits;
                                var RelatedExitsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RelatedExitsPropKey, RelatedExitspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RelatedExitsPropKey));
                                break;
                            case "Signal":
                                CQGTradeEntry SignalObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean SignalpropV = SignalObj.Signal;
                                var SignalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SignalPropKey, value: SignalpropV));
                                break;
                            case "StopLimitPrice":
                                CQGTradeEntry StopLimitPriceObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double StopLimitPricepropV = StopLimitPriceObj.StopLimitPrice;
                                var StopLimitPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricepropV));
                                break;
                            case "Trade":
                                CQGTradeEntry TradeObj = (CQGTradeEntry)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTrade TradepropV = TradeObj.Trade;
                                var TradePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradeEntryDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "AllowEntryOnExit":
                                CQGTradeEntryDefinition AllowEntryOnExitObj = (CQGTradeEntryDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean AllowEntryOnExitpropV = AllowEntryOnExitObj.AllowEntryOnExit;
                                var AllowEntryOnExitPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowEntryOnExitPropKey, value: AllowEntryOnExitpropV));
                                break;
                            case "AllowPyramids":
                                CQGTradeEntryDefinition AllowPyramidsObj = (CQGTradeEntryDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean AllowPyramidspropV = AllowPyramidsObj.AllowPyramids;
                                var AllowPyramidsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowPyramidsPropKey, value: AllowPyramidspropV));
                                break;
                            case "OrderType":
                                CQGTradeEntryDefinition OrderTypeObj = (CQGTradeEntryDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderType OrderTypepropV = OrderTypeObj.OrderType;
                                var OrderTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderTypePropKey, value: OrderTypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradeExitClass":
                            switch (query.MemberName)
                            {
                            case "CanPlaceOrderSignal":
                                CQGTradeExit CanPlaceOrderSignalObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean CanPlaceOrderSignalpropV = CanPlaceOrderSignalObj.CanPlaceOrderSignal;
                                var CanPlaceOrderSignalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CanPlaceOrderSignalPropKey, value: CanPlaceOrderSignalpropV));
                                break;
                            case "Definition":
                                CQGTradeExit DefinitionObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExitDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "Price":
                                CQGTradeExit PriceObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PricepropV = PriceObj.Price;
                                var PricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PricePropKey, value: PricepropV));
                                break;
                            case "Quantity":
                                CQGTradeExit QuantityObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 QuantitypropV = QuantityObj.Quantity;
                                var QuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: QuantityPropKey, value: QuantitypropV));
                                break;
                            case "RelatedEntries":
                                CQGTradeExit RelatedEntriesObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeEntries RelatedEntriespropV = RelatedEntriesObj.RelatedEntries;
                                var RelatedEntriesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RelatedEntriesPropKey, RelatedEntriespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RelatedEntriesPropKey));
                                break;
                            case "Signal":
                                CQGTradeExit SignalObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean SignalpropV = SignalObj.Signal;
                                var SignalPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SignalPropKey, value: SignalpropV));
                                break;
                            case "StopLimitPrice":
                                CQGTradeExit StopLimitPriceObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double StopLimitPricepropV = StopLimitPriceObj.StopLimitPrice;
                                var StopLimitPricePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StopLimitPricePropKey, value: StopLimitPricepropV));
                                break;
                            case "Trade":
                                CQGTradeExit TradeObj = (CQGTradeExit)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTrade TradepropV = TradeObj.Trade;
                                var TradePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradePropKey, TradepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradeExitDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "AllowExitOnEntry":
                                CQGTradeExitDefinition AllowExitOnEntryObj = (CQGTradeExitDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean AllowExitOnEntrypropV = AllowExitOnEntryObj.AllowExitOnEntry;
                                var AllowExitOnEntryPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowExitOnEntryPropKey, value: AllowExitOnEntrypropV));
                                break;
                            case "AllowMoreThanOnce":
                                CQGTradeExitDefinition AllowMoreThanOnceObj = (CQGTradeExitDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean AllowMoreThanOncepropV = AllowMoreThanOnceObj.AllowMoreThanOnce;
                                var AllowMoreThanOncePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AllowMoreThanOncePropKey, value: AllowMoreThanOncepropV));
                                break;
                            case "Name":
                                CQGTradeExitDefinition NameObj = (CQGTradeExitDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "OrderType":
                                CQGTradeExitDefinition OrderTypeObj = (CQGTradeExitDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderType OrderTypepropV = OrderTypeObj.OrderType;
                                var OrderTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderTypePropKey, value: OrderTypepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradeExitDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradeExitDefinitions CountObj = (CQGTradeExitDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradeExitDefinitions ItemObj = (CQGTradeExitDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExitDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByName":
                                CQGTradeExitDefinitions ItemByNameObj = (CQGTradeExitDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExitDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                                var ItemByNamePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradeExitsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradeExits CountObj = (CQGTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradeExits ItemObj = (CQGTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExit ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByName":
                                CQGTradeExits ItemByNameObj = (CQGTradeExits)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExit ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                                var ItemByNamePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradesClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTrades CountObj = (CQGTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTrades ItemObj = (CQGTrades)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTrade ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemBaseBarParameterClass":
                            switch (query.MemberName)
                            {
                            case "Name":
                                CQGTradingSystemBaseBarParameter NameObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Type":
                                CQGTradingSystemBaseBarParameter TypeObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTradingSystemBaseBarParameter TypepropV = TypeObj.Type;
                                var TypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TypePropKey, value: TypepropV));
                                break;
                            case "Value":
                                CQGTradingSystemBaseBarParameter ValueObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object ValuepropV = ValueObj.Value;
                                var ValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemBaseBarParametersClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradingSystemBaseBarParameters CountObj = (CQGTradingSystemBaseBarParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradingSystemBaseBarParameters ItemObj = (CQGTradingSystemBaseBarParameters)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemBaseBarParameter ItempropV = ItemObj[(CQG.eTradingSystemBaseBarParameter)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemClass":
                            switch (query.MemberName)
                            {
                            case "Definition":
                                CQGTradingSystem DefinitionObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "Id":
                                CQGTradingSystem IdObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "LastError":
                                CQGTradingSystem LastErrorObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGTradingSystem RequestObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "Statistics":
                                CQGTradingSystem StatisticsObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemStatisticsCollection StatisticspropV = StatisticsObj.Statistics;
                                var StatisticsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(StatisticsPropKey, StatisticspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsPropKey));
                                break;
                            case "Status":
                                CQGTradingSystem StatusObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGTradingSystem TagObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            case "TradesRows":
                                CQGTradingSystem TradesRowsObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTradesRows TradesRowspropV = TradesRowsObj.TradesRows;
                                var TradesRowsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradesRowsPropKey, TradesRowspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradesRowsPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "Abbreviation":
                                CQGTradingSystemDefinition AbbreviationObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String AbbreviationpropV = AbbreviationObj.Abbreviation;
                                var AbbreviationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AbbreviationPropKey, value: AbbreviationpropV));
                                break;
                            case "Commission":
                                CQGTradingSystemDefinition CommissionObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double CommissionpropV = CommissionObj.Commission;
                                var CommissionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommissionPropKey, value: CommissionpropV));
                                break;
                            case "CommissionType":
                                CQGTradingSystemDefinition CommissionTypeObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTradingSystemCommissionType CommissionTypepropV = CommissionTypeObj.CommissionType;
                                var CommissionTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CommissionTypePropKey, value: CommissionTypepropV));
                                break;
                            case "Name":
                                CQGTradingSystemDefinition NameObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "ParameterDefinitions":
                                CQGTradingSystemDefinition ParameterDefinitionsObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGParameterDefinitions ParameterDefinitionspropV = ParameterDefinitionsObj.ParameterDefinitions;
                                var ParameterDefinitionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ParameterDefinitionsPropKey, ParameterDefinitionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterDefinitionsPropKey));
                                break;
                            case "TradeDefinitions":
                                CQGTradingSystemDefinition TradeDefinitionsObj = (CQGTradingSystemDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTradeDefinitions TradeDefinitionspropV = TradeDefinitionsObj.TradeDefinitions;
                                var TradeDefinitionsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradeDefinitionsPropKey, TradeDefinitionspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeDefinitionsPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradingSystemDefinitions CountObj = (CQGTradingSystemDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradingSystemDefinitions ItemObj = (CQGTradingSystemDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByAbbreviation":
                                CQGTradingSystemDefinitions ItemByAbbreviationObj = (CQGTradingSystemDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemDefinition ItemByAbbreviationpropV = ItemByAbbreviationObj.ItemByAbbreviation[(System.String)args[0]];
                                var ItemByAbbreviationPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByAbbreviationPropKey, ItemByAbbreviationpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByAbbreviationPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemInsertInfoClass":
                            switch (query.MemberName)
                            {
                            case "Index":
                                CQGTradingSystemInsertInfo IndexObj = (CQGTradingSystemInsertInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IndexpropV = IndexObj.Index;
                                var IndexPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemRelationAddInfoClass":
                            switch (query.MemberName)
                            {
                            case "Entry":
                                CQGTradingSystemRelationAddInfo EntryObj = (CQGTradingSystemRelationAddInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeEntry EntrypropV = EntryObj.Entry;
                                var EntryPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(EntryPropKey, EntrypropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryPropKey));
                                break;
                            case "EntryRowIndex":
                                CQGTradingSystemRelationAddInfo EntryRowIndexObj = (CQGTradingSystemRelationAddInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 EntryRowIndexpropV = EntryRowIndexObj.EntryRowIndex;
                                var EntryRowIndexPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryRowIndexPropKey, value: EntryRowIndexpropV));
                                break;
                            case "Exit":
                                CQGTradingSystemRelationAddInfo ExitObj = (CQGTradingSystemRelationAddInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExit ExitpropV = ExitObj.Exit;
                                var ExitPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ExitPropKey, ExitpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitPropKey));
                                break;
                            case "ExitRowIndex":
                                CQGTradingSystemRelationAddInfo ExitRowIndexObj = (CQGTradingSystemRelationAddInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 ExitRowIndexpropV = ExitRowIndexObj.ExitRowIndex;
                                var ExitRowIndexPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitRowIndexPropKey, value: ExitRowIndexpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemRemoveInfoClass":
                            switch (query.MemberName)
                            {
                            case "Index":
                                CQGTradingSystemRemoveInfo IndexObj = (CQGTradingSystemRemoveInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IndexpropV = IndexObj.Index;
                                var IndexPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemRequestClass":
                            switch (query.MemberName)
                            {
                            case "BaseBarParameters":
                                CQGTradingSystemRequest BaseBarParametersObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemBaseBarParameters BaseBarParameterspropV = BaseBarParametersObj.BaseBarParameters;
                                var BaseBarParametersPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(BaseBarParametersPropKey, BaseBarParameterspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseBarParametersPropKey));
                                break;
                            case "BaseBarType":
                                CQGTradingSystemRequest BaseBarTypeObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTradingSystemBaseBar BaseBarTypepropV = BaseBarTypeObj.BaseBarType;
                                var BaseBarTypePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseBarTypePropKey, value: BaseBarTypepropV));
                                break;
                            case "BaseExpression":
                                CQGTradingSystemRequest BaseExpressionObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String BaseExpressionpropV = BaseExpressionObj.BaseExpression;
                                var BaseExpressionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: BaseExpressionPropKey, value: BaseExpressionpropV));
                                break;
                            case "Continuation":
                                CQGTradingSystemRequest ContinuationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGTradingSystemRequest DaysBeforeExpirationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "Definition":
                                CQGTradingSystemRequest DefinitionObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "EqualizeCloses":
                                CQGTradingSystemRequest EqualizeClosesObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "HistoricalPeriod":
                                CQGTradingSystemRequest HistoricalPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eHistoricalPeriod HistoricalPeriodpropV = HistoricalPeriodObj.HistoricalPeriod;
                                var HistoricalPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HistoricalPeriodPropKey, value: HistoricalPeriodpropV));
                                break;
                            case "IncludeEnd":
                                CQGTradingSystemRequest IncludeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "IntradayPeriod":
                                CQGTradingSystemRequest IntradayPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IntradayPeriodpropV = IntradayPeriodObj.IntradayPeriod;
                                var IntradayPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IntradayPeriodPropKey, value: IntradayPeriodpropV));
                                break;
                            case "Parameter":
                                CQGTradingSystemRequest ParameterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object ParameterpropV = ParameterObj.Parameter[(System.Object)args[0]];
                                var ParameterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ParameterPropKey, value: ParameterpropV));
                                break;
                            case "RangeEnd":
                                CQGTradingSystemRequest RangeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGTradingSystemRequest RangeStartObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGTradingSystemRequest RecalcPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGTradingSystemRequest SessionFlagsObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGTradingSystemRequest SessionsFilterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGTradingSystemRequest SubscriptionLevelObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradingSystems CountObj = (CQGTradingSystems)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradingSystems ItemObj = (CQGTradingSystems)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystem ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGTradingSystems ItemByIdObj = (CQGTradingSystems)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystem ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemStatisticsChangeInfoClass":
                            switch (query.MemberName)
                            {
                            case "Statistics":
                                CQGTradingSystemStatisticsChangeInfo StatisticsObj = (CQGTradingSystemStatisticsChangeInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemStatistics StatisticspropV = StatisticsObj.Statistics;
                                var StatisticsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(StatisticsPropKey, StatisticspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemStatisticsClass":
                            switch (query.MemberName)
                            {
                            case "AverageDuration":
                                CQGTradingSystemStatistics AverageDurationObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AverageDurationpropV = AverageDurationObj.AverageDuration;
                                var AverageDurationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageDurationPropKey, value: AverageDurationpropV));
                                break;
                            case "AverageLoss":
                                CQGTradingSystemStatistics AverageLossObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AverageLosspropV = AverageLossObj.AverageLoss;
                                var AverageLossPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageLossPropKey, value: AverageLosspropV));
                                break;
                            case "AverageProfit":
                                CQGTradingSystemStatistics AverageProfitObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AverageProfitpropV = AverageProfitObj.AverageProfit;
                                var AverageProfitPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageProfitPropKey, value: AverageProfitpropV));
                                break;
                            case "AverageWin":
                                CQGTradingSystemStatistics AverageWinObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AverageWinpropV = AverageWinObj.AverageWin;
                                var AverageWinPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AverageWinPropKey, value: AverageWinpropV));
                                break;
                            case "ClosedNetProfit":
                                CQGTradingSystemStatistics ClosedNetProfitObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ClosedNetProfitpropV = ClosedNetProfitObj.ClosedNetProfit;
                                var ClosedNetProfitPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosedNetProfitPropKey, value: ClosedNetProfitpropV));
                                break;
                            case "CurConsecLosses":
                                CQGTradingSystemStatistics CurConsecLossesObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double CurConsecLossespropV = CurConsecLossesObj.CurConsecLosses;
                                var CurConsecLossesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurConsecLossesPropKey, value: CurConsecLossespropV));
                                break;
                            case "CurConsecWins":
                                CQGTradingSystemStatistics CurConsecWinsObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double CurConsecWinspropV = CurConsecWinsObj.CurConsecWins;
                                var CurConsecWinsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurConsecWinsPropKey, value: CurConsecWinspropV));
                                break;
                            case "CurDrawDown":
                                CQGTradingSystemStatistics CurDrawDownObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double CurDrawDownpropV = CurDrawDownObj.CurDrawDown;
                                var CurDrawDownPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CurDrawDownPropKey, value: CurDrawDownpropV));
                                break;
                            case "LinearRegression":
                                CQGTradingSystemStatistics LinearRegressionObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double LinearRegressionpropV = LinearRegressionObj.LinearRegression;
                                var LinearRegressionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LinearRegressionPropKey, value: LinearRegressionpropV));
                                break;
                            case "MaxClosedDraw":
                                CQGTradingSystemStatistics MaxClosedDrawObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MaxClosedDrawpropV = MaxClosedDrawObj.MaxClosedDraw;
                                var MaxClosedDrawPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxClosedDrawPropKey, value: MaxClosedDrawpropV));
                                break;
                            case "MaxConsecLosses":
                                CQGTradingSystemStatistics MaxConsecLossesObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MaxConsecLossespropV = MaxConsecLossesObj.MaxConsecLosses;
                                var MaxConsecLossesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxConsecLossesPropKey, value: MaxConsecLossespropV));
                                break;
                            case "MaxConsecWins":
                                CQGTradingSystemStatistics MaxConsecWinsObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MaxConsecWinspropV = MaxConsecWinsObj.MaxConsecWins;
                                var MaxConsecWinsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxConsecWinsPropKey, value: MaxConsecWinspropV));
                                break;
                            case "MaxDrawAmount":
                                CQGTradingSystemStatistics MaxDrawAmountObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MaxDrawAmountpropV = MaxDrawAmountObj.MaxDrawAmount;
                                var MaxDrawAmountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxDrawAmountPropKey, value: MaxDrawAmountpropV));
                                break;
                            case "MaxDrawDuration":
                                CQGTradingSystemStatistics MaxDrawDurationObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MaxDrawDurationpropV = MaxDrawDurationObj.MaxDrawDuration;
                                var MaxDrawDurationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaxDrawDurationPropKey, value: MaxDrawDurationpropV));
                                break;
                            case "MaximumLoss":
                                CQGTradingSystemStatistics MaximumLossObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MaximumLosspropV = MaximumLossObj.MaximumLoss;
                                var MaximumLossPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaximumLossPropKey, value: MaximumLosspropV));
                                break;
                            case "MaximumWin":
                                CQGTradingSystemStatistics MaximumWinObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MaximumWinpropV = MaximumWinObj.MaximumWin;
                                var MaximumWinPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MaximumWinPropKey, value: MaximumWinpropV));
                                break;
                            case "OpenPosition":
                                CQGTradingSystemStatistics OpenPositionObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double OpenPositionpropV = OpenPositionObj.OpenPosition;
                                var OpenPositionPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPositionPropKey, value: OpenPositionpropV));
                                break;
                            case "PercentLong":
                                CQGTradingSystemStatistics PercentLongObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PercentLongpropV = PercentLongObj.PercentLong;
                                var PercentLongPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PercentLongPropKey, value: PercentLongpropV));
                                break;
                            case "PercentWinners":
                                CQGTradingSystemStatistics PercentWinnersObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double PercentWinnerspropV = PercentWinnersObj.PercentWinners;
                                var PercentWinnersPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PercentWinnersPropKey, value: PercentWinnerspropV));
                                break;
                            case "ProfitLossRatio":
                                CQGTradingSystemStatistics ProfitLossRatioObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ProfitLossRatiopropV = ProfitLossRatioObj.ProfitLossRatio;
                                var ProfitLossRatioPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitLossRatioPropKey, value: ProfitLossRatiopropV));
                                break;
                            case "ProfitToMaxDraw":
                                CQGTradingSystemStatistics ProfitToMaxDrawObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ProfitToMaxDrawpropV = ProfitToMaxDrawObj.ProfitToMaxDraw;
                                var ProfitToMaxDrawPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ProfitToMaxDrawPropKey, value: ProfitToMaxDrawpropV));
                                break;
                            case "RemoveToNeutral":
                                CQGTradingSystemStatistics RemoveToNeutralObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double RemoveToNeutralpropV = RemoveToNeutralObj.RemoveToNeutral;
                                var RemoveToNeutralPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RemoveToNeutralPropKey, value: RemoveToNeutralpropV));
                                break;
                            case "ReturnRetracement":
                                CQGTradingSystemStatistics ReturnRetracementObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ReturnRetracementpropV = ReturnRetracementObj.ReturnRetracement;
                                var ReturnRetracementPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ReturnRetracementPropKey, value: ReturnRetracementpropV));
                                break;
                            case "TimePercentage":
                                CQGTradingSystemStatistics TimePercentageObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TimePercentagepropV = TimePercentageObj.TimePercentage;
                                var TimePercentagePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimePercentagePropKey, value: TimePercentagepropV));
                                break;
                            case "Timestamp":
                                CQGTradingSystemStatistics TimestampObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGTradingSystemStatistics TimestampOffsetObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            case "TotalNetProfit":
                                CQGTradingSystemStatistics TotalNetProfitObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TotalNetProfitpropV = TotalNetProfitObj.TotalNetProfit;
                                var TotalNetProfitPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalNetProfitPropKey, value: TotalNetProfitpropV));
                                break;
                            case "TotalTradeCount":
                                CQGTradingSystemStatistics TotalTradeCountObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TotalTradeCountpropV = TotalTradeCountObj.TotalTradeCount;
                                var TotalTradeCountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TotalTradeCountPropKey, value: TotalTradeCountpropV));
                                break;
                            case "Value":
                                CQGTradingSystemStatistics ValueObj = (CQGTradingSystemStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ValuepropV = ValueObj[(CQG.eTradingSystemStatistic)args[0]];
                                var ValuePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ValuePropKey, value: ValuepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemStatisticsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradingSystemStatisticsCollection CountObj = (CQGTradingSystemStatisticsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradingSystemStatisticsCollection ItemObj = (CQGTradingSystemStatisticsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemStatistics ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemTradeClass":
                            switch (query.MemberName)
                            {
                            case "Definition":
                                CQGTradingSystemTrade DefinitionObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTradeDefinition DefinitionpropV = DefinitionObj.Definition;
                                var DefinitionPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(DefinitionPropKey, DefinitionpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DefinitionPropKey));
                                break;
                            case "IsActive":
                                CQGTradingSystemTrade IsActiveObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IsActivepropV = IsActiveObj.IsActive;
                                var IsActivePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IsActivePropKey, value: IsActivepropV));
                                break;
                            case "Timestamp":
                                CQGTradingSystemTrade TimestampObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGTradingSystemTrade TimestampOffsetObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            case "TradeEntry":
                                CQGTradingSystemTrade TradeEntryObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeEntry TradeEntrypropV = TradeEntryObj.TradeEntry;
                                var TradeEntryPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradeEntryPropKey, TradeEntrypropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeEntryPropKey));
                                break;
                            case "TradeExits":
                                CQGTradingSystemTrade TradeExitsObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExits TradeExitspropV = TradeExitsObj.TradeExits;
                                var TradeExitsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradeExitsPropKey, TradeExitspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradeExitsPropKey));
                                break;
                            case "TradesRow":
                                CQGTradingSystemTrade TradesRowObj = (CQGTradingSystemTrade)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTradesRow TradesRowpropV = TradesRowObj.TradesRow;
                                var TradesRowPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(TradesRowPropKey, TradesRowpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TradesRowPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemTradeDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "Entry":
                                CQGTradingSystemTradeDefinition EntryObj = (CQGTradingSystemTradeDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeEntryDefinition EntrypropV = EntryObj.Entry;
                                var EntryPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(EntryPropKey, EntrypropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EntryPropKey));
                                break;
                            case "Exits":
                                CQGTradingSystemTradeDefinition ExitsObj = (CQGTradingSystemTradeDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradeExitDefinitions ExitspropV = ExitsObj.Exits;
                                var ExitsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ExitsPropKey, ExitspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExitsPropKey));
                                break;
                            case "Name":
                                CQGTradingSystemTradeDefinition NameObj = (CQGTradingSystemTradeDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String NamepropV = NameObj.Name;
                                var NamePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: NamePropKey, value: NamepropV));
                                break;
                            case "Side":
                                CQGTradingSystemTradeDefinition SideObj = (CQGTradingSystemTradeDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTradeSide SidepropV = SideObj.Side;
                                var SidePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SidePropKey, value: SidepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemTradeDefinitionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradingSystemTradeDefinitions CountObj = (CQGTradingSystemTradeDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradingSystemTradeDefinitions ItemObj = (CQGTradingSystemTradeDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTradeDefinition ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByName":
                                CQGTradingSystemTradeDefinitions ItemByNameObj = (CQGTradingSystemTradeDefinitions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTradeDefinition ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                                var ItemByNamePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemTradesRowClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradingSystemTradesRow CountObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradingSystemTradesRow ItemObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTrade ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByName":
                                CQGTradingSystemTradesRow ItemByNameObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTrade ItemByNamepropV = ItemByNameObj.ItemByName[(System.String)args[0]];
                                var ItemByNamePropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByNamePropKey, ItemByNamepropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByNamePropKey));
                                break;
                            case "Timestamp":
                                CQGTradingSystemTradesRow TimestampObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TimestampOffset":
                                CQGTradingSystemTradesRow TimestampOffsetObj = (CQGTradingSystemTradesRow)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 TimestampOffsetpropV = TimestampOffsetObj.TimestampOffset;
                                var TimestampOffsetPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampOffsetPropKey, value: TimestampOffsetpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemTradesRowsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTradingSystemTradesRows CountObj = (CQGTradingSystemTradesRows)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTradingSystemTradesRows ItemObj = (CQGTradingSystemTradesRows)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemTradesRow ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemUpdateInfoClass":
                            switch (query.MemberName)
                            {
                            case "Index":
                                CQGTradingSystemUpdateInfo IndexObj = (CQGTradingSystemUpdateInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 IndexpropV = IndexObj.Index;
                                var IndexPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IndexPropKey, value: IndexpropV));
                                break;
                            case "StatisticsChangeInfo":
                                CQGTradingSystemUpdateInfo StatisticsChangeInfoObj = (CQGTradingSystemUpdateInfo)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTradingSystemStatisticsChangeInfo StatisticsChangeInfopropV = StatisticsChangeInfoObj.StatisticsChangeInfo;
                                var StatisticsChangeInfoPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(StatisticsChangeInfoPropKey, StatisticsChangeInfopropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatisticsChangeInfoPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGTransactionClass":
                            switch (query.MemberName)
                            {
                            case "ExecutionId":
                                CQGTransaction ExecutionIdObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String ExecutionIdpropV = ExecutionIdObj.ExecutionId;
                                var ExecutionIdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ExecutionIdPropKey, value: ExecutionIdpropV));
                                break;
                            case "Fill":
                                CQGTransaction FillObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGFill FillpropV = FillObj.Fill;
                                var FillPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(FillPropKey, FillpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: FillPropKey));
                                break;
                            case "HangOrderIds":
                                CQGTransaction HangOrderIdsObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStringCollection HangOrderIdspropV = HangOrderIdsObj.HangOrderIds;
                                var HangOrderIdsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(HangOrderIdsPropKey, HangOrderIdspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HangOrderIdsPropKey));
                                break;
                            case "HangQuantity":
                                CQGTransaction HangQuantityObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 HangQuantitypropV = HangQuantityObj.HangQuantity;
                                var HangQuantityPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HangQuantityPropKey, value: HangQuantitypropV));
                                break;
                            case "Id":
                                CQGTransaction IdObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Order":
                                CQGTransaction OrderObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGOrder OrderpropV = OrderObj.Order;
                                var OrderPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(OrderPropKey, OrderpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OrderPropKey));
                                break;
                            case "Properties":
                                CQGTransaction PropertiesObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGModifiedProperties PropertiespropV = PropertiesObj.Properties;
                                var PropertiesPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(PropertiesPropKey, PropertiespropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: PropertiesPropKey));
                                break;
                            case "RejectReason":
                                CQGTransaction RejectReasonObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String RejectReasonpropV = RejectReasonObj.RejectReason;
                                var RejectReasonPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RejectReasonPropKey, value: RejectReasonpropV));
                                break;
                            case "ServerTimestamp":
                                CQGTransaction ServerTimestampObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime ServerTimestamppropV = ServerTimestampObj.ServerTimestamp;
                                var ServerTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ServerTimestampPropKey, value: ServerTimestamppropV));
                                break;
                            case "Status":
                                CQGTransaction StatusObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eOrderEvent StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "StrategyLegFills":
                                CQGTransaction StrategyLegFillsObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGStrategyLegFills StrategyLegFillspropV = StrategyLegFillsObj.StrategyLegFills;
                                var StrategyLegFillsPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(StrategyLegFillsPropKey, StrategyLegFillspropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StrategyLegFillsPropKey));
                                break;
                            case "Timestamp":
                                CQGTransaction TimestampObj = (CQGTransaction)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            }
                            break;
                        case "CQG.CQGTransactionsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGTransactions CountObj = (CQGTransactions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGTransactions ItemObj = (CQGTransactions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTransaction ItempropV = ItemObj[(System.String)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemByIndex":
                                CQGTransactions ItemByIndexObj = (CQGTransactions)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGTransaction ItemByIndexpropV = ItemByIndexObj.ItemByIndex[(System.Int32)args[0]];
                                var ItemByIndexPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIndexPropKey, ItemByIndexpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIndexPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGYieldClass":
                            switch (query.MemberName)
                            {
                            case "Avg":
                                CQGYield AvgObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double AvgpropV = AvgObj.Avg;
                                var AvgPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: AvgPropKey, value: AvgpropV));
                                break;
                            case "Close":
                                CQGYield CloseObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double ClosepropV = CloseObj.Close;
                                var ClosePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ClosePropKey, value: ClosepropV));
                                break;
                            case "High":
                                CQGYield HighObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HighpropV = HighObj.High;
                                var HighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HighPropKey, value: HighpropV));
                                break;
                            case "HLC3":
                                CQGYield HLC3Obj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double HLC3propV = HLC3Obj.HLC3;
                                var HLC3PropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: HLC3PropKey, value: HLC3propV));
                                break;
                            case "Low":
                                CQGYield LowObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double LowpropV = LowObj.Low;
                                var LowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LowPropKey, value: LowpropV));
                                break;
                            case "Mid":
                                CQGYield MidObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double MidpropV = MidObj.Mid;
                                var MidPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: MidPropKey, value: MidpropV));
                                break;
                            case "Open":
                                CQGYield OpenObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double OpenpropV = OpenObj.Open;
                                var OpenPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: OpenPropKey, value: OpenpropV));
                                break;
                            case "Range":
                                CQGYield RangeObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double RangepropV = RangeObj.Range;
                                var RangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangePropKey, value: RangepropV));
                                break;
                            case "Timestamp":
                                CQGYield TimestampObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime TimestamppropV = TimestampObj.Timestamp;
                                var TimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TimestampPropKey, value: TimestamppropV));
                                break;
                            case "TrueHigh":
                                CQGYield TrueHighObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueHighpropV = TrueHighObj.TrueHigh;
                                var TrueHighPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueHighPropKey, value: TrueHighpropV));
                                break;
                            case "TrueLow":
                                CQGYield TrueLowObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueLowpropV = TrueLowObj.TrueLow;
                                var TrueLowPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueLowPropKey, value: TrueLowpropV));
                                break;
                            case "TrueRange":
                                CQGYield TrueRangeObj = (CQGYield)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Double TrueRangepropV = TrueRangeObj.TrueRange;
                                var TrueRangePropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TrueRangePropKey, value: TrueRangepropV));
                                break;
                            }
                            break;
                        case "CQG.CQGYieldsClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGYields CountObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "EndTimestamp":
                                CQGYields EndTimestampObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime EndTimestamppropV = EndTimestampObj.EndTimestamp;
                                var EndTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EndTimestampPropKey, value: EndTimestamppropV));
                                break;
                            case "Id":
                                CQGYields IdObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String IdpropV = IdObj.Id;
                                var IdPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IdPropKey, value: IdpropV));
                                break;
                            case "Item":
                                CQGYields ItemObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGYield ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "LastError":
                                CQGYields LastErrorObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGError LastErrorpropV = LastErrorObj.LastError;
                                var LastErrorPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(LastErrorPropKey, LastErrorpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: LastErrorPropKey));
                                break;
                            case "Request":
                                CQGYields RequestObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGYieldsRequest RequestpropV = RequestObj.Request;
                                var RequestPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(RequestPropKey, RequestpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RequestPropKey));
                                break;
                            case "StartTimestamp":
                                CQGYields StartTimestampObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.DateTime StartTimestamppropV = StartTimestampObj.StartTimestamp;
                                var StartTimestampPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StartTimestampPropKey, value: StartTimestamppropV));
                                break;
                            case "Status":
                                CQGYields StatusObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eRequestStatus StatuspropV = StatusObj.Status;
                                var StatusPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: StatusPropKey, value: StatuspropV));
                                break;
                            case "Tag":
                                CQGYields TagObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object TagpropV = TagObj.Tag[(System.String)args[0]];
                                var TagPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: TagPropKey, value: TagpropV));
                                break;
                            }
                            break;
                        case "CQG.CQGYieldsCollectionClass":
                            switch (query.MemberName)
                            {
                            case "Count":
                                CQGYieldsCollection CountObj = (CQGYieldsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 CountpropV = CountObj.Count;
                                var CountPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CountPropKey, value: CountpropV));
                                break;
                            case "Item":
                                CQGYieldsCollection ItemObj = (CQGYieldsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGYields ItempropV = ItemObj[(System.Int32)args[0]];
                                var ItemPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemPropKey, ItempropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemPropKey));
                                break;
                            case "ItemById":
                                CQGYieldsCollection ItemByIdObj = (CQGYieldsCollection)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.CQGYields ItemByIdpropV = ItemByIdObj.ItemById[(System.String)args[0]];
                                var ItemByIdPropKey = Core.CreateUniqueKey();
                                ServerDictionaries.PutObjectToTheDictionary(ItemByIdPropKey, ItemByIdpropV);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ItemByIdPropKey));
                                break;
                            }
                            break;
                        case "CQG.CQGYieldsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Compound":
                                CQGYieldsRequest CompoundObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eYieldCompound CompoundpropV = CompoundObj.Compound;
                                var CompoundPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: CompoundPropKey, value: CompoundpropV));
                                break;
                            case "Continuation":
                                CQGYieldsRequest ContinuationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesContinuationType ContinuationpropV = ContinuationObj.Continuation;
                                var ContinuationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ContinuationPropKey, value: ContinuationpropV));
                                break;
                            case "DaysBeforeExpiration":
                                CQGYieldsRequest DaysBeforeExpirationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 DaysBeforeExpirationpropV = DaysBeforeExpirationObj.DaysBeforeExpiration;
                                var DaysBeforeExpirationPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: DaysBeforeExpirationPropKey, value: DaysBeforeExpirationpropV));
                                break;
                            case "EqualizeCloses":
                                CQGYieldsRequest EqualizeClosesObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean EqualizeClosespropV = EqualizeClosesObj.EqualizeCloses;
                                var EqualizeClosesPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: EqualizeClosesPropKey, value: EqualizeClosespropV));
                                break;
                            case "IncludeEnd":
                                CQGYieldsRequest IncludeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean IncludeEndpropV = IncludeEndObj.IncludeEnd;
                                var IncludeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: IncludeEndPropKey, value: IncludeEndpropV));
                                break;
                            case "Model":
                                CQGYieldsRequest ModelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eYieldModel ModelpropV = ModelObj.Model;
                                var ModelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: ModelPropKey, value: ModelpropV));
                                break;
                            case "RangeEnd":
                                CQGYieldsRequest RangeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeEndpropV = RangeEndObj.RangeEnd;
                                var RangeEndPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeEndPropKey, value: RangeEndpropV));
                                break;
                            case "RangeStart":
                                CQGYieldsRequest RangeStartObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object RangeStartpropV = RangeStartObj.RangeStart;
                                var RangeStartPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RangeStartPropKey, value: RangeStartpropV));
                                break;
                            case "RecalcPeriod":
                                CQGYieldsRequest RecalcPeriodObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Int32 RecalcPeriodpropV = RecalcPeriodObj.RecalcPeriod;
                                var RecalcPeriodPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: RecalcPeriodPropKey, value: RecalcPeriodpropV));
                                break;
                            case "SessionFlags":
                                CQGYieldsRequest SessionFlagsObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eSessionFlag SessionFlagspropV = SessionFlagsObj.SessionFlags;
                                var SessionFlagsPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionFlagsPropKey, value: SessionFlagspropV));
                                break;
                            case "SessionsFilter":
                                CQGYieldsRequest SessionsFilterObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Object SessionsFilterpropV = SessionsFilterObj.SessionsFilter;
                                var SessionsFilterPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SessionsFilterPropKey, value: SessionsFilterpropV));
                                break;
                            case "SubscriptionLevel":
                                CQGYieldsRequest SubscriptionLevelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                CQG.eTimeSeriesSubscriptionLevel SubscriptionLevelpropV = SubscriptionLevelObj.SubscriptionLevel;
                                var SubscriptionLevelPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SubscriptionLevelPropKey, value: SubscriptionLevelpropV));
                                break;
                            case "Symbol":
                                CQGYieldsRequest SymbolObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.String SymbolpropV = SymbolObj.Symbol;
                                var SymbolPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: SymbolPropKey, value: SymbolpropV));
                                break;
                            case "UpdatesEnabled":
                                CQGYieldsRequest UpdatesEnabledObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                System.Boolean UpdatesEnabledpropV = UpdatesEnabledObj.UpdatesEnabled;
                                var UpdatesEnabledPropKey = "value";
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, valueKey: UpdatesEnabledPropKey, value: UpdatesEnabledpropV));
                                break;
                            }
                            break;
                    }
                    break;
                case QueryType.SetProperty:
                    switch (qObjType)
                    {
                        case "CQG.CQGAccountClass":
                            switch (query.MemberName)
                            {
                            case "AccountMarginDetailing":
                                CQGAccount AccountMarginDetailingObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AccountMarginDetailingval = (CQG.eAccountMarginDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AccountMarginDetailingObj.AccountMarginDetailing = AccountMarginDetailingval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "AutoSubscribeInstruments":
                                CQGAccount AutoSubscribeInstrumentsObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AutoSubscribeInstrumentsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AutoSubscribeInstrumentsObj.AutoSubscribeInstruments = AutoSubscribeInstrumentsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "PositionSubcriptionLevel":
                                CQGAccount PositionSubcriptionLevelObj = (CQGAccount)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var PositionSubcriptionLevelval = (CQG.ePositionSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                PositionSubcriptionLevelObj.PositionSubcriptionLevel = PositionSubcriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGAdvancedStudyClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGAdvancedStudy TagObj = (CQGAdvancedStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGAdvancedStudyRequestClass":
                            switch (query.MemberName)
                            {
                            case "BaseExpression":
                                CQGAdvancedStudyRequest BaseExpressionObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                BaseExpressionObj.BaseExpression = BaseExpressionval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Continuation":
                                CQGAdvancedStudyRequest ContinuationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGAdvancedStudyRequest DaysBeforeExpirationObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGAdvancedStudyRequest EqualizeClosesObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "HistoricalPeriod":
                                CQGAdvancedStudyRequest HistoricalPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGAdvancedStudyRequest IncludeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IntradayPeriod":
                                CQGAdvancedStudyRequest IntradayPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Parameter":
                                CQGAdvancedStudyRequest ParameterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGAdvancedStudyRequest RangeEndObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGAdvancedStudyRequest RangeStartObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGAdvancedStudyRequest RecalcPeriodObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGAdvancedStudyRequest SessionFlagsObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGAdvancedStudyRequest SessionsFilterObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGAdvancedStudyRequest SubscriptionLevelObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGAdvancedStudyRequest UpdatesEnabledObj = (CQGAdvancedStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGAlgorithmicOrderDefinitionClass":
                            switch (query.MemberName)
                            {
                            case "DefaultValue":
                                CQGAlgorithmicOrderDefinition DefaultValueObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DefaultValueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DefaultValueObj.DefaultValue = DefaultValueval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DefaultValueIndex":
                                CQGAlgorithmicOrderDefinition DefaultValueIndexObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DefaultValueIndexval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DefaultValueIndexObj.DefaultValueIndex = DefaultValueIndexval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Name":
                                CQGAlgorithmicOrderDefinition NameObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Nameval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                NameObj.Name = Nameval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Type":
                                CQGAlgorithmicOrderDefinition TypeObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Typeval = (CQG.eAlgorithmicOrderPropertyType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TypeObj.Type = Typeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Unit":
                                CQGAlgorithmicOrderDefinition UnitObj = (CQGAlgorithmicOrderDefinition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Unitval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UnitObj.Unit = Unitval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGAPIConfigClass":
                            switch (query.MemberName)
                            {
                            case "AccountMarginAndPositionsThrottleInterval":
                                CQGAPIConfig AccountMarginAndPositionsThrottleIntervalObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AccountMarginAndPositionsThrottleIntervalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AccountMarginAndPositionsThrottleIntervalObj.AccountMarginAndPositionsThrottleInterval = AccountMarginAndPositionsThrottleIntervalval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "AgeToDeleteLogFileDays":
                                CQGAPIConfig AgeToDeleteLogFileDaysObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AgeToDeleteLogFileDaysval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AgeToDeleteLogFileDaysObj.AgeToDeleteLogFileDays = AgeToDeleteLogFileDaysval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "ApplyDaylightSavingChanges":
                                CQGAPIConfig ApplyDaylightSavingChangesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var ApplyDaylightSavingChangesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ApplyDaylightSavingChangesObj.ApplyDaylightSavingChanges = ApplyDaylightSavingChangesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "CollectionsThrowException":
                                CQGAPIConfig CollectionsThrowExceptionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var CollectionsThrowExceptionval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                CollectionsThrowExceptionObj.CollectionsThrowException = CollectionsThrowExceptionval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DefaultAccountMarginDetailing":
                                CQGAPIConfig DefaultAccountMarginDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DefaultAccountMarginDetailingval = (CQG.eAccountMarginDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DefaultAccountMarginDetailingObj.DefaultAccountMarginDetailing = DefaultAccountMarginDetailingval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DefaultInstrumentBBAType":
                                CQGAPIConfig DefaultInstrumentBBATypeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DefaultInstrumentBBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DefaultInstrumentBBATypeObj.DefaultInstrumentBBAType = DefaultInstrumentBBATypeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DefaultInstrumentSubscriptionLevel":
                                CQGAPIConfig DefaultInstrumentSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DefaultInstrumentSubscriptionLevelval = (CQG.eDataSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DefaultInstrumentSubscriptionLevelObj.DefaultInstrumentSubscriptionLevel = DefaultInstrumentSubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DefPositionSubscriptionLevel":
                                CQGAPIConfig DefPositionSubscriptionLevelObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DefPositionSubscriptionLevelval = (CQG.ePositionSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DefPositionSubscriptionLevelObj.DefPositionSubscriptionLevel = DefPositionSubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DOMUpdatesMode":
                                CQGAPIConfig DOMUpdatesModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DOMUpdatesModeval = (CQG.eDOMUpdatesMode)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DOMUpdatesModeObj.DOMUpdatesMode = DOMUpdatesModeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DOMUpdatesPeriod":
                                CQGAPIConfig DOMUpdatesPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DOMUpdatesPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DOMUpdatesPeriodObj.DOMUpdatesPeriod = DOMUpdatesPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "FireEventOnChangedPrices":
                                CQGAPIConfig FireEventOnChangedPricesObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var FireEventOnChangedPricesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                FireEventOnChangedPricesObj.FireEventOnChangedPrices = FireEventOnChangedPricesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "GatewayEnabled":
                                CQGAPIConfig GatewayEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var GatewayEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                GatewayEnabledObj.GatewayEnabled = GatewayEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeOrderTransactions":
                                CQGAPIConfig IncludeOrderTransactionsObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeOrderTransactionsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeOrderTransactionsObj.IncludeOrderTransactions = IncludeOrderTransactionsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "LogSeverity":
                                CQGAPIConfig LogSeverityObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var LogSeverityval = (CQG.eLogSeverity)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                LogSeverityObj.LogSeverity = LogSeverityval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "MaxLogFileCount":
                                CQGAPIConfig MaxLogFileCountObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var MaxLogFileCountval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                MaxLogFileCountObj.MaxLogFileCount = MaxLogFileCountval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "MaxLogFileDuration":
                                CQGAPIConfig MaxLogFileDurationObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var MaxLogFileDurationval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                MaxLogFileDurationObj.MaxLogFileDuration = MaxLogFileDurationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "MaxLogFileSize":
                                CQGAPIConfig MaxLogFileSizeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var MaxLogFileSizeval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                MaxLogFileSizeObj.MaxLogFileSize = MaxLogFileSizeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "MessageProcessingTimeout":
                                CQGAPIConfig MessageProcessingTimeoutObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var MessageProcessingTimeoutval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                MessageProcessingTimeoutObj.MessageProcessingTimeout = MessageProcessingTimeoutval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "MetaDataEnabled":
                                CQGAPIConfig MetaDataEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var MetaDataEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                MetaDataEnabledObj.MetaDataEnabled = MetaDataEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "NewInstrumentChangeMode":
                                CQGAPIConfig NewInstrumentChangeModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var NewInstrumentChangeModeval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                NewInstrumentChangeModeObj.NewInstrumentChangeMode = NewInstrumentChangeModeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "NewInstrumentMode":
                                CQGAPIConfig NewInstrumentModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var NewInstrumentModeval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                NewInstrumentModeObj.NewInstrumentMode = NewInstrumentModeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "NonsynchronizedData":
                                CQGAPIConfig NonsynchronizedDataObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var NonsynchronizedDataval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                NonsynchronizedDataObj.NonsynchronizedData = NonsynchronizedDataval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "PendingOrderActionEnabled":
                                CQGAPIConfig PendingOrderActionEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var PendingOrderActionEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                PendingOrderActionEnabledObj.PendingOrderActionEnabled = PendingOrderActionEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "PositionDetailing":
                                CQGAPIConfig PositionDetailingObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var PositionDetailingval = (CQG.ePositionDetailing)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                PositionDetailingObj.PositionDetailing = PositionDetailingval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "PriceMode":
                                CQGAPIConfig PriceModeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var PriceModeval = (CQG.ePriceMode)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                PriceModeObj.PriceMode = PriceModeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "ProviderPassword":
                                CQGAPIConfig ProviderPasswordObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var ProviderPasswordval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ProviderPasswordObj.ProviderPassword = ProviderPasswordval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "QueryAllAuthorizedTraders":
                                CQGAPIConfig QueryAllAuthorizedTradersObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var QueryAllAuthorizedTradersval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                QueryAllAuthorizedTradersObj.QueryAllAuthorizedTraders = QueryAllAuthorizedTradersval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "ReadyStatusCheck":
                                CQGAPIConfig ReadyStatusCheckObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var ReadyStatusCheckval = (CQG.eReadyStatusCheck)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ReadyStatusCheckObj.ReadyStatusCheck = ReadyStatusCheckval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RemoteOpenAPILoginService":
                                CQGAPIConfig RemoteOpenAPILoginServiceObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RemoteOpenAPILoginServiceval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RemoteOpenAPILoginServiceObj.RemoteOpenAPILoginService = RemoteOpenAPILoginServiceval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RemoteOpenAPIServer":
                                CQGAPIConfig RemoteOpenAPIServerObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RemoteOpenAPIServerval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RemoteOpenAPIServerObj.RemoteOpenAPIServer = RemoteOpenAPIServerval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "ReplaceLoginSession":
                                CQGAPIConfig ReplaceLoginSessionObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var ReplaceLoginSessionval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ReplaceLoginSessionObj.ReplaceLoginSession = ReplaceLoginSessionval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SnapshotPeriod":
                                CQGAPIConfig SnapshotPeriodObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SnapshotPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SnapshotPeriodObj.SnapshotPeriod = SnapshotPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "StrategyManagerEnabled":
                                CQGAPIConfig StrategyManagerEnabledObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var StrategyManagerEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                StrategyManagerEnabledObj.StrategyManagerEnabled = StrategyManagerEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "TimeZoneCode":
                                CQGAPIConfig TimeZoneCodeObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var TimeZoneCodeval = (CQG.eTimeZone)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TimeZoneCodeObj.TimeZoneCode = TimeZoneCodeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UsedFromATLClient":
                                CQGAPIConfig UsedFromATLClientObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UsedFromATLClientval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UsedFromATLClientObj.UsedFromATLClient = UsedFromATLClientval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UseOrderSide":
                                CQGAPIConfig UseOrderSideObj = (CQGAPIConfig)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UseOrderSideval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UseOrderSideObj.UseOrderSide = UseOrderSideval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGCELClass":
                            switch (query.MemberName)
                            {
                            case "AccountSubscriptionLevel":
                                CQGCEL AccountSubscriptionLevelObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AccountSubscriptionLevelval = (CQG.eAccountSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AccountSubscriptionLevelObj.AccountSubscriptionLevel = AccountSubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Configuration":
                                CQGCEL ConfigurationObj = (CQGCEL)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Configurationval = (CQG.CQGCELConfiguration)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ConfigurationObj.set_Configuration(ref Configurationval);
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGConditionClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGCondition TagObj = (CQGCondition)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGConditionRequestClass":
                            switch (query.MemberName)
                            {
                            case "BaseExpression":
                                CQGConditionRequest BaseExpressionObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                BaseExpressionObj.BaseExpression = BaseExpressionval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Continuation":
                                CQGConditionRequest ContinuationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGConditionRequest DaysBeforeExpirationObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGConditionRequest EqualizeClosesObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "HistoricalPeriod":
                                CQGConditionRequest HistoricalPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGConditionRequest IncludeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IntradayPeriod":
                                CQGConditionRequest IntradayPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Parameter":
                                CQGConditionRequest ParameterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGConditionRequest RangeEndObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGConditionRequest RangeStartObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGConditionRequest RecalcPeriodObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGConditionRequest SessionFlagsObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGConditionRequest SessionsFilterObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGConditionRequest SubscriptionLevelObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGConditionRequest UpdatesEnabledObj = (CQGConditionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGConstantVolumeBarsClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGConstantVolumeBars TagObj = (CQGConstantVolumeBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGConstantVolumeBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Continuation":
                                CQGConstantVolumeBarsRequest ContinuationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGConstantVolumeBarsRequest DaysBeforeExpirationObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGConstantVolumeBarsRequest EqualizeClosesObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGConstantVolumeBarsRequest IncludeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeFlatTicks":
                                CQGConstantVolumeBarsRequest IncludeFlatTicksObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeFlatTicksval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeFlatTicksObj.IncludeFlatTicks = IncludeFlatTicksval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGConstantVolumeBarsRequest RangeEndObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGConstantVolumeBarsRequest RangeStartObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGConstantVolumeBarsRequest RecalcPeriodObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGConstantVolumeBarsRequest SessionFlagsObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGConstantVolumeBarsRequest SessionsFilterObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGConstantVolumeBarsRequest SubscriptionLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGConstantVolumeBarsRequest SymbolObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGConstantVolumeBarsRequest UpdatesEnabledObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "VolumeLevel":
                                CQGConstantVolumeBarsRequest VolumeLevelObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var VolumeLevelval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                VolumeLevelObj.VolumeLevel = VolumeLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "VolumeType":
                                CQGConstantVolumeBarsRequest VolumeTypeObj = (CQGConstantVolumeBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var VolumeTypeval = (CQG.eCvbVolumeType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                VolumeTypeObj.VolumeType = VolumeTypeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGCustomStudyClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGCustomStudy TagObj = (CQGCustomStudy)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGCustomStudyRequestClass":
                            switch (query.MemberName)
                            {
                            case "BaseExpression":
                                CQGCustomStudyRequest BaseExpressionObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                BaseExpressionObj.BaseExpression = BaseExpressionval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Continuation":
                                CQGCustomStudyRequest ContinuationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGCustomStudyRequest DaysBeforeExpirationObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGCustomStudyRequest EqualizeClosesObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "HistoricalPeriod":
                                CQGCustomStudyRequest HistoricalPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGCustomStudyRequest IncludeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IntradayPeriod":
                                CQGCustomStudyRequest IntradayPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Parameter":
                                CQGCustomStudyRequest ParameterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGCustomStudyRequest RangeEndObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGCustomStudyRequest RangeStartObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGCustomStudyRequest RecalcPeriodObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGCustomStudyRequest SessionFlagsObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGCustomStudyRequest SessionsFilterObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGCustomStudyRequest SubscriptionLevelObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGCustomStudyRequest UpdatesEnabledObj = (CQGCustomStudyRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGExecutionPatternParameterClass":
                            switch (query.MemberName)
                            {
                            case "Value":
                                CQGExecutionPatternParameter ValueObj = (CQGExecutionPatternParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Valueval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ValueObj.Value = Valueval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGExpressionClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGExpression TagObj = (CQGExpression)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGExpressionRequestClass":
                            switch (query.MemberName)
                            {
                            case "Continuation":
                                CQGExpressionRequest ContinuationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGExpressionRequest DaysBeforeExpirationObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGExpressionRequest EqualizeClosesObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "HistoricalPeriod":
                                CQGExpressionRequest HistoricalPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGExpressionRequest IncludeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IntradayPeriod":
                                CQGExpressionRequest IntradayPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGExpressionRequest RangeEndObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGExpressionRequest RangeStartObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGExpressionRequest RecalcPeriodObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGExpressionRequest SessionFlagsObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGExpressionRequest SessionsFilterObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGExpressionRequest SubscriptionLevelObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGExpressionRequest UpdatesEnabledObj = (CQGExpressionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGHistoricalSessionsRequestClass":
                            switch (query.MemberName)
                            {
                            case "RangeEnd":
                                CQGHistoricalSessionsRequest RangeEndObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGHistoricalSessionsRequest RangeStartObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGHistoricalSessionsRequest SymbolObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Type":
                                CQGHistoricalSessionsRequest TypeObj = (CQGHistoricalSessionsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Typeval = (CQG.eHistoricalSessionsRequestType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TypeObj.Type = Typeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentClass":
                            switch (query.MemberName)
                            {
                            case "BBAType":
                                CQGInstrument BBATypeObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var BBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                BBATypeObj.BBAType = BBATypeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DataSubscriptionLevel":
                                CQGInstrument DataSubscriptionLevelObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DataSubscriptionLevelval = (CQG.eDataSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DataSubscriptionLevelObj.DataSubscriptionLevel = DataSubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DOMBookLimit":
                                CQGInstrument DOMBookLimitObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DOMBookLimitval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DOMBookLimitObj.DOMBookLimit = DOMBookLimitval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DOMStatus":
                                CQGInstrument DOMStatusObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DOMStatusval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DOMStatusObj.DOMStatus = DOMStatusval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Tag":
                                CQGInstrument TagObj = (CQGInstrument)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentsGroupRequestClass":
                            switch (query.MemberName)
                            {
                            case "Commodity":
                                CQGInstrumentsGroupRequest CommodityObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Commodityval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                CommodityObj.Commodity = Commodityval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "InstrumentTypes":
                                CQGInstrumentsGroupRequest InstrumentTypesObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var InstrumentTypesval = (CQG.eInstrumentType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                InstrumentTypesObj.InstrumentTypes = InstrumentTypesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGInstrumentsGroupRequest RangeEndObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGInstrumentsGroupRequest RangeStartObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGInstrumentsGroupRequest SubscriptionLevelObj = (CQGInstrumentsGroupRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eGroupSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGInstrumentSubscriptionRequestClass":
                            switch (query.MemberName)
                            {
                            case "DOMBBAType":
                                CQGInstrumentSubscriptionRequest DOMBBATypeObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DOMBBATypeval = (CQG.eDOMandBBAType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DOMBBATypeObj.DOMBBAType = DOMBBATypeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DOMStatus":
                                CQGInstrumentSubscriptionRequest DOMStatusObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DOMStatusval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DOMStatusObj.DOMStatus = DOMStatusval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "PropertyLevel":
                                CQGInstrumentSubscriptionRequest PropertyLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var PropertyLevelval = (CQG.ePropertySubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                PropertyLevelObj.PropertyLevel = PropertyLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "QuoteLevel":
                                CQGInstrumentSubscriptionRequest QuoteLevelObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var QuoteLevelval = (CQG.eQuoteSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                QuoteLevelObj.QuoteLevel = QuoteLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGInstrumentSubscriptionRequest SymbolObj = (CQGInstrumentSubscriptionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGManualFillRequestClass":
                            switch (query.MemberName)
                            {
                            case "GWAccountID":
                                CQGManualFillRequest GWAccountIDObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var GWAccountIDval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                GWAccountIDObj.GWAccountID = GWAccountIDval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "InstrumentName":
                                CQGManualFillRequest InstrumentNameObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var InstrumentNameval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                InstrumentNameObj.InstrumentName = InstrumentNameval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Note":
                                CQGManualFillRequest NoteObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Noteval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                NoteObj.Note = Noteval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Price":
                                CQGManualFillRequest PriceObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Priceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                PriceObj.Price = Priceval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Quantity":
                                CQGManualFillRequest QuantityObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Quantityval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                QuantityObj.Quantity = Quantityval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Side":
                                CQGManualFillRequest SideObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Sideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SideObj.Side = Sideval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "StatementDate":
                                CQGManualFillRequest StatementDateObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var StatementDateval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                StatementDateObj.StatementDate = StatementDateval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "TradeId":
                                CQGManualFillRequest TradeIdObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var TradeIdval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TradeIdObj.TradeId = TradeIdval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "TradeTimestamp":
                                CQGManualFillRequest TradeTimestampObj = (CQGManualFillRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var TradeTimestampval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TradeTimestampObj.TradeTimestamp = TradeTimestampval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderActionRequestClass":
                            switch (query.MemberName)
                            {
                            case "Account":
                                CQGOrderActionRequest AccountObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Accountval = (CQG.CQGAccount)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AccountObj.Account = Accountval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "AlgorithmID":
                                CQGOrderActionRequest AlgorithmIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "AlgorithmStringID":
                                CQGOrderActionRequest AlgorithmStringIDObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "FromAllTraders":
                                CQGOrderActionRequest FromAllTradersObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var FromAllTradersval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                FromAllTradersObj.FromAllTraders = FromAllTradersval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Instrument":
                                CQGOrderActionRequest InstrumentObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Instrumentval = (CQG.CQGInstrument)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                InstrumentObj.Instrument = Instrumentval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "OrderSide":
                                CQGOrderActionRequest OrderSideObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var OrderSideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                OrderSideObj.OrderSide = OrderSideval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Parked":
                                CQGOrderActionRequest ParkedObj = (CQGOrderActionRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Parkedval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ParkedObj.Parked = Parkedval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderChainClass":
                            switch (query.MemberName)
                            {
                            case "AlgorithmID":
                                CQGOrderChain AlgorithmIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "AlgorithmStringID":
                                CQGOrderChain AlgorithmStringIDObj = (CQGOrderChain)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderClass":
                            switch (query.MemberName)
                            {
                            case "Account":
                                CQGOrder AccountObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Accountval = (CQG.CQGAccount)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AccountObj.Account = Accountval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "AlgorithmID":
                                CQGOrder AlgorithmIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AlgorithmIDval = (System.UInt32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AlgorithmIDObj.AlgorithmID = AlgorithmIDval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "AlgorithmStringID":
                                CQGOrder AlgorithmStringIDObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AlgorithmStringIDval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AlgorithmStringIDObj.AlgorithmStringID = AlgorithmStringIDval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "CancelationInstruction":
                                CQGOrder CancelationInstructionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var CancelationInstructionval = (CQG.eOrderCancelationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                CancelationInstructionObj.CancelationInstruction = CancelationInstructionval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Description":
                                CQGOrder DescriptionObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Descriptionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DescriptionObj.Description = Descriptionval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DurationType":
                                CQGOrder DurationTypeObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DurationTypeval = (CQG.eOrderDuration)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DurationTypeObj.DurationType = DurationTypeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Instrument":
                                CQGOrder InstrumentObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Instrumentval = (CQG.CQGInstrument)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                InstrumentObj.Instrument = Instrumentval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "LimitPrice":
                                CQGOrder LimitPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var LimitPriceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                LimitPriceObj.LimitPrice = LimitPriceval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "OrderCheckMark":
                                CQGOrder OrderCheckMarkObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var OrderCheckMarkval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                OrderCheckMarkObj.OrderCheckMark = OrderCheckMarkval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Quantity":
                                CQGOrder QuantityObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Quantityval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                QuantityObj.Quantity = Quantityval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Side":
                                CQGOrder SideObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Sideval = (CQG.eOrderSide)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SideObj.Side = Sideval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "StopPrice":
                                CQGOrder StopPriceObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var StopPriceval = (System.Double)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                StopPriceObj.StopPrice = StopPriceval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Tag":
                                CQGOrder TagObj = (CQGOrder)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderPropertyClass":
                            switch (query.MemberName)
                            {
                            case "Value":
                                CQGOrderProperty ValueObj = (CQGOrderProperty)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Valueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ValueObj.Value = Valueval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGOrderStatisticsClass":
                            switch (query.MemberName)
                            {
                            case "Switch":
                                CQGOrderStatistics SwitchObj = (CQGOrderStatistics)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Switchval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SwitchObj.Switch = Switchval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGPointAndFigureBarsClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGPointAndFigureBars TagObj = (CQGPointAndFigureBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGPointAndFigureBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "BoxSize":
                                CQGPointAndFigureBarsRequest BoxSizeObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var BoxSizeval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                BoxSizeObj.BoxSize = BoxSizeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "BoxUnits":
                                CQGPointAndFigureBarsRequest BoxUnitsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var BoxUnitsval = (CQG.ePfBoxUnits)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                BoxUnitsObj.BoxUnits = BoxUnitsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Continuation":
                                CQGPointAndFigureBarsRequest ContinuationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DataSource":
                                CQGPointAndFigureBarsRequest DataSourceObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DataSourceval = (CQG.ePfDataSource)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DataSourceObj.DataSource = DataSourceval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGPointAndFigureBarsRequest DaysBeforeExpirationObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGPointAndFigureBarsRequest EqualizeClosesObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGPointAndFigureBarsRequest IncludeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGPointAndFigureBarsRequest RangeEndObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGPointAndFigureBarsRequest RangeStartObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGPointAndFigureBarsRequest RecalcPeriodObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Reversal":
                                CQGPointAndFigureBarsRequest ReversalObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Reversalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ReversalObj.Reversal = Reversalval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGPointAndFigureBarsRequest SessionFlagsObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGPointAndFigureBarsRequest SessionsFilterObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGPointAndFigureBarsRequest SubscriptionLevelObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGPointAndFigureBarsRequest SymbolObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGPointAndFigureBarsRequest UpdatesEnabledObj = (CQGPointAndFigureBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGSubMinuteBarsClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGSubMinuteBars TagObj = (CQGSubMinuteBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGSubMinuteBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Continuation":
                                CQGSubMinuteBarsRequest ContinuationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGSubMinuteBarsRequest DaysBeforeExpirationObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGSubMinuteBarsRequest EqualizeClosesObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "GapFilter":
                                CQGSubMinuteBarsRequest GapFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var GapFilterval = (CQG.eGapFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                GapFilterObj.GapFilter = GapFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGSubMinuteBarsRequest IncludeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Interval":
                                CQGSubMinuteBarsRequest IntervalObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Intervalval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IntervalObj.Interval = Intervalval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGSubMinuteBarsRequest RangeEndObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGSubMinuteBarsRequest RangeStartObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGSubMinuteBarsRequest RecalcPeriodObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGSubMinuteBarsRequest SessionFlagsObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGSubMinuteBarsRequest SessionsFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGSubMinuteBarsRequest SubscriptionLevelObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGSubMinuteBarsRequest SymbolObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "TickFilter":
                                CQGSubMinuteBarsRequest TickFilterObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TickFilterObj.TickFilter = TickFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGSubMinuteBarsRequest UpdatesEnabledObj = (CQGSubMinuteBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTFlowBarsClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGTFlowBars TagObj = (CQGTFlowBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTFlowBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Aggregation":
                                CQGTFlowBarsRequest AggregationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Aggregationval = (CQG.eTfAggregation)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AggregationObj.Aggregation = Aggregationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "AggregationLevel":
                                CQGTFlowBarsRequest AggregationLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var AggregationLevelval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                AggregationLevelObj.AggregationLevel = AggregationLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Continuation":
                                CQGTFlowBarsRequest ContinuationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGTFlowBarsRequest DaysBeforeExpirationObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DomAskVolumeLevel":
                                CQGTFlowBarsRequest DomAskVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DomAskVolumeLevelval = (CQG.eTFlowRequestDomVolumeLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DomAskVolumeLevelObj.DomAskVolumeLevel = DomAskVolumeLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DomBidVolumeLevel":
                                CQGTFlowBarsRequest DomBidVolumeLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DomBidVolumeLevelval = (CQG.eTFlowRequestDomVolumeLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DomBidVolumeLevelObj.DomBidVolumeLevel = DomBidVolumeLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGTFlowBarsRequest EqualizeClosesObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGTFlowBarsRequest IncludeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGTFlowBarsRequest RangeEndObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGTFlowBarsRequest RangeStartObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGTFlowBarsRequest RecalcPeriodObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGTFlowBarsRequest SessionFlagsObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGTFlowBarsRequest SessionsFilterObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGTFlowBarsRequest SubscriptionLevelObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGTFlowBarsRequest SymbolObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGTFlowBarsRequest UpdatesEnabledObj = (CQGTFlowBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTicksClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGTicks TagObj = (CQGTicks)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTicksRequestClass":
                            switch (query.MemberName)
                            {
                            case "RangeEnd":
                                CQGTicksRequest RangeEndObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGTicksRequest RangeStartObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.DateTime)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGTicksRequest SessionsFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGTicksRequest SymbolObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "TickFilter":
                                CQGTicksRequest TickFilterObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TickFilterObj.TickFilter = TickFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Type":
                                CQGTicksRequest TypeObj = (CQGTicksRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Typeval = (CQG.eTicksRequestType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TypeObj.Type = Typeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTimedBarsClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGTimedBars TagObj = (CQGTimedBars)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTimedBarsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Continuation":
                                CQGTimedBarsRequest ContinuationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGTimedBarsRequest DaysBeforeExpirationObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGTimedBarsRequest EqualizeClosesObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "HistoricalPeriod":
                                CQGTimedBarsRequest HistoricalPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IgnoreEventsOnHistoricalBars":
                                CQGTimedBarsRequest IgnoreEventsOnHistoricalBarsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IgnoreEventsOnHistoricalBarsval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IgnoreEventsOnHistoricalBarsObj.IgnoreEventsOnHistoricalBars = IgnoreEventsOnHistoricalBarsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGTimedBarsRequest IncludeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IntradayPeriod":
                                CQGTimedBarsRequest IntradayPeriodObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGTimedBarsRequest RangeEndObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGTimedBarsRequest RangeStartObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGTimedBarsRequest SessionFlagsObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGTimedBarsRequest SessionsFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGTimedBarsRequest SymbolObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "TickFilter":
                                CQGTimedBarsRequest TickFilterObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var TickFilterval = (CQG.eTickFilter)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TickFilterObj.TickFilter = TickFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGTimedBarsRequest UpdatesEnabledObj = (CQGTimedBarsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemBaseBarParameterClass":
                            switch (query.MemberName)
                            {
                            case "Value":
                                CQGTradingSystemBaseBarParameter ValueObj = (CQGTradingSystemBaseBarParameter)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Valueval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ValueObj.Value = Valueval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGTradingSystem TagObj = (CQGTradingSystem)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGTradingSystemRequestClass":
                            switch (query.MemberName)
                            {
                            case "BaseBarType":
                                CQGTradingSystemRequest BaseBarTypeObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var BaseBarTypeval = (CQG.eTradingSystemBaseBar)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                BaseBarTypeObj.BaseBarType = BaseBarTypeval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "BaseExpression":
                                CQGTradingSystemRequest BaseExpressionObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var BaseExpressionval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                BaseExpressionObj.BaseExpression = BaseExpressionval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Continuation":
                                CQGTradingSystemRequest ContinuationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGTradingSystemRequest DaysBeforeExpirationObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGTradingSystemRequest EqualizeClosesObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "HistoricalPeriod":
                                CQGTradingSystemRequest HistoricalPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var HistoricalPeriodval = (CQG.eHistoricalPeriod)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                HistoricalPeriodObj.HistoricalPeriod = HistoricalPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGTradingSystemRequest IncludeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IntradayPeriod":
                                CQGTradingSystemRequest IntradayPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IntradayPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IntradayPeriodObj.IntradayPeriod = IntradayPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Parameter":
                                CQGTradingSystemRequest ParameterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Parameterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ParameterObj.Parameter[(System.Object)args[0]] = Parameterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGTradingSystemRequest RangeEndObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGTradingSystemRequest RangeStartObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGTradingSystemRequest RecalcPeriodObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGTradingSystemRequest SessionFlagsObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGTradingSystemRequest SessionsFilterObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGTradingSystemRequest SubscriptionLevelObj = (CQGTradingSystemRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGYieldsClass":
                            switch (query.MemberName)
                            {
                            case "Tag":
                                CQGYields TagObj = (CQGYields)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Tagval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                TagObj.Tag[(System.String)args[0]] = Tagval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                        case "CQG.CQGYieldsRequestClass":
                            switch (query.MemberName)
                            {
                            case "Compound":
                                CQGYieldsRequest CompoundObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Compoundval = (CQG.eYieldCompound)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                CompoundObj.Compound = Compoundval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Continuation":
                                CQGYieldsRequest ContinuationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Continuationval = (CQG.eTimeSeriesContinuationType)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ContinuationObj.Continuation = Continuationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "DaysBeforeExpiration":
                                CQGYieldsRequest DaysBeforeExpirationObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var DaysBeforeExpirationval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                DaysBeforeExpirationObj.DaysBeforeExpiration = DaysBeforeExpirationval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "EqualizeCloses":
                                CQGYieldsRequest EqualizeClosesObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var EqualizeClosesval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                EqualizeClosesObj.EqualizeCloses = EqualizeClosesval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "IncludeEnd":
                                CQGYieldsRequest IncludeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var IncludeEndval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                IncludeEndObj.IncludeEnd = IncludeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Model":
                                CQGYieldsRequest ModelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Modelval = (CQG.eYieldModel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                ModelObj.Model = Modelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeEnd":
                                CQGYieldsRequest RangeEndObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeEndval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeEndObj.RangeEnd = RangeEndval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RangeStart":
                                CQGYieldsRequest RangeStartObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RangeStartval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RangeStartObj.RangeStart = RangeStartval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "RecalcPeriod":
                                CQGYieldsRequest RecalcPeriodObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var RecalcPeriodval = (System.Int32)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                RecalcPeriodObj.RecalcPeriod = RecalcPeriodval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionFlags":
                                CQGYieldsRequest SessionFlagsObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionFlagsval = (CQG.eSessionFlag)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionFlagsObj.SessionFlags = SessionFlagsval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SessionsFilter":
                                CQGYieldsRequest SessionsFilterObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SessionsFilterval = (System.Object)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SessionsFilterObj.SessionsFilter = SessionsFilterval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "SubscriptionLevel":
                                CQGYieldsRequest SubscriptionLevelObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var SubscriptionLevelval = (CQG.eTimeSeriesSubscriptionLevel)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SubscriptionLevelObj.SubscriptionLevel = SubscriptionLevelval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "Symbol":
                                CQGYieldsRequest SymbolObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var Symbolval = (System.String)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                SymbolObj.Symbol = Symbolval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            case "UpdatesEnabled":
                                CQGYieldsRequest UpdatesEnabledObj = (CQGYieldsRequest)ServerDictionaries.GetObjectFromTheDictionary(query.ObjectKey);
                                var UpdatesEnabledval = (System.Boolean)(Core.ParseInputArgsFromQueryInfo(query)[0]);
                                UpdatesEnabledObj.UpdatesEnabled = UpdatesEnabledval;
                                PushAnswerAndDeleteQuery(new AnswerInfo(query.QueryKey, query.ObjectKey, query.MemberName, value: true));
                                break;
                            }
                            break;
                    }
                    break;
            }
        }
    }
}
