// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
// WARNING                                                                         WARNING
// WARNING    THIS .CS FILE WAS AUTOGENERATED!                                     WARNING
// WARNING    DO NOT EDIT IT BY HAND, BECAUSE ALL YOUR CHANGES WILL BE LOST!       WARNING
// WARNING    MAKE ALL CHANGES DIRECTLY TO THE FILE GENERATOR CODE!                WARNING
// WARNING                                                                         WARNING
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

// Disable two warnings caused by CQG API specific:
// CS3003: Type of 'variable' is not CLS-compliant
// CS3008: Identifier 'identifier' differing only in case is not CLS-compliant
#pragma warning disable 3003, 3008

using System;
using System.Collections;

namespace FakeCQG
{
    #region Enums

    public enum eAccountChangeType
    {
        actAccountsReloaded = 0,
        actAccountChanged = 1,
        actPositionsReloaded = 2,
        actPositionAdded = 3,
        actPositionChanged = 4,
        actTradersReloaded = 5
    }

    public enum eAccountMarginDetailing
    {
        amdNoMargin = 0,
        amdMarginSnapshot = 1,
        amdMarginSnapshotAndUpdate = 2
    }

    public enum eAccountSubscriptionLevel
    {
        aslNone = 0,
        aslAccountsOnly = 1,
        aslAccountsAndUpdates = 2,
        aslAccountUpdatesAndOrders = 3
    }

    public enum eAlgorithmicOrderPropertyType
    {
        aoptInt = 0,
        aoptUInt = 1,
        aoptDouble = 2,
        aoptString = 3,
        aoptDateTime = 4,
        aoptBoolean = 5,
        aoptList = 6
    }

    public enum eChangeType
    {
        ctAdded = 0,
        ctChanged = 1,
        ctRemoved = 2
    }

    public enum eConnectionStatus
    {
        csConnectionUp = 0,
        csConnectionDelayed = 1,
        csConnectionDown = 2,
        csConnectionTrouble = 3,
        csConnectionNotLoggedOn = 4
    }

    public enum eCvbVolumeType
    {
        cvbvtTicks = 0,
        cvbvtActual = 1
    }

    public enum eDataSourceStatus
    {
        dssDisabled = 0,
        dssAvailable = 1,
        dssDelay = 2,
        dssExtraDelay = 3,
        dssSnapshot = 4
    }

    public enum eDataSubscriptionLevel
    {
        dsNone = 0,
        dsQuotes = 1,
        dsQuotesAndBBA = 2,
        dsQuotesAndDOM = 3,
        dsGroup = 4,
        dsDisable = 5
    }

    public enum eDOMandBBAType
    {
        dbtImplied = 1,
        dbtOutright = 2,
        dbtCombined = 4
    }

    public enum eDOMUpdatesMode
    {
        domUMDynamic = 0,
        domUMSnapshot = 1
    }

    public enum eExecutionPatternParameterType
    {
        epptBool = 0,
        epptInt32 = 1,
        epptDouble = 2,
        epptString = 3,
        epptObject = 4,
        epptCollection = 5,
        epptCollectionItem = 6
    }

    public enum eFcmClass
    {
        fcDerivative = 0,
        fcFixedIncome = 1,
        fcForex = 2
    }

    public enum eFillStatus
    {
        fsNormal = 0,
        fsCanceled = 1,
        fsModified = 2,
        fsBusted = 3
    }

    public enum eGapFilter
    {
        gfAllowGaps = 0,
        gfNoGap = 1,
        gfFillGap = 2
    }

    public enum eGroupSubscriptionLevel
    {
        gslRealtimeSnapshot = 0,
        gslRealtimeUpdates = 1,
        gslFullSnapshot = 2,
        gslFullUpdates = 3
    }

    public enum eGWEnvChangeCode
    {
        eccPositionChanged = 0,
        eccBalanceChanged = 1,
        eccNewStatement = 2,
        eccManualStatementChanged = 3
    }

    public enum eHistoricalPeriod
    {
        hpUndefined = 0,
        hpDaily = 1440,
        hpWeekly = 10080,
        hpMonthly = 43200,
        hpQuarterly = 131040,
        hpSemiannual = 262080,
        hpYearly = 525600
    }

    public enum eHistoricalSessionsRequestType
    {
        hsrtAll = 0,
        hsrtTimeRange = 1,
        hsrtSinceTime = 2
    }

    public enum eICConnectionStatus
    {
        iccsExited = 0
    }

    public enum eInstrumentProperty
    {
        ipFullName = 0,
        ipDescription = 1,
        ipInstrumentID = 2,
        ipCurrency = 3,
        ipExpirationDate = 4,
        ipInitialMargin = 5,
        ipMaintenanceMargin = 6,
        ipSessionMask = 7,
        ipCommodity = 8,
        ipCountry = 9,
        ipMonthChar = 10,
        ipMonth = 11,
        ipStrike = 12,
        ipInstrumentType = 13,
        ipYear = 14,
        ipYearString = 15,
        ipTickSize = 16,
        ipTickValue = 17,
        ipSessionNumber = 18,
        ipNetChange = 19,
        ipDTE = 20,
        ipIsDownTick = 21,
        ipIsUpTick = 22,
        ipIsFastMarket = 23,
        ipPreferredSessionName = 24,
        ipTodayCTotalVolume = 25,
        ipYesterdayCTotalVolume = 26,
        ipYCOI = 27,
        ipExchangeID = 28,
        ipExchangeAbbreviation = 29,
        ipScale = 30,
        ipStrikeScale = 31,
        ipDecimalStrike = 32,
        ipDelayTime = 33,
        ipLeadingContractName = 34,
        ipTickSizeFractionNumerator = 35,
        ipTickSizeFractionDenominator = 36,
        ipFirstNoticeDate = 37,
        ipWorkup = 38,
        ipIsFutureStyleOption = 39,
        ipIsVariableTickSize = 40
    }

    public enum eInstrumentType
    {
        itUndefined = 0,
        itFuture = 1,
        itOptionPut = 2,
        itOptionCall = 4,
        itAllOptions = 6,
        itStock = 8,
        itTreasure = 16,
        itOther = 32,
        itSyntheticStrategy = 64,
        itAllInstruments = 127
    }

    public enum eLogSeverity
    {
        lsDebug = 10000,
        lsInfo = 20000,
        lsWarn = 30000,
        lsError = 40000,
        lsFatal = 50000
    }

    public enum eManualFillsDataLevel
    {
        mfdlSnapshot = 0,
        mfdlSnapshotAndUpdates = 1
    }

    public enum eManualFillUpdateType
    {
        mfutAdd = 0,
        mfutModify = 1,
        mfutDelete = 2
    }

    public enum eMarketState
    {
        msFast = 0,
        msNormal = 1
    }

    public enum eOrderCancelationType
    {
        octUndefined = 0,
        octCancelAllLegOrders = 1,
        octCancelPrimaryLegOrders = 2
    }

    public enum eOrderDuration
    {
        odUndefined = 0,
        odDay = 1,
        odGoodTillDate = 2,
        odGoodTillCanceled = 3,
        odFOK = 4,
        odFAK = 5,
        odATO = 6,
        odATC = 7,
        odGoodTillTime = 8
    }

    public enum eOrderEvent
    {
        oeUndefined = 0,
        oeInQueue = 1,
        oeCancelSent = 2,
        oeModifySent = 3,
        oeQueueTimeout = 4,
        oeCancelQueueTimeout = 5,
        oeModifyQueueTimeout = 6,
        oeInClient = 7,
        oeInTransit = 8,
        oeRejectGW = 9,
        oeAckPlace = 10,
        oeInTransTmout = 11,
        oeRejectFCM = 12,
        oeExpired = 13,
        oeInCan = 14,
        oeInMod = 15,
        oeInModTmout = 16,
        oeInCanTmout = 17,
        oeAckMod = 18,
        oeAckCan = 19,
        oeFill = 20,
        oeRejMod = 21,
        oeRejCan = 22,
        oePark = 23,
        oeLinkChg = 24,
        oeFillMod = 25,
        oeDisconnected = 26,
        oeFillCan = 27,
        oeFillBust = 28,
        oeActiveAt = 29,
        oeSyntheticActivated = 30,
        oeRemoved = 31,
        oeRejLinkChg = 32,
        oeSyntheticFailed = 33,
        oeSyntheticOverFill = 34,
        oeSyntheticHang = 35,
        oeInfoChanged = 36
    }

    public enum eOrderExecutionInstruction
    {
        oeiUndefined = 0,
        oeiAllOrNothing = 1,
        oeiTrailing = 2,
        oeiIceberg = 4,
        oeiQTS = 8,
        oeiFunari = 16,
        oeiMIT = 32
    }

    public enum eOrderLocalState
    {
        olsNotSent = 0,
        olsInQueue = 1,
        olsQueueTimeout = 2,
        olsModifySent = 3,
        olsCancelSent = 4,
        olsActivateSent = 5,
        olsInClient = 6,
        olsAtGW = 7,
        olsRemoved = 8,
        olsStrategyPending = 9
    }

    public enum eOrderProperty
    {
        opOrderType = 0,
        opAccountID = 1,
        opInstrumentName = 2,
        opLimitPrice = 3,
        opStopPrice = 4,
        opDurationType = 5,
        opGTDTime = 6,
        opSide = 7,
        opQuantity = 8,
        opVisibleQuantity = 9,
        opAggressive = 10,
        opExecutionInstructions = 11,
        opParked = 12,
        opSynthetic = 13,
        opGUID = 14,
        opUEName = 15,
        opOrderID = 16,
        opOriginalOrderID = 17,
        opExchangeConf = 18,
        opGWStatus = 19,
        opState = 20,
        opPlaceTime = 21,
        opFilledQuantity = 22,
        opFilledCount = 23,
        opAverageFillPrice = 24,
        opErrorFlag = 25,
        opTimeActiveAt = 26,
        opLastEvent = 27,
        opLastEventID = 28,
        opEventTimestamp = 29,
        opEventServerTimestamp = 30,
        opRemainingQuantity = 31,
        opTrailingOffset = 32,
        opLastTrailingTime = 33,
        opTrailingLimitPrice = 34,
        opTrailingStopPrice = 35,
        opCQGID = 36,
        opUserName = 37,
        opTraderID = 38,
        opTriggerQuantity = 39,
        opPreferredTrailingPeg = 40,
        opDescription = 41,
        opStrategyOrderGUID = 42,
        opExecutionPattern = 43,
        opLastFillTime = 44,
        opCanceledTime = 45,
        opCancelationInstruction = 46,
        opTradingExpression = 47,
        opCompoundOrderID = 48,
        opCompoundOrderGUID = 49,
        opIsCareOrder = 50,
        opCareOrderIDs = 51,
        opOrderCheckMark = 52,
        opAlgorithmID = 53
    }

    public enum eOrderSide
    {
        osdUndefined = 0,
        osdBuy = 1,
        osdSell = 2
    }

    public enum eOrderSideFilter
    {
        osftBuy = 1,
        osftSell = 2,
        osftAll = 3
    }

    public enum eOrderStatus
    {
        osNotSent = 0,
        osInClient = 1,
        osInTransit = 2,
        osRejectGW = 3,
        osInOrderBook = 4,
        osInTransitTimeout = 5,
        osRejectFCM = 6,
        osExpired = 7,
        osInCancel = 8,
        osInModify = 9,
        osCanceled = 10,
        osFilled = 11,
        osParked = 12,
        osDisconnected = 13,
        osContingent = 14,
        osBusted = 15,
        osActiveAt = 16
    }

    public enum eOrderStatusFilter
    {
        osfAll = 0,
        osfNotFinal = 1,
        osfFinal = 2,
        osfFilled = 3,
        osfException = 4,
        osfParked = 5,
        osfCanceled = 6
    }

    public enum eOrderTrailingPeg
    {
        otpBestBid = 0,
        otpBestAsk = 1,
        otpLastTrade = 2,
        otpUndefined = 3
    }

    public enum eOrderType
    {
        otUndefined = 0,
        otMarket = 1,
        otLimit = 2,
        otStop = 3,
        otStopLimit = 4
    }

    public enum ePfBoxUnits
    {
        pfbuPrice = 0,
        pfbuTicks = 1
    }

    public enum ePfDataSource
    {
        pfdsTicks = 0,
        pfds1Min = 1,
        pfds5Min = 2,
        pfds15Min = 3,
        pfds30Min = 4,
        pfds60Min = 5,
        pfdsDaily = 6
    }

    public enum ePositionDetailing
    {
        pdNoTrades = 0,
        pdOpenTrades = 1,
        pdAllTrades = 2
    }

    public enum ePositionSubscriptionLevel
    {
        pslNoPositions = 0,
        pslSnapshot = 1,
        pslSnapshotAndUpdates = 2
    }

    public enum ePriceMode
    {
        pmBidsAsks = 0,
        pmTradesOnly = 1
    }

    public enum ePropertySubscriptionLevel
    {
        psNone = 0,
        psMarketState = 1,
        psNetChange = 2,
        psTotalVolumes = 4
    }

    public enum eQuoteSubscriptionLevel
    {
        qsNone = 0,
        qsQuotes = 1,
        qsBBA = 2
    }

    public enum eQuoteType
    {
        qtAsk = 0,
        qtBid = 1,
        qtTrade = 2,
        qtSettlement = 3,
        qtCohUndAsk = 4,
        qtCohUndBid = 5,
        qtDayOpen = 6,
        qtDayHigh = 7,
        qtDayLow = 8,
        qtImpliedAsk = 9,
        qtImpliedBid = 10,
        qtOutrightAsk = 11,
        qtOutrightBid = 12,
        qtYesterdaySettlement = 13,
        qtIndicativeOpen = 14,
        qtTodayMarker = 15,
        qtMarker = 16
    }

    public enum eReadyStatus
    {
        rsBusy = 0,
        rsReady = 1,
        rsNotReady = 2
    }

    public enum eReadyStatusCheck
    {
        rscOff = 0,
        rscOn = 1
    }

    public enum eRequestStatus
    {
        rsInProgress = 0,
        rsSuccess = 1,
        rsFailed = 2,
        rsCanceled = 3
    }

    public enum eSessionFlag
    {
        sfUndefined = 0,
        sfDailyFromIntraday = 2
    }

    public enum eSessionStatus
    {
        ssNoAvailableLoginService = 0,
        ssSuccess = 1,
        ssInternalSystemError = 2,
        ssNotEnabled = 3,
        ssAuthorizationFailed = 4,
        ssAlreadyLoggedIn = 5,
        ssNotAuthenticated = 6,
        ssNoAvailableDataServers = 7,
        ssNoAvailableMetadataServers = 8,
        ssNoAvailableROMNumbers = 9,
        ssNoRemoteAPIPermission = 10
    }

    public enum eSessionWeekDays
    {
        swdUndefined = 0,
        swdSaturday = 1,
        swdFriday = 2,
        swdThursday = 4,
        swdWednesday = 8,
        swdTuesday = 16,
        swdMonday = 32,
        swdSunday = 64
    }

    public enum eStrategyRequestStatus
    {
        srsNotActive = 0,
        srsPending = 1,
        srsSuccess = 2,
        srsFailed = 3
    }

    public enum eSymbolSessionType
    {
        sstDefault = 1,
        sstCustom = 2,
        sstAll = 3
    }

    public enum eSymbolType
    {
        stUndefined = 0,
        stFuture = 1,
        stOption = 6,
        stStock = 8,
        stTreasury = 16,
        stCash = 32,
        stCurrency = 64,
        stIndex = 128,
        stReport = 256
    }

    public enum eTfAggregation
    {
        tfaBars = 0,
        tfaRange = 1,
        tfaSmoothing = 2
    }

    public enum eTFlowRequestDomVolumeLevel
    {
        dvLevel0 = 0,
        dvLevel1 = 1,
        dvLevel2 = 2,
        dvLevel3 = 3,
        dvLevel4 = 4
    }

    public enum eTickCorrectionType
    {
        tctRegular = 0,
        tctInsert = 1,
        tctDelete = 2,
        tctUpdate = 3
    }

    public enum eTickFilter
    {
        tfAll = 0,
        tfDefault = 1,
        tfBid = 2,
        tfAsk = 4,
        tfTrade = 8,
        tfSettlement = 16,
        tfBidHigh = 32,
        tfAskLow = 64
    }

    public enum eTickPriceType
    {
        tptTrade = 0,
        tptBid = 64,
        tptAsk = 128,
        tptSettlement = 192
    }

    public enum eTicksRequestType
    {
        trtTimeRange = 0,
        trtSinceTime = 1,
        trtSinceTimeNotify = 2,
        trtCurrentNotify = 3
    }

    public enum eTimedBarsRequestOutputs
    {
        tbrActualVolume = 0,
        tbrTickVolume = 1,
        tbrAskVolume = 2,
        tbrBidVolume = 3,
        tbrOpenInterest = 4,
        tbrContractVolume = 5,
        tbrCommodityVolume = 6,
        tbrContractTickVolume = 7,
        tbrCommodityTickVolume = 8,
        tbrContractOpenInterest = 9,
        tbrCommodityOpenInterest = 10
    }

    public enum eTimeSeriesContinuationType
    {
        tsctNoContinuation = 0,
        tsctStandard = 1,
        tsctStandardByMonth = 2,
        tsctActive = 3,
        tsctActiveByMonth = 4,
        tsctAdjusted = 5,
        tsctAdjustedByMonth = 6
    }

    public enum eTimeSeriesSubscriptionLevel
    {
        tslEachTick = 0,
        tslEachBar = 1,
        tslEndOfBarAndPeriod = 2
    }

    public enum eTimeZone
    {
        tzDateline = 0,
        tzSamoa = 1,
        tzHawaiian = 2,
        tzAlaskan = 3,
        tzPacific = 4,
        tzMountain = 10,
        tzMexico2 = 13,
        tzMountainNoDST = 15,
        tzCentral = 20,
        tzCanadaCentral = 25,
        tzMexico = 30,
        tzCentralAmerica = 33,
        tzEastern = 35,
        tzEasternNoDST = 40,
        tzSAPacific = 45,
        tzAtlantic = 50,
        tzSAWestern = 55,
        tzPacificSA = 56,
        tzNewfoundland = 60,
        tzESouthAmerica = 65,
        tzSAEastern = 70,
        tzGreenland = 73,
        tzMidAtlantic = 75,
        tzAzores = 80,
        tzCapeVerde = 83,
        tzGMT = 85,
        tzGreenwich = 90,
        tzUTC = 90,
        tzCentralEurope = 95,
        tzCentralEuropean = 100,
        tzRomance = 105,
        tzWEurope = 110,
        tzWCentralAfrica = 113,
        tzEEurope = 115,
        tzEgypt = 120,
        tzFLE = 125,
        tzGTB = 130,
        tzJerusalem = 135,
        tzSouthAfrica = 140,
        tzRussian = 145,
        tzArab = 150,
        tzEAfrica = 155,
        tzArabic = 158,
        tzIran = 160,
        tzArabian = 165,
        tzCaucasus = 170,
        tzAfghanistan = 175,
        tzEkaterinburg = 180,
        tzWestAsia = 185,
        tzIndia = 190,
        tzNepal = 193,
        tzCentralAsia = 195,
        tzSriLanka = 200,
        tzNCentralAsia = 201,
        tzMyanmar = 203,
        tzSEAsia = 205,
        tzNorthAsia = 207,
        tzChina = 210,
        tzMalayPeninsula = 215,
        tzTaipei = 220,
        tzWAustralia = 225,
        tzNorthAsiaEast = 227,
        tzKorea = 230,
        tzTokyo = 235,
        tzYakutsk = 240,
        tzAUSCentral = 245,
        tzCenAustralia = 250,
        tzAUSEastern = 255,
        tzEAustralia = 260,
        tzTasmania = 265,
        tzVladivostok = 270,
        tzWestPacific = 275,
        tzCentralPacific = 280,
        tzFiji = 285,
        tzNewZealand = 290,
        tzTonga = 300,
        tzUndefined = -1
    }

    public enum eTradeChangeCategory
    {
        tccSignalSet = 1,
        tccSignalReset = 2,
        tccQuantity = 4,
        tccPrice = 8,
        tccStopLimitPrice = 16,
        tccAll = 31
    }

    public enum eTradeSide
    {
        tsBuy = 0,
        tsSell = 1,
        tsOff = 2
    }

    public enum eTradingSystemBaseBar
    {
        bbBar = 0,
        bbConstantVolumeBar = 1,
        bbTFlowBar = 2,
        bbPointAndFigureBar = 3
    }

    public enum eTradingSystemBaseBarParameter
    {
        bbpVolumeLevel = 0,
        bbpVolumeType = 1,
        bbpIncludeFlatTicks = 2,
        bbpBoxSize = 3,
        bbpBoxUnits = 4,
        bbpReversal = 5,
        bbpDataSource = 6,
        bbpAggregation = 7,
        bbpAggregationLevel = 8
    }

    public enum eTradingSystemCommissionType
    {
        tscmFixed = 0,
        tscmPerContract = 1
    }

    public enum eTradingSystemStatistic
    {
        tssTotalNetProfit = 0,
        tssClosedNetProfit = 1,
        tssTotalTradeCount = 2,
        tssOpenPosition = 3,
        tssPercentLong = 4,
        tssAverageDuration = 5,
        tssAverageProfit = 6,
        tssAverageWin = 7,
        tssMaximumWin = 8,
        tssAverageLoss = 9,
        tssMaximumLoss = 10,
        tssMaxClosedDraw = 11,
        tssMaxDrawAmount = 12,
        tssMaxDrawDuration = 13,
        tssMaxConsecWins = 14,
        tssCurConsecWins = 15,
        tssMaxConsecLosses = 16,
        tssCurConsecLosses = 17,
        tssProfitToMaxDraw = 18,
        tssProfitLossRatio = 19,
        tssPercentWinners = 20,
        tssRemoveToNeutral = 21,
        tssTimePercentage = 22,
        tssCurDrawDown = 23,
        tssReturnRetracement = 24,
        tssLinearRegression = 25
    }

    public enum eUserFormulaParameterType
    {
        ufptInt = 0,
        ufptDouble = 1,
        ufptString = 2,
        ufptChoice = 3
    }

    public enum eYieldCompound
    {
        ycDefault = 0,
        ycAnnual = 1,
        ycSemiAnnual = 2
    }

    public enum eYieldModel
    {
        ymDefault = 0,
        ymStandardBill = 1,
        ymSimpleBond = 2,
        ymStandardBond = 3,
        ymMoosmuller = 4,
        ymBraessFangmeyer = 5
    }

    #endregion

    #region Delegates

    public delegate void _ICQGCELEvents_AccountChangedEventHandler(eAccountChangeType change_type, CQGAccount cqg_account, CQGPosition cqg_position);

    public delegate void _ICQGCELEvents_AdvancedStudyAddedEventHandler(CQGAdvancedStudy cqg_advanced_study);

    public delegate void _ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandler(CQGAdvancedStudyDefinitions cqg_advanced_study_definitions, CQGError cqg_error);

    public delegate void _ICQGCELEvents_AdvancedStudyInsertedEventHandler(CQGAdvancedStudy cqg_advanced_study, int index_);

    public delegate void _ICQGCELEvents_AdvancedStudyRemovedEventHandler(CQGAdvancedStudy cqg_advanced_study, int index_);

    public delegate void _ICQGCELEvents_AdvancedStudyResolvedEventHandler(CQGAdvancedStudy cqg_advanced_study, CQGError cqg_error);

    public delegate void _ICQGCELEvents_AdvancedStudyUpdatedEventHandler(CQGAdvancedStudy cqg_advanced_study, int index_);

    public delegate void _ICQGCELEvents_AlgorithmicOrderPlacedEventHandler(string guid_, CQGAlgorithmicOrderParameters main_params, CQGAlgorithmicOrderProperties custom_props);

    public delegate void _ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandler(string guid_, CQGError cqg_error);

    public delegate void _ICQGCELEvents_AllOrdersCanceledEventHandler(eOrderSideFilter order_side, CQGIntegerCollection gw_account_ids, CQGStringCollection instrument_names);

    public delegate void _ICQGCELEvents_AuthenticationStatusChangedEventHandler(eSessionStatus new_status, CQGError cqg_error);

    public delegate void _ICQGCELEvents_BarsTimestampsResolvedEventHandler(CQGBarsTimestamps cqg_bars_timestamps, CQGError cqg_error);

    public delegate void _ICQGCELEvents_CELStartedEventHandler();

    public delegate void _ICQGCELEvents_CommodityInstrumentsResolvedEventHandler(string commodity_name, eInstrumentType instrument_types, CQGCommodityInstruments cqg_commodity_intruments);

    public delegate void _ICQGCELEvents_ConditionAddedEventHandler(CQGCondition cqg_condition);

    public delegate void _ICQGCELEvents_ConditionDefinitionsResolvedEventHandler(CQGConditionDefinitions cqg_condition_definitions, CQGError cqg_error);

    public delegate void _ICQGCELEvents_ConditionInsertedEventHandler(CQGCondition cqg_condition, int index_);

    public delegate void _ICQGCELEvents_ConditionRemovedEventHandler(CQGCondition cqg_condition, int index_);

    public delegate void _ICQGCELEvents_ConditionResolvedEventHandler(CQGCondition cqg_condition, CQGError cqg_error);

    public delegate void _ICQGCELEvents_ConditionUpdatedEventHandler(CQGCondition cqg_condition, int index_);

    public delegate void _ICQGCELEvents_ConstantVolumeBarsAddedEventHandler(CQGConstantVolumeBars cqg_constant_volume_bars);

    public delegate void _ICQGCELEvents_ConstantVolumeBarsInsertedEventHandler(CQGConstantVolumeBars cqg_constant_volume_bars, int index_);

    public delegate void _ICQGCELEvents_ConstantVolumeBarsRemovedEventHandler(CQGConstantVolumeBars cqg_constant_volume_bars, int index_);

    public delegate void _ICQGCELEvents_ConstantVolumeBarsResolvedEventHandler(CQGConstantVolumeBars cqg_constant_volume_bars, CQGError cqg_error);

    public delegate void _ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandler(CQGConstantVolumeBars cqg_constant_volume_bars, int index_);

    public delegate void _ICQGCELEvents_CurrencyRatesChangedEventHandler(CQGCurrencyRates cqg_currency_rates);

    public delegate void _ICQGCELEvents_CustomSessionsResolvedEventHandler(CQGSessionsCollection cqg_sessions_collection, CQGError cqg_error);

    public delegate void _ICQGCELEvents_CustomStudyAddedEventHandler(CQGCustomStudy cqg_custom_study);

    public delegate void _ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandler(CQGCustomStudyDefinitions cqg_custom_study_definitions, CQGError cqg_error);

    public delegate void _ICQGCELEvents_CustomStudyInsertedEventHandler(CQGCustomStudy cqg_custom_study, int index_);

    public delegate void _ICQGCELEvents_CustomStudyRemovedEventHandler(CQGCustomStudy cqg_custom_study, int index_);

    public delegate void _ICQGCELEvents_CustomStudyResolvedEventHandler(CQGCustomStudy cqg_custom_study, CQGError cqg_error);

    public delegate void _ICQGCELEvents_CustomStudyUpdatedEventHandler(CQGCustomStudy cqg_custom_study, int index_);

    public delegate void _ICQGCELEvents_DataConnectionStatusChangedEventHandler(eConnectionStatus new_status);

    public delegate void _ICQGCELEvents_DataErrorEventHandler(object cqg_error, string error_description);

    public delegate void _ICQGCELEvents_DataSourcesResolvedEventHandler(CQGDataSources cqg_data_sources, CQGError cqg_error);

    public delegate void _ICQGCELEvents_DataSourceSymbolsResolvedEventHandler(string data_source_abbreviation, CQGDataSourceSymbols cqg_data_source_symbols, CQGError cqg_error);

    public delegate void _ICQGCELEvents_ExpressionAddedEventHandler(CQGExpression cqg_expression);

    public delegate void _ICQGCELEvents_ExpressionInsertedEventHandler(CQGExpression cqg_expression, int index_);

    public delegate void _ICQGCELEvents_ExpressionRemovedEventHandler(CQGExpression cqg_expression, int index_);

    public delegate void _ICQGCELEvents_ExpressionResolvedEventHandler(CQGExpression cqg_expression, CQGError cqg_error);

    public delegate void _ICQGCELEvents_ExpressionUpdatedEventHandler(CQGExpression cqg_expression, int index_);

    public delegate void _ICQGCELEvents_GWConnectionStatusChangedEventHandler(eConnectionStatus new_status);

    public delegate void _ICQGCELEvents_GWEnvironmentChangedEventHandler(eGWEnvChangeCode event_code, int account_id, int phase_);

    public delegate void _ICQGCELEvents_HistoricalSessionsResolvedEventHandler(CQGSessionsCollection cqg_historical_sessions, CQGHistoricalSessionsRequest cqg_historical_sessions_request, CQGError cqg_error);

    public delegate void _ICQGCELEvents_ICConnectionStatusChangedEventHandler(eICConnectionStatus new_status);

    public delegate void _ICQGCELEvents_IncorrectSymbolEventHandler(string symbol_);

    public delegate void _ICQGCELEvents_InstrumentChangedEventHandler(CQGInstrument cqg_instrument, CQGQuotes cqg_quotes, CQGInstrumentProperties cqg_instrument_properties);

    public delegate void _ICQGCELEvents_InstrumentDOMChangedEventHandler(CQGInstrument cqg_instrument, CQGDOMQuotes prev_asks, CQGDOMQuotes prev_bids);

    public delegate void _ICQGCELEvents_InstrumentsGroupChangedEventHandler(eChangeType change_type, CQGInstrumentsGroup instruments_group, CQGStringCollection instruments_names);

    public delegate void _ICQGCELEvents_InstrumentsGroupResolvedEventHandler(CQGInstrumentsGroup instruments_group, CQGError cqg_error);

    public delegate void _ICQGCELEvents_InstrumentSubscribedEventHandler(string symbol_, CQGInstrument cqg_instrument);

    public delegate void _ICQGCELEvents_IsReadyEventHandler(ref eReadyStatus ready_status);

    public delegate void _ICQGCELEvents_LineTimeChangedEventHandler(DateTime new_line_time);

    public delegate void _ICQGCELEvents_ManualFillChangedEventHandler(CQGManualFill cqg_manual_fill, eManualFillUpdateType modify_type);

    public delegate void _ICQGCELEvents_ManualFillsResolvedEventHandler(CQGManualFills cqg_manual_fills, CQGError cqg_error);

    public delegate void _ICQGCELEvents_ManualFillUpdateResolvedEventHandler(CQGManualFillRequest cqg_manual_fill_request, CQGError cqg_error);

    public delegate void _ICQGCELEvents_OnIdleEventHandler();

    public delegate void _ICQGCELEvents_OnQueryProgressEventHandler(CQGOrdersQuery cqg_orders_query, CQGError cqg_error);

    public delegate void _ICQGCELEvents_OrderChangedEventHandler(eChangeType change_type, CQGOrder cqg_order, CQGOrderProperties old_properties, CQGFill cqg_fill, CQGError cqg_error);

    public delegate void _ICQGCELEvents_PasswordChangedEventHandler(eSessionStatus request_status, CQGError cqg_error);

    public delegate void _ICQGCELEvents_PointAndFigureBarsAddedEventHandler(CQGPointAndFigureBars cqg_point_and_figure_bars);

    public delegate void _ICQGCELEvents_PointAndFigureBarsInsertedEventHandler(CQGPointAndFigureBars cqg_point_and_figure_bars, int index_);

    public delegate void _ICQGCELEvents_PointAndFigureBarsRemovedEventHandler(CQGPointAndFigureBars cqg_point_and_figure_bars, int index_);

    public delegate void _ICQGCELEvents_PointAndFigureBarsResolvedEventHandler(CQGPointAndFigureBars cqg_point_and_figure_bars, CQGError cqg_error);

    public delegate void _ICQGCELEvents_PointAndFigureBarsUpdatedEventHandler(CQGPointAndFigureBars cqg_point_and_figure_bars, int index_);

    public delegate void _ICQGCELEvents_PositionsStatementResolvedEventHandler(CQGPositionsStatement cqg_positions_statement, CQGError cqg_error);

    public delegate void _ICQGCELEvents_QFormulaDefinitionsResolvedEventHandler(CQGQFormulaDefinitions cqg_qformula_definitions, CQGError cqg_error);

    public delegate void _ICQGCELEvents_StrategyDefinitionProgressEventHandler(CQGStrategyDefinition cqg_definition, CQGError cqg_error);

    public delegate void _ICQGCELEvents_SubMinuteBarsAddedEventHandler(CQGSubMinuteBars cqg_submintue_bars);

    public delegate void _ICQGCELEvents_SubMinuteBarsInsertedEventHandler(CQGSubMinuteBars cqg_subminute_bars, int index_);

    public delegate void _ICQGCELEvents_SubMinuteBarsRemovedEventHandler(CQGSubMinuteBars cqg_subminute_bars, int index_);

    public delegate void _ICQGCELEvents_SubMinuteBarsResolvedEventHandler(CQGSubMinuteBars cqg_subminte_bars, CQGError cqg_error);

    public delegate void _ICQGCELEvents_SubMinuteBarsUpdatedEventHandler(CQGSubMinuteBars cqg_subminute_bars, int index_);

    public delegate void _ICQGCELEvents_SummariesStatementResolvedEventHandler(CQGSummariesStatement cqg_summaries_statement, CQGError cqg_error);

    public delegate void _ICQGCELEvents_TFlowBarsAddedEventHandler(CQGTFlowBars cqg_tflow_bars);

    public delegate void _ICQGCELEvents_TFlowBarsInsertedEventHandler(CQGTFlowBars cqg_tflow_bars, int index_);

    public delegate void _ICQGCELEvents_TFlowBarsRemovedEventHandler(CQGTFlowBars cqg_tflow_bars, int index_);

    public delegate void _ICQGCELEvents_TFlowBarsResolvedEventHandler(CQGTFlowBars cqg_tflow_bars, CQGError cqg_error);

    public delegate void _ICQGCELEvents_TFlowBarsUpdatedEventHandler(CQGTFlowBars cqg_tflow_bars, int index_);

    public delegate void _ICQGCELEvents_TicksAddedEventHandler(CQGTicks cqg_ticks, int added_ticks_count);

    public delegate void _ICQGCELEvents_TicksResolvedEventHandler(CQGTicks cqg_ticks, CQGError cqg_error);

    public delegate void _ICQGCELEvents_TimedBarsAddedEventHandler(CQGTimedBars cqg_timed_bars);

    public delegate void _ICQGCELEvents_TimedBarsInsertedEventHandler(CQGTimedBars cqg_timed_bars, int index_);

    public delegate void _ICQGCELEvents_TimedBarsRemovedEventHandler(CQGTimedBars cqg_timed_bars, int index_);

    public delegate void _ICQGCELEvents_TimedBarsResolvedEventHandler(CQGTimedBars cqg_timed_bars, CQGError cqg_error);

    public delegate void _ICQGCELEvents_TimedBarsUpdatedEventHandler(CQGTimedBars cqg_timed_bars, int index_);

    public delegate void _ICQGCELEvents_TradableCommoditiesResolvedEventHandler(int gw_account_id, CQGCommodities cqg_commodities, CQGError cqg_error);

    public delegate void _ICQGCELEvents_TradableExchangesResolvedEventHandler(int gw_account_id, CQGExchanges cqg_exchanges, CQGError cqg_error);

    public delegate void _ICQGCELEvents_TradingSystemAddNotificationEventHandler(CQGTradingSystem cqg_trading_system, CQGTradingSystemAddInfo cqg_trading_system_add_info);

    public delegate void _ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandler(CQGTradingSystemDefinitions cqg_trading_system_definitions, CQGError cqg_error);

    public delegate void _ICQGCELEvents_TradingSystemInsertNotificationEventHandler(CQGTradingSystem cqg_trading_system, CQGTradingSystemInsertInfo cqg_trading_system_insert_info);

    public delegate void _ICQGCELEvents_TradingSystemRemoveNotificationEventHandler(CQGTradingSystem cqg_trading_system, CQGTradingSystemRemoveInfo cqg_trading_system_remove_info);

    public delegate void _ICQGCELEvents_TradingSystemResolvedEventHandler(CQGTradingSystem cqg_trading_system, CQGError cqg_error);

    public delegate void _ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandler(CQGTradingSystem cqg_trading_system, CQGTradingSystemRelationAddInfo cqg_trading_system_relation_add_info);

    public delegate void _ICQGCELEvents_TradingSystemUpdateNotificationEventHandler(CQGTradingSystem cqg_trading_system, CQGTradingSystemUpdateInfo cqg_trading_system_update_info);

    public delegate void _ICQGCELEvents_YieldsAddedEventHandler(CQGYields cqg_yields);

    public delegate void _ICQGCELEvents_YieldsInsertedEventHandler(CQGYields cqg_yields, int index_);

    public delegate void _ICQGCELEvents_YieldsRemovedEventHandler(CQGYields cqg_yields, int index_);

    public delegate void _ICQGCELEvents_YieldsResolvedEventHandler(CQGYields cqg_yields, CQGError cqg_error);

    public delegate void _ICQGCELEvents_YieldsUpdatedEventHandler(CQGYields cqg_yields, int index_);

    public delegate void _ICQGCELGeneralEvents_CELStartedEventHandler();

    public delegate void _ICQGCELGeneralEvents_CurrencyRatesChangedEventHandler(CQGCurrencyRates cqg_currency_rates);

    public delegate void _ICQGCELGeneralEvents_DataConnectionStatusChangedEventHandler(eConnectionStatus new_status);

    public delegate void _ICQGCELGeneralEvents_DataErrorEventHandler(object cqg_error, string error_description);

    public delegate void _ICQGCELGeneralEvents_GWConnectionStatusChangedEventHandler(eConnectionStatus new_status);

    public delegate void _ICQGCELGeneralEvents_IsReadyEventHandler(ref eReadyStatus ready_status);

    public delegate void _ICQGCELGeneralEvents_LineTimeChangedEventHandler(DateTime new_line_time);

    public delegate void _ICQGCELGeneralEvents_OnIdleEventHandler();

    public delegate void _ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandler(string commodity_name, eInstrumentType instrument_types, CQGCommodityInstruments cqg_commodity_intruments);

    public delegate void _ICQGCELInstrumentEvents_IncorrectSymbolEventHandler(string symbol_);

    public delegate void _ICQGCELInstrumentEvents_InstrumentChangedEventHandler(CQGInstrument cqg_instrument, CQGQuotes cqg_quotes, CQGInstrumentProperties cqg_instrument_properties);

    public delegate void _ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandler(CQGInstrument cqg_instrument, CQGDOMQuotes prev_asks, CQGDOMQuotes prev_bids);

    public delegate void _ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandler(eChangeType change_type, CQGInstrumentsGroup instruments_group, CQGStringCollection instruments_names);

    public delegate void _ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandler(CQGInstrumentsGroup instruments_group, CQGError cqg_error);

    public delegate void _ICQGCELInstrumentEvents_InstrumentSubscribedEventHandler(string symbol_, CQGInstrument cqg_instrument);

    #endregion

    #region Interfaces

    public interface _ICQGCELEvents
    {
        #region Methods

        void AccountChanged(eAccountChangeType change_type, CQGAccount cqg_account, CQGPosition cqg_position);

        void AdvancedStudyAdded(CQGAdvancedStudy cqg_advanced_study);

        void AdvancedStudyDefinitionsResolved(CQGAdvancedStudyDefinitions cqg_advanced_study_definitions, CQGError cqg_error);

        void AdvancedStudyInserted(CQGAdvancedStudy cqg_advanced_study, int index_);

        void AdvancedStudyRemoved(CQGAdvancedStudy cqg_advanced_study, int index_);

        void AdvancedStudyResolved(CQGAdvancedStudy cqg_advanced_study, CQGError cqg_error);

        void AdvancedStudyUpdated(CQGAdvancedStudy cqg_advanced_study, int index_);

        void AlgorithmicOrderPlaced(string guid_, CQGAlgorithmicOrderParameters main_params, CQGAlgorithmicOrderProperties custom_props);

        void AlgorithmicOrderRegistrationComplete(string guid_, CQGError cqg_error);

        void AllOrdersCanceled(eOrderSideFilter order_side, CQGIntegerCollection gw_account_ids, CQGStringCollection instrument_names);

        void AuthenticationStatusChanged(eSessionStatus new_status, CQGError cqg_error);

        void BarsTimestampsResolved(CQGBarsTimestamps cqg_bars_timestamps, CQGError cqg_error);

        void CELStarted();

        void CommodityInstrumentsResolved(string commodity_name, eInstrumentType instrument_types, CQGCommodityInstruments cqg_commodity_intruments);

        void ConditionAdded(CQGCondition cqg_condition);

        void ConditionDefinitionsResolved(CQGConditionDefinitions cqg_condition_definitions, CQGError cqg_error);

        void ConditionInserted(CQGCondition cqg_condition, int index_);

        void ConditionRemoved(CQGCondition cqg_condition, int index_);

        void ConditionResolved(CQGCondition cqg_condition, CQGError cqg_error);

        void ConditionUpdated(CQGCondition cqg_condition, int index_);

        void ConstantVolumeBarsAdded(CQGConstantVolumeBars cqg_constant_volume_bars);

        void ConstantVolumeBarsInserted(CQGConstantVolumeBars cqg_constant_volume_bars, int index_);

        void ConstantVolumeBarsRemoved(CQGConstantVolumeBars cqg_constant_volume_bars, int index_);

        void ConstantVolumeBarsResolved(CQGConstantVolumeBars cqg_constant_volume_bars, CQGError cqg_error);

        void ConstantVolumeBarsUpdated(CQGConstantVolumeBars cqg_constant_volume_bars, int index_);

        void CurrencyRatesChanged(CQGCurrencyRates cqg_currency_rates);

        void CustomSessionsResolved(CQGSessionsCollection cqg_sessions_collection, CQGError cqg_error);

        void CustomStudyAdded(CQGCustomStudy cqg_custom_study);

        void CustomStudyDefinitionsResolved(CQGCustomStudyDefinitions cqg_custom_study_definitions, CQGError cqg_error);

        void CustomStudyInserted(CQGCustomStudy cqg_custom_study, int index_);

        void CustomStudyRemoved(CQGCustomStudy cqg_custom_study, int index_);

        void CustomStudyResolved(CQGCustomStudy cqg_custom_study, CQGError cqg_error);

        void CustomStudyUpdated(CQGCustomStudy cqg_custom_study, int index_);

        void DataConnectionStatusChanged(eConnectionStatus new_status);

        void DataError(object cqg_error, string error_description);

        void DataSourcesResolved(CQGDataSources cqg_data_sources, CQGError cqg_error);

        void DataSourceSymbolsResolved(string data_source_abbreviation, CQGDataSourceSymbols cqg_data_source_symbols, CQGError cqg_error);

        void ExpressionAdded(CQGExpression cqg_expression);

        void ExpressionInserted(CQGExpression cqg_expression, int index_);

        void ExpressionRemoved(CQGExpression cqg_expression, int index_);

        void ExpressionResolved(CQGExpression cqg_expression, CQGError cqg_error);

        void ExpressionUpdated(CQGExpression cqg_expression, int index_);

        void GWConnectionStatusChanged(eConnectionStatus new_status);

        void GWEnvironmentChanged(eGWEnvChangeCode event_code, int account_id, int phase_);

        void HistoricalSessionsResolved(CQGSessionsCollection cqg_historical_sessions, CQGHistoricalSessionsRequest cqg_historical_sessions_request, CQGError cqg_error);

        void ICConnectionStatusChanged(eICConnectionStatus new_status);

        void IncorrectSymbol(string symbol_);

        void InstrumentChanged(CQGInstrument cqg_instrument, CQGQuotes cqg_quotes, CQGInstrumentProperties cqg_instrument_properties);

        void InstrumentDOMChanged(CQGInstrument cqg_instrument, CQGDOMQuotes prev_asks, CQGDOMQuotes prev_bids);

        void InstrumentsGroupChanged(eChangeType change_type, CQGInstrumentsGroup instruments_group, CQGStringCollection instruments_names);

        void InstrumentsGroupResolved(CQGInstrumentsGroup instruments_group, CQGError cqg_error);

        void InstrumentSubscribed(string symbol_, CQGInstrument cqg_instrument);

        void IsReady(ref eReadyStatus ready_status);

        void LineTimeChanged(DateTime new_line_time);

        void ManualFillChanged(CQGManualFill cqg_manual_fill, eManualFillUpdateType modify_type);

        void ManualFillsResolved(CQGManualFills cqg_manual_fills, CQGError cqg_error);

        void ManualFillUpdateResolved(CQGManualFillRequest cqg_manual_fill_request, CQGError cqg_error);

        void OnIdle();

        void OnQueryProgress(CQGOrdersQuery cqg_orders_query, CQGError cqg_error);

        void OrderChanged(eChangeType change_type, CQGOrder cqg_order, CQGOrderProperties old_properties, CQGFill cqg_fill, CQGError cqg_error);

        void PasswordChanged(eSessionStatus request_status, CQGError cqg_error);

        void PointAndFigureBarsAdded(CQGPointAndFigureBars cqg_point_and_figure_bars);

        void PointAndFigureBarsInserted(CQGPointAndFigureBars cqg_point_and_figure_bars, int index_);

        void PointAndFigureBarsRemoved(CQGPointAndFigureBars cqg_point_and_figure_bars, int index_);

        void PointAndFigureBarsResolved(CQGPointAndFigureBars cqg_point_and_figure_bars, CQGError cqg_error);

        void PointAndFigureBarsUpdated(CQGPointAndFigureBars cqg_point_and_figure_bars, int index_);

        void PositionsStatementResolved(CQGPositionsStatement cqg_positions_statement, CQGError cqg_error);

        void QFormulaDefinitionsResolved(CQGQFormulaDefinitions cqg_qformula_definitions, CQGError cqg_error);

        void StrategyDefinitionProgress(CQGStrategyDefinition cqg_definition, CQGError cqg_error);

        void SubMinuteBarsAdded(CQGSubMinuteBars cqg_submintue_bars);

        void SubMinuteBarsInserted(CQGSubMinuteBars cqg_subminute_bars, int index_);

        void SubMinuteBarsRemoved(CQGSubMinuteBars cqg_subminute_bars, int index_);

        void SubMinuteBarsResolved(CQGSubMinuteBars cqg_subminte_bars, CQGError cqg_error);

        void SubMinuteBarsUpdated(CQGSubMinuteBars cqg_subminute_bars, int index_);

        void SummariesStatementResolved(CQGSummariesStatement cqg_summaries_statement, CQGError cqg_error);

        void TFlowBarsAdded(CQGTFlowBars cqg_tflow_bars);

        void TFlowBarsInserted(CQGTFlowBars cqg_tflow_bars, int index_);

        void TFlowBarsRemoved(CQGTFlowBars cqg_tflow_bars, int index_);

        void TFlowBarsResolved(CQGTFlowBars cqg_tflow_bars, CQGError cqg_error);

        void TFlowBarsUpdated(CQGTFlowBars cqg_tflow_bars, int index_);

        void TicksAdded(CQGTicks cqg_ticks, int added_ticks_count);

        void TicksResolved(CQGTicks cqg_ticks, CQGError cqg_error);

        void TimedBarsAdded(CQGTimedBars cqg_timed_bars);

        void TimedBarsInserted(CQGTimedBars cqg_timed_bars, int index_);

        void TimedBarsRemoved(CQGTimedBars cqg_timed_bars, int index_);

        void TimedBarsResolved(CQGTimedBars cqg_timed_bars, CQGError cqg_error);

        void TimedBarsUpdated(CQGTimedBars cqg_timed_bars, int index_);

        void TradableCommoditiesResolved(int gw_account_id, CQGCommodities cqg_commodities, CQGError cqg_error);

        void TradableExchangesResolved(int gw_account_id, CQGExchanges cqg_exchanges, CQGError cqg_error);

        void TradingSystemAddNotification(CQGTradingSystem cqg_trading_system, CQGTradingSystemAddInfo cqg_trading_system_add_info);

        void TradingSystemDefinitionsResolved(CQGTradingSystemDefinitions cqg_trading_system_definitions, CQGError cqg_error);

        void TradingSystemInsertNotification(CQGTradingSystem cqg_trading_system, CQGTradingSystemInsertInfo cqg_trading_system_insert_info);

        void TradingSystemRemoveNotification(CQGTradingSystem cqg_trading_system, CQGTradingSystemRemoveInfo cqg_trading_system_remove_info);

        void TradingSystemResolved(CQGTradingSystem cqg_trading_system, CQGError cqg_error);

        void TradingSystemTradeRelationAddNotification(CQGTradingSystem cqg_trading_system, CQGTradingSystemRelationAddInfo cqg_trading_system_relation_add_info);

        void TradingSystemUpdateNotification(CQGTradingSystem cqg_trading_system, CQGTradingSystemUpdateInfo cqg_trading_system_update_info);

        void YieldsAdded(CQGYields cqg_yields);

        void YieldsInserted(CQGYields cqg_yields, int index_);

        void YieldsRemoved(CQGYields cqg_yields, int index_);

        void YieldsResolved(CQGYields cqg_yields, CQGError cqg_error);

        void YieldsUpdated(CQGYields cqg_yields, int index_);

        #endregion

    }

    public interface _ICQGCELEvents_Event
    {
        #region Events

        event _ICQGCELEvents_AccountChangedEventHandler AccountChanged;

        event _ICQGCELEvents_AdvancedStudyAddedEventHandler AdvancedStudyAdded;

        event _ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandler AdvancedStudyDefinitionsResolved;

        event _ICQGCELEvents_AdvancedStudyInsertedEventHandler AdvancedStudyInserted;

        event _ICQGCELEvents_AdvancedStudyRemovedEventHandler AdvancedStudyRemoved;

        event _ICQGCELEvents_AdvancedStudyResolvedEventHandler AdvancedStudyResolved;

        event _ICQGCELEvents_AdvancedStudyUpdatedEventHandler AdvancedStudyUpdated;

        event _ICQGCELEvents_AlgorithmicOrderPlacedEventHandler AlgorithmicOrderPlaced;

        event _ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandler AlgorithmicOrderRegistrationComplete;

        event _ICQGCELEvents_AllOrdersCanceledEventHandler AllOrdersCanceled;

        event _ICQGCELEvents_AuthenticationStatusChangedEventHandler AuthenticationStatusChanged;

        event _ICQGCELEvents_BarsTimestampsResolvedEventHandler BarsTimestampsResolved;

        event _ICQGCELEvents_CELStartedEventHandler CELStarted;

        event _ICQGCELEvents_CommodityInstrumentsResolvedEventHandler CommodityInstrumentsResolved;

        event _ICQGCELEvents_ConditionAddedEventHandler ConditionAdded;

        event _ICQGCELEvents_ConditionDefinitionsResolvedEventHandler ConditionDefinitionsResolved;

        event _ICQGCELEvents_ConditionInsertedEventHandler ConditionInserted;

        event _ICQGCELEvents_ConditionRemovedEventHandler ConditionRemoved;

        event _ICQGCELEvents_ConditionResolvedEventHandler ConditionResolved;

        event _ICQGCELEvents_ConditionUpdatedEventHandler ConditionUpdated;

        event _ICQGCELEvents_ConstantVolumeBarsAddedEventHandler ConstantVolumeBarsAdded;

        event _ICQGCELEvents_ConstantVolumeBarsInsertedEventHandler ConstantVolumeBarsInserted;

        event _ICQGCELEvents_ConstantVolumeBarsRemovedEventHandler ConstantVolumeBarsRemoved;

        event _ICQGCELEvents_ConstantVolumeBarsResolvedEventHandler ConstantVolumeBarsResolved;

        event _ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandler ConstantVolumeBarsUpdated;

        event _ICQGCELEvents_CurrencyRatesChangedEventHandler CurrencyRatesChanged;

        event _ICQGCELEvents_CustomSessionsResolvedEventHandler CustomSessionsResolved;

        event _ICQGCELEvents_CustomStudyAddedEventHandler CustomStudyAdded;

        event _ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandler CustomStudyDefinitionsResolved;

        event _ICQGCELEvents_CustomStudyInsertedEventHandler CustomStudyInserted;

        event _ICQGCELEvents_CustomStudyRemovedEventHandler CustomStudyRemoved;

        event _ICQGCELEvents_CustomStudyResolvedEventHandler CustomStudyResolved;

        event _ICQGCELEvents_CustomStudyUpdatedEventHandler CustomStudyUpdated;

        event _ICQGCELEvents_DataConnectionStatusChangedEventHandler DataConnectionStatusChanged;

        event _ICQGCELEvents_DataErrorEventHandler DataError;

        event _ICQGCELEvents_DataSourcesResolvedEventHandler DataSourcesResolved;

        event _ICQGCELEvents_DataSourceSymbolsResolvedEventHandler DataSourceSymbolsResolved;

        event _ICQGCELEvents_ExpressionAddedEventHandler ExpressionAdded;

        event _ICQGCELEvents_ExpressionInsertedEventHandler ExpressionInserted;

        event _ICQGCELEvents_ExpressionRemovedEventHandler ExpressionRemoved;

        event _ICQGCELEvents_ExpressionResolvedEventHandler ExpressionResolved;

        event _ICQGCELEvents_ExpressionUpdatedEventHandler ExpressionUpdated;

        event _ICQGCELEvents_GWConnectionStatusChangedEventHandler GWConnectionStatusChanged;

        event _ICQGCELEvents_GWEnvironmentChangedEventHandler GWEnvironmentChanged;

        event _ICQGCELEvents_HistoricalSessionsResolvedEventHandler HistoricalSessionsResolved;

        event _ICQGCELEvents_ICConnectionStatusChangedEventHandler ICConnectionStatusChanged;

        event _ICQGCELEvents_IncorrectSymbolEventHandler IncorrectSymbol;

        event _ICQGCELEvents_InstrumentChangedEventHandler InstrumentChanged;

        event _ICQGCELEvents_InstrumentDOMChangedEventHandler InstrumentDOMChanged;

        event _ICQGCELEvents_InstrumentsGroupChangedEventHandler InstrumentsGroupChanged;

        event _ICQGCELEvents_InstrumentsGroupResolvedEventHandler InstrumentsGroupResolved;

        event _ICQGCELEvents_InstrumentSubscribedEventHandler InstrumentSubscribed;

        event _ICQGCELEvents_IsReadyEventHandler IsReady;

        event _ICQGCELEvents_LineTimeChangedEventHandler LineTimeChanged;

        event _ICQGCELEvents_ManualFillChangedEventHandler ManualFillChanged;

        event _ICQGCELEvents_ManualFillsResolvedEventHandler ManualFillsResolved;

        event _ICQGCELEvents_ManualFillUpdateResolvedEventHandler ManualFillUpdateResolved;

        event _ICQGCELEvents_OnIdleEventHandler OnIdle;

        event _ICQGCELEvents_OnQueryProgressEventHandler OnQueryProgress;

        event _ICQGCELEvents_OrderChangedEventHandler OrderChanged;

        event _ICQGCELEvents_PasswordChangedEventHandler PasswordChanged;

        event _ICQGCELEvents_PointAndFigureBarsAddedEventHandler PointAndFigureBarsAdded;

        event _ICQGCELEvents_PointAndFigureBarsInsertedEventHandler PointAndFigureBarsInserted;

        event _ICQGCELEvents_PointAndFigureBarsRemovedEventHandler PointAndFigureBarsRemoved;

        event _ICQGCELEvents_PointAndFigureBarsResolvedEventHandler PointAndFigureBarsResolved;

        event _ICQGCELEvents_PointAndFigureBarsUpdatedEventHandler PointAndFigureBarsUpdated;

        event _ICQGCELEvents_PositionsStatementResolvedEventHandler PositionsStatementResolved;

        event _ICQGCELEvents_QFormulaDefinitionsResolvedEventHandler QFormulaDefinitionsResolved;

        event _ICQGCELEvents_StrategyDefinitionProgressEventHandler StrategyDefinitionProgress;

        event _ICQGCELEvents_SubMinuteBarsAddedEventHandler SubMinuteBarsAdded;

        event _ICQGCELEvents_SubMinuteBarsInsertedEventHandler SubMinuteBarsInserted;

        event _ICQGCELEvents_SubMinuteBarsRemovedEventHandler SubMinuteBarsRemoved;

        event _ICQGCELEvents_SubMinuteBarsResolvedEventHandler SubMinuteBarsResolved;

        event _ICQGCELEvents_SubMinuteBarsUpdatedEventHandler SubMinuteBarsUpdated;

        event _ICQGCELEvents_SummariesStatementResolvedEventHandler SummariesStatementResolved;

        event _ICQGCELEvents_TFlowBarsAddedEventHandler TFlowBarsAdded;

        event _ICQGCELEvents_TFlowBarsInsertedEventHandler TFlowBarsInserted;

        event _ICQGCELEvents_TFlowBarsRemovedEventHandler TFlowBarsRemoved;

        event _ICQGCELEvents_TFlowBarsResolvedEventHandler TFlowBarsResolved;

        event _ICQGCELEvents_TFlowBarsUpdatedEventHandler TFlowBarsUpdated;

        event _ICQGCELEvents_TicksAddedEventHandler TicksAdded;

        event _ICQGCELEvents_TicksResolvedEventHandler TicksResolved;

        event _ICQGCELEvents_TimedBarsAddedEventHandler TimedBarsAdded;

        event _ICQGCELEvents_TimedBarsInsertedEventHandler TimedBarsInserted;

        event _ICQGCELEvents_TimedBarsRemovedEventHandler TimedBarsRemoved;

        event _ICQGCELEvents_TimedBarsResolvedEventHandler TimedBarsResolved;

        event _ICQGCELEvents_TimedBarsUpdatedEventHandler TimedBarsUpdated;

        event _ICQGCELEvents_TradableCommoditiesResolvedEventHandler TradableCommoditiesResolved;

        event _ICQGCELEvents_TradableExchangesResolvedEventHandler TradableExchangesResolved;

        event _ICQGCELEvents_TradingSystemAddNotificationEventHandler TradingSystemAddNotification;

        event _ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandler TradingSystemDefinitionsResolved;

        event _ICQGCELEvents_TradingSystemInsertNotificationEventHandler TradingSystemInsertNotification;

        event _ICQGCELEvents_TradingSystemRemoveNotificationEventHandler TradingSystemRemoveNotification;

        event _ICQGCELEvents_TradingSystemResolvedEventHandler TradingSystemResolved;

        event _ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandler TradingSystemTradeRelationAddNotification;

        event _ICQGCELEvents_TradingSystemUpdateNotificationEventHandler TradingSystemUpdateNotification;

        event _ICQGCELEvents_YieldsAddedEventHandler YieldsAdded;

        event _ICQGCELEvents_YieldsInsertedEventHandler YieldsInserted;

        event _ICQGCELEvents_YieldsRemovedEventHandler YieldsRemoved;

        event _ICQGCELEvents_YieldsResolvedEventHandler YieldsResolved;

        event _ICQGCELEvents_YieldsUpdatedEventHandler YieldsUpdated;

        #endregion

    }

    public interface _ICQGCELGeneralEvents
    {
        #region Methods

        void CELStarted();

        void CurrencyRatesChanged(CQGCurrencyRates cqg_currency_rates);

        void DataConnectionStatusChanged(eConnectionStatus new_status);

        void DataError(object cqg_error, string error_description);

        void GWConnectionStatusChanged(eConnectionStatus new_status);

        void IsReady(ref eReadyStatus ready_status);

        void LineTimeChanged(DateTime new_line_time);

        void OnIdle();

        #endregion

    }

    public interface _ICQGCELGeneralEvents_Event
    {
        #region Events

        event _ICQGCELGeneralEvents_CELStartedEventHandler CELStarted;

        event _ICQGCELGeneralEvents_CurrencyRatesChangedEventHandler CurrencyRatesChanged;

        event _ICQGCELGeneralEvents_DataConnectionStatusChangedEventHandler DataConnectionStatusChanged;

        event _ICQGCELGeneralEvents_DataErrorEventHandler DataError;

        event _ICQGCELGeneralEvents_GWConnectionStatusChangedEventHandler GWConnectionStatusChanged;

        event _ICQGCELGeneralEvents_IsReadyEventHandler IsReady;

        event _ICQGCELGeneralEvents_LineTimeChangedEventHandler LineTimeChanged;

        event _ICQGCELGeneralEvents_OnIdleEventHandler OnIdle;

        #endregion

    }

    public interface _ICQGCELInstrumentEvents
    {
        #region Methods

        void CommodityInstrumentsResolved(string commodity_name, eInstrumentType instrument_types, CQGCommodityInstruments cqg_commodity_intruments);

        void IncorrectSymbol(string symbol_);

        void InstrumentChanged(CQGInstrument cqg_instrument, CQGQuotes cqg_quotes, CQGInstrumentProperties cqg_instrument_properties);

        void InstrumentDOMChanged(CQGInstrument cqg_instrument, CQGDOMQuotes prev_asks, CQGDOMQuotes prev_bids);

        void InstrumentsGroupChanged(eChangeType change_type, CQGInstrumentsGroup instruments_group, CQGStringCollection instruments_names);

        void InstrumentsGroupResolved(CQGInstrumentsGroup instruments_group, CQGError cqg_error);

        void InstrumentSubscribed(string symbol_, CQGInstrument cqg_instrument);

        #endregion

    }

    public interface _ICQGCELInstrumentEvents_Event
    {
        #region Events

        event _ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandler CommodityInstrumentsResolved;

        event _ICQGCELInstrumentEvents_IncorrectSymbolEventHandler IncorrectSymbol;

        event _ICQGCELInstrumentEvents_InstrumentChangedEventHandler InstrumentChanged;

        event _ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandler InstrumentDOMChanged;

        event _ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandler InstrumentsGroupChanged;

        event _ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandler InstrumentsGroupResolved;

        event _ICQGCELInstrumentEvents_InstrumentSubscribedEventHandler InstrumentSubscribed;

        #endregion

    }

    public interface CQGAccount : ICQGAccount
    {
    }

    public interface CQGAccounts : ICQGAccounts
    {
    }

    public interface CQGAccountSummaries : ICQGAccountSummaries
    {
    }

    public interface CQGAccountSummary : ICQGAccountSummary
    {
    }

    public interface CQGAdvancedStudies : ICQGAdvancedStudies
    {
    }

    public interface CQGAdvancedStudy : ICQGAdvancedStudy
    {
    }

    public interface CQGAdvancedStudyDefinition : ICQGAdvancedStudyDefinition
    {
    }

    public interface CQGAdvancedStudyDefinitions : ICQGAdvancedStudyDefinitions
    {
    }

    public interface CQGAdvancedStudyRequest : ICQGAdvancedStudyRequest
    {
    }

    public interface CQGAlgorithmicOrderDefinition : ICQGAlgorithmicOrderDefinition
    {
    }

    public interface CQGAlgorithmicOrderDefinitions : ICQGAlgorithmicOrderDefinitions
    {
    }

    public interface CQGAlgorithmicOrderParameters : ICQGAlgorithmicOrderParameters
    {
    }

    public interface CQGAlgorithmicOrderProperties : ICQGAlgorithmicOrderProperties
    {
    }

    public interface CQGAlgorithmicOrderProperty : ICQGAlgorithmicOrderProperty
    {
    }

    public interface CQGAlgoSupplier
    {
    }

    public interface CQGAPIConfig : ICQGAPIConfig
    {
    }

    public interface CQGBarsTimestamps : ICQGBarsTimestamps
    {
    }

    public interface CQGCEL : ICQGCEL, _ICQGCELEvents_Event
    {
    }

    public interface CQGChangedTradeEntries : ICQGChangedTradeEntries
    {
    }

    public interface CQGChangedTradeEntry : ICQGChangedTradeEntry
    {
    }

    public interface CQGChangedTradeExit : ICQGChangedTradeExit
    {
    }

    public interface CQGChangedTradeExits : ICQGChangedTradeExits
    {
    }

    public interface CQGCommodities : ICQGCommodities
    {
    }

    public interface CQGCommodityInstruments : ICQGCommodityInstruments
    {
    }

    public interface CQGCondition : ICQGCondition
    {
    }

    public interface CQGConditionDefinition : ICQGConditionDefinition
    {
    }

    public interface CQGConditionDefinitions : ICQGConditionDefinitions
    {
    }

    public interface CQGConditionRequest : ICQGConditionRequest
    {
    }

    public interface CQGConditionResult : ICQGConditionResult
    {
    }

    public interface CQGConditions : ICQGConditions
    {
    }

    public interface CQGConstantVolumeBar : ICQGConstantVolumeBar
    {
    }

    public interface CQGConstantVolumeBars : ICQGConstantVolumeBars
    {
    }

    public interface CQGConstantVolumeBarsCollection : ICQGConstantVolumeBarsCollection
    {
    }

    public interface CQGConstantVolumeBarsRequest : ICQGConstantVolumeBarsRequest
    {
    }

    public interface CQGCurrencyRate : ICQGCurrencyRate
    {
    }

    public interface CQGCurrencyRates : ICQGCurrencyRates
    {
    }

    public interface CQGCurveDefinition : ICQGCurveDefinition
    {
    }

    public interface CQGCurveDefinitions : ICQGCurveDefinitions
    {
    }

    public interface CQGCurveHeaders : ICQGCurveHeaders
    {
    }

    public interface CQGCurves : ICQGCurves
    {
    }

    public interface CQGCustomStudies : ICQGCustomStudies
    {
    }

    public interface CQGCustomStudy : ICQGCustomStudy
    {
    }

    public interface CQGCustomStudyDefinition : ICQGCustomStudyDefinition
    {
    }

    public interface CQGCustomStudyDefinitions : ICQGCustomStudyDefinitions
    {
    }

    public interface CQGCustomStudyRequest : ICQGCustomStudyRequest
    {
    }

    public interface CQGDataSource : ICQGDataSource
    {
    }

    public interface CQGDataSources : ICQGDataSources
    {
    }

    public interface CQGDataSourceSymbol : ICQGDataSourceSymbol
    {
    }

    public interface CQGDataSourceSymbols : ICQGDataSourceSymbols
    {
    }

    public interface CQGDirectEventsAccessor : ICQGDirectEventsAccessor, _ICQGCELInstrumentEvents_Event
    {
    }

    public interface CQGDOMQuotes : ICQGDOMQuotes
    {
    }

    public interface CQGEnvironment : ICQGEnvironment
    {
    }

    public interface CQGError : ICQGError
    {
    }

    public interface CQGExchanges : ICQGExchanges
    {
    }

    public interface CQGExecutionPattern : ICQGExecutionPattern
    {
    }

    public interface CQGExecutionPatternParameter : ICQGExecutionPatternParameter
    {
    }

    public interface CQGExecutionPatternParameters : ICQGExecutionPatternParameters
    {
    }

    public interface CQGExpression : ICQGExpression
    {
    }

    public interface CQGExpressionOutputHeaders : ICQGExpressionOutputHeaders
    {
    }

    public interface CQGExpressionOutputs : ICQGExpressionOutputs
    {
    }

    public interface CQGExpressionRequest : ICQGExpressionRequest
    {
    }

    public interface CQGExpressions : ICQGExpressions
    {
    }

    public interface CQGFill : ICQGFill
    {
    }

    public interface CQGFills : ICQGFills
    {
    }

    public interface CQGGWTrade : ICQGGWTrade
    {
    }

    public interface CQGGWTrades : ICQGGWTrades
    {
    }

    public interface CQGHistoricalSessionsRequest : ICQGHistoricalSessionsRequest
    {
    }

    public interface CQGHoliday : ICQGHoliday
    {
    }

    public interface CQGHolidays : ICQGHolidays
    {
    }

    public interface CQGInstrument : ICQGInstrument
    {
    }

    public interface CQGInstrumentProperties : ICQGInstrumentProperties
    {
    }

    public interface CQGInstrumentProperty : ICQGInstrumentProperty
    {
    }

    public interface CQGInstruments : ICQGInstruments
    {
    }

    public interface CQGInstrumentsGroup : ICQGInstrumentsGroup
    {
    }

    public interface CQGInstrumentsGroupRequest : ICQGInstrumentsGroupRequest
    {
    }

    public interface CQGInstrumentsGroups : ICQGInstrumentsGroups
    {
    }

    public interface CQGInstrumentSubscriptionRequest : ICQGInstrumentSubscriptionRequest
    {
    }

    public interface CQGIntegerCollection : ICQGIntegerCollection
    {
    }

    public interface CQGLogger : ICQGLogger
    {
    }

    public interface CQGManualFill : ICQGManualFill
    {
    }

    public interface CQGManualFillRequest : ICQGManualFillRequest
    {
    }

    public interface CQGManualFills : ICQGManualFills
    {
    }

    public interface CQGManualFillsCollection : ICQGManualFillsCollection
    {
    }

    public interface CQGModifiedProperties : ICQGModifiedProperties
    {
    }

    public interface CQGModifiedProperty : ICQGModifiedProperty
    {
    }

    public interface CQGOrder : ICQGOrder
    {
    }

    public interface CQGOrderActionRequest : ICQGOrderActionRequest
    {
    }

    public interface CQGOrderChain : ICQGOrderChain
    {
    }

    public interface CQGOrderModify : ICQGOrderModify
    {
    }

    public interface CQGOrderProperties : ICQGOrderProperties
    {
    }

    public interface CQGOrderProperty : ICQGOrderProperty
    {
    }

    public interface CQGOrders : ICQGOrders
    {
    }

    public interface CQGOrdersQuery : ICQGOrdersQuery
    {
    }

    public interface CQGOrderStatistics : ICQGOrderStatistics
    {
    }

    public interface CQGParameterDefinition : ICQGParameterDefinition
    {
    }

    public interface CQGParameterDefinitions : ICQGParameterDefinitions
    {
    }

    public interface CQGPointAndFigureBar : ICQGPointAndFigureBar
    {
    }

    public interface CQGPointAndFigureBars : ICQGPointAndFigureBars
    {
    }

    public interface CQGPointAndFigureBarsCollection : ICQGPointAndFigureBarsCollection
    {
    }

    public interface CQGPointAndFigureBarsRequest : ICQGPointAndFigureBarsRequest
    {
    }

    public interface CQGPosition : ICQGPosition
    {
    }

    public interface CQGPositions : ICQGPositions
    {
    }

    public interface CQGPositionsStatement : ICQGPositionsStatement
    {
    }

    public interface CQGQFormulaDefinition : ICQGQFormulaDefinition
    {
    }

    public interface CQGQFormulaDefinitions : ICQGQFormulaDefinitions
    {
    }

    public interface CQGQuote : ICQGQuote
    {
    }

    public interface CQGQuotes : ICQGQuotes
    {
    }

    public interface CQGRemoteOpenAPISession : ICQGRemoteOpenAPISession
    {
    }

    public interface CQGSession : ICQGSession
    {
    }

    public interface CQGSessions : ICQGSessions
    {
    }

    public interface CQGSessionsCollection : ICQGSessionsCollection
    {
    }

    public interface CQGStrategyDefinition : ICQGStrategyDefinition
    {
    }

    public interface CQGStrategyDefinitions : ICQGStrategyDefinitions
    {
    }

    public interface CQGStrategyLegFill : ICQGStrategyLegFill
    {
    }

    public interface CQGStrategyLegFills : ICQGStrategyLegFills
    {
    }

    public interface CQGStringCollection : ICQGStringCollection
    {
    }

    public interface CQGSubMinuteBar : ICQGSubMinuteBar
    {
    }

    public interface CQGSubMinuteBars : ICQGSubMinuteBars
    {
    }

    public interface CQGSubMinuteBarsCollection : ICQGSubMinuteBarsCollection
    {
    }

    public interface CQGSubMinuteBarsRequest : ICQGSubMinuteBarsRequest
    {
    }

    public interface CQGSummariesStatement : ICQGSummariesStatement
    {
    }

    public interface CQGTFlowBar : ICQGTFlowBar
    {
    }

    public interface CQGTFlowBars : ICQGTFlowBars
    {
    }

    public interface CQGTFlowBarsCollection : ICQGTFlowBarsCollection
    {
    }

    public interface CQGTFlowBarsRequest : ICQGTFlowBarsRequest
    {
    }

    public interface CQGTick : ICQGTick
    {
    }

    public interface CQGTicks : ICQGTicks
    {
    }

    public interface CQGTicksCollection : ICQGTicksCollection
    {
    }

    public interface CQGTicksRequest : ICQGTicksRequest
    {
    }

    public interface CQGTimedBar : ICQGTimedBar
    {
    }

    public interface CQGTimedBars : ICQGTimedBars
    {
    }

    public interface CQGTimedBarsCollection : ICQGTimedBarsCollection
    {
    }

    public interface CQGTimedBarsRequest : ICQGTimedBarsRequest
    {
    }

    public interface CQGTrade : ICQGTrade
    {
    }

    public interface CQGTradeEntries : ICQGTradeEntries
    {
    }

    public interface CQGTradeEntry : ICQGTradeEntry
    {
    }

    public interface CQGTradeEntryDefinition : ICQGTradeEntryDefinition
    {
    }

    public interface CQGTradeExit : ICQGTradeExit
    {
    }

    public interface CQGTradeExitDefinition : ICQGTradeExitDefinition
    {
    }

    public interface CQGTradeExitDefinitions : ICQGTradeExitDefinitions
    {
    }

    public interface CQGTradeExits : ICQGTradeExits
    {
    }

    public interface CQGTrades : ICQGTrades
    {
    }

    public interface CQGTradingSystem : ICQGTradingSystem
    {
    }

    public interface CQGTradingSystemAddInfo : ICQGTradingSystemAddInfo
    {
    }

    public interface CQGTradingSystemBaseBarParameter : ICQGTradingSystemBaseBarParameter
    {
    }

    public interface CQGTradingSystemBaseBarParameters : ICQGTradingSystemBaseBarParameters
    {
    }

    public interface CQGTradingSystemDefinition : ICQGTradingSystemDefinition
    {
    }

    public interface CQGTradingSystemDefinitions : ICQGTradingSystemDefinitions
    {
    }

    public interface CQGTradingSystemInsertInfo : ICQGTradingSystemInsertInfo
    {
    }

    public interface CQGTradingSystemRelationAddInfo : ICQGTradingSystemRelationAddInfo
    {
    }

    public interface CQGTradingSystemRemoveInfo : ICQGTradingSystemRemoveInfo
    {
    }

    public interface CQGTradingSystemRequest : ICQGTradingSystemRequest
    {
    }

    public interface CQGTradingSystems : ICQGTradingSystems
    {
    }

    public interface CQGTradingSystemStatistics : ICQGTradingSystemStatistics
    {
    }

    public interface CQGTradingSystemStatisticsChangeInfo : ICQGTradingSystemStatisticsChangeInfo
    {
    }

    public interface CQGTradingSystemStatisticsCollection : ICQGTradingSystemStatisticsCollection
    {
    }

    public interface CQGTradingSystemTrade : ICQGTradingSystemTrade
    {
    }

    public interface CQGTradingSystemTradeDefinition : ICQGTradingSystemTradeDefinition
    {
    }

    public interface CQGTradingSystemTradeDefinitions : ICQGTradingSystemTradeDefinitions
    {
    }

    public interface CQGTradingSystemTradesRow : ICQGTradingSystemTradesRow
    {
    }

    public interface CQGTradingSystemTradesRows : ICQGTradingSystemTradesRows
    {
    }

    public interface CQGTradingSystemUpdateInfo : ICQGTradingSystemUpdateInfo
    {
    }

    public interface CQGTransaction : ICQGTransaction
    {
    }

    public interface CQGTransactions : ICQGTransactions
    {
    }

    public interface CQGYield : ICQGYield
    {
    }

    public interface CQGYields : ICQGYields
    {
    }

    public interface CQGYieldsCollection : ICQGYieldsCollection
    {
    }

    public interface CQGYieldsRequest : ICQGYieldsRequest
    {
    }

    public interface ICQGAccount
    {
        #region Properties

        eAccountMarginDetailing AccountMarginDetailing
        {
            get;
            set;
        }

        CQGStringCollection AuthorizedTraders
        {
            get;
        }

        bool AutoSubscribeInstruments
        {
            get;
            set;
        }

        CQGCEL CEL
        {
            get;
        }

        CQGAccountSummaries CurrencySummaries
        {
            get;
        }

        DateTime DateOfLastStatement
        {
            get;
        }

        string FcmAccountID
        {
            get;
        }

        eFcmClass FcmClass
        {
            get;
        }

        int FcmID
        {
            get;
        }

        string FcmName
        {
            get;
        }

        int GWAccountID
        {
            get;
        }

        string GWAccountName
        {
            get;
        }

        CQGOrders InternalOrders
        {
            get;
        }

        CQGOrders Orders
        {
            get;
        }

        CQGPositions Positions
        {
            get;
        }

        ePositionSubscriptionLevel PositionSubcriptionLevel
        {
            get;
            set;
        }

        string ReportingCurrency
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        CQGAccountSummary Summary
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        double TotalMarginValue
        {
            get;
        }

        double TotalPurchasingPower
        {
            get;
        }

        #endregion

    }

    public interface ICQGAccounts : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGAccount this[int gw_account_id]
        {
            get;
        }

        CQGAccount this[string fcm_account_id, int fcm_id]
        {
            get;
        }

        #endregion

        #region Methods

        void Add(CQGAccount cqg_account);

        CQGAccount get_ItemByFCM(string fcm_account_id, int fcm_id);

        CQGAccount get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGAccountSummaries : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGAccountSummary this[object index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGAccountSummary
    {
        #region Properties

        CQGAccount Account
        {
            get;
        }

        string CurrencyName
        {
            get;
        }

        bool ManualFillsInvolved
        {
            get;
        }

        #endregion

        #region Methods

        double Balance(int day_ = 0);

        double CashExcess(int day_ = 1);

        double Collaterals(int day_ = 1);

        double InitialMargin(int day_ = 1);

        double MaintenanceMargin(int day_ = 1);

        double MVO(int day_ = 0);

        double NLV(int day_ = 0);

        double OTE(int day_ = 0);

        double ProfitLoss(int day_ = 1);

        double UPL(int day_ = 0);

        #endregion

    }

    public interface ICQGAdvancedStudies : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGAdvancedStudy this[int index_]
        {
            get;
        }

        CQGAdvancedStudy this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGAdvancedStudy get_ItemById(string id_);

        #endregion

    }

    public interface ICQGAdvancedStudy : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGCurveHeaders CurveHeaders
        {
            get;
        }

        CQGAdvancedStudyDefinition Definition
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGCurves this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGAdvancedStudyRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        int IndexForDate(DateTime date_);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGAdvancedStudyDefinition
    {
        #region Properties

        string Abbreviation
        {
            get;
        }

        CQGCurveDefinitions CurveDefinitions
        {
            get;
        }

        string Name
        {
            get;
        }

        CQGParameterDefinitions ParameterDefinitions
        {
            get;
        }

        #endregion

    }

    public interface ICQGAdvancedStudyDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGAdvancedStudyDefinition this[int index_]
        {
            get;
        }

        CQGAdvancedStudyDefinition this[string advanced_study_abbreviation]
        {
            get;
        }

        #endregion

        #region Methods

        CQGAdvancedStudyDefinition get_ItemByAbbreviation(string advanced_study_abbreviation);

        CQGAdvancedStudyDefinition get_ItemByName(string advanced_study_name);

        #endregion

    }

    public interface ICQGAdvancedStudyRequest
    {
        #region Properties

        string BaseExpression
        {
            get;
            set;
        }

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        CQGAdvancedStudyDefinition Definition
        {
            get;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        eHistoricalPeriod HistoricalPeriod
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        int IntradayPeriod
        {
            get;
            set;
        }

        object this[object key_]
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Parameter(object key_);

        void IncludeCurve(object curve_key);

        bool IsCurveIncluded(object curve_key);

        void set_Parameter(object key_, object pVal);

        #endregion

    }

    public interface ICQGAlgorithmicOrderDefinition
    {
        #region Properties

        object DefaultValue
        {
            get;
            set;
        }

        int DefaultValueIndex
        {
            get;
            set;
        }

        string Name
        {
            get;
            set;
        }

        eAlgorithmicOrderPropertyType Type
        {
            get;
            set;
        }

        string Unit
        {
            get;
            set;
        }

        CQGStringCollection Values
        {
            get;
        }

        #endregion

        #region Methods

        void AddValue(string value_);

        #endregion

    }

    public interface ICQGAlgorithmicOrderDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGAlgorithmicOrderDefinition this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        void Add(CQGAlgorithmicOrderDefinition definition_);

        CQGAlgorithmicOrderDefinition CreateDefinition();

        #endregion

    }

    public interface ICQGAlgorithmicOrderParameters
    {
        #region Properties

        eOrderDuration DurationType
        {
            get;
        }

        eOrderExecutionInstruction ExecutionInstructions
        {
            get;
        }

        string ExecutionPattern
        {
            get;
        }

        DateTime GTD
        {
            get;
        }

        int GWAccountID
        {
            get;
        }

        string InstrumentName
        {
            get;
        }

        bool Parked
        {
            get;
        }

        eOrderTrailingPeg PreferredTrailingPeg
        {
            get;
        }

        double Price
        {
            get;
        }

        int Quantity
        {
            get;
        }

        eOrderSide Side
        {
            get;
        }

        double StopLimitPrice
        {
            get;
        }

        double TrailingOffset
        {
            get;
        }

        int TriggerQuantity
        {
            get;
        }

        eOrderType Type
        {
            get;
        }

        int VisibleQuantity
        {
            get;
        }

        #endregion

    }

    public interface ICQGAlgorithmicOrderProperties : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGAlgorithmicOrderProperty this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGAlgorithmicOrderProperty
    {
        #region Properties

        string Name
        {
            get;
        }

        object Value
        {
            get;
        }

        #endregion

    }

    public interface ICQGAPIConfig
    {
        #region Properties

        int AccountMarginAndPositionsThrottleInterval
        {
            get;
            set;
        }

        int AgeToDeleteLogFileDays
        {
            get;
            set;
        }

        bool ApplyDaylightSavingChanges
        {
            get;
            set;
        }

        bool CollectionsThrowException
        {
            get;
            set;
        }

        eAccountMarginDetailing DefaultAccountMarginDetailing
        {
            get;
            set;
        }

        eDOMandBBAType DefaultInstrumentBBAType
        {
            get;
            set;
        }

        eDataSubscriptionLevel DefaultInstrumentSubscriptionLevel
        {
            get;
            set;
        }

        ePositionSubscriptionLevel DefPositionSubscriptionLevel
        {
            get;
            set;
        }

        eDOMUpdatesMode DOMUpdatesMode
        {
            get;
            set;
        }

        int DOMUpdatesPeriod
        {
            get;
            set;
        }

        bool FireEventOnChangedPrices
        {
            get;
            set;
        }

        bool GatewayEnabled
        {
            get;
            set;
        }

        bool IncludeOrderTransactions
        {
            get;
            set;
        }

        eLogSeverity LogSeverity
        {
            get;
            set;
        }

        int MaxLogFileCount
        {
            get;
            set;
        }

        DateTime MaxLogFileDuration
        {
            get;
            set;
        }

        int MaxLogFileSize
        {
            get;
            set;
        }

        int MessageProcessingTimeout
        {
            get;
            set;
        }

        bool MetaDataEnabled
        {
            get;
            set;
        }

        bool NewInstrumentChangeMode
        {
            get;
            set;
        }

        bool NewInstrumentMode
        {
            get;
            set;
        }

        bool NonsynchronizedData
        {
            get;
            set;
        }

        bool PendingOrderActionEnabled
        {
            get;
            set;
        }

        ePositionDetailing PositionDetailing
        {
            get;
            set;
        }

        ePriceMode PriceMode
        {
            get;
            set;
        }

        string ProviderPassword
        {
            get;
            set;
        }

        bool QueryAllAuthorizedTraders
        {
            get;
            set;
        }

        eReadyStatusCheck ReadyStatusCheck
        {
            get;
            set;
        }

        string RemoteOpenAPILoginService
        {
            get;
            set;
        }

        string RemoteOpenAPIServer
        {
            get;
            set;
        }

        CQGStringCollection RemoteOpenAPIServers
        {
            get;
        }

        bool ReplaceLoginSession
        {
            get;
            set;
        }

        int SnapshotPeriod
        {
            get;
            set;
        }

        bool StrategyManagerEnabled
        {
            get;
            set;
        }

        eTimeZone TimeZoneCode
        {
            get;
            set;
        }

        bool UsedFromATLClient
        {
            get;
            set;
        }

        bool UseOrderSide
        {
            get;
            set;
        }

        #endregion

        #region Methods

        void AddRemoteOpenAPIServer(string server_address);

        void ClearRemoteOpenAPIServers();

        #endregion

    }

    public interface ICQGBarsTimestamps : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        string Id
        {
            get;
        }

        DateTime this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGCEL
    {
        #region Properties

        CQGAccounts Accounts
        {
            get;
        }

        eAccountSubscriptionLevel AccountSubscriptionLevel
        {
            get;
            set;
        }

        CQGAdvancedStudies AllAdvancedStudies
        {
            get;
        }

        CQGConditions AllConditions
        {
            get;
        }

        CQGConstantVolumeBarsCollection AllConstantVolumeBars
        {
            get;
        }

        CQGCustomStudies AllCustomStudies
        {
            get;
        }

        CQGExpressions AllExpressions
        {
            get;
        }

        CQGInstrumentsGroups AllInstrumentsGroups
        {
            get;
        }

        CQGManualFillsCollection AllManualFills
        {
            get;
        }

        CQGPointAndFigureBarsCollection AllPointAndFigureBars
        {
            get;
        }

        CQGStrategyDefinitions AllStrategyDefinitions
        {
            get;
        }

        CQGSubMinuteBarsCollection AllSubMinuteBars
        {
            get;
        }

        CQGTFlowBarsCollection AllTFlowBars
        {
            get;
        }

        CQGTicksCollection AllTicks
        {
            get;
        }

        CQGTimedBarsCollection AllTimedBars
        {
            get;
        }

        CQGTradingSystems AllTradingSystems
        {
            get;
        }

        CQGYieldsCollection AllYields
        {
            get;
        }

        CQGAPIConfig APIConfiguration
        {
            get;
        }

        CQGCELConfiguration Configuration
        {
            get;
            set;
        }

        CQGCurrencyRates CurrencyRates
        {
            get;
        }

        CQGDirectEventsAccessor DirectEventsAccessor
        {
            get;
        }

        CQGEnvironment Environment
        {
            get;
        }

        CQGInstruments Instruments
        {
            get;
        }

        CQGOrders InternalOrders
        {
            get;
        }

        bool IsStarted
        {
            get;
        }

        CQGLogger Logger
        {
            get;
        }

        CQGOrders Orders
        {
            get;
        }

        bool OTPRequired
        {
            get;
        }

        #endregion

        #region Methods

        void ActivateAllOrders(CQGAccount cqg_account = null, CQGInstrument cqg_instrument = null, bool from_all_traders = false, eOrderSide order_side = eOrderSide.osdUndefined);

        void ActivateAllOrdersEx(CQGOrderActionRequest cqg_order_action_request);

        void CancelAllOrders(CQGAccount cqg_account = null, CQGInstrument cqg_instrument = null, bool from_all_traders = false, bool parked_ = false, eOrderSide order_side = eOrderSide.osdUndefined);

        void CancelAllOrdersEx(CQGOrderActionRequest cqg_order_action_request);

        void ChangePassword(string username_, string old_password, string new_password);

        void ChangeRemoteOpenAPIServer(string server_address);

        CQGAccounts CreateAccountsCollection();

        CQGAdvancedStudyRequest CreateAdvancedStudyRequest(string name_or_abbr);

        CQGAlgorithmicOrderDefinitions CreateAlgorithmicOrderDefinitions();

        CQGConditionRequest CreateConditionRequest(string condition_name);

        CQGConstantVolumeBarsRequest CreateConstantVolumeBarsRequest();

        CQGCustomStudyRequest CreateCustomStudyRequest(string name_or_abbr);

        CQGExecutionPattern CreateExecutionPattern(CQGStrategyDefinition cqg_definition = null, eOrderType order_type = eOrderType.otUndefined);

        CQGExpressionRequest CreateExpressionRequest();

        CQGHistoricalSessionsRequest CreateHistoricalSessionsRequest();

        CQGInstrumentSubscriptionRequest CreateInstrumentRequest();

        CQGInstrumentsGroupRequest CreateInstrumentsGroupRequest();

        CQGManualFillRequest CreateManualFillRequest(eManualFillUpdateType update_type, CQGManualFill manual_fill = null);

        CQGOrder CreateOrder(eOrderType order_type, CQGInstrument cqg_instrument, CQGAccount cqg_account, int order_quantity, eOrderSide order_side = eOrderSide.osdUndefined, double limit_price = 0, double stop_price = 0, string ue_name_part = "");

        CQGOrderActionRequest CreateOrderActionRequest();

        CQGOrder CreateOrderByInstrumentName(eOrderType order_type, string instrument_name, CQGAccount cqg_account, int order_quantity, eOrderSide order_side = eOrderSide.osdUndefined, double limit_price = 0, double stop_price = 0, string ue_name_part = "");

        CQGOrderChain CreateOrderChain();

        CQGPointAndFigureBarsRequest CreatePointAndFigureBarsRequest();

        CQGOrder CreateStrategyOrder(eOrderType order_type, CQGStrategyDefinition cqg_definition, CQGAccount cqg_account, CQGAccounts cqg_accounts, int order_quantity, eOrderSide order_side = eOrderSide.osdUndefined, double limit_price = -2147483647, double stop_price = -2147483647, string ue_name_part = "");

        CQGOrder CreateStrategyOrderByExpression(eOrderType order_type, string expression_string, CQGAccount cqg_account, CQGAccounts cqg_accounts, int order_quantity, eOrderSide order_side = eOrderSide.osdUndefined, double limit_price = -2147483647, double stop_price = -2147483647, string ue_name_part = "");

        CQGSubMinuteBarsRequest CreateSubMinuteBarsRequest();

        CQGTFlowBarsRequest CreateTFlowBarsRequest();

        CQGTicksRequest CreateTicksRequest();

        CQGTimedBarsRequest CreateTimedBarsRequest();

        CQGTradingSystemRequest CreateTradingSystemRequest(string name_or_abbr);

        CQGYieldsRequest CreateYieldsRequest();

        CQGStrategyDefinition DefineStrategy(string request_string_);

        void GWLogoff();

        void GWLogon(string username_, string password_);

        void GWOTPLogon(string username_, string password_, string otpassword_);

        bool IsValid(object value_or_object);

        void LogOn(string username_, string password_);

        void ModifyCompoundOrder(int compound_order_id, string compound_order_guid, CQGOrderChain order_chain);

        void NewInstrument(string symbol_);

        void PlaceCompoundOrder(CQGOrderChain order_chain);

        CQGOrdersQuery QueryOrders(CQGAccount cqg_account, CQGInstrument cqg_instrument = null, eOrderStatusFilter status_filter = eOrderStatusFilter.osfAll, DateTime date_ = default(DateTime), eOrderSide order_side = eOrderSide.osdUndefined);

        void QueryPositionsStatement(int gw_account_id, DateTime date_);

        void QuerySummariesStatement(int gw_account_id, DateTime date_);

        void RegisterAlgorithmicOrder(string guid_, string name_, string abbrv_, string description_, CQGAlgorithmicOrderDefinitions definitions_, int icon_index = 0);

        void RemoveAdvancedStudy(CQGAdvancedStudy cqg_advanced_study);

        void RemoveAllAdvancedStudies();

        void RemoveAllConditions();

        void RemoveAllConstantVolumeBars();

        void RemoveAllCustomStudies();

        void RemoveAllExpressions();

        void RemoveAllInstruments();

        void RemoveAllPointAndFigureBars();

        void RemoveAllSubMinuteBars();

        void RemoveAllTFlowBars();

        void RemoveAllTicks();

        void RemoveAllTimedBars();

        void RemoveAllTradingSystems();

        void RemoveAllYields();

        void RemoveCondition(CQGCondition cqg_condition);

        void RemoveConstantVolumeBars(CQGConstantVolumeBars cqg_constant_volume_bars);

        void RemoveCustomStudy(CQGCustomStudy cqg_custom_study);

        void RemoveExpression(CQGExpression cqg_expression);

        void RemoveInstrument(CQGInstrument cqg_instrument);

        void RemoveInstrumentsGroup(CQGInstrumentsGroup instruments_group);

        void RemovePointAndFigureBars(CQGPointAndFigureBars cqg_point_and_figure_bars);

        void RemoveSubMinuteBars(CQGSubMinuteBars cqg_subminute_bars);

        void RemoveTFlowBars(CQGTFlowBars cqg_tflow_bars);

        void RemoveTicks(CQGTicks cqg_ticks);

        void RemoveTimedBars(CQGTimedBars cqg_timed_bars);

        void RemoveTradingSystem(CQGTradingSystem cqg_trading_system);

        void RemoveYields(CQGYields cqg_yields);

        CQGAdvancedStudy RequestAdvancedStudy(CQGAdvancedStudyRequest cqg_advanced_study_request);

        void RequestAdvancedStudyDefinitions();

        CQGBarsTimestamps RequestBarsTimestamps(CQGTimedBarsRequest cqg_timestamps_request);

        void RequestCommodityInstruments(string commodity_name, eInstrumentType instrument_types, bool tradable_only = false);

        CQGCondition RequestCondition(CQGConditionRequest cqg_condition_request);

        void RequestConditionDefinitions();

        CQGConstantVolumeBars RequestConstantVolumeBars(CQGConstantVolumeBarsRequest cqg_constant_volume_bars_request);

        void RequestCustomSessions();

        CQGCustomStudy RequestCustomStudy(CQGCustomStudyRequest cqg_custom_study_request);

        void RequestCustomStudyDefinitions();

        void RequestDataSources();

        void RequestDataSourceSymbols(string data_source_abbreviation);

        CQGExpression RequestExpression(CQGExpressionRequest cqg_expression_request);

        void RequestHistoricalSessions(CQGHistoricalSessionsRequest cqg_historical_sessions_request);

        void RequestInstrumentsGroup(CQGInstrumentsGroupRequest group_request, bool trace_group_changes);

        void RequestManualFills(int gw_account_id, eManualFillsDataLevel update_level);

        void RequestManualFillUpdate(CQGManualFillRequest cqg_manual_fill_request);

        CQGPointAndFigureBars RequestPointAndFigureBars(CQGPointAndFigureBarsRequest cqg_point_and_figure_bars_request);

        void RequestQFormulaDefinitions();

        CQGSubMinuteBars RequestSubMinuteBars(CQGSubMinuteBarsRequest cqg_subminute_bars_request);

        CQGTFlowBars RequestTFlowBars(CQGTFlowBarsRequest cqg_tflow_bars_request);

        CQGTicks RequestTicks(CQGTicksRequest cqg_ticks_request);

        CQGTimedBars RequestTimedBars(CQGTimedBarsRequest cqg_timed_bars_request);

        void RequestTradableCommodities(int gw_account_id = 0);

        void RequestTradableExchanges(int gw_account_id = 0);

        CQGTradingSystem RequestTradingSystem(CQGTradingSystemRequest cqg_trading_system_request);

        void RequestTradingSystemDefinitions();

        CQGYields RequestYields(CQGYieldsRequest cqg_yields_request);

        void Shutdown();

        void Startup();

        void SubscribeNewInstrument(CQGInstrumentSubscriptionRequest instrument_request);

        void TerminateCQGIC(bool start_again = false);

        void UnregisterAlgorithmicOrder(string guid_);

        #endregion

    }

    public interface ICQGChangedTradeEntries : IEnumerable
    {
        #region Properties

        eTradeChangeCategory ChangeFilter
        {
            get;
        }

        int Count
        {
            get;
        }

        CQGChangedTradeEntry this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGChangedTradeEntry
    {
        #region Properties

        eTradeChangeCategory ChangeCategory
        {
            get;
        }

        CQGTradeEntry TradeEntry
        {
            get;
        }

        #endregion

    }

    public interface ICQGChangedTradeExit
    {
        #region Properties

        eTradeChangeCategory ChangeCategory
        {
            get;
        }

        CQGTradeExit TradeExit
        {
            get;
        }

        #endregion

    }

    public interface ICQGChangedTradeExits : IEnumerable
    {
        #region Properties

        eTradeChangeCategory ChangeFilter
        {
            get;
        }

        int Count
        {
            get;
        }

        CQGChangedTradeExit this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGCommodities : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        int GWAccountID
        {
            get;
        }

        string this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGCommodityInstruments : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        bool IsTradableOnly
        {
            get;
        }

        string this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGCondition : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGConditionDefinition Definition
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGConditionResult this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGConditionRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        int IndexForDate(DateTime date_);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGConditionDefinition
    {
        #region Properties

        string Name
        {
            get;
        }

        CQGParameterDefinitions ParameterDefinitions
        {
            get;
        }

        #endregion

    }

    public interface ICQGConditionDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGConditionDefinition this[int index_]
        {
            get;
        }

        CQGConditionDefinition this[string condition_name]
        {
            get;
        }

        #endregion

        #region Methods

        CQGConditionDefinition get_ItemByName(string condition_name);

        #endregion

    }

    public interface ICQGConditionRequest
    {
        #region Properties

        string BaseExpression
        {
            get;
            set;
        }

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        CQGConditionDefinition Definition
        {
            get;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        eHistoricalPeriod HistoricalPeriod
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        int IntradayPeriod
        {
            get;
            set;
        }

        object this[object key_]
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Parameter(object key_);

        void set_Parameter(object key_, object pVal);

        #endregion

    }

    public interface ICQGConditionResult
    {
        #region Properties

        DateTime Timestamp
        {
            get;
        }

        bool Value
        {
            get;
        }

        #endregion

    }

    public interface ICQGConditions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGCondition this[int index_]
        {
            get;
        }

        CQGCondition this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGCondition get_ItemById(string id_);

        #endregion

    }

    public interface ICQGConstantVolumeBar
    {
        #region Properties

        int ActualVolume
        {
            get;
        }

        int AskVolume
        {
            get;
        }

        double Avg
        {
            get;
        }

        int BidVolume
        {
            get;
        }

        double Close
        {
            get;
        }

        double High
        {
            get;
        }

        double HLC3
        {
            get;
        }

        double Low
        {
            get;
        }

        double Mid
        {
            get;
        }

        double Open
        {
            get;
        }

        double Range
        {
            get;
        }

        int TickVolume
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        double TrueHigh
        {
            get;
        }

        double TrueLow
        {
            get;
        }

        double TrueRange
        {
            get;
        }

        #endregion

    }

    public interface ICQGConstantVolumeBars : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGConstantVolumeBar this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGConstantVolumeBarsRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGConstantVolumeBarsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGConstantVolumeBars this[int index_]
        {
            get;
        }

        CQGConstantVolumeBars this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGConstantVolumeBars get_ItemById(string id_);

        #endregion

    }

    public interface ICQGConstantVolumeBarsRequest
    {
        #region Properties

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        bool IncludeFlatTicks
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        int VolumeLevel
        {
            get;
            set;
        }

        eCvbVolumeType VolumeType
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGCurrencyRate
    {
        #region Properties

        string BaseCurrencyName
        {
            get;
        }

        CQGCEL CEL
        {
            get;
        }

        string CurrencyName
        {
            get;
        }

        int FcmID
        {
            get;
        }

        double Rate
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        #endregion

    }

    public interface ICQGCurrencyRates : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGCurrencyRate this[int fcm_id, string currency_, string base_currency = ""]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGCurveDefinition
    {
        #region Properties

        string Name
        {
            get;
        }

        #endregion

    }

    public interface ICQGCurveDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGCurveDefinition this[int index_]
        {
            get;
        }

        CQGCurveDefinition this[string curve_name]
        {
            get;
        }

        #endregion

        #region Methods

        CQGCurveDefinition get_ItemByName(string curve_name);

        #endregion

    }

    public interface ICQGCurveHeaders : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        string this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGCurves : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        double this[object key_]
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGCustomStudies : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGCustomStudy this[int index_]
        {
            get;
        }

        CQGCustomStudy this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGCustomStudy get_ItemById(string id_);

        #endregion

    }

    public interface ICQGCustomStudy : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGCurveHeaders CurveHeaders
        {
            get;
        }

        CQGCustomStudyDefinition Definition
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGCurves this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGCustomStudyRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        int IndexForDate(DateTime date_);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGCustomStudyDefinition
    {
        #region Properties

        string Abbreviation
        {
            get;
        }

        CQGCurveDefinitions CurveDefinitions
        {
            get;
        }

        string Name
        {
            get;
        }

        CQGParameterDefinitions ParameterDefinitions
        {
            get;
        }

        #endregion

    }

    public interface ICQGCustomStudyDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGCustomStudyDefinition this[int index_]
        {
            get;
        }

        CQGCustomStudyDefinition this[string custom_study_abbreviation]
        {
            get;
        }

        #endregion

        #region Methods

        CQGCustomStudyDefinition get_ItemByAbbreviation(string custom_study_abbreviation);

        CQGCustomStudyDefinition get_ItemByName(string custom_study_name);

        #endregion

    }

    public interface ICQGCustomStudyRequest
    {
        #region Properties

        string BaseExpression
        {
            get;
            set;
        }

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        CQGCustomStudyDefinition Definition
        {
            get;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        eHistoricalPeriod HistoricalPeriod
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        int IntradayPeriod
        {
            get;
            set;
        }

        object this[object key_]
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Parameter(object key_);

        void IncludeCurve(object curve_key);

        bool IsCurveIncluded(object curve_key);

        void set_Parameter(object key_, object pVal);

        #endregion

    }

    public interface ICQGDataSource
    {
        #region Properties

        string Abbreviation
        {
            get;
        }

        string Name
        {
            get;
        }

        eDataSourceStatus Status
        {
            get;
        }

        eSymbolType SymbolTypes
        {
            get;
        }

        #endregion

    }

    public interface ICQGDataSources : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGDataSource this[int index_]
        {
            get;
        }

        CQGDataSource this[string data_source_abbreviation]
        {
            get;
        }

        #endregion

        #region Methods

        CQGDataSource get_ItemByAbbreviation(string data_source_abbreviation);

        #endregion

    }

    public interface ICQGDataSourceSymbol
    {
        #region Properties

        string Abbreviation
        {
            get;
        }

        string Description
        {
            get;
        }

        eSymbolType Type
        {
            get;
        }

        #endregion

    }

    public interface ICQGDataSourceSymbols : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        string DataSourceAbbreviation
        {
            get;
        }

        CQGDataSourceSymbol this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGDirectEventsAccessor
    {
    }

    public interface ICQGDOMQuotes : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGQuote this[int index_]
        {
            get;
        }

        CQGQuote this[double price_, bool round_to_better = true]
        {
            get;
        }

        #endregion

        #region Methods

        CQGQuote get_ItemByPrice(double price_, bool round_to_better = true);

        #endregion

    }

    public interface ICQGEnvironment
    {
        #region Properties

        CQGCEL CEL
        {
            get;
        }

        string CELVersion
        {
            get;
        }

        int CQGSerialNumber
        {
            get;
        }

        string CQGVersion
        {
            get;
        }

        eConnectionStatus DataConnectionStatus
        {
            get;
        }

        eConnectionStatus GWConnectionStatus
        {
            get;
        }

        string GWLogonName
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        DateTime LineTime
        {
            get;
        }

        DateTime LocalTime
        {
            get;
        }

        int MessagesPending
        {
            get;
        }

        int OrdersPending
        {
            get;
        }

        CQGRemoteOpenAPISession RemoteOpenAPISession
        {
            get;
        }

        #endregion

    }

    public interface ICQGError
    {
        #region Properties

        int Code
        {
            get;
        }

        string Description
        {
            get;
        }

        object Owner
        {
            get;
        }

        #endregion

    }

    public interface ICQGExchanges : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        int GWAccountID
        {
            get;
        }

        string this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGExecutionPattern
    {
        #region Properties

        CQGExecutionPatternParameters Parameters
        {
            get;
        }

        string PatternString
        {
            get;
        }

        #endregion

    }

    public interface ICQGExecutionPatternParameter
    {
        #region Properties

        string Name
        {
            get;
        }

        CQGExecutionPatternParameters Parameters
        {
            get;
        }

        eExecutionPatternParameterType Type
        {
            get;
        }

        string Value
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGExecutionPatternParameters : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGExecutionPatternParameter this[object index_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGExecutionPatternParameter Add(string name_, eExecutionPatternParameterType type_, string value_ = "");

        void Remove(object index_);

        #endregion

    }

    public interface ICQGExpression : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGExpressionOutputs this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGExpressionOutputHeaders OutputHeaders
        {
            get;
        }

        CQGExpressionRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        int IndexForDate(DateTime date_);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGExpressionOutputHeaders : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        string this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGExpressionOutputs : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        double this[object key_]
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGExpressionRequest
    {
        #region Properties

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        eHistoricalPeriod HistoricalPeriod
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        int IntradayPeriod
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        string this[int index_]
        {
            get;
        }

        int SubExpressionCount
        {
            get;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

        #region Methods

        void AddSubExpression(string sub_expression, string alias_ = "");

        string get_SubExpression(int index_);

        string get_SubExpressionAlias(int index_);

        #endregion

    }

    public interface ICQGExpressions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGExpression this[int index_]
        {
            get;
        }

        CQGExpression this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGExpression get_ItemById(string id_);

        #endregion

    }

    public interface ICQGFill
    {
        #region Properties

        int this[int leg_]
        {
            get;
        }

        string Id
        {
            get;
        }

        int LegCount
        {
            get;
        }

        CQGOrder Order
        {
            get;
        }

        string RefFillId
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        eFillStatus Status
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        #endregion

        #region Methods

        bool get_Aggressive(int leg_ = 0);

        string get_Currency(int leg_ = 0);

        string get_DisplayPrice(int leg_ = 0);

        DateTime get_ExchangeTradeDate(int leg_ = 0);

        string get_GWTradeId(int leg_ = 0);

        CQGGWTrades get_GWTrades(int leg_ = 0);

        int get_GWTradesCount(int leg_);

        string get_InstrumentName(int leg_ = 0);

        double get_Price(int leg_ = 0);

        int get_Quantity(int leg_ = 0);

        eOrderSide get_Side(int leg_ = 0);

        DateTime get_StatementDate(int leg_ = 0);

        #endregion

    }

    public interface ICQGFills : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGFill this[string fill_id]
        {
            get;
        }

        CQGFill this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGFill get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGGWTrade
    {
        #region Properties

        bool Aggressive
        {
            get;
        }

        string Currency
        {
            get;
        }

        string DisplayPrice
        {
            get;
        }

        DateTime ExchangeTradeDate
        {
            get;
        }

        CQGFill Fill
        {
            get;
        }

        string Id
        {
            get;
        }

        string InstrumentName
        {
            get;
        }

        int Leg
        {
            get;
        }

        double Price
        {
            get;
        }

        int Quantity
        {
            get;
        }

        eOrderSide Side
        {
            get;
        }

        DateTime StatementDate
        {
            get;
        }

        #endregion

    }

    public interface ICQGGWTrades : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGGWTrade this[string trade_gw_id]
        {
            get;
        }

        CQGGWTrade this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGGWTrade get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGHistoricalSessionsRequest
    {
        #region Properties

        DateTime RangeEnd
        {
            get;
            set;
        }

        DateTime RangeStart
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        eHistoricalSessionsRequestType Type
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGHoliday
    {
        #region Properties

        DateTime HolidayDate
        {
            get;
        }

        bool IsDaily
        {
            get;
        }

        eSessionWeekDays SessionMask
        {
            get;
        }

        #endregion

    }

    public interface ICQGHolidays : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGHoliday this[int index_]
        {
            get;
        }

        CQGSessions Sessions
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGInstrument
    {
        #region Properties

        CQGQuote Ask
        {
            get;
        }

        eDOMandBBAType BBAType
        {
            get;
            set;
        }

        CQGQuote Bid
        {
            get;
        }

        CQGCEL CEL
        {
            get;
        }

        string Commodity
        {
            get;
        }

        string Country
        {
            get;
        }

        string Currency
        {
            get;
        }

        eDataSubscriptionLevel DataSubscriptionLevel
        {
            get;
            set;
        }

        string Description
        {
            get;
        }

        CQGDOMQuotes DOMAsks
        {
            get;
        }

        CQGDOMQuotes DOMBids
        {
            get;
        }

        int DOMBookLimit
        {
            get;
            set;
        }

        bool DOMStatus
        {
            get;
            set;
        }

        int DTE
        {
            get;
        }

        string ExchangeAbbreviation
        {
            get;
        }

        int ExchangeID
        {
            get;
        }

        DateTime ExpirationDate
        {
            get;
        }

        string FullName
        {
            get;
        }

        double InitialMargin
        {
            get;
        }

        int InstrumentID
        {
            get;
        }

        eInstrumentType InstrumentType
        {
            get;
        }

        bool IsDownTick
        {
            get;
        }

        bool IsFastMarket
        {
            get;
        }

        bool IsUpTick
        {
            get;
        }

        double MaintenanceMargin
        {
            get;
        }

        int Month
        {
            get;
        }

        string MonthChar
        {
            get;
        }

        double NetChange
        {
            get;
        }

        string PreferredSessionsName
        {
            get;
        }

        CQGInstrumentProperties Properties
        {
            get;
        }

        ePropertySubscriptionLevel PropertyLevel
        {
            get;
        }

        eQuoteSubscriptionLevel QuoteLevel
        {
            get;
        }

        CQGQuotes Quotes
        {
            get;
        }

        short Scale
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        int SessionMask
        {
            get;
        }

        int SessionNumber
        {
            get;
        }

        CQGSessions Sessions
        {
            get;
        }

        int Strike
        {
            get;
        }

        object this[string tagName]
        {
            get;
            set;
        }

        double TickSize
        {
            get;
        }

        int TickSizeFractionDenominator
        {
            get;
        }

        int TickSizeFractionNumerator
        {
            get;
        }

        double TickValue
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        double TodayCTotalVolume
        {
            get;
        }

        CQGQuote Trade
        {
            get;
        }

        CQGInstrument UnderlyingInstrument
        {
            get;
        }

        string UnderlyingInstrumentName
        {
            get;
        }

        double YCOI
        {
            get;
        }

        int Year
        {
            get;
        }

        string YearString
        {
            get;
        }

        double YesterdayCTotalVolume
        {
            get;
        }

        #endregion

        #region Methods

        double FromDisplayPrice(string display_price);

        object get_Tag(string tagName);

        double GetNearestTradeablePrice(double price_);

        double GetTickSizeFor(double Price);

        double GetTickValueFor(double Price);

        void set_Tag(string tagName, object pVal);

        string ToDisplayPrice(double correct_price);

        #endregion

    }

    public interface ICQGInstrumentProperties : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGInstrumentProperty this[eInstrumentProperty instrument_property]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGInstrumentProperty
    {
        #region Properties

        CQGInstrument Instrument
        {
            get;
        }

        string Name
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        eInstrumentProperty Type
        {
            get;
        }

        object Value
        {
            get;
        }

        #endregion

    }

    public interface ICQGInstruments : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGInstrument this[object index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGInstrumentsGroup
    {
        #region Properties

        string Id
        {
            get;
        }

        CQGInstruments Instruments
        {
            get;
        }

        CQGInstrumentsGroupRequest Request
        {
            get;
        }

        #endregion

    }

    public interface ICQGInstrumentsGroupRequest
    {
        #region Properties

        string Commodity
        {
            get;
            set;
        }

        eInstrumentType InstrumentTypes
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        eGroupSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGInstrumentsGroups : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGInstrumentsGroup this[object index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGInstrumentSubscriptionRequest
    {
        #region Properties

        eDOMandBBAType DOMBBAType
        {
            get;
            set;
        }

        bool DOMStatus
        {
            get;
            set;
        }

        ePropertySubscriptionLevel PropertyLevel
        {
            get;
            set;
        }

        eQuoteSubscriptionLevel QuoteLevel
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGIntegerCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        int this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGLogger
    {
        #region Properties

        CQGCEL CEL
        {
            get;
        }

        #endregion

        #region Methods

        void Log(string content_, eLogSeverity severity_ = eLogSeverity.lsInfo);

        #endregion

    }

    public interface ICQGManualFill
    {
        #region Properties

        string DisplayPrice
        {
            get;
        }

        int GWAccountID
        {
            get;
        }

        string InstrumentName
        {
            get;
        }

        string Note
        {
            get;
        }

        double Price
        {
            get;
        }

        int Quantity
        {
            get;
        }

        eOrderSide Side
        {
            get;
        }

        DateTime StatementDate
        {
            get;
        }

        int TradeId
        {
            get;
        }

        DateTime TradeTimestamp
        {
            get;
        }

        #endregion

    }

    public interface ICQGManualFillRequest
    {
        #region Properties

        int GWAccountID
        {
            get;
            set;
        }

        string InstrumentName
        {
            get;
            set;
        }

        string Note
        {
            get;
            set;
        }

        double Price
        {
            get;
            set;
        }

        int Quantity
        {
            get;
            set;
        }

        eOrderSide Side
        {
            get;
            set;
        }

        DateTime StatementDate
        {
            get;
            set;
        }

        int TradeId
        {
            get;
            set;
        }

        DateTime TradeTimestamp
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGManualFills : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        eManualFillsDataLevel DataLevel
        {
            get;
        }

        int GWAccountID
        {
            get;
        }

        CQGManualFill this[int trade_id]
        {
            get;
        }

        #endregion

        #region Methods

        CQGManualFill get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGManualFillsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGManualFills this[int account_id]
        {
            get;
        }

        #endregion

        #region Methods

        CQGManualFills get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGModifiedProperties : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGModifiedProperty this[eOrderProperty property_type]
        {
            get;
        }

        CQGModifiedProperty this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGModifiedProperty get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGModifiedProperty
    {
        #region Properties

        string Description
        {
            get;
        }

        string Name
        {
            get;
        }

        object NewValue
        {
            get;
        }

        object PreviousValue
        {
            get;
        }

        eOrderProperty Type
        {
            get;
        }

        #endregion

    }

    public interface ICQGOrder
    {
        #region Properties

        CQGAccount Account
        {
            get;
            set;
        }

        uint AlgorithmID
        {
            get;
            set;
        }

        string AlgorithmStringID
        {
            get;
            set;
        }

        bool CanBeCanceled
        {
            get;
        }

        bool CanBeModified
        {
            get;
        }

        bool CanBeReplaced
        {
            get;
        }

        eOrderCancelationType CancelationInstruction
        {
            get;
            set;
        }

        string Description
        {
            get;
            set;
        }

        eOrderDuration DurationType
        {
            get;
            set;
        }

        int FilledQuantity
        {
            get;
        }

        CQGFills Fills
        {
            get;
        }

        string GUID
        {
            get;
        }

        string GWOrderID
        {
            get;
        }

        eOrderStatus GWStatus
        {
            get;
        }

        CQGInstrument Instrument
        {
            get;
            set;
        }

        string InstrumentName
        {
            get;
        }

        bool IsExternal
        {
            get;
        }

        bool IsFinal
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        eOrderEvent LastEvent
        {
            get;
        }

        double LimitPrice
        {
            get;
            set;
        }

        bool OrderCheckMark
        {
            get;
            set;
        }

        string OriginalOrderID
        {
            get;
        }

        DateTime PlaceTime
        {
            get;
        }

        CQGOrderProperties Properties
        {
            get;
        }

        int Quantity
        {
            get;
            set;
        }

        int RemainingQuantity
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        eOrderSide Side
        {
            get;
            set;
        }

        eOrderLocalState State
        {
            get;
        }

        double StopPrice
        {
            get;
            set;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        DateTime TimeActiveAt
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        CQGTransactions Transactions
        {
            get;
        }

        eOrderType Type
        {
            get;
        }

        string UEName
        {
            get;
        }

        #endregion

        #region Methods

        void Activate();

        void Cancel();

        object get_Tag(string tag_name);

        void Modify(CQGOrderModify cqg_order_modify);

        void Place();

        CQGOrderModify PrepareModify();

        void SendCareOrderAck();

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGOrderActionRequest
    {
        #region Properties

        CQGAccount Account
        {
            get;
            set;
        }

        uint AlgorithmID
        {
            get;
            set;
        }

        string AlgorithmStringID
        {
            get;
            set;
        }

        bool FromAllTraders
        {
            get;
            set;
        }

        CQGInstrument Instrument
        {
            get;
            set;
        }

        eOrderSide OrderSide
        {
            get;
            set;
        }

        bool Parked
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGOrderChain
    {
        #region Properties

        uint AlgorithmID
        {
            get;
            set;
        }

        string AlgorithmStringID
        {
            get;
            set;
        }

        int GWAccountID
        {
            get;
        }

        #endregion

        #region Methods

        void AddOrder(CQGOrder cqg_order);

        #endregion

    }

    public interface ICQGOrderModify
    {
        #region Properties

        CQGOrderProperties Properties
        {
            get;
        }

        #endregion

    }

    public interface ICQGOrderProperties : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGOrderProperty this[eOrderProperty order_property]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGOrderProperty
    {
        #region Properties

        bool CanBeSet
        {
            get;
        }

        string Description
        {
            get;
        }

        string Name
        {
            get;
        }

        CQGOrder Order
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        eOrderProperty Type
        {
            get;
        }

        object Value
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGOrders : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGOrder this[string order_id]
        {
            get;
        }

        #endregion

        #region Methods

        void AddToLiveOrders();

        CQGOrder get_ItemByGuid(string order_guid);

        CQGOrders SelectByInstrumentName(string instrument_name);

        CQGOrders SelectByOrderStatus(eOrderStatus order_status);

        CQGOrders SelectByOrderType(eOrderType order_type);

        CQGOrders SelectByProperty(eOrderProperty property_type, object property_value);

        CQGOrders SelectBySide(eOrderSide order_side);

        CQGOrders SelectByTag(string tag_name, object tag_value = null);

        #endregion

    }

    public interface ICQGOrdersQuery
    {
        #region Properties

        CQGAccount Account
        {
            get;
        }

        CQGCEL CEL
        {
            get;
        }

        CQGError FinalError
        {
            get;
        }

        CQGOrders LastChunk
        {
            get;
        }

        CQGOrders Orders
        {
            get;
        }

        int QueryID
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        #endregion

        #region Methods

        void Cancel();

        #endregion

    }

    public interface ICQGOrderStatistics
    {
        #region Properties

        object this[string i_GUID]
        {
            get;
        }

        bool Switch
        {
            set;
        }

        #endregion

        #region Methods

        object get_StatisticsOnReceive(string i_GUID);

        object get_StatisticsOnSend(string i_GUID);

        #endregion

    }

    public interface ICQGParameterDefinition
    {
        #region Properties

        CQGStringCollection AvailableValues
        {
            get;
        }

        string Comment
        {
            get;
        }

        object DefaultValue
        {
            get;
        }

        string Name
        {
            get;
        }

        eUserFormulaParameterType Type
        {
            get;
        }

        #endregion

    }

    public interface ICQGParameterDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGParameterDefinition this[int index_]
        {
            get;
        }

        CQGParameterDefinition this[string parameter_name]
        {
            get;
        }

        #endregion

        #region Methods

        CQGParameterDefinition get_ItemByName(string parameter_name);

        #endregion

    }

    public interface ICQGPointAndFigureBar
    {
        #region Properties

        double High
        {
            get;
        }

        double Low
        {
            get;
        }

        double Mid
        {
            get;
        }

        double PFHigh
        {
            get;
        }

        double PFLow
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        bool Up
        {
            get;
        }

        #endregion

    }

    public interface ICQGPointAndFigureBars : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGPointAndFigureBar this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGPointAndFigureBarsRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGPointAndFigureBarsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGPointAndFigureBars this[int index_]
        {
            get;
        }

        CQGPointAndFigureBars this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGPointAndFigureBars get_ItemById(string id_);

        #endregion

    }

    public interface ICQGPointAndFigureBarsRequest
    {
        #region Properties

        int BoxSize
        {
            get;
            set;
        }

        ePfBoxUnits BoxUnits
        {
            get;
            set;
        }

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        ePfDataSource DataSource
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        int Reversal
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGPosition
    {
        #region Properties

        CQGAccount Account
        {
            get;
        }

        double AveragePrice
        {
            get;
        }

        CQGInstrument Instrument
        {
            get;
        }

        string InstrumentName
        {
            get;
        }

        bool ManualFillsInvolved
        {
            get;
        }

        CQGTrades MatchedTrades
        {
            get;
        }

        double MVO
        {
            get;
        }

        CQGTrades OpenTrades
        {
            get;
        }

        double OTE
        {
            get;
        }

        double ProfitLoss
        {
            get;
        }

        int Quantity
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        eOrderSide Side
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        double UPL
        {
            get;
        }

        #endregion

    }

    public interface ICQGPositions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGPosition this[string instrument_name]
        {
            get;
        }

        CQGPosition this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGPosition get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGPositionsStatement
    {
        #region Properties

        int GWAccountID
        {
            get;
        }

        CQGPositions Positions
        {
            get;
        }

        DateTime StatementDate
        {
            get;
        }

        #endregion

    }

    public interface ICQGQFormulaDefinition
    {
        #region Properties

        string Expression
        {
            get;
        }

        string Name
        {
            get;
        }

        int Number
        {
            get;
        }

        #endregion

    }

    public interface ICQGQFormulaDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGQFormulaDefinition this[int index_]
        {
            get;
        }

        CQGQFormulaDefinition this[string qformula_name]
        {
            get;
        }

        #endregion

        #region Methods

        CQGQFormulaDefinition get_ItemByName(string qformula_name);

        #endregion

    }

    public interface ICQGQuote
    {
        #region Properties

        bool HasVolume
        {
            get;
        }

        CQGInstrument Instrument
        {
            get;
        }

        bool IsValid
        {
            get;
        }

        string Name
        {
            get;
        }

        double Price
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        eQuoteType Type
        {
            get;
        }

        int Volume
        {
            get;
        }

        #endregion

    }

    public interface ICQGQuotes : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGQuote this[eQuoteType quote_type]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGRemoteOpenAPISession
    {
        #region Properties

        string LogonName
        {
            get;
        }

        int ROMNumber
        {
            get;
        }

        string ServerAddress
        {
            get;
        }

        #endregion

    }

    public interface ICQGSession
    {
        #region Properties

        DateTime ActivationDate
        {
            get;
        }

        sbyte DayCloseOffset
        {
            get;
        }

        sbyte DayStartOffset
        {
            get;
        }

        bool DayStartsYesterday
        {
            get;
        }

        DateTime EndTime
        {
            get;
        }

        CQGInstrument Instrument
        {
            get;
        }

        string Name
        {
            get;
        }

        short Number
        {
            get;
        }

        bool PrimaryFlag
        {
            get;
        }

        DateTime StartTime
        {
            get;
        }

        eSymbolSessionType Type
        {
            get;
        }

        DateTime ValidEndTime
        {
            get;
        }

        DateTime ValidStartTime
        {
            get;
        }

        eSessionWeekDays WorkingWeekDays
        {
            get;
        }

        #endregion

        #region Methods

        bool IsTimeInSession(DateTime date_time, bool use_session_valid_times = false);

        #endregion

    }

    public interface ICQGSessions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime DescriptionEnd
        {
            get;
        }

        int DescriptionNumber
        {
            get;
        }

        DateTime DescriptionStart
        {
            get;
        }

        CQGHolidays Holidays
        {
            get;
        }

        CQGSession this[object index_]
        {
            get;
        }

        string Name
        {
            get;
        }

        eSymbolSessionType Type
        {
            get;
        }

        #endregion

        #region Methods

        bool IsTimeInSession(DateTime date_time, bool use_session_valid_times = false);

        #endregion

    }

    public interface ICQGSessionsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGSessions this[object index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGStrategyDefinition
    {
        #region Properties

        string ClientId
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        string RequestString
        {
            get;
        }

        eStrategyRequestStatus Status
        {
            get;
        }

        string Symbol
        {
            get;
        }

        #endregion

    }

    public interface ICQGStrategyDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGStrategyDefinition this[string id_]
        {
            get;
        }

        CQGStrategyDefinition this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGStrategyDefinition get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGStrategyLegFill
    {
        #region Properties

        string ExecutionId
        {
            get;
        }

        CQGOrder Order
        {
            get;
        }

        string OriginalOrderID
        {
            get;
        }

        int Quantity
        {
            get;
        }

        #endregion

    }

    public interface ICQGStrategyLegFills
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGStrategyLegFill this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGStrategyLegFill get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGStringCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        string this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGSubMinuteBar
    {
        #region Properties

        int AskVolume
        {
            get;
        }

        double Avg
        {
            get;
        }

        int BidVolume
        {
            get;
        }

        double Close
        {
            get;
        }

        double High
        {
            get;
        }

        double HLC3
        {
            get;
        }

        double Low
        {
            get;
        }

        double Mid
        {
            get;
        }

        double Open
        {
            get;
        }

        double Range
        {
            get;
        }

        int TickVolume
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        double TrueHigh
        {
            get;
        }

        double TrueLow
        {
            get;
        }

        double TrueRange
        {
            get;
        }

        int Volume
        {
            get;
        }

        #endregion

    }

    public interface ICQGSubMinuteBars : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGSubMinuteBar this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGSubMinuteBarsRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGSubMinuteBarsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGSubMinuteBars this[int index_]
        {
            get;
        }

        CQGSubMinuteBars this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGSubMinuteBars get_ItemById(string id_);

        #endregion

    }

    public interface ICQGSubMinuteBarsRequest
    {
        #region Properties

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        eGapFilter GapFilter
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        int Interval
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        eTickFilter TickFilter
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGSummariesStatement
    {
        #region Properties

        CQGAccountSummaries CurrencySummaries
        {
            get;
        }

        int GWAccountID
        {
            get;
        }

        DateTime StatementDate
        {
            get;
        }

        CQGAccountSummary Summary
        {
            get;
        }

        #endregion

    }

    public interface ICQGTFlowBar
    {
        #region Properties

        int AskVolume
        {
            get;
        }

        double BestAskPrice
        {
            get;
        }

        double BestBidPrice
        {
            get;
        }

        int BidVolume
        {
            get;
        }

        double Close
        {
            get;
        }

        int DomAskCount
        {
            get;
        }

        int this[int index_]
        {
            get;
        }

        int DomBidCount
        {
            get;
        }

        double High
        {
            get;
        }

        double Low
        {
            get;
        }

        double Mid
        {
            get;
        }

        double Open
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        double TrueHigh
        {
            get;
        }

        double TrueLow
        {
            get;
        }

        double TrueMid
        {
            get;
        }

        #endregion

        #region Methods

        int get_DomAskVolume(int index_);

        int get_DomBidVolume(int index_);

        #endregion

    }

    public interface ICQGTFlowBars : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGTFlowBar this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGTFlowBarsRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGTFlowBarsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTFlowBars this[int index_]
        {
            get;
        }

        CQGTFlowBars this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTFlowBars get_ItemById(string id_);

        #endregion

    }

    public interface ICQGTFlowBarsRequest
    {
        #region Properties

        eTfAggregation Aggregation
        {
            get;
            set;
        }

        int AggregationLevel
        {
            get;
            set;
        }

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        eTFlowRequestDomVolumeLevel DomAskVolumeLevel
        {
            get;
            set;
        }

        eTFlowRequestDomVolumeLevel DomBidVolumeLevel
        {
            get;
            set;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGTick
    {
        #region Properties

        string ContributorId
        {
            get;
        }

        int ContributorIdCode
        {
            get;
        }

        eTickCorrectionType CorrectionType
        {
            get;
        }

        eMarketState MarketState
        {
            get;
        }

        double Price
        {
            get;
        }

        eTickPriceType PriceType
        {
            get;
        }

        int SalesConditionCode
        {
            get;
        }

        string SalesConditionLabel
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int Volume
        {
            get;
        }

        #endregion

    }

    public interface ICQGTicks : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        bool HasUpdates
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGTick this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGTicksRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        int IndexForDate(DateTime date_);

        void IndicesForDates(DateTime date_1, DateTime date_2, ref Int32 start_index, ref Int32 end_index);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGTicksCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTicks this[int index_]
        {
            get;
        }

        CQGTicks this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTicks get_ItemById(string id_);

        #endregion

    }

    public interface ICQGTicksRequest
    {
        #region Properties

        DateTime RangeEnd
        {
            get;
            set;
        }

        DateTime RangeStart
        {
            get;
            set;
        }

        int SessionsFilter
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        eTickFilter TickFilter
        {
            get;
            set;
        }

        eTicksRequestType Type
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGTimedBar
    {
        #region Properties

        int ActualVolume
        {
            get;
        }

        int AskVolume
        {
            get;
        }

        double Avg
        {
            get;
        }

        int BidVolume
        {
            get;
        }

        double Close
        {
            get;
        }

        int CommodityOpenInterest
        {
            get;
        }

        int CommodityTickVolume
        {
            get;
        }

        int CommodityVolume
        {
            get;
        }

        int ContractOpenInterest
        {
            get;
        }

        int ContractTickVolume
        {
            get;
        }

        int ContractVolume
        {
            get;
        }

        double High
        {
            get;
        }

        double HLC3
        {
            get;
        }

        double Low
        {
            get;
        }

        double Mid
        {
            get;
        }

        double Open
        {
            get;
        }

        int OpenInterest
        {
            get;
        }

        double Range
        {
            get;
        }

        int TickVolume
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        double TrueHigh
        {
            get;
        }

        double TrueLow
        {
            get;
        }

        double TrueRange
        {
            get;
        }

        #endregion

    }

    public interface ICQGTimedBars : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGTimedBar this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGTimedBarsRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        int IndexForDate(DateTime date_);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGTimedBarsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTimedBars this[int index_]
        {
            get;
        }

        CQGTimedBars this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTimedBars get_ItemById(string id_);

        #endregion

    }

    public interface ICQGTimedBarsRequest
    {
        #region Properties

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        eHistoricalPeriod HistoricalPeriod
        {
            get;
            set;
        }

        bool IgnoreEventsOnHistoricalBars
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        int IntradayPeriod
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        eTickFilter TickFilter
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

        #region Methods

        void ExcludeAllOutputs();

        void IncludeOutput(eTimedBarsRequestOutputs timed_bar_output, bool include_output);

        bool IsOutputIncluded(eTimedBarsRequestOutputs timed_bar_output);

        #endregion

    }

    public interface ICQGTrade
    {
        #region Properties

        int GroupID
        {
            get;
        }

        bool IsMatched
        {
            get;
        }

        double Price
        {
            get;
        }

        int Quantity
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        eOrderSide Side
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradeEntries : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradeEntry this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGTradeEntry
    {
        #region Properties

        bool CanPlaceOrderSignal
        {
            get;
        }

        CQGTradeEntryDefinition Definition
        {
            get;
        }

        double Price
        {
            get;
        }

        int Quantity
        {
            get;
        }

        CQGTradeExits RelatedExits
        {
            get;
        }

        bool Signal
        {
            get;
        }

        double StopLimitPrice
        {
            get;
        }

        CQGTradingSystemTrade Trade
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradeEntryDefinition
    {
        #region Properties

        bool AllowEntryOnExit
        {
            get;
        }

        bool AllowPyramids
        {
            get;
        }

        eOrderType OrderType
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradeExit
    {
        #region Properties

        bool CanPlaceOrderSignal
        {
            get;
        }

        CQGTradeExitDefinition Definition
        {
            get;
        }

        double Price
        {
            get;
        }

        int Quantity
        {
            get;
        }

        CQGTradeEntries RelatedEntries
        {
            get;
        }

        bool Signal
        {
            get;
        }

        double StopLimitPrice
        {
            get;
        }

        CQGTradingSystemTrade Trade
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradeExitDefinition
    {
        #region Properties

        bool AllowExitOnEntry
        {
            get;
        }

        bool AllowMoreThanOnce
        {
            get;
        }

        string Name
        {
            get;
        }

        eOrderType OrderType
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradeExitDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradeExitDefinition this[int index_]
        {
            get;
        }

        CQGTradeExitDefinition this[string exit_name]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTradeExitDefinition get_ItemByName(string exit_name);

        #endregion

    }

    public interface ICQGTradeExits : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradeExit this[int index_]
        {
            get;
        }

        CQGTradeExit this[string exit_name]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTradeExit get_ItemByName(string exit_name);

        #endregion

    }

    public interface ICQGTrades : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTrade this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGTradingSystem
    {
        #region Properties

        CQGTradingSystemDefinition Definition
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGTradingSystemRequest Request
        {
            get;
        }

        CQGTradingSystemStatisticsCollection Statistics
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        CQGTradingSystemTradesRows TradesRows
        {
            get;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGTradingSystemAddInfo
    {
    }

    public interface ICQGTradingSystemBaseBarParameter
    {
        #region Properties

        string Name
        {
            get;
        }

        eTradingSystemBaseBarParameter Type
        {
            get;
        }

        object Value
        {
            get;
            set;
        }

        #endregion

    }

    public interface ICQGTradingSystemBaseBarParameters : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradingSystemBaseBarParameter this[eTradingSystemBaseBarParameter parameter_type]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGTradingSystemDefinition
    {
        #region Properties

        string Abbreviation
        {
            get;
        }

        double Commission
        {
            get;
        }

        eTradingSystemCommissionType CommissionType
        {
            get;
        }

        string Name
        {
            get;
        }

        CQGParameterDefinitions ParameterDefinitions
        {
            get;
        }

        CQGTradingSystemTradeDefinitions TradeDefinitions
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradingSystemDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradingSystemDefinition this[int index_]
        {
            get;
        }

        CQGTradingSystemDefinition this[string trading_system_abbreviation]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTradingSystemDefinition get_ItemByAbbreviation(string trading_system_abbreviation);

        CQGTradingSystemDefinition get_ItemByName(string trading_system_name);

        #endregion

    }

    public interface ICQGTradingSystemInsertInfo
    {
        #region Properties

        int Index
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradingSystemRelationAddInfo
    {
        #region Properties

        CQGTradeEntry Entry
        {
            get;
        }

        int EntryRowIndex
        {
            get;
        }

        CQGTradeExit Exit
        {
            get;
        }

        int ExitRowIndex
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradingSystemRemoveInfo
    {
        #region Properties

        int Index
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradingSystemRequest
    {
        #region Properties

        CQGTradingSystemBaseBarParameters BaseBarParameters
        {
            get;
        }

        eTradingSystemBaseBar BaseBarType
        {
            get;
            set;
        }

        string BaseExpression
        {
            get;
            set;
        }

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        CQGTradingSystemDefinition Definition
        {
            get;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        eHistoricalPeriod HistoricalPeriod
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        int IntradayPeriod
        {
            get;
            set;
        }

        object this[object key_]
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        #endregion

        #region Methods

        void ExcludeAllStatistics();

        object get_Parameter(object key_);

        void IncludeStatistic(eTradingSystemStatistic trading_system_statistic);

        bool IsStatisticIncluded(eTradingSystemStatistic trading_system_statistic);

        void set_Parameter(object key_, object pVal);

        #endregion

    }

    public interface ICQGTradingSystems : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradingSystem this[int index_]
        {
            get;
        }

        CQGTradingSystem this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTradingSystem get_ItemById(string id_);

        #endregion

    }

    public interface ICQGTradingSystemStatistics
    {
        #region Properties

        double AverageDuration
        {
            get;
        }

        double AverageLoss
        {
            get;
        }

        double AverageProfit
        {
            get;
        }

        double AverageWin
        {
            get;
        }

        double ClosedNetProfit
        {
            get;
        }

        double CurConsecLosses
        {
            get;
        }

        double CurConsecWins
        {
            get;
        }

        double CurDrawDown
        {
            get;
        }

        double LinearRegression
        {
            get;
        }

        double MaxClosedDraw
        {
            get;
        }

        double MaxConsecLosses
        {
            get;
        }

        double MaxConsecWins
        {
            get;
        }

        double MaxDrawAmount
        {
            get;
        }

        double MaxDrawDuration
        {
            get;
        }

        double MaximumLoss
        {
            get;
        }

        double MaximumWin
        {
            get;
        }

        double OpenPosition
        {
            get;
        }

        double PercentLong
        {
            get;
        }

        double PercentWinners
        {
            get;
        }

        double ProfitLossRatio
        {
            get;
        }

        double ProfitToMaxDraw
        {
            get;
        }

        double RemoveToNeutral
        {
            get;
        }

        double ReturnRetracement
        {
            get;
        }

        double TimePercentage
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        double TotalNetProfit
        {
            get;
        }

        double TotalTradeCount
        {
            get;
        }

        double this[eTradingSystemStatistic ts_statistic]
        {
            get;
        }

        #endregion

        #region Methods

        double get_Value(eTradingSystemStatistic ts_statistic);

        #endregion

    }

    public interface ICQGTradingSystemStatisticsChangeInfo
    {
        #region Properties

        CQGTradingSystemStatistics Statistics
        {
            get;
        }

        #endregion

        #region Methods

        bool IsStatisticChanged(eTradingSystemStatistic trading_system_statistic);

        #endregion

    }

    public interface ICQGTradingSystemStatisticsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradingSystemStatistics this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        int IndexForDate(DateTime date_);

        void IndicesForDates(DateTime date_1, DateTime date_2, ref Int32 start_index, ref Int32 end_index);

        #endregion

    }

    public interface ICQGTradingSystemTrade
    {
        #region Properties

        CQGTradingSystemTradeDefinition Definition
        {
            get;
        }

        bool IsActive
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        CQGTradeEntry TradeEntry
        {
            get;
        }

        CQGTradeExits TradeExits
        {
            get;
        }

        CQGTradingSystemTradesRow TradesRow
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradingSystemTradeDefinition
    {
        #region Properties

        CQGTradeEntryDefinition Entry
        {
            get;
        }

        CQGTradeExitDefinitions Exits
        {
            get;
        }

        string Name
        {
            get;
        }

        eTradeSide Side
        {
            get;
        }

        #endregion

    }

    public interface ICQGTradingSystemTradeDefinitions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradingSystemTradeDefinition this[int index_]
        {
            get;
        }

        CQGTradingSystemTradeDefinition this[string trade_name]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTradingSystemTradeDefinition get_ItemByName(string trade_name);

        #endregion

    }

    public interface ICQGTradingSystemTradesRow : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradingSystemTrade this[int index_]
        {
            get;
        }

        CQGTradingSystemTrade this[string trade_name]
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        int TimestampOffset
        {
            get;
        }

        #endregion

        #region Methods

        CQGTradingSystemTrade get_ItemByName(string trade_name);

        #endregion

    }

    public interface ICQGTradingSystemTradesRows : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTradingSystemTradesRow this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        #endregion

    }

    public interface ICQGTradingSystemUpdateInfo
    {
        #region Properties

        int Index
        {
            get;
        }

        CQGTradingSystemStatisticsChangeInfo StatisticsChangeInfo
        {
            get;
        }

        #endregion

        #region Methods

        CQGChangedTradeEntries get_ChangedEntries(eTradeChangeCategory change_filter = eTradeChangeCategory.tccAll);

        CQGChangedTradeExits get_ChangedExits(eTradeChangeCategory change_filter = eTradeChangeCategory.tccAll);

        #endregion

    }

    public interface ICQGTransaction
    {
        #region Properties

        string ExecutionId
        {
            get;
        }

        CQGFill Fill
        {
            get;
        }

        CQGStringCollection HangOrderIds
        {
            get;
        }

        int HangQuantity
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGOrder Order
        {
            get;
        }

        CQGModifiedProperties Properties
        {
            get;
        }

        string RejectReason
        {
            get;
        }

        DateTime ServerTimestamp
        {
            get;
        }

        eOrderEvent Status
        {
            get;
        }

        CQGStrategyLegFills StrategyLegFills
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        #endregion

    }

    public interface ICQGTransactions : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGTransaction this[string id_]
        {
            get;
        }

        CQGTransaction this[int index_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGTransaction get_ItemByIndex(int index_);

        #endregion

    }

    public interface ICQGYield
    {
        #region Properties

        double Avg
        {
            get;
        }

        double Close
        {
            get;
        }

        double High
        {
            get;
        }

        double HLC3
        {
            get;
        }

        double Low
        {
            get;
        }

        double Mid
        {
            get;
        }

        double Open
        {
            get;
        }

        double Range
        {
            get;
        }

        DateTime Timestamp
        {
            get;
        }

        double TrueHigh
        {
            get;
        }

        double TrueLow
        {
            get;
        }

        double TrueRange
        {
            get;
        }

        #endregion

    }

    public interface ICQGYields : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        DateTime EndTimestamp
        {
            get;
        }

        string Id
        {
            get;
        }

        CQGYield this[int index_]
        {
            get;
        }

        CQGError LastError
        {
            get;
        }

        CQGYieldsRequest Request
        {
            get;
        }

        DateTime StartTimestamp
        {
            get;
        }

        eRequestStatus Status
        {
            get;
        }

        object this[string tag_name]
        {
            get;
            set;
        }

        #endregion

        #region Methods

        object get_Tag(string tag_name);

        int IndexForDate(DateTime date_);

        void set_Tag(string tag_name, object pVal);

        #endregion

    }

    public interface ICQGYieldsCollection : IEnumerable
    {
        #region Properties

        int Count
        {
            get;
        }

        CQGYields this[int index_]
        {
            get;
        }

        CQGYields this[string id_]
        {
            get;
        }

        #endregion

        #region Methods

        CQGYields get_ItemById(string id_);

        #endregion

    }

    public interface ICQGYieldsRequest
    {
        #region Properties

        eYieldCompound Compound
        {
            get;
            set;
        }

        eTimeSeriesContinuationType Continuation
        {
            get;
            set;
        }

        int DaysBeforeExpiration
        {
            get;
            set;
        }

        bool EqualizeCloses
        {
            get;
            set;
        }

        bool IncludeEnd
        {
            get;
            set;
        }

        eYieldModel Model
        {
            get;
            set;
        }

        object RangeEnd
        {
            get;
            set;
        }

        object RangeStart
        {
            get;
            set;
        }

        int RecalcPeriod
        {
            get;
            set;
        }

        eSessionFlag SessionFlags
        {
            get;
            set;
        }

        object SessionsFilter
        {
            get;
            set;
        }

        eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get;
            set;
        }

        string Symbol
        {
            get;
            set;
        }

        bool UpdatesEnabled
        {
            get;
            set;
        }

        #endregion

    }

    #endregion

    #region Classes

    public class _ICQGCELEvents_SinkHelper : _ICQGCELEvents
    {
        private string dcObjKey;

        #region Fields

        public _ICQGCELEvents_AccountChangedEventHandler m_AccountChangedDelegate;

        public _ICQGCELEvents_AdvancedStudyAddedEventHandler m_AdvancedStudyAddedDelegate;

        public _ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandler m_AdvancedStudyDefinitionsResolvedDelegate;

        public _ICQGCELEvents_AdvancedStudyInsertedEventHandler m_AdvancedStudyInsertedDelegate;

        public _ICQGCELEvents_AdvancedStudyRemovedEventHandler m_AdvancedStudyRemovedDelegate;

        public _ICQGCELEvents_AdvancedStudyResolvedEventHandler m_AdvancedStudyResolvedDelegate;

        public _ICQGCELEvents_AdvancedStudyUpdatedEventHandler m_AdvancedStudyUpdatedDelegate;

        public _ICQGCELEvents_AlgorithmicOrderPlacedEventHandler m_AlgorithmicOrderPlacedDelegate;

        public _ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandler m_AlgorithmicOrderRegistrationCompleteDelegate;

        public _ICQGCELEvents_AllOrdersCanceledEventHandler m_AllOrdersCanceledDelegate;

        public _ICQGCELEvents_AuthenticationStatusChangedEventHandler m_AuthenticationStatusChangedDelegate;

        public _ICQGCELEvents_BarsTimestampsResolvedEventHandler m_BarsTimestampsResolvedDelegate;

        public _ICQGCELEvents_CELStartedEventHandler m_CELStartedDelegate;

        public _ICQGCELEvents_CommodityInstrumentsResolvedEventHandler m_CommodityInstrumentsResolvedDelegate;

        public _ICQGCELEvents_ConditionAddedEventHandler m_ConditionAddedDelegate;

        public _ICQGCELEvents_ConditionDefinitionsResolvedEventHandler m_ConditionDefinitionsResolvedDelegate;

        public _ICQGCELEvents_ConditionInsertedEventHandler m_ConditionInsertedDelegate;

        public _ICQGCELEvents_ConditionRemovedEventHandler m_ConditionRemovedDelegate;

        public _ICQGCELEvents_ConditionResolvedEventHandler m_ConditionResolvedDelegate;

        public _ICQGCELEvents_ConditionUpdatedEventHandler m_ConditionUpdatedDelegate;

        public _ICQGCELEvents_ConstantVolumeBarsAddedEventHandler m_ConstantVolumeBarsAddedDelegate;

        public _ICQGCELEvents_ConstantVolumeBarsInsertedEventHandler m_ConstantVolumeBarsInsertedDelegate;

        public _ICQGCELEvents_ConstantVolumeBarsRemovedEventHandler m_ConstantVolumeBarsRemovedDelegate;

        public _ICQGCELEvents_ConstantVolumeBarsResolvedEventHandler m_ConstantVolumeBarsResolvedDelegate;

        public _ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandler m_ConstantVolumeBarsUpdatedDelegate;

        public _ICQGCELEvents_CurrencyRatesChangedEventHandler m_CurrencyRatesChangedDelegate;

        public _ICQGCELEvents_CustomSessionsResolvedEventHandler m_CustomSessionsResolvedDelegate;

        public _ICQGCELEvents_CustomStudyAddedEventHandler m_CustomStudyAddedDelegate;

        public _ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandler m_CustomStudyDefinitionsResolvedDelegate;

        public _ICQGCELEvents_CustomStudyInsertedEventHandler m_CustomStudyInsertedDelegate;

        public _ICQGCELEvents_CustomStudyRemovedEventHandler m_CustomStudyRemovedDelegate;

        public _ICQGCELEvents_CustomStudyResolvedEventHandler m_CustomStudyResolvedDelegate;

        public _ICQGCELEvents_CustomStudyUpdatedEventHandler m_CustomStudyUpdatedDelegate;

        public _ICQGCELEvents_DataConnectionStatusChangedEventHandler m_DataConnectionStatusChangedDelegate;

        public _ICQGCELEvents_DataErrorEventHandler m_DataErrorDelegate;

        public _ICQGCELEvents_DataSourcesResolvedEventHandler m_DataSourcesResolvedDelegate;

        public _ICQGCELEvents_DataSourceSymbolsResolvedEventHandler m_DataSourceSymbolsResolvedDelegate;

        public int m_dwCookie;

        public _ICQGCELEvents_ExpressionAddedEventHandler m_ExpressionAddedDelegate;

        public _ICQGCELEvents_ExpressionInsertedEventHandler m_ExpressionInsertedDelegate;

        public _ICQGCELEvents_ExpressionRemovedEventHandler m_ExpressionRemovedDelegate;

        public _ICQGCELEvents_ExpressionResolvedEventHandler m_ExpressionResolvedDelegate;

        public _ICQGCELEvents_ExpressionUpdatedEventHandler m_ExpressionUpdatedDelegate;

        public _ICQGCELEvents_GWConnectionStatusChangedEventHandler m_GWConnectionStatusChangedDelegate;

        public _ICQGCELEvents_GWEnvironmentChangedEventHandler m_GWEnvironmentChangedDelegate;

        public _ICQGCELEvents_HistoricalSessionsResolvedEventHandler m_HistoricalSessionsResolvedDelegate;

        public _ICQGCELEvents_ICConnectionStatusChangedEventHandler m_ICConnectionStatusChangedDelegate;

        public _ICQGCELEvents_IncorrectSymbolEventHandler m_IncorrectSymbolDelegate;

        public _ICQGCELEvents_InstrumentChangedEventHandler m_InstrumentChangedDelegate;

        public _ICQGCELEvents_InstrumentDOMChangedEventHandler m_InstrumentDOMChangedDelegate;

        public _ICQGCELEvents_InstrumentsGroupChangedEventHandler m_InstrumentsGroupChangedDelegate;

        public _ICQGCELEvents_InstrumentsGroupResolvedEventHandler m_InstrumentsGroupResolvedDelegate;

        public _ICQGCELEvents_InstrumentSubscribedEventHandler m_InstrumentSubscribedDelegate;

        public _ICQGCELEvents_IsReadyEventHandler m_IsReadyDelegate;

        public _ICQGCELEvents_LineTimeChangedEventHandler m_LineTimeChangedDelegate;

        public _ICQGCELEvents_ManualFillChangedEventHandler m_ManualFillChangedDelegate;

        public _ICQGCELEvents_ManualFillsResolvedEventHandler m_ManualFillsResolvedDelegate;

        public _ICQGCELEvents_ManualFillUpdateResolvedEventHandler m_ManualFillUpdateResolvedDelegate;

        public _ICQGCELEvents_OnIdleEventHandler m_OnIdleDelegate;

        public _ICQGCELEvents_OnQueryProgressEventHandler m_OnQueryProgressDelegate;

        public _ICQGCELEvents_OrderChangedEventHandler m_OrderChangedDelegate;

        public _ICQGCELEvents_PasswordChangedEventHandler m_PasswordChangedDelegate;

        public _ICQGCELEvents_PointAndFigureBarsAddedEventHandler m_PointAndFigureBarsAddedDelegate;

        public _ICQGCELEvents_PointAndFigureBarsInsertedEventHandler m_PointAndFigureBarsInsertedDelegate;

        public _ICQGCELEvents_PointAndFigureBarsRemovedEventHandler m_PointAndFigureBarsRemovedDelegate;

        public _ICQGCELEvents_PointAndFigureBarsResolvedEventHandler m_PointAndFigureBarsResolvedDelegate;

        public _ICQGCELEvents_PointAndFigureBarsUpdatedEventHandler m_PointAndFigureBarsUpdatedDelegate;

        public _ICQGCELEvents_PositionsStatementResolvedEventHandler m_PositionsStatementResolvedDelegate;

        public _ICQGCELEvents_QFormulaDefinitionsResolvedEventHandler m_QFormulaDefinitionsResolvedDelegate;

        public _ICQGCELEvents_StrategyDefinitionProgressEventHandler m_StrategyDefinitionProgressDelegate;

        public _ICQGCELEvents_SubMinuteBarsAddedEventHandler m_SubMinuteBarsAddedDelegate;

        public _ICQGCELEvents_SubMinuteBarsInsertedEventHandler m_SubMinuteBarsInsertedDelegate;

        public _ICQGCELEvents_SubMinuteBarsRemovedEventHandler m_SubMinuteBarsRemovedDelegate;

        public _ICQGCELEvents_SubMinuteBarsResolvedEventHandler m_SubMinuteBarsResolvedDelegate;

        public _ICQGCELEvents_SubMinuteBarsUpdatedEventHandler m_SubMinuteBarsUpdatedDelegate;

        public _ICQGCELEvents_SummariesStatementResolvedEventHandler m_SummariesStatementResolvedDelegate;

        public _ICQGCELEvents_TFlowBarsAddedEventHandler m_TFlowBarsAddedDelegate;

        public _ICQGCELEvents_TFlowBarsInsertedEventHandler m_TFlowBarsInsertedDelegate;

        public _ICQGCELEvents_TFlowBarsRemovedEventHandler m_TFlowBarsRemovedDelegate;

        public _ICQGCELEvents_TFlowBarsResolvedEventHandler m_TFlowBarsResolvedDelegate;

        public _ICQGCELEvents_TFlowBarsUpdatedEventHandler m_TFlowBarsUpdatedDelegate;

        public _ICQGCELEvents_TicksAddedEventHandler m_TicksAddedDelegate;

        public _ICQGCELEvents_TicksResolvedEventHandler m_TicksResolvedDelegate;

        public _ICQGCELEvents_TimedBarsAddedEventHandler m_TimedBarsAddedDelegate;

        public _ICQGCELEvents_TimedBarsInsertedEventHandler m_TimedBarsInsertedDelegate;

        public _ICQGCELEvents_TimedBarsRemovedEventHandler m_TimedBarsRemovedDelegate;

        public _ICQGCELEvents_TimedBarsResolvedEventHandler m_TimedBarsResolvedDelegate;

        public _ICQGCELEvents_TimedBarsUpdatedEventHandler m_TimedBarsUpdatedDelegate;

        public _ICQGCELEvents_TradableCommoditiesResolvedEventHandler m_TradableCommoditiesResolvedDelegate;

        public _ICQGCELEvents_TradableExchangesResolvedEventHandler m_TradableExchangesResolvedDelegate;

        public _ICQGCELEvents_TradingSystemAddNotificationEventHandler m_TradingSystemAddNotificationDelegate;

        public _ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandler m_TradingSystemDefinitionsResolvedDelegate;

        public _ICQGCELEvents_TradingSystemInsertNotificationEventHandler m_TradingSystemInsertNotificationDelegate;

        public _ICQGCELEvents_TradingSystemRemoveNotificationEventHandler m_TradingSystemRemoveNotificationDelegate;

        public _ICQGCELEvents_TradingSystemResolvedEventHandler m_TradingSystemResolvedDelegate;

        public _ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandler m_TradingSystemTradeRelationAddNotificationDelegate;

        public _ICQGCELEvents_TradingSystemUpdateNotificationEventHandler m_TradingSystemUpdateNotificationDelegate;

        public _ICQGCELEvents_YieldsAddedEventHandler m_YieldsAddedDelegate;

        public _ICQGCELEvents_YieldsInsertedEventHandler m_YieldsInsertedDelegate;

        public _ICQGCELEvents_YieldsRemovedEventHandler m_YieldsRemovedDelegate;

        public _ICQGCELEvents_YieldsResolvedEventHandler m_YieldsResolvedDelegate;

        public _ICQGCELEvents_YieldsUpdatedEventHandler m_YieldsUpdatedDelegate;

        #endregion

        #region Constructors

        internal _ICQGCELEvents_SinkHelper(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~_ICQGCELEvents_SinkHelper()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Methods

        public virtual void AccountChanged(eAccountChangeType arg1, CQGAccount arg2, CQGPosition arg3)
        {
            string name = "AccountChanged";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AdvancedStudyAdded(CQGAdvancedStudy arg1)
        {
            string name = "AdvancedStudyAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AdvancedStudyDefinitionsResolved(CQGAdvancedStudyDefinitions arg1, CQGError arg2)
        {
            string name = "AdvancedStudyDefinitionsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AdvancedStudyInserted(CQGAdvancedStudy arg1, int arg2)
        {
            string name = "AdvancedStudyInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AdvancedStudyRemoved(CQGAdvancedStudy arg1, int arg2)
        {
            string name = "AdvancedStudyRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AdvancedStudyResolved(CQGAdvancedStudy arg1, CQGError arg2)
        {
            string name = "AdvancedStudyResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AdvancedStudyUpdated(CQGAdvancedStudy arg1, int arg2)
        {
            string name = "AdvancedStudyUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AlgorithmicOrderPlaced(string arg1, CQGAlgorithmicOrderParameters arg2, CQGAlgorithmicOrderProperties arg3)
        {
            string name = "AlgorithmicOrderPlaced";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AlgorithmicOrderRegistrationComplete(string arg1, CQGError arg2)
        {
            string name = "AlgorithmicOrderRegistrationComplete";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AllOrdersCanceled(eOrderSideFilter arg1, CQGIntegerCollection arg2, CQGStringCollection arg3)
        {
            string name = "AllOrdersCanceled";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void AuthenticationStatusChanged(eSessionStatus arg1, CQGError arg2)
        {
            string name = "AuthenticationStatusChanged";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void BarsTimestampsResolved(CQGBarsTimestamps arg1, CQGError arg2)
        {
            string name = "BarsTimestampsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CELStarted()
        {
            string name = "CELStarted";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void CommodityInstrumentsResolved(string arg1, eInstrumentType arg2, CQGCommodityInstruments arg3)
        {
            string name = "CommodityInstrumentsResolved";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConditionAdded(CQGCondition arg1)
        {
            string name = "ConditionAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConditionDefinitionsResolved(CQGConditionDefinitions arg1, CQGError arg2)
        {
            string name = "ConditionDefinitionsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConditionInserted(CQGCondition arg1, int arg2)
        {
            string name = "ConditionInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConditionRemoved(CQGCondition arg1, int arg2)
        {
            string name = "ConditionRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConditionResolved(CQGCondition arg1, CQGError arg2)
        {
            string name = "ConditionResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConditionUpdated(CQGCondition arg1, int arg2)
        {
            string name = "ConditionUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConstantVolumeBarsAdded(CQGConstantVolumeBars arg1)
        {
            string name = "ConstantVolumeBarsAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConstantVolumeBarsInserted(CQGConstantVolumeBars arg1, int arg2)
        {
            string name = "ConstantVolumeBarsInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConstantVolumeBarsRemoved(CQGConstantVolumeBars arg1, int arg2)
        {
            string name = "ConstantVolumeBarsRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConstantVolumeBarsResolved(CQGConstantVolumeBars arg1, CQGError arg2)
        {
            string name = "ConstantVolumeBarsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ConstantVolumeBarsUpdated(CQGConstantVolumeBars arg1, int arg2)
        {
            string name = "ConstantVolumeBarsUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CurrencyRatesChanged(CQGCurrencyRates arg1)
        {
            string name = "CurrencyRatesChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CustomSessionsResolved(CQGSessionsCollection arg1, CQGError arg2)
        {
            string name = "CustomSessionsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CustomStudyAdded(CQGCustomStudy arg1)
        {
            string name = "CustomStudyAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CustomStudyDefinitionsResolved(CQGCustomStudyDefinitions arg1, CQGError arg2)
        {
            string name = "CustomStudyDefinitionsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CustomStudyInserted(CQGCustomStudy arg1, int arg2)
        {
            string name = "CustomStudyInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CustomStudyRemoved(CQGCustomStudy arg1, int arg2)
        {
            string name = "CustomStudyRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CustomStudyResolved(CQGCustomStudy arg1, CQGError arg2)
        {
            string name = "CustomStudyResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CustomStudyUpdated(CQGCustomStudy arg1, int arg2)
        {
            string name = "CustomStudyUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void DataConnectionStatusChanged(eConnectionStatus arg1)
        {
            string name = "DataConnectionStatusChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void DataError(object arg1, string arg2)
        {
            string name = "DataError";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void DataSourcesResolved(CQGDataSources arg1, CQGError arg2)
        {
            string name = "DataSourcesResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void DataSourceSymbolsResolved(string arg1, CQGDataSourceSymbols arg2, CQGError arg3)
        {
            string name = "DataSourceSymbolsResolved";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ExpressionAdded(CQGExpression arg1)
        {
            string name = "ExpressionAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ExpressionInserted(CQGExpression arg1, int arg2)
        {
            string name = "ExpressionInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ExpressionRemoved(CQGExpression arg1, int arg2)
        {
            string name = "ExpressionRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ExpressionResolved(CQGExpression arg1, CQGError arg2)
        {
            string name = "ExpressionResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ExpressionUpdated(CQGExpression arg1, int arg2)
        {
            string name = "ExpressionUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void GWConnectionStatusChanged(eConnectionStatus arg1)
        {
            string name = "GWConnectionStatusChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void GWEnvironmentChanged(eGWEnvChangeCode arg1, int arg2, int arg3)
        {
            string name = "GWEnvironmentChanged";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void HistoricalSessionsResolved(CQGSessionsCollection arg1, CQGHistoricalSessionsRequest arg2, CQGError arg3)
        {
            string name = "HistoricalSessionsResolved";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ICConnectionStatusChanged(eICConnectionStatus arg1)
        {
            string name = "ICConnectionStatusChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void IncorrectSymbol(string arg1)
        {
            string name = "IncorrectSymbol";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentChanged(CQGInstrument arg1, CQGQuotes arg2, CQGInstrumentProperties arg3)
        {
            string name = "InstrumentChanged";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentDOMChanged(CQGInstrument arg1, CQGDOMQuotes arg2, CQGDOMQuotes arg3)
        {
            string name = "InstrumentDOMChanged";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentsGroupChanged(eChangeType arg1, CQGInstrumentsGroup arg2, CQGStringCollection arg3)
        {
            string name = "InstrumentsGroupChanged";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentsGroupResolved(CQGInstrumentsGroup arg1, CQGError arg2)
        {
            string name = "InstrumentsGroupResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentSubscribed(string arg1, CQGInstrument arg2)
        {
            string name = "InstrumentSubscribed";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void IsReady(ref eReadyStatus arg1)
        {
            string name = "IsReady";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void LineTimeChanged(DateTime arg1)
        {
            string name = "LineTimeChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ManualFillChanged(CQGManualFill arg1, eManualFillUpdateType arg2)
        {
            string name = "ManualFillChanged";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ManualFillsResolved(CQGManualFills arg1, CQGError arg2)
        {
            string name = "ManualFillsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ManualFillUpdateResolved(CQGManualFillRequest arg1, CQGError arg2)
        {
            string name = "ManualFillUpdateResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void OnIdle()
        {
            string name = "OnIdle";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void OnQueryProgress(CQGOrdersQuery arg1, CQGError arg2)
        {
            string name = "OnQueryProgress";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void OrderChanged(eChangeType arg1, CQGOrder arg2, CQGOrderProperties arg3, CQGFill arg4, CQGError arg5)
        {
            string name = "OrderChanged";
            var args = new object[] { arg1, arg2, arg3, arg4, arg5 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void PasswordChanged(eSessionStatus arg1, CQGError arg2)
        {
            string name = "PasswordChanged";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void PointAndFigureBarsAdded(CQGPointAndFigureBars arg1)
        {
            string name = "PointAndFigureBarsAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void PointAndFigureBarsInserted(CQGPointAndFigureBars arg1, int arg2)
        {
            string name = "PointAndFigureBarsInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void PointAndFigureBarsRemoved(CQGPointAndFigureBars arg1, int arg2)
        {
            string name = "PointAndFigureBarsRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void PointAndFigureBarsResolved(CQGPointAndFigureBars arg1, CQGError arg2)
        {
            string name = "PointAndFigureBarsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void PointAndFigureBarsUpdated(CQGPointAndFigureBars arg1, int arg2)
        {
            string name = "PointAndFigureBarsUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void PositionsStatementResolved(CQGPositionsStatement arg1, CQGError arg2)
        {
            string name = "PositionsStatementResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void QFormulaDefinitionsResolved(CQGQFormulaDefinitions arg1, CQGError arg2)
        {
            string name = "QFormulaDefinitionsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void StrategyDefinitionProgress(CQGStrategyDefinition arg1, CQGError arg2)
        {
            string name = "StrategyDefinitionProgress";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void SubMinuteBarsAdded(CQGSubMinuteBars arg1)
        {
            string name = "SubMinuteBarsAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void SubMinuteBarsInserted(CQGSubMinuteBars arg1, int arg2)
        {
            string name = "SubMinuteBarsInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void SubMinuteBarsRemoved(CQGSubMinuteBars arg1, int arg2)
        {
            string name = "SubMinuteBarsRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void SubMinuteBarsResolved(CQGSubMinuteBars arg1, CQGError arg2)
        {
            string name = "SubMinuteBarsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void SubMinuteBarsUpdated(CQGSubMinuteBars arg1, int arg2)
        {
            string name = "SubMinuteBarsUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void SummariesStatementResolved(CQGSummariesStatement arg1, CQGError arg2)
        {
            string name = "SummariesStatementResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TFlowBarsAdded(CQGTFlowBars arg1)
        {
            string name = "TFlowBarsAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TFlowBarsInserted(CQGTFlowBars arg1, int arg2)
        {
            string name = "TFlowBarsInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TFlowBarsRemoved(CQGTFlowBars arg1, int arg2)
        {
            string name = "TFlowBarsRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TFlowBarsResolved(CQGTFlowBars arg1, CQGError arg2)
        {
            string name = "TFlowBarsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TFlowBarsUpdated(CQGTFlowBars arg1, int arg2)
        {
            string name = "TFlowBarsUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TicksAdded(CQGTicks arg1, int arg2)
        {
            string name = "TicksAdded";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TicksResolved(CQGTicks arg1, CQGError arg2)
        {
            string name = "TicksResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TimedBarsAdded(CQGTimedBars arg1)
        {
            string name = "TimedBarsAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TimedBarsInserted(CQGTimedBars arg1, int arg2)
        {
            string name = "TimedBarsInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TimedBarsRemoved(CQGTimedBars arg1, int arg2)
        {
            string name = "TimedBarsRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TimedBarsResolved(CQGTimedBars arg1, CQGError arg2)
        {
            string name = "TimedBarsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TimedBarsUpdated(CQGTimedBars arg1, int arg2)
        {
            string name = "TimedBarsUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradableCommoditiesResolved(int arg1, CQGCommodities arg2, CQGError arg3)
        {
            string name = "TradableCommoditiesResolved";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradableExchangesResolved(int arg1, CQGExchanges arg2, CQGError arg3)
        {
            string name = "TradableExchangesResolved";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradingSystemAddNotification(CQGTradingSystem arg1, CQGTradingSystemAddInfo arg2)
        {
            string name = "TradingSystemAddNotification";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradingSystemDefinitionsResolved(CQGTradingSystemDefinitions arg1, CQGError arg2)
        {
            string name = "TradingSystemDefinitionsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradingSystemInsertNotification(CQGTradingSystem arg1, CQGTradingSystemInsertInfo arg2)
        {
            string name = "TradingSystemInsertNotification";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradingSystemRemoveNotification(CQGTradingSystem arg1, CQGTradingSystemRemoveInfo arg2)
        {
            string name = "TradingSystemRemoveNotification";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradingSystemResolved(CQGTradingSystem arg1, CQGError arg2)
        {
            string name = "TradingSystemResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradingSystemTradeRelationAddNotification(CQGTradingSystem arg1, CQGTradingSystemRelationAddInfo arg2)
        {
            string name = "TradingSystemTradeRelationAddNotification";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TradingSystemUpdateNotification(CQGTradingSystem arg1, CQGTradingSystemUpdateInfo arg2)
        {
            string name = "TradingSystemUpdateNotification";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void YieldsAdded(CQGYields arg1)
        {
            string name = "YieldsAdded";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void YieldsInserted(CQGYields arg1, int arg2)
        {
            string name = "YieldsInserted";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void YieldsRemoved(CQGYields arg1, int arg2)
        {
            string name = "YieldsRemoved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void YieldsResolved(CQGYields arg1, CQGError arg2)
        {
            string name = "YieldsResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void YieldsUpdated(CQGYields arg1, int arg2)
        {
            string name = "YieldsUpdated";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class _ICQGCELGeneralEvents_SinkHelper : _ICQGCELGeneralEvents
    {
        private string dcObjKey;

        #region Fields

        public _ICQGCELGeneralEvents_CELStartedEventHandler m_CELStartedDelegate;

        public _ICQGCELGeneralEvents_CurrencyRatesChangedEventHandler m_CurrencyRatesChangedDelegate;

        public _ICQGCELGeneralEvents_DataConnectionStatusChangedEventHandler m_DataConnectionStatusChangedDelegate;

        public _ICQGCELGeneralEvents_DataErrorEventHandler m_DataErrorDelegate;

        public int m_dwCookie;

        public _ICQGCELGeneralEvents_GWConnectionStatusChangedEventHandler m_GWConnectionStatusChangedDelegate;

        public _ICQGCELGeneralEvents_IsReadyEventHandler m_IsReadyDelegate;

        public _ICQGCELGeneralEvents_LineTimeChangedEventHandler m_LineTimeChangedDelegate;

        public _ICQGCELGeneralEvents_OnIdleEventHandler m_OnIdleDelegate;

        #endregion

        #region Constructors

        internal _ICQGCELGeneralEvents_SinkHelper(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~_ICQGCELGeneralEvents_SinkHelper()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Methods

        public virtual void CELStarted()
        {
            string name = "CELStarted";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void CurrencyRatesChanged(CQGCurrencyRates arg1)
        {
            string name = "CurrencyRatesChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void DataConnectionStatusChanged(eConnectionStatus arg1)
        {
            string name = "DataConnectionStatusChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void DataError(object arg1, string arg2)
        {
            string name = "DataError";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void GWConnectionStatusChanged(eConnectionStatus arg1)
        {
            string name = "GWConnectionStatusChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void IsReady(ref eReadyStatus arg1)
        {
            string name = "IsReady";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void LineTimeChanged(DateTime arg1)
        {
            string name = "LineTimeChanged";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void OnIdle()
        {
            string name = "OnIdle";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        #endregion

    }

    public class _ICQGCELInstrumentEvents_SinkHelper : _ICQGCELInstrumentEvents
    {
        private string dcObjKey;

        #region Fields

        public _ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandler m_CommodityInstrumentsResolvedDelegate;

        public int m_dwCookie;

        public _ICQGCELInstrumentEvents_IncorrectSymbolEventHandler m_IncorrectSymbolDelegate;

        public _ICQGCELInstrumentEvents_InstrumentChangedEventHandler m_InstrumentChangedDelegate;

        public _ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandler m_InstrumentDOMChangedDelegate;

        public _ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandler m_InstrumentsGroupChangedDelegate;

        public _ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandler m_InstrumentsGroupResolvedDelegate;

        public _ICQGCELInstrumentEvents_InstrumentSubscribedEventHandler m_InstrumentSubscribedDelegate;

        #endregion

        #region Constructors

        internal _ICQGCELInstrumentEvents_SinkHelper(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~_ICQGCELInstrumentEvents_SinkHelper()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Methods

        public virtual void CommodityInstrumentsResolved(string arg1, eInstrumentType arg2, CQGCommodityInstruments arg3)
        {
            string name = "CommodityInstrumentsResolved";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void IncorrectSymbol(string arg1)
        {
            string name = "IncorrectSymbol";
            var args = new object[] { arg1 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentChanged(CQGInstrument arg1, CQGQuotes arg2, CQGInstrumentProperties arg3)
        {
            string name = "InstrumentChanged";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentDOMChanged(CQGInstrument arg1, CQGDOMQuotes arg2, CQGDOMQuotes arg3)
        {
            string name = "InstrumentDOMChanged";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentsGroupChanged(eChangeType arg1, CQGInstrumentsGroup arg2, CQGStringCollection arg3)
        {
            string name = "InstrumentsGroupChanged";
            var args = new object[] { arg1, arg2, arg3 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentsGroupResolved(CQGInstrumentsGroup arg1, CQGError arg2)
        {
            string name = "InstrumentsGroupResolved";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void InstrumentSubscribed(string arg1, CQGInstrument arg2)
        {
            string name = "InstrumentSubscribed";
            var args = new object[] { arg1, arg2 };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGAccountClass : CQGAccount
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAccountClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAccountClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eAccountMarginDetailing AccountMarginDetailing
        {
            get
            {
                string name = "AccountMarginDetailing";
                var value = CQG.GetProperty<eAccountMarginDetailing>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AccountMarginDetailing";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGStringCollection AuthorizedTraders
        {
            get
            {
                string name = "AuthorizedTraders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGStringCollectionClass(key);
                return value;
            }

        }

        public bool AutoSubscribeInstruments
        {
            get
            {
                string name = "AutoSubscribeInstruments";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AutoSubscribeInstruments";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGCEL CEL
        {
            get
            {
                string name = "CEL";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCELClass(key);
                return value;
            }

        }

        public CQGAccountSummaries CurrencySummaries
        {
            get
            {
                string name = "CurrencySummaries";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountSummariesClass(key);
                return value;
            }

        }

        public DateTime DateOfLastStatement
        {
            get
            {
                string name = "DateOfLastStatement";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string FcmAccountID
        {
            get
            {
                string name = "FcmAccountID";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eFcmClass FcmClass
        {
            get
            {
                string name = "FcmClass";
                var value = CQG.GetProperty<eFcmClass>(dcObjKey, name);
                return value;
            }

        }

        public int FcmID
        {
            get
            {
                string name = "FcmID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string FcmName
        {
            get
            {
                string name = "FcmName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string GWAccountName
        {
            get
            {
                string name = "GWAccountName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGOrders InternalOrders
        {
            get
            {
                string name = "InternalOrders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrdersClass(key);
                return value;
            }

        }

        public CQGOrders Orders
        {
            get
            {
                string name = "Orders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrdersClass(key);
                return value;
            }

        }

        public CQGPositions Positions
        {
            get
            {
                string name = "Positions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGPositionsClass(key);
                return value;
            }

        }

        public ePositionSubscriptionLevel PositionSubcriptionLevel
        {
            get
            {
                string name = "PositionSubcriptionLevel";
                var value = CQG.GetProperty<ePositionSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "PositionSubcriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string ReportingCurrency
        {
            get
            {
                string name = "ReportingCurrency";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public CQGAccountSummary Summary
        {
            get
            {
                string name = "Summary";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountSummaryClass(key);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public double TotalMarginValue
        {
            get
            {
                string name = "TotalMarginValue";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TotalPurchasingPower
        {
            get
            {
                string name = "TotalPurchasingPower";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGAccountsClass : CQGAccounts
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAccountsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAccountsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGAccount this[int gw_account_id]
        {
            get
            {
                string name = "Item";
                var args = new object[] { gw_account_id };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAccountClass(key);
                return value;
            }

        }

        public CQGAccount this[string fcm_account_id, int fcm_id]
        {
            get
            {
                string name = "ItemByFCM";
                var args = new object[] { fcm_account_id, fcm_id };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAccountClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual void Add(CQGAccount cqg_account)
        {
            string name = "Add";
            var args = new object[] { cqg_account };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGAccount get_ItemByFCM(string fcm_account_id, int fcm_id)
        {
            string name = "get_ItemByFCM";
            var args = new object[] { fcm_account_id, fcm_id };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGAccountClass(key);
            return result;
        }

        public virtual CQGAccount get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGAccountClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGAccountSummariesClass : CQGAccountSummaries
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAccountSummariesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAccountSummariesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGAccountSummary this[object index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAccountSummaryClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGAccountSummaryClass : CQGAccountSummary
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAccountSummaryClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAccountSummaryClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGAccount Account
        {
            get
            {
                string name = "Account";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountClass(key);
                return value;
            }

        }

        public string CurrencyName
        {
            get
            {
                string name = "CurrencyName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public bool ManualFillsInvolved
        {
            get
            {
                string name = "ManualFillsInvolved";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual double Balance(int day_ = 0)
        {
            string name = "Balance";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double CashExcess(int day_ = 1)
        {
            string name = "CashExcess";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double Collaterals(int day_ = 1)
        {
            string name = "Collaterals";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double InitialMargin(int day_ = 1)
        {
            string name = "InitialMargin";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double MaintenanceMargin(int day_ = 1)
        {
            string name = "MaintenanceMargin";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double MVO(int day_ = 0)
        {
            string name = "MVO";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double NLV(int day_ = 0)
        {
            string name = "NLV";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double OTE(int day_ = 0)
        {
            string name = "OTE";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double ProfitLoss(int day_ = 1)
        {
            string name = "ProfitLoss";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double UPL(int day_ = 0)
        {
            string name = "UPL";
            var args = new object[] { day_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGAdvancedStudiesClass : CQGAdvancedStudies
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAdvancedStudiesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAdvancedStudiesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGAdvancedStudy this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAdvancedStudyClass(key);
                return value;
            }

        }

        public CQGAdvancedStudy this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAdvancedStudyClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGAdvancedStudy get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGAdvancedStudyClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGAdvancedStudyClass : CQGAdvancedStudy
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAdvancedStudyClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAdvancedStudyClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGCurveHeaders CurveHeaders
        {
            get
            {
                string name = "CurveHeaders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCurveHeadersClass(key);
                return value;
            }

        }

        public CQGAdvancedStudyDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAdvancedStudyDefinitionClass(key);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGCurves this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCurvesClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGAdvancedStudyRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAdvancedStudyRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual int IndexForDate(DateTime date_)
        {
            string name = "IndexForDate";
            var args = new object[] { date_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGAdvancedStudyDefinitionClass : CQGAdvancedStudyDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAdvancedStudyDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAdvancedStudyDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Abbreviation
        {
            get
            {
                string name = "Abbreviation";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGCurveDefinitions CurveDefinitions
        {
            get
            {
                string name = "CurveDefinitions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCurveDefinitionsClass(key);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGParameterDefinitions ParameterDefinitions
        {
            get
            {
                string name = "ParameterDefinitions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGParameterDefinitionsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGAdvancedStudyDefinitionsClass : CQGAdvancedStudyDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAdvancedStudyDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAdvancedStudyDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGAdvancedStudyDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAdvancedStudyDefinitionClass(key);
                return value;
            }

        }

        public CQGAdvancedStudyDefinition this[string advanced_study_abbreviation]
        {
            get
            {
                string name = "ItemByAbbreviation";
                var args = new object[] { advanced_study_abbreviation };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAdvancedStudyDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGAdvancedStudyDefinition get_ItemByAbbreviation(string advanced_study_abbreviation)
        {
            string name = "get_ItemByAbbreviation";
            var args = new object[] { advanced_study_abbreviation };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGAdvancedStudyDefinitionClass(key);
            return result;
        }

        public virtual CQGAdvancedStudyDefinition get_ItemByName(string advanced_study_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { advanced_study_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGAdvancedStudyDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGAdvancedStudyRequestClass : CQGAdvancedStudyRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAdvancedStudyRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAdvancedStudyRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string BaseExpression
        {
            get
            {
                string name = "BaseExpression";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "BaseExpression";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGAdvancedStudyDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAdvancedStudyDefinitionClass(key);
                return value;
            }

        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eHistoricalPeriod HistoricalPeriod
        {
            get
            {
                string name = "HistoricalPeriod";
                var value = CQG.GetProperty<eHistoricalPeriod>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "HistoricalPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int IntradayPeriod
        {
            get
            {
                string name = "IntradayPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IntradayPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object this[object key_]
        {
            get
            {
                string name = "Parameter";
                var args = new object[] { key_ };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Parameter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Parameter(object key_)
        {
            string name = "get_Parameter";
            var args = new object[] { key_ };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual void IncludeCurve(object curve_key)
        {
            string name = "IncludeCurve";
            var args = new object[] { curve_key };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual bool IsCurveIncluded(object curve_key)
        {
            string name = "IsCurveIncluded";
            var args = new object[] { curve_key };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Parameter(object key_, object pVal)
        {
            string name = "set_Parameter";
            var args = new object[] { key_, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGAlgorithmicOrderDefinitionClass : CQGAlgorithmicOrderDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAlgorithmicOrderDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAlgorithmicOrderDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public object DefaultValue
        {
            get
            {
                string name = "DefaultValue";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DefaultValue";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DefaultValueIndex
        {
            get
            {
                string name = "DefaultValueIndex";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DefaultValueIndex";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Name";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eAlgorithmicOrderPropertyType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eAlgorithmicOrderPropertyType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Type";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Unit
        {
            get
            {
                string name = "Unit";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Unit";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGStringCollection Values
        {
            get
            {
                string name = "Values";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGStringCollectionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual void AddValue(string value_)
        {
            string name = "AddValue";
            var args = new object[] { value_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGAlgorithmicOrderDefinitionsClass : CQGAlgorithmicOrderDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAlgorithmicOrderDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAlgorithmicOrderDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGAlgorithmicOrderDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAlgorithmicOrderDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual void Add(CQGAlgorithmicOrderDefinition definition_)
        {
            string name = "Add";
            var args = new object[] { definition_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGAlgorithmicOrderDefinition CreateDefinition()
        {
            string name = "CreateDefinition";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGAlgorithmicOrderDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGAlgorithmicOrderParametersClass : CQGAlgorithmicOrderParameters
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAlgorithmicOrderParametersClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAlgorithmicOrderParametersClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eOrderDuration DurationType
        {
            get
            {
                string name = "DurationType";
                var value = CQG.GetProperty<eOrderDuration>(dcObjKey, name);
                return value;
            }

        }

        public eOrderExecutionInstruction ExecutionInstructions
        {
            get
            {
                string name = "ExecutionInstructions";
                var value = CQG.GetProperty<eOrderExecutionInstruction>(dcObjKey, name);
                return value;
            }

        }

        public string ExecutionPattern
        {
            get
            {
                string name = "ExecutionPattern";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime GTD
        {
            get
            {
                string name = "GTD";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string InstrumentName
        {
            get
            {
                string name = "InstrumentName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public bool Parked
        {
            get
            {
                string name = "Parked";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public eOrderTrailingPeg PreferredTrailingPeg
        {
            get
            {
                string name = "PreferredTrailingPeg";
                var value = CQG.GetProperty<eOrderTrailingPeg>(dcObjKey, name);
                return value;
            }

        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public eOrderSide Side
        {
            get
            {
                string name = "Side";
                var value = CQG.GetProperty<eOrderSide>(dcObjKey, name);
                return value;
            }

        }

        public double StopLimitPrice
        {
            get
            {
                string name = "StopLimitPrice";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrailingOffset
        {
            get
            {
                string name = "TrailingOffset";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int TriggerQuantity
        {
            get
            {
                string name = "TriggerQuantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public eOrderType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eOrderType>(dcObjKey, name);
                return value;
            }

        }

        public int VisibleQuantity
        {
            get
            {
                string name = "VisibleQuantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGAlgorithmicOrderPropertiesClass : CQGAlgorithmicOrderProperties
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAlgorithmicOrderPropertiesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAlgorithmicOrderPropertiesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGAlgorithmicOrderProperty this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGAlgorithmicOrderPropertyClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGAlgorithmicOrderPropertyClass : CQGAlgorithmicOrderProperty
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAlgorithmicOrderPropertyClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAlgorithmicOrderPropertyClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public object Value
        {
            get
            {
                string name = "Value";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGAlgoSupplierClass : CQGAlgoSupplier
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAlgoSupplierClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAlgoSupplierClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGAPIConfigClass : CQGAPIConfig
    {
        private string dcObjKey;

        #region Constructors

        internal CQGAPIConfigClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGAPIConfigClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int AccountMarginAndPositionsThrottleInterval
        {
            get
            {
                string name = "AccountMarginAndPositionsThrottleInterval";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AccountMarginAndPositionsThrottleInterval";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int AgeToDeleteLogFileDays
        {
            get
            {
                string name = "AgeToDeleteLogFileDays";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AgeToDeleteLogFileDays";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool ApplyDaylightSavingChanges
        {
            get
            {
                string name = "ApplyDaylightSavingChanges";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "ApplyDaylightSavingChanges";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool CollectionsThrowException
        {
            get
            {
                string name = "CollectionsThrowException";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "CollectionsThrowException";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eAccountMarginDetailing DefaultAccountMarginDetailing
        {
            get
            {
                string name = "DefaultAccountMarginDetailing";
                var value = CQG.GetProperty<eAccountMarginDetailing>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DefaultAccountMarginDetailing";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eDOMandBBAType DefaultInstrumentBBAType
        {
            get
            {
                string name = "DefaultInstrumentBBAType";
                var value = CQG.GetProperty<eDOMandBBAType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DefaultInstrumentBBAType";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eDataSubscriptionLevel DefaultInstrumentSubscriptionLevel
        {
            get
            {
                string name = "DefaultInstrumentSubscriptionLevel";
                var value = CQG.GetProperty<eDataSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DefaultInstrumentSubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public ePositionSubscriptionLevel DefPositionSubscriptionLevel
        {
            get
            {
                string name = "DefPositionSubscriptionLevel";
                var value = CQG.GetProperty<ePositionSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DefPositionSubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eDOMUpdatesMode DOMUpdatesMode
        {
            get
            {
                string name = "DOMUpdatesMode";
                var value = CQG.GetProperty<eDOMUpdatesMode>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DOMUpdatesMode";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DOMUpdatesPeriod
        {
            get
            {
                string name = "DOMUpdatesPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DOMUpdatesPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool FireEventOnChangedPrices
        {
            get
            {
                string name = "FireEventOnChangedPrices";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "FireEventOnChangedPrices";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool GatewayEnabled
        {
            get
            {
                string name = "GatewayEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "GatewayEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeOrderTransactions
        {
            get
            {
                string name = "IncludeOrderTransactions";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeOrderTransactions";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eLogSeverity LogSeverity
        {
            get
            {
                string name = "LogSeverity";
                var value = CQG.GetProperty<eLogSeverity>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "LogSeverity";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int MaxLogFileCount
        {
            get
            {
                string name = "MaxLogFileCount";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "MaxLogFileCount";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public DateTime MaxLogFileDuration
        {
            get
            {
                string name = "MaxLogFileDuration";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "MaxLogFileDuration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int MaxLogFileSize
        {
            get
            {
                string name = "MaxLogFileSize";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "MaxLogFileSize";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int MessageProcessingTimeout
        {
            get
            {
                string name = "MessageProcessingTimeout";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "MessageProcessingTimeout";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool MetaDataEnabled
        {
            get
            {
                string name = "MetaDataEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "MetaDataEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool NewInstrumentChangeMode
        {
            get
            {
                string name = "NewInstrumentChangeMode";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "NewInstrumentChangeMode";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool NewInstrumentMode
        {
            get
            {
                string name = "NewInstrumentMode";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "NewInstrumentMode";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool NonsynchronizedData
        {
            get
            {
                string name = "NonsynchronizedData";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "NonsynchronizedData";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool PendingOrderActionEnabled
        {
            get
            {
                string name = "PendingOrderActionEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "PendingOrderActionEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public ePositionDetailing PositionDetailing
        {
            get
            {
                string name = "PositionDetailing";
                var value = CQG.GetProperty<ePositionDetailing>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "PositionDetailing";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public ePriceMode PriceMode
        {
            get
            {
                string name = "PriceMode";
                var value = CQG.GetProperty<ePriceMode>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "PriceMode";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string ProviderPassword
        {
            get
            {
                string name = "ProviderPassword";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "ProviderPassword";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool QueryAllAuthorizedTraders
        {
            get
            {
                string name = "QueryAllAuthorizedTraders";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "QueryAllAuthorizedTraders";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eReadyStatusCheck ReadyStatusCheck
        {
            get
            {
                string name = "ReadyStatusCheck";
                var value = CQG.GetProperty<eReadyStatusCheck>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "ReadyStatusCheck";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string RemoteOpenAPILoginService
        {
            get
            {
                string name = "RemoteOpenAPILoginService";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RemoteOpenAPILoginService";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string RemoteOpenAPIServer
        {
            get
            {
                string name = "RemoteOpenAPIServer";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RemoteOpenAPIServer";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGStringCollection RemoteOpenAPIServers
        {
            get
            {
                string name = "RemoteOpenAPIServers";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGStringCollectionClass(key);
                return value;
            }

        }

        public bool ReplaceLoginSession
        {
            get
            {
                string name = "ReplaceLoginSession";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "ReplaceLoginSession";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int SnapshotPeriod
        {
            get
            {
                string name = "SnapshotPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SnapshotPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool StrategyManagerEnabled
        {
            get
            {
                string name = "StrategyManagerEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "StrategyManagerEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeZone TimeZoneCode
        {
            get
            {
                string name = "TimeZoneCode";
                var value = CQG.GetProperty<eTimeZone>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "TimeZoneCode";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UsedFromATLClient
        {
            get
            {
                string name = "UsedFromATLClient";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UsedFromATLClient";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UseOrderSide
        {
            get
            {
                string name = "UseOrderSide";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UseOrderSide";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual void AddRemoteOpenAPIServer(string server_address)
        {
            string name = "AddRemoteOpenAPIServer";
            var args = new object[] { server_address };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ClearRemoteOpenAPIServers()
        {
            string name = "ClearRemoteOpenAPIServers";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        #endregion

    }

    public class CQGBarsTimestampsClass : CQGBarsTimestamps
    {
        private string dcObjKey;

        #region Constructors

        internal CQGBarsTimestampsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGBarsTimestampsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<DateTime>(dcObjKey, name, args);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCELClass : CQGCEL
    {
        private string dcObjKey;

        private System.Timers.Timer eventCheckingTimer;

        #region Constructors

        public CQGCELClass()
        {
            string name = "CQG.CQGCELClass";
            dcObjKey = CQG.CallCtor(name);
            eventCheckingTimer = new System.Timers.Timer();
            eventCheckingTimer.Interval = 30;
            eventCheckingTimer.Elapsed += eventCheckingTimer_Tick;
            eventCheckingTimer.AutoReset = false;
            eventCheckingTimer.Enabled = true;
        }

        internal CQGCELClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
            eventCheckingTimer = new System.Timers.Timer();
            eventCheckingTimer.Interval = 30;
            eventCheckingTimer.Elapsed += eventCheckingTimer_Tick;
            eventCheckingTimer.AutoReset = false;
            eventCheckingTimer.Enabled = true;
        }

        #endregion

        #region Destructor

        ~CQGCELClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGAccounts Accounts
        {
            get
            {
                string name = "Accounts";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountsClass(key);
                return value;
            }

        }

        public eAccountSubscriptionLevel AccountSubscriptionLevel
        {
            get
            {
                string name = "AccountSubscriptionLevel";
                var value = CQG.GetProperty<eAccountSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AccountSubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGAdvancedStudies AllAdvancedStudies
        {
            get
            {
                string name = "AllAdvancedStudies";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAdvancedStudiesClass(key);
                return value;
            }

        }

        public CQGConditions AllConditions
        {
            get
            {
                string name = "AllConditions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGConditionsClass(key);
                return value;
            }

        }

        public CQGConstantVolumeBarsCollection AllConstantVolumeBars
        {
            get
            {
                string name = "AllConstantVolumeBars";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGConstantVolumeBarsCollectionClass(key);
                return value;
            }

        }

        public CQGCustomStudies AllCustomStudies
        {
            get
            {
                string name = "AllCustomStudies";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCustomStudiesClass(key);
                return value;
            }

        }

        public CQGExpressions AllExpressions
        {
            get
            {
                string name = "AllExpressions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGExpressionsClass(key);
                return value;
            }

        }

        public CQGInstrumentsGroups AllInstrumentsGroups
        {
            get
            {
                string name = "AllInstrumentsGroups";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentsGroupsClass(key);
                return value;
            }

        }

        public CQGManualFillsCollection AllManualFills
        {
            get
            {
                string name = "AllManualFills";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGManualFillsCollectionClass(key);
                return value;
            }

        }

        public CQGPointAndFigureBarsCollection AllPointAndFigureBars
        {
            get
            {
                string name = "AllPointAndFigureBars";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGPointAndFigureBarsCollectionClass(key);
                return value;
            }

        }

        public CQGStrategyDefinitions AllStrategyDefinitions
        {
            get
            {
                string name = "AllStrategyDefinitions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGStrategyDefinitionsClass(key);
                return value;
            }

        }

        public CQGSubMinuteBarsCollection AllSubMinuteBars
        {
            get
            {
                string name = "AllSubMinuteBars";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGSubMinuteBarsCollectionClass(key);
                return value;
            }

        }

        public CQGTFlowBarsCollection AllTFlowBars
        {
            get
            {
                string name = "AllTFlowBars";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTFlowBarsCollectionClass(key);
                return value;
            }

        }

        public CQGTicksCollection AllTicks
        {
            get
            {
                string name = "AllTicks";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTicksCollectionClass(key);
                return value;
            }

        }

        public CQGTimedBarsCollection AllTimedBars
        {
            get
            {
                string name = "AllTimedBars";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTimedBarsCollectionClass(key);
                return value;
            }

        }

        public CQGTradingSystems AllTradingSystems
        {
            get
            {
                string name = "AllTradingSystems";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemsClass(key);
                return value;
            }

        }

        public CQGYieldsCollection AllYields
        {
            get
            {
                string name = "AllYields";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGYieldsCollectionClass(key);
                return value;
            }

        }

        public CQGAPIConfig APIConfiguration
        {
            get
            {
                string name = "APIConfiguration";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAPIConfigClass(key);
                return value;
            }

        }

        public CQGCELConfiguration Configuration
        {
            get
            {
                string name = "Configuration";
                var value = CQG.GetProperty<CQGCELConfiguration>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Configuration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGCurrencyRates CurrencyRates
        {
            get
            {
                string name = "CurrencyRates";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCurrencyRatesClass(key);
                return value;
            }

        }

        public CQGDirectEventsAccessor DirectEventsAccessor
        {
            get
            {
                string name = "DirectEventsAccessor";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGDirectEventsAccessorClass(key);
                return value;
            }

        }

        public CQGEnvironment Environment
        {
            get
            {
                string name = "Environment";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGEnvironmentClass(key);
                return value;
            }

        }

        public CQGInstruments Instruments
        {
            get
            {
                string name = "Instruments";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentsClass(key);
                return value;
            }

        }

        public CQGOrders InternalOrders
        {
            get
            {
                string name = "InternalOrders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrdersClass(key);
                return value;
            }

        }

        public bool IsStarted
        {
            get
            {
                string name = "IsStarted";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public CQGLogger Logger
        {
            get
            {
                string name = "Logger";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGLoggerClass(key);
                return value;
            }

        }

        public CQGOrders Orders
        {
            get
            {
                string name = "Orders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrdersClass(key);
                return value;
            }

        }

        public bool OTPRequired
        {
            get
            {
                string name = "OTPRequired";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Events

        public event _ICQGCELEvents_AccountChangedEventHandler AccountChanged;

        public event _ICQGCELEvents_AdvancedStudyAddedEventHandler AdvancedStudyAdded;

        public event _ICQGCELEvents_AdvancedStudyDefinitionsResolvedEventHandler AdvancedStudyDefinitionsResolved;

        public event _ICQGCELEvents_AdvancedStudyInsertedEventHandler AdvancedStudyInserted;

        public event _ICQGCELEvents_AdvancedStudyRemovedEventHandler AdvancedStudyRemoved;

        public event _ICQGCELEvents_AdvancedStudyResolvedEventHandler AdvancedStudyResolved;

        public event _ICQGCELEvents_AdvancedStudyUpdatedEventHandler AdvancedStudyUpdated;

        public event _ICQGCELEvents_AlgorithmicOrderPlacedEventHandler AlgorithmicOrderPlaced;

        public event _ICQGCELEvents_AlgorithmicOrderRegistrationCompleteEventHandler AlgorithmicOrderRegistrationComplete;

        public event _ICQGCELEvents_AllOrdersCanceledEventHandler AllOrdersCanceled;

        public event _ICQGCELEvents_AuthenticationStatusChangedEventHandler AuthenticationStatusChanged;

        public event _ICQGCELEvents_BarsTimestampsResolvedEventHandler BarsTimestampsResolved;

        public event _ICQGCELEvents_CELStartedEventHandler CELStarted;

        public event _ICQGCELEvents_CommodityInstrumentsResolvedEventHandler CommodityInstrumentsResolved;

        public event _ICQGCELEvents_ConditionAddedEventHandler ConditionAdded;

        public event _ICQGCELEvents_ConditionDefinitionsResolvedEventHandler ConditionDefinitionsResolved;

        public event _ICQGCELEvents_ConditionInsertedEventHandler ConditionInserted;

        public event _ICQGCELEvents_ConditionRemovedEventHandler ConditionRemoved;

        public event _ICQGCELEvents_ConditionResolvedEventHandler ConditionResolved;

        public event _ICQGCELEvents_ConditionUpdatedEventHandler ConditionUpdated;

        public event _ICQGCELEvents_ConstantVolumeBarsAddedEventHandler ConstantVolumeBarsAdded;

        public event _ICQGCELEvents_ConstantVolumeBarsInsertedEventHandler ConstantVolumeBarsInserted;

        public event _ICQGCELEvents_ConstantVolumeBarsRemovedEventHandler ConstantVolumeBarsRemoved;

        public event _ICQGCELEvents_ConstantVolumeBarsResolvedEventHandler ConstantVolumeBarsResolved;

        public event _ICQGCELEvents_ConstantVolumeBarsUpdatedEventHandler ConstantVolumeBarsUpdated;

        public event _ICQGCELEvents_CurrencyRatesChangedEventHandler CurrencyRatesChanged;

        public event _ICQGCELEvents_CustomSessionsResolvedEventHandler CustomSessionsResolved;

        public event _ICQGCELEvents_CustomStudyAddedEventHandler CustomStudyAdded;

        public event _ICQGCELEvents_CustomStudyDefinitionsResolvedEventHandler CustomStudyDefinitionsResolved;

        public event _ICQGCELEvents_CustomStudyInsertedEventHandler CustomStudyInserted;

        public event _ICQGCELEvents_CustomStudyRemovedEventHandler CustomStudyRemoved;

        public event _ICQGCELEvents_CustomStudyResolvedEventHandler CustomStudyResolved;

        public event _ICQGCELEvents_CustomStudyUpdatedEventHandler CustomStudyUpdated;

        public event _ICQGCELEvents_DataConnectionStatusChangedEventHandler DataConnectionStatusChanged;

        public event _ICQGCELEvents_DataErrorEventHandler DataError;

        public event _ICQGCELEvents_DataSourcesResolvedEventHandler DataSourcesResolved;

        public event _ICQGCELEvents_DataSourceSymbolsResolvedEventHandler DataSourceSymbolsResolved;

        public event _ICQGCELEvents_ExpressionAddedEventHandler ExpressionAdded;

        public event _ICQGCELEvents_ExpressionInsertedEventHandler ExpressionInserted;

        public event _ICQGCELEvents_ExpressionRemovedEventHandler ExpressionRemoved;

        public event _ICQGCELEvents_ExpressionResolvedEventHandler ExpressionResolved;

        public event _ICQGCELEvents_ExpressionUpdatedEventHandler ExpressionUpdated;

        public event _ICQGCELEvents_GWConnectionStatusChangedEventHandler GWConnectionStatusChanged;

        public event _ICQGCELEvents_GWEnvironmentChangedEventHandler GWEnvironmentChanged;

        public event _ICQGCELEvents_HistoricalSessionsResolvedEventHandler HistoricalSessionsResolved;

        public event _ICQGCELEvents_ICConnectionStatusChangedEventHandler ICConnectionStatusChanged;

        public event _ICQGCELEvents_IncorrectSymbolEventHandler IncorrectSymbol;

        public event _ICQGCELEvents_InstrumentChangedEventHandler InstrumentChanged;

        public event _ICQGCELEvents_InstrumentDOMChangedEventHandler InstrumentDOMChanged;

        public event _ICQGCELEvents_InstrumentsGroupChangedEventHandler InstrumentsGroupChanged;

        public event _ICQGCELEvents_InstrumentsGroupResolvedEventHandler InstrumentsGroupResolved;

        public event _ICQGCELEvents_InstrumentSubscribedEventHandler InstrumentSubscribed;

        public event _ICQGCELEvents_IsReadyEventHandler IsReady;

        public event _ICQGCELEvents_LineTimeChangedEventHandler LineTimeChanged;

        public event _ICQGCELEvents_ManualFillChangedEventHandler ManualFillChanged;

        public event _ICQGCELEvents_ManualFillsResolvedEventHandler ManualFillsResolved;

        public event _ICQGCELEvents_ManualFillUpdateResolvedEventHandler ManualFillUpdateResolved;

        public event _ICQGCELEvents_OnIdleEventHandler OnIdle;

        public event _ICQGCELEvents_OnQueryProgressEventHandler OnQueryProgress;

        public event _ICQGCELEvents_OrderChangedEventHandler OrderChanged;

        public event _ICQGCELEvents_PasswordChangedEventHandler PasswordChanged;

        public event _ICQGCELEvents_PointAndFigureBarsAddedEventHandler PointAndFigureBarsAdded;

        public event _ICQGCELEvents_PointAndFigureBarsInsertedEventHandler PointAndFigureBarsInserted;

        public event _ICQGCELEvents_PointAndFigureBarsRemovedEventHandler PointAndFigureBarsRemoved;

        public event _ICQGCELEvents_PointAndFigureBarsResolvedEventHandler PointAndFigureBarsResolved;

        public event _ICQGCELEvents_PointAndFigureBarsUpdatedEventHandler PointAndFigureBarsUpdated;

        public event _ICQGCELEvents_PositionsStatementResolvedEventHandler PositionsStatementResolved;

        public event _ICQGCELEvents_QFormulaDefinitionsResolvedEventHandler QFormulaDefinitionsResolved;

        public event _ICQGCELEvents_StrategyDefinitionProgressEventHandler StrategyDefinitionProgress;

        public event _ICQGCELEvents_SubMinuteBarsAddedEventHandler SubMinuteBarsAdded;

        public event _ICQGCELEvents_SubMinuteBarsInsertedEventHandler SubMinuteBarsInserted;

        public event _ICQGCELEvents_SubMinuteBarsRemovedEventHandler SubMinuteBarsRemoved;

        public event _ICQGCELEvents_SubMinuteBarsResolvedEventHandler SubMinuteBarsResolved;

        public event _ICQGCELEvents_SubMinuteBarsUpdatedEventHandler SubMinuteBarsUpdated;

        public event _ICQGCELEvents_SummariesStatementResolvedEventHandler SummariesStatementResolved;

        public event _ICQGCELEvents_TFlowBarsAddedEventHandler TFlowBarsAdded;

        public event _ICQGCELEvents_TFlowBarsInsertedEventHandler TFlowBarsInserted;

        public event _ICQGCELEvents_TFlowBarsRemovedEventHandler TFlowBarsRemoved;

        public event _ICQGCELEvents_TFlowBarsResolvedEventHandler TFlowBarsResolved;

        public event _ICQGCELEvents_TFlowBarsUpdatedEventHandler TFlowBarsUpdated;

        public event _ICQGCELEvents_TicksAddedEventHandler TicksAdded;

        public event _ICQGCELEvents_TicksResolvedEventHandler TicksResolved;

        public event _ICQGCELEvents_TimedBarsAddedEventHandler TimedBarsAdded;

        public event _ICQGCELEvents_TimedBarsInsertedEventHandler TimedBarsInserted;

        public event _ICQGCELEvents_TimedBarsRemovedEventHandler TimedBarsRemoved;

        public event _ICQGCELEvents_TimedBarsResolvedEventHandler TimedBarsResolved;

        public event _ICQGCELEvents_TimedBarsUpdatedEventHandler TimedBarsUpdated;

        public event _ICQGCELEvents_TradableCommoditiesResolvedEventHandler TradableCommoditiesResolved;

        public event _ICQGCELEvents_TradableExchangesResolvedEventHandler TradableExchangesResolved;

        public event _ICQGCELEvents_TradingSystemAddNotificationEventHandler TradingSystemAddNotification;

        public event _ICQGCELEvents_TradingSystemDefinitionsResolvedEventHandler TradingSystemDefinitionsResolved;

        public event _ICQGCELEvents_TradingSystemInsertNotificationEventHandler TradingSystemInsertNotification;

        public event _ICQGCELEvents_TradingSystemRemoveNotificationEventHandler TradingSystemRemoveNotification;

        public event _ICQGCELEvents_TradingSystemResolvedEventHandler TradingSystemResolved;

        public event _ICQGCELEvents_TradingSystemTradeRelationAddNotificationEventHandler TradingSystemTradeRelationAddNotification;

        public event _ICQGCELEvents_TradingSystemUpdateNotificationEventHandler TradingSystemUpdateNotification;

        public event _ICQGCELEvents_YieldsAddedEventHandler YieldsAdded;

        public event _ICQGCELEvents_YieldsInsertedEventHandler YieldsInserted;

        public event _ICQGCELEvents_YieldsRemovedEventHandler YieldsRemoved;

        public event _ICQGCELEvents_YieldsResolvedEventHandler YieldsResolved;

        public event _ICQGCELEvents_YieldsUpdatedEventHandler YieldsUpdated;

        #endregion

        #region Methods

        public virtual void ActivateAllOrders(CQGAccount cqg_account = null, CQGInstrument cqg_instrument = null, bool from_all_traders = false, eOrderSide order_side = eOrderSide.osdUndefined)
        {
            string name = "ActivateAllOrders";
            var args = new object[] { cqg_account, cqg_instrument, from_all_traders, order_side };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ActivateAllOrdersEx(CQGOrderActionRequest cqg_order_action_request)
        {
            string name = "ActivateAllOrdersEx";
            var args = new object[] { cqg_order_action_request };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CancelAllOrders(CQGAccount cqg_account = null, CQGInstrument cqg_instrument = null, bool from_all_traders = false, bool parked_ = false, eOrderSide order_side = eOrderSide.osdUndefined)
        {
            string name = "CancelAllOrders";
            var args = new object[] { cqg_account, cqg_instrument, from_all_traders, parked_, order_side };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void CancelAllOrdersEx(CQGOrderActionRequest cqg_order_action_request)
        {
            string name = "CancelAllOrdersEx";
            var args = new object[] { cqg_order_action_request };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ChangePassword(string username_, string old_password, string new_password)
        {
            string name = "ChangePassword";
            var args = new object[] { username_, old_password, new_password };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ChangeRemoteOpenAPIServer(string server_address)
        {
            string name = "ChangeRemoteOpenAPIServer";
            var args = new object[] { server_address };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGAccounts CreateAccountsCollection()
        {
            string name = "CreateAccountsCollection";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGAccountsClass(key);
            return result;
        }

        public virtual CQGAdvancedStudyRequest CreateAdvancedStudyRequest(string name_or_abbr)
        {
            string name = "CreateAdvancedStudyRequest";
            var args = new object[] { name_or_abbr };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGAdvancedStudyRequestClass(key);
            return result;
        }

        public virtual CQGAlgorithmicOrderDefinitions CreateAlgorithmicOrderDefinitions()
        {
            string name = "CreateAlgorithmicOrderDefinitions";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGAlgorithmicOrderDefinitionsClass(key);
            return result;
        }

        public virtual CQGConditionRequest CreateConditionRequest(string condition_name)
        {
            string name = "CreateConditionRequest";
            var args = new object[] { condition_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGConditionRequestClass(key);
            return result;
        }

        public virtual CQGConstantVolumeBarsRequest CreateConstantVolumeBarsRequest()
        {
            string name = "CreateConstantVolumeBarsRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGConstantVolumeBarsRequestClass(key);
            return result;
        }

        public virtual CQGCustomStudyRequest CreateCustomStudyRequest(string name_or_abbr)
        {
            string name = "CreateCustomStudyRequest";
            var args = new object[] { name_or_abbr };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGCustomStudyRequestClass(key);
            return result;
        }

        public virtual CQGExecutionPattern CreateExecutionPattern(CQGStrategyDefinition cqg_definition = null, eOrderType order_type = eOrderType.otUndefined)
        {
            string name = "CreateExecutionPattern";
            var args = new object[] { cqg_definition, order_type };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGExecutionPatternClass(key);
            return result;
        }

        public virtual CQGExpressionRequest CreateExpressionRequest()
        {
            string name = "CreateExpressionRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGExpressionRequestClass(key);
            return result;
        }

        public virtual CQGHistoricalSessionsRequest CreateHistoricalSessionsRequest()
        {
            string name = "CreateHistoricalSessionsRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGHistoricalSessionsRequestClass(key);
            return result;
        }

        public virtual CQGInstrumentSubscriptionRequest CreateInstrumentRequest()
        {
            string name = "CreateInstrumentRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGInstrumentSubscriptionRequestClass(key);
            return result;
        }

        public virtual CQGInstrumentsGroupRequest CreateInstrumentsGroupRequest()
        {
            string name = "CreateInstrumentsGroupRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGInstrumentsGroupRequestClass(key);
            return result;
        }

        public virtual CQGManualFillRequest CreateManualFillRequest(eManualFillUpdateType update_type, CQGManualFill manual_fill = null)
        {
            string name = "CreateManualFillRequest";
            var args = new object[] { update_type, manual_fill };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGManualFillRequestClass(key);
            return result;
        }

        public virtual CQGOrder CreateOrder(eOrderType order_type, CQGInstrument cqg_instrument, CQGAccount cqg_account, int order_quantity, eOrderSide order_side = eOrderSide.osdUndefined, double limit_price = 0, double stop_price = 0, string ue_name_part = "")
        {
            string name = "CreateOrder";
            var args = new object[] { order_type, cqg_instrument, cqg_account, order_quantity, order_side, limit_price, stop_price, ue_name_part };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrderClass(key);
            return result;
        }

        public virtual CQGOrderActionRequest CreateOrderActionRequest()
        {
            string name = "CreateOrderActionRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGOrderActionRequestClass(key);
            return result;
        }

        public virtual CQGOrder CreateOrderByInstrumentName(eOrderType order_type, string instrument_name, CQGAccount cqg_account, int order_quantity, eOrderSide order_side = eOrderSide.osdUndefined, double limit_price = 0, double stop_price = 0, string ue_name_part = "")
        {
            string name = "CreateOrderByInstrumentName";
            var args = new object[] { order_type, instrument_name, cqg_account, order_quantity, order_side, limit_price, stop_price, ue_name_part };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrderClass(key);
            return result;
        }

        public virtual CQGOrderChain CreateOrderChain()
        {
            string name = "CreateOrderChain";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGOrderChainClass(key);
            return result;
        }

        public virtual CQGPointAndFigureBarsRequest CreatePointAndFigureBarsRequest()
        {
            string name = "CreatePointAndFigureBarsRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGPointAndFigureBarsRequestClass(key);
            return result;
        }

        public virtual CQGOrder CreateStrategyOrder(eOrderType order_type, CQGStrategyDefinition cqg_definition, CQGAccount cqg_account, CQGAccounts cqg_accounts, int order_quantity, eOrderSide order_side = eOrderSide.osdUndefined, double limit_price = -2147483647, double stop_price = -2147483647, string ue_name_part = "")
        {
            string name = "CreateStrategyOrder";
            var args = new object[] { order_type, cqg_definition, cqg_account, cqg_accounts, order_quantity, order_side, limit_price, stop_price, ue_name_part };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrderClass(key);
            return result;
        }

        public virtual CQGOrder CreateStrategyOrderByExpression(eOrderType order_type, string expression_string, CQGAccount cqg_account, CQGAccounts cqg_accounts, int order_quantity, eOrderSide order_side = eOrderSide.osdUndefined, double limit_price = -2147483647, double stop_price = -2147483647, string ue_name_part = "")
        {
            string name = "CreateStrategyOrderByExpression";
            var args = new object[] { order_type, expression_string, cqg_account, cqg_accounts, order_quantity, order_side, limit_price, stop_price, ue_name_part };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrderClass(key);
            return result;
        }

        public virtual CQGSubMinuteBarsRequest CreateSubMinuteBarsRequest()
        {
            string name = "CreateSubMinuteBarsRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGSubMinuteBarsRequestClass(key);
            return result;
        }

        public virtual CQGTFlowBarsRequest CreateTFlowBarsRequest()
        {
            string name = "CreateTFlowBarsRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGTFlowBarsRequestClass(key);
            return result;
        }

        public virtual CQGTicksRequest CreateTicksRequest()
        {
            string name = "CreateTicksRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGTicksRequestClass(key);
            return result;
        }

        public virtual CQGTimedBarsRequest CreateTimedBarsRequest()
        {
            string name = "CreateTimedBarsRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGTimedBarsRequestClass(key);
            return result;
        }

        public virtual CQGTradingSystemRequest CreateTradingSystemRequest(string name_or_abbr)
        {
            string name = "CreateTradingSystemRequest";
            var args = new object[] { name_or_abbr };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradingSystemRequestClass(key);
            return result;
        }

        public virtual CQGYieldsRequest CreateYieldsRequest()
        {
            string name = "CreateYieldsRequest";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGYieldsRequestClass(key);
            return result;
        }

        public virtual CQGStrategyDefinition DefineStrategy(string request_string_)
        {
            string name = "DefineStrategy";
            var args = new object[] { request_string_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGStrategyDefinitionClass(key);
            return result;
        }

        public virtual void GWLogoff()
        {
            string name = "GWLogoff";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void GWLogon(string username_, string password_)
        {
            string name = "GWLogon";
            var args = new object[] { username_, password_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void GWOTPLogon(string username_, string password_, string otpassword_)
        {
            string name = "GWOTPLogon";
            var args = new object[] { username_, password_, otpassword_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual bool IsValid(object value_or_object)
        {
            string name = "IsValid";
            var args = new object[] { value_or_object };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        public virtual void LogOn(string username_, string password_)
        {
            string name = "LogOn";
            var args = new object[] { username_, password_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void ModifyCompoundOrder(int compound_order_id, string compound_order_guid, CQGOrderChain order_chain)
        {
            string name = "ModifyCompoundOrder";
            var args = new object[] { compound_order_id, compound_order_guid, order_chain };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void NewInstrument(string symbol_)
        {
            string name = "NewInstrument";
            var args = new object[] { symbol_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void PlaceCompoundOrder(CQGOrderChain order_chain)
        {
            string name = "PlaceCompoundOrder";
            var args = new object[] { order_chain };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGOrdersQuery QueryOrders(CQGAccount cqg_account, CQGInstrument cqg_instrument = null, eOrderStatusFilter status_filter = eOrderStatusFilter.osfAll, DateTime date_ = default(DateTime), eOrderSide order_side = eOrderSide.osdUndefined)
        {
            string name = "QueryOrders";
            var args = new object[] { cqg_account, cqg_instrument, status_filter, date_, order_side };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrdersQueryClass(key);
            return result;
        }

        public virtual void QueryPositionsStatement(int gw_account_id, DateTime date_)
        {
            string name = "QueryPositionsStatement";
            var args = new object[] { gw_account_id, date_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void QuerySummariesStatement(int gw_account_id, DateTime date_)
        {
            string name = "QuerySummariesStatement";
            var args = new object[] { gw_account_id, date_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RegisterAlgorithmicOrder(string guid_, string name_, string abbrv_, string description_, CQGAlgorithmicOrderDefinitions definitions_, int icon_index = 0)
        {
            string name = "RegisterAlgorithmicOrder";
            var args = new object[] { guid_, name_, abbrv_, description_, definitions_, icon_index };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveAdvancedStudy(CQGAdvancedStudy cqg_advanced_study)
        {
            string name = "RemoveAdvancedStudy";
            var args = new object[] { cqg_advanced_study };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveAllAdvancedStudies()
        {
            string name = "RemoveAllAdvancedStudies";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllConditions()
        {
            string name = "RemoveAllConditions";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllConstantVolumeBars()
        {
            string name = "RemoveAllConstantVolumeBars";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllCustomStudies()
        {
            string name = "RemoveAllCustomStudies";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllExpressions()
        {
            string name = "RemoveAllExpressions";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllInstruments()
        {
            string name = "RemoveAllInstruments";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllPointAndFigureBars()
        {
            string name = "RemoveAllPointAndFigureBars";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllSubMinuteBars()
        {
            string name = "RemoveAllSubMinuteBars";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllTFlowBars()
        {
            string name = "RemoveAllTFlowBars";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllTicks()
        {
            string name = "RemoveAllTicks";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllTimedBars()
        {
            string name = "RemoveAllTimedBars";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllTradingSystems()
        {
            string name = "RemoveAllTradingSystems";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveAllYields()
        {
            string name = "RemoveAllYields";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RemoveCondition(CQGCondition cqg_condition)
        {
            string name = "RemoveCondition";
            var args = new object[] { cqg_condition };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveConstantVolumeBars(CQGConstantVolumeBars cqg_constant_volume_bars)
        {
            string name = "RemoveConstantVolumeBars";
            var args = new object[] { cqg_constant_volume_bars };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveCustomStudy(CQGCustomStudy cqg_custom_study)
        {
            string name = "RemoveCustomStudy";
            var args = new object[] { cqg_custom_study };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveExpression(CQGExpression cqg_expression)
        {
            string name = "RemoveExpression";
            var args = new object[] { cqg_expression };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveInstrument(CQGInstrument cqg_instrument)
        {
            string name = "RemoveInstrument";
            var args = new object[] { cqg_instrument };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveInstrumentsGroup(CQGInstrumentsGroup instruments_group)
        {
            string name = "RemoveInstrumentsGroup";
            var args = new object[] { instruments_group };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemovePointAndFigureBars(CQGPointAndFigureBars cqg_point_and_figure_bars)
        {
            string name = "RemovePointAndFigureBars";
            var args = new object[] { cqg_point_and_figure_bars };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveSubMinuteBars(CQGSubMinuteBars cqg_subminute_bars)
        {
            string name = "RemoveSubMinuteBars";
            var args = new object[] { cqg_subminute_bars };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveTFlowBars(CQGTFlowBars cqg_tflow_bars)
        {
            string name = "RemoveTFlowBars";
            var args = new object[] { cqg_tflow_bars };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveTicks(CQGTicks cqg_ticks)
        {
            string name = "RemoveTicks";
            var args = new object[] { cqg_ticks };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveTimedBars(CQGTimedBars cqg_timed_bars)
        {
            string name = "RemoveTimedBars";
            var args = new object[] { cqg_timed_bars };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveTradingSystem(CQGTradingSystem cqg_trading_system)
        {
            string name = "RemoveTradingSystem";
            var args = new object[] { cqg_trading_system };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RemoveYields(CQGYields cqg_yields)
        {
            string name = "RemoveYields";
            var args = new object[] { cqg_yields };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGAdvancedStudy RequestAdvancedStudy(CQGAdvancedStudyRequest cqg_advanced_study_request)
        {
            string name = "RequestAdvancedStudy";
            var args = new object[] { cqg_advanced_study_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGAdvancedStudyClass(key);
            return result;
        }

        public virtual void RequestAdvancedStudyDefinitions()
        {
            string name = "RequestAdvancedStudyDefinitions";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual CQGBarsTimestamps RequestBarsTimestamps(CQGTimedBarsRequest cqg_timestamps_request)
        {
            string name = "RequestBarsTimestamps";
            var args = new object[] { cqg_timestamps_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGBarsTimestampsClass(key);
            return result;
        }

        public virtual void RequestCommodityInstruments(string commodity_name, eInstrumentType instrument_types, bool tradable_only = false)
        {
            string name = "RequestCommodityInstruments";
            var args = new object[] { commodity_name, instrument_types, tradable_only };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGCondition RequestCondition(CQGConditionRequest cqg_condition_request)
        {
            string name = "RequestCondition";
            var args = new object[] { cqg_condition_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGConditionClass(key);
            return result;
        }

        public virtual void RequestConditionDefinitions()
        {
            string name = "RequestConditionDefinitions";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual CQGConstantVolumeBars RequestConstantVolumeBars(CQGConstantVolumeBarsRequest cqg_constant_volume_bars_request)
        {
            string name = "RequestConstantVolumeBars";
            var args = new object[] { cqg_constant_volume_bars_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGConstantVolumeBarsClass(key);
            return result;
        }

        public virtual void RequestCustomSessions()
        {
            string name = "RequestCustomSessions";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual CQGCustomStudy RequestCustomStudy(CQGCustomStudyRequest cqg_custom_study_request)
        {
            string name = "RequestCustomStudy";
            var args = new object[] { cqg_custom_study_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGCustomStudyClass(key);
            return result;
        }

        public virtual void RequestCustomStudyDefinitions()
        {
            string name = "RequestCustomStudyDefinitions";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RequestDataSources()
        {
            string name = "RequestDataSources";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void RequestDataSourceSymbols(string data_source_abbreviation)
        {
            string name = "RequestDataSourceSymbols";
            var args = new object[] { data_source_abbreviation };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGExpression RequestExpression(CQGExpressionRequest cqg_expression_request)
        {
            string name = "RequestExpression";
            var args = new object[] { cqg_expression_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGExpressionClass(key);
            return result;
        }

        public virtual void RequestHistoricalSessions(CQGHistoricalSessionsRequest cqg_historical_sessions_request)
        {
            string name = "RequestHistoricalSessions";
            var args = new object[] { cqg_historical_sessions_request };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RequestInstrumentsGroup(CQGInstrumentsGroupRequest group_request, bool trace_group_changes)
        {
            string name = "RequestInstrumentsGroup";
            var args = new object[] { group_request, trace_group_changes };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RequestManualFills(int gw_account_id, eManualFillsDataLevel update_level)
        {
            string name = "RequestManualFills";
            var args = new object[] { gw_account_id, update_level };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RequestManualFillUpdate(CQGManualFillRequest cqg_manual_fill_request)
        {
            string name = "RequestManualFillUpdate";
            var args = new object[] { cqg_manual_fill_request };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGPointAndFigureBars RequestPointAndFigureBars(CQGPointAndFigureBarsRequest cqg_point_and_figure_bars_request)
        {
            string name = "RequestPointAndFigureBars";
            var args = new object[] { cqg_point_and_figure_bars_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGPointAndFigureBarsClass(key);
            return result;
        }

        public virtual void RequestQFormulaDefinitions()
        {
            string name = "RequestQFormulaDefinitions";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual CQGSubMinuteBars RequestSubMinuteBars(CQGSubMinuteBarsRequest cqg_subminute_bars_request)
        {
            string name = "RequestSubMinuteBars";
            var args = new object[] { cqg_subminute_bars_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGSubMinuteBarsClass(key);
            return result;
        }

        public virtual CQGTFlowBars RequestTFlowBars(CQGTFlowBarsRequest cqg_tflow_bars_request)
        {
            string name = "RequestTFlowBars";
            var args = new object[] { cqg_tflow_bars_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTFlowBarsClass(key);
            return result;
        }

        public virtual CQGTicks RequestTicks(CQGTicksRequest cqg_ticks_request)
        {
            string name = "RequestTicks";
            var args = new object[] { cqg_ticks_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTicksClass(key);
            return result;
        }

        public virtual CQGTimedBars RequestTimedBars(CQGTimedBarsRequest cqg_timed_bars_request)
        {
            string name = "RequestTimedBars";
            var args = new object[] { cqg_timed_bars_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTimedBarsClass(key);
            return result;
        }

        public virtual void RequestTradableCommodities(int gw_account_id = 0)
        {
            string name = "RequestTradableCommodities";
            var args = new object[] { gw_account_id };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void RequestTradableExchanges(int gw_account_id = 0)
        {
            string name = "RequestTradableExchanges";
            var args = new object[] { gw_account_id };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual CQGTradingSystem RequestTradingSystem(CQGTradingSystemRequest cqg_trading_system_request)
        {
            string name = "RequestTradingSystem";
            var args = new object[] { cqg_trading_system_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradingSystemClass(key);
            return result;
        }

        public virtual void RequestTradingSystemDefinitions()
        {
            string name = "RequestTradingSystemDefinitions";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual CQGYields RequestYields(CQGYieldsRequest cqg_yields_request)
        {
            string name = "RequestYields";
            var args = new object[] { cqg_yields_request };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGYieldsClass(key);
            return result;
        }

        public virtual void Shutdown()
        {
            string name = "Shutdown";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void Startup()
        {
            string name = "Startup";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void SubscribeNewInstrument(CQGInstrumentSubscriptionRequest instrument_request)
        {
            string name = "SubscribeNewInstrument";
            var args = new object[] { instrument_request };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void TerminateCQGIC(bool start_again = false)
        {
            string name = "TerminateCQGIC";
            var args = new object[] { start_again };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void UnregisterAlgorithmicOrder(string guid_)
        {
            string name = "UnregisterAlgorithmicOrder";
            var args = new object[] { guid_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

        #region TimerTickHandlers

        private void eventCheckingTimer_Tick(Object source, System.Timers.ElapsedEventArgs e)
        {
            CQG.SubscriberChecking("AccountChanged", dcObjKey, 
                AccountChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AccountChanged"], 
                AccountChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AccountChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AccountChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AccountChanged", out args);
                if (happened)
                {
                    var arg1 = new CQGAccountClass((string)args[1]);
                    var arg2 = new CQGPositionClass((string)args[2]);
                    AccountChanged.Invoke((eAccountChangeType)args[0], (CQGAccount)arg1, (CQGPosition)arg2);
                }
            }

            CQG.SubscriberChecking("AdvancedStudyAdded", dcObjKey, 
                AdvancedStudyAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyAdded"], 
                AdvancedStudyAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AdvancedStudyAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGAdvancedStudyClass((string)args[0]);
                    AdvancedStudyAdded.Invoke((CQGAdvancedStudy)arg0);
                }
            }

            CQG.SubscriberChecking("AdvancedStudyDefinitionsResolved", dcObjKey, 
                AdvancedStudyDefinitionsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyDefinitionsResolved"], 
                AdvancedStudyDefinitionsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyDefinitionsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyDefinitionsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AdvancedStudyDefinitionsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGAdvancedStudyDefinitionsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    AdvancedStudyDefinitionsResolved.Invoke((CQGAdvancedStudyDefinitions)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("AdvancedStudyInserted", dcObjKey, 
                AdvancedStudyInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyInserted"], 
                AdvancedStudyInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AdvancedStudyInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGAdvancedStudyClass((string)args[0]);
                    AdvancedStudyInserted.Invoke((CQGAdvancedStudy)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("AdvancedStudyRemoved", dcObjKey, 
                AdvancedStudyRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyRemoved"], 
                AdvancedStudyRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AdvancedStudyRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGAdvancedStudyClass((string)args[0]);
                    AdvancedStudyRemoved.Invoke((CQGAdvancedStudy)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("AdvancedStudyResolved", dcObjKey, 
                AdvancedStudyResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyResolved"], 
                AdvancedStudyResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AdvancedStudyResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGAdvancedStudyClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    AdvancedStudyResolved.Invoke((CQGAdvancedStudy)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("AdvancedStudyUpdated", dcObjKey, 
                AdvancedStudyUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyUpdated"], 
                AdvancedStudyUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AdvancedStudyUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AdvancedStudyUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGAdvancedStudyClass((string)args[0]);
                    AdvancedStudyUpdated.Invoke((CQGAdvancedStudy)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("AlgorithmicOrderPlaced", dcObjKey, 
                AlgorithmicOrderPlaced != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AlgorithmicOrderPlaced"], 
                AlgorithmicOrderPlaced == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AlgorithmicOrderPlaced"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AlgorithmicOrderPlaced"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AlgorithmicOrderPlaced", out args);
                if (happened)
                {
                    var arg1 = new CQGAlgorithmicOrderParametersClass((string)args[1]);
                    var arg2 = new CQGAlgorithmicOrderPropertiesClass((string)args[2]);
                    AlgorithmicOrderPlaced.Invoke((string)args[0], (CQGAlgorithmicOrderParameters)arg1, (CQGAlgorithmicOrderProperties)arg2);
                }
            }

            CQG.SubscriberChecking("AlgorithmicOrderRegistrationComplete", dcObjKey, 
                AlgorithmicOrderRegistrationComplete != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AlgorithmicOrderRegistrationComplete"], 
                AlgorithmicOrderRegistrationComplete == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AlgorithmicOrderRegistrationComplete"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AlgorithmicOrderRegistrationComplete"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AlgorithmicOrderRegistrationComplete", out args);
                if (happened)
                {
                    var arg1 = new CQGErrorClass((string)args[1]);
                    AlgorithmicOrderRegistrationComplete.Invoke((string)args[0], (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("AllOrdersCanceled", dcObjKey, 
                AllOrdersCanceled != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AllOrdersCanceled"], 
                AllOrdersCanceled == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AllOrdersCanceled"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AllOrdersCanceled"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AllOrdersCanceled", out args);
                if (happened)
                {
                    var arg1 = new CQGIntegerCollectionClass((string)args[1]);
                    var arg2 = new CQGStringCollectionClass((string)args[2]);
                    AllOrdersCanceled.Invoke((eOrderSideFilter)args[0], (CQGIntegerCollection)arg1, (CQGStringCollection)arg2);
                }
            }

            CQG.SubscriberChecking("AuthenticationStatusChanged", dcObjKey, 
                AuthenticationStatusChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["AuthenticationStatusChanged"], 
                AuthenticationStatusChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["AuthenticationStatusChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["AuthenticationStatusChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("AuthenticationStatusChanged", out args);
                if (happened)
                {
                    var arg1 = new CQGErrorClass((string)args[1]);
                    AuthenticationStatusChanged.Invoke((eSessionStatus)args[0], (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("BarsTimestampsResolved", dcObjKey, 
                BarsTimestampsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["BarsTimestampsResolved"], 
                BarsTimestampsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["BarsTimestampsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["BarsTimestampsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("BarsTimestampsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGBarsTimestampsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    BarsTimestampsResolved.Invoke((CQGBarsTimestamps)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("CELStarted", dcObjKey, 
                CELStarted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CELStarted"], 
                CELStarted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CELStarted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CELStarted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CELStarted", out args);
                if (happened)
                {
                    CELStarted.Invoke();
                }
            }

            CQG.SubscriberChecking("CommodityInstrumentsResolved", dcObjKey, 
                CommodityInstrumentsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CommodityInstrumentsResolved"], 
                CommodityInstrumentsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CommodityInstrumentsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CommodityInstrumentsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CommodityInstrumentsResolved", out args);
                if (happened)
                {
                    var arg2 = new CQGCommodityInstrumentsClass((string)args[2]);
                    CommodityInstrumentsResolved.Invoke((string)args[0], (eInstrumentType)args[1], (CQGCommodityInstruments)arg2);
                }
            }

            CQG.SubscriberChecking("ConditionAdded", dcObjKey, 
                ConditionAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionAdded"], 
                ConditionAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConditionAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGConditionClass((string)args[0]);
                    ConditionAdded.Invoke((CQGCondition)arg0);
                }
            }

            CQG.SubscriberChecking("ConditionDefinitionsResolved", dcObjKey, 
                ConditionDefinitionsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionDefinitionsResolved"], 
                ConditionDefinitionsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionDefinitionsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionDefinitionsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConditionDefinitionsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGConditionDefinitionsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    ConditionDefinitionsResolved.Invoke((CQGConditionDefinitions)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("ConditionInserted", dcObjKey, 
                ConditionInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionInserted"], 
                ConditionInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConditionInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGConditionClass((string)args[0]);
                    ConditionInserted.Invoke((CQGCondition)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("ConditionRemoved", dcObjKey, 
                ConditionRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionRemoved"], 
                ConditionRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConditionRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGConditionClass((string)args[0]);
                    ConditionRemoved.Invoke((CQGCondition)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("ConditionResolved", dcObjKey, 
                ConditionResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionResolved"], 
                ConditionResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConditionResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGConditionClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    ConditionResolved.Invoke((CQGCondition)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("ConditionUpdated", dcObjKey, 
                ConditionUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionUpdated"], 
                ConditionUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConditionUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConditionUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGConditionClass((string)args[0]);
                    ConditionUpdated.Invoke((CQGCondition)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("ConstantVolumeBarsAdded", dcObjKey, 
                ConstantVolumeBarsAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsAdded"], 
                ConstantVolumeBarsAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConstantVolumeBarsAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGConstantVolumeBarsClass((string)args[0]);
                    ConstantVolumeBarsAdded.Invoke((CQGConstantVolumeBars)arg0);
                }
            }

            CQG.SubscriberChecking("ConstantVolumeBarsInserted", dcObjKey, 
                ConstantVolumeBarsInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsInserted"], 
                ConstantVolumeBarsInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConstantVolumeBarsInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGConstantVolumeBarsClass((string)args[0]);
                    ConstantVolumeBarsInserted.Invoke((CQGConstantVolumeBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("ConstantVolumeBarsRemoved", dcObjKey, 
                ConstantVolumeBarsRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsRemoved"], 
                ConstantVolumeBarsRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConstantVolumeBarsRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGConstantVolumeBarsClass((string)args[0]);
                    ConstantVolumeBarsRemoved.Invoke((CQGConstantVolumeBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("ConstantVolumeBarsResolved", dcObjKey, 
                ConstantVolumeBarsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsResolved"], 
                ConstantVolumeBarsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConstantVolumeBarsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGConstantVolumeBarsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    ConstantVolumeBarsResolved.Invoke((CQGConstantVolumeBars)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("ConstantVolumeBarsUpdated", dcObjKey, 
                ConstantVolumeBarsUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsUpdated"], 
                ConstantVolumeBarsUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ConstantVolumeBarsUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ConstantVolumeBarsUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGConstantVolumeBarsClass((string)args[0]);
                    ConstantVolumeBarsUpdated.Invoke((CQGConstantVolumeBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("CurrencyRatesChanged", dcObjKey, 
                CurrencyRatesChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CurrencyRatesChanged"], 
                CurrencyRatesChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CurrencyRatesChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CurrencyRatesChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CurrencyRatesChanged", out args);
                if (happened)
                {
                    var arg0 = new CQGCurrencyRatesClass((string)args[0]);
                    CurrencyRatesChanged.Invoke((CQGCurrencyRates)arg0);
                }
            }

            CQG.SubscriberChecking("CustomSessionsResolved", dcObjKey, 
                CustomSessionsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomSessionsResolved"], 
                CustomSessionsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomSessionsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomSessionsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CustomSessionsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGSessionsCollectionClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    CustomSessionsResolved.Invoke((CQGSessionsCollection)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("CustomStudyAdded", dcObjKey, 
                CustomStudyAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyAdded"], 
                CustomStudyAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CustomStudyAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGCustomStudyClass((string)args[0]);
                    CustomStudyAdded.Invoke((CQGCustomStudy)arg0);
                }
            }

            CQG.SubscriberChecking("CustomStudyDefinitionsResolved", dcObjKey, 
                CustomStudyDefinitionsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyDefinitionsResolved"], 
                CustomStudyDefinitionsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyDefinitionsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyDefinitionsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CustomStudyDefinitionsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGCustomStudyDefinitionsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    CustomStudyDefinitionsResolved.Invoke((CQGCustomStudyDefinitions)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("CustomStudyInserted", dcObjKey, 
                CustomStudyInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyInserted"], 
                CustomStudyInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CustomStudyInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGCustomStudyClass((string)args[0]);
                    CustomStudyInserted.Invoke((CQGCustomStudy)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("CustomStudyRemoved", dcObjKey, 
                CustomStudyRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyRemoved"], 
                CustomStudyRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CustomStudyRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGCustomStudyClass((string)args[0]);
                    CustomStudyRemoved.Invoke((CQGCustomStudy)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("CustomStudyResolved", dcObjKey, 
                CustomStudyResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyResolved"], 
                CustomStudyResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CustomStudyResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGCustomStudyClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    CustomStudyResolved.Invoke((CQGCustomStudy)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("CustomStudyUpdated", dcObjKey, 
                CustomStudyUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyUpdated"], 
                CustomStudyUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CustomStudyUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CustomStudyUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGCustomStudyClass((string)args[0]);
                    CustomStudyUpdated.Invoke((CQGCustomStudy)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("DataConnectionStatusChanged", dcObjKey, 
                DataConnectionStatusChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataConnectionStatusChanged"], 
                DataConnectionStatusChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataConnectionStatusChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataConnectionStatusChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("DataConnectionStatusChanged", out args);
                if (happened)
                {
                    DataConnectionStatusChanged.Invoke((eConnectionStatus)args[0]);
                }
            }

            CQG.SubscriberChecking("DataError", dcObjKey, 
                DataError != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataError"], 
                DataError == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataError"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataError"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("DataError", out args);
                if (happened)
                {
                    DataError.Invoke((object)args[0], (string)args[1]);
                }
            }

            CQG.SubscriberChecking("DataSourcesResolved", dcObjKey, 
                DataSourcesResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataSourcesResolved"], 
                DataSourcesResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataSourcesResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataSourcesResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("DataSourcesResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGDataSourcesClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    DataSourcesResolved.Invoke((CQGDataSources)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("DataSourceSymbolsResolved", dcObjKey, 
                DataSourceSymbolsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataSourceSymbolsResolved"], 
                DataSourceSymbolsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataSourceSymbolsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataSourceSymbolsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("DataSourceSymbolsResolved", out args);
                if (happened)
                {
                    var arg1 = new CQGDataSourceSymbolsClass((string)args[1]);
                    var arg2 = new CQGErrorClass((string)args[2]);
                    DataSourceSymbolsResolved.Invoke((string)args[0], (CQGDataSourceSymbols)arg1, (CQGError)arg2);
                }
            }

            CQG.SubscriberChecking("ExpressionAdded", dcObjKey, 
                ExpressionAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionAdded"], 
                ExpressionAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ExpressionAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGExpressionClass((string)args[0]);
                    ExpressionAdded.Invoke((CQGExpression)arg0);
                }
            }

            CQG.SubscriberChecking("ExpressionInserted", dcObjKey, 
                ExpressionInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionInserted"], 
                ExpressionInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ExpressionInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGExpressionClass((string)args[0]);
                    ExpressionInserted.Invoke((CQGExpression)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("ExpressionRemoved", dcObjKey, 
                ExpressionRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionRemoved"], 
                ExpressionRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ExpressionRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGExpressionClass((string)args[0]);
                    ExpressionRemoved.Invoke((CQGExpression)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("ExpressionResolved", dcObjKey, 
                ExpressionResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionResolved"], 
                ExpressionResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ExpressionResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGExpressionClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    ExpressionResolved.Invoke((CQGExpression)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("ExpressionUpdated", dcObjKey, 
                ExpressionUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionUpdated"], 
                ExpressionUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ExpressionUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ExpressionUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGExpressionClass((string)args[0]);
                    ExpressionUpdated.Invoke((CQGExpression)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("GWConnectionStatusChanged", dcObjKey, 
                GWConnectionStatusChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWConnectionStatusChanged"], 
                GWConnectionStatusChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWConnectionStatusChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWConnectionStatusChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("GWConnectionStatusChanged", out args);
                if (happened)
                {
                    GWConnectionStatusChanged.Invoke((eConnectionStatus)args[0]);
                }
            }

            CQG.SubscriberChecking("GWEnvironmentChanged", dcObjKey, 
                GWEnvironmentChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWEnvironmentChanged"], 
                GWEnvironmentChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWEnvironmentChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWEnvironmentChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("GWEnvironmentChanged", out args);
                if (happened)
                {
                    GWEnvironmentChanged.Invoke((eGWEnvChangeCode)args[0], (int)args[1], (int)args[2]);
                }
            }

            CQG.SubscriberChecking("HistoricalSessionsResolved", dcObjKey, 
                HistoricalSessionsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["HistoricalSessionsResolved"], 
                HistoricalSessionsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["HistoricalSessionsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["HistoricalSessionsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("HistoricalSessionsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGSessionsCollectionClass((string)args[0]);
                    var arg1 = new CQGHistoricalSessionsRequestClass((string)args[1]);
                    var arg2 = new CQGErrorClass((string)args[2]);
                    HistoricalSessionsResolved.Invoke((CQGSessionsCollection)arg0, (CQGHistoricalSessionsRequest)arg1, (CQGError)arg2);
                }
            }

            CQG.SubscriberChecking("ICConnectionStatusChanged", dcObjKey, 
                ICConnectionStatusChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ICConnectionStatusChanged"], 
                ICConnectionStatusChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ICConnectionStatusChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ICConnectionStatusChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ICConnectionStatusChanged", out args);
                if (happened)
                {
                    ICConnectionStatusChanged.Invoke((eICConnectionStatus)args[0]);
                }
            }

            CQG.SubscriberChecking("IncorrectSymbol", dcObjKey, 
                IncorrectSymbol != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["IncorrectSymbol"], 
                IncorrectSymbol == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["IncorrectSymbol"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["IncorrectSymbol"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("IncorrectSymbol", out args);
                if (happened)
                {
                    IncorrectSymbol.Invoke((string)args[0]);
                }
            }

            CQG.SubscriberChecking("InstrumentChanged", dcObjKey, 
                InstrumentChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentChanged"], 
                InstrumentChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentChanged", out args);
                if (happened)
                {
                    var arg0 = new CQGInstrumentClass((string)args[0]);
                    var arg1 = new CQGQuotesClass((string)args[1]);
                    var arg2 = new CQGInstrumentPropertiesClass((string)args[2]);
                    InstrumentChanged.Invoke((CQGInstrument)arg0, (CQGQuotes)arg1, (CQGInstrumentProperties)arg2);
                }
            }

            CQG.SubscriberChecking("InstrumentDOMChanged", dcObjKey, 
                InstrumentDOMChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentDOMChanged"], 
                InstrumentDOMChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentDOMChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentDOMChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentDOMChanged", out args);
                if (happened)
                {
                    var arg0 = new CQGInstrumentClass((string)args[0]);
                    var arg1 = new CQGDOMQuotesClass((string)args[1]);
                    var arg2 = new CQGDOMQuotesClass((string)args[2]);
                    InstrumentDOMChanged.Invoke((CQGInstrument)arg0, (CQGDOMQuotes)arg1, (CQGDOMQuotes)arg2);
                }
            }

            CQG.SubscriberChecking("InstrumentsGroupChanged", dcObjKey, 
                InstrumentsGroupChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupChanged"], 
                InstrumentsGroupChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentsGroupChanged", out args);
                if (happened)
                {
                    var arg1 = new CQGInstrumentsGroupClass((string)args[1]);
                    var arg2 = new CQGStringCollectionClass((string)args[2]);
                    InstrumentsGroupChanged.Invoke((eChangeType)args[0], (CQGInstrumentsGroup)arg1, (CQGStringCollection)arg2);
                }
            }

            CQG.SubscriberChecking("InstrumentsGroupResolved", dcObjKey, 
                InstrumentsGroupResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupResolved"], 
                InstrumentsGroupResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentsGroupResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGInstrumentsGroupClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    InstrumentsGroupResolved.Invoke((CQGInstrumentsGroup)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("InstrumentSubscribed", dcObjKey, 
                InstrumentSubscribed != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentSubscribed"], 
                InstrumentSubscribed == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentSubscribed"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentSubscribed"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentSubscribed", out args);
                if (happened)
                {
                    var arg1 = new CQGInstrumentClass((string)args[1]);
                    InstrumentSubscribed.Invoke((string)args[0], (CQGInstrument)arg1);
                }
            }

            CQG.SubscriberChecking("IsReady", dcObjKey, 
                IsReady != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["IsReady"], 
                IsReady == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["IsReady"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["IsReady"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("IsReady", out args);
                if (happened)
                {
                    eReadyStatus rArg0 = (eReadyStatus)args[0];
                    IsReady.Invoke(ref rArg0);
                }
            }

            CQG.SubscriberChecking("LineTimeChanged", dcObjKey, 
                LineTimeChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["LineTimeChanged"], 
                LineTimeChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["LineTimeChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["LineTimeChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("LineTimeChanged", out args);
                if (happened)
                {
                    LineTimeChanged.Invoke((DateTime)args[0]);
                }
            }

            CQG.SubscriberChecking("ManualFillChanged", dcObjKey, 
                ManualFillChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillChanged"], 
                ManualFillChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ManualFillChanged", out args);
                if (happened)
                {
                    var arg0 = new CQGManualFillClass((string)args[0]);
                    ManualFillChanged.Invoke((CQGManualFill)arg0, (eManualFillUpdateType)args[1]);
                }
            }

            CQG.SubscriberChecking("ManualFillsResolved", dcObjKey, 
                ManualFillsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillsResolved"], 
                ManualFillsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ManualFillsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGManualFillsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    ManualFillsResolved.Invoke((CQGManualFills)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("ManualFillUpdateResolved", dcObjKey, 
                ManualFillUpdateResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillUpdateResolved"], 
                ManualFillUpdateResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillUpdateResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["ManualFillUpdateResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("ManualFillUpdateResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGManualFillRequestClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    ManualFillUpdateResolved.Invoke((CQGManualFillRequest)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("OnIdle", dcObjKey, 
                OnIdle != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnIdle"], 
                OnIdle == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnIdle"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnIdle"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("OnIdle", out args);
                if (happened)
                {
                    OnIdle.Invoke();
                }
            }

            CQG.SubscriberChecking("OnQueryProgress", dcObjKey, 
                OnQueryProgress != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnQueryProgress"], 
                OnQueryProgress == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnQueryProgress"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnQueryProgress"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("OnQueryProgress", out args);
                if (happened)
                {
                    var arg0 = new CQGOrdersQueryClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    OnQueryProgress.Invoke((CQGOrdersQuery)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("OrderChanged", dcObjKey, 
                OrderChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["OrderChanged"], 
                OrderChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["OrderChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["OrderChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("OrderChanged", out args);
                if (happened)
                {
                    var arg1 = new CQGOrderClass((string)args[1]);
                    var arg2 = new CQGOrderPropertiesClass((string)args[2]);
                    var arg3 = new CQGFillClass((string)args[3]);
                    var arg4 = new CQGErrorClass((string)args[4]);
                    OrderChanged.Invoke((eChangeType)args[0], (CQGOrder)arg1, (CQGOrderProperties)arg2, (CQGFill)arg3, (CQGError)arg4);
                }
            }

            CQG.SubscriberChecking("PasswordChanged", dcObjKey, 
                PasswordChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["PasswordChanged"], 
                PasswordChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["PasswordChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["PasswordChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("PasswordChanged", out args);
                if (happened)
                {
                    var arg1 = new CQGErrorClass((string)args[1]);
                    PasswordChanged.Invoke((eSessionStatus)args[0], (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("PointAndFigureBarsAdded", dcObjKey, 
                PointAndFigureBarsAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsAdded"], 
                PointAndFigureBarsAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("PointAndFigureBarsAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGPointAndFigureBarsClass((string)args[0]);
                    PointAndFigureBarsAdded.Invoke((CQGPointAndFigureBars)arg0);
                }
            }

            CQG.SubscriberChecking("PointAndFigureBarsInserted", dcObjKey, 
                PointAndFigureBarsInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsInserted"], 
                PointAndFigureBarsInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("PointAndFigureBarsInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGPointAndFigureBarsClass((string)args[0]);
                    PointAndFigureBarsInserted.Invoke((CQGPointAndFigureBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("PointAndFigureBarsRemoved", dcObjKey, 
                PointAndFigureBarsRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsRemoved"], 
                PointAndFigureBarsRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("PointAndFigureBarsRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGPointAndFigureBarsClass((string)args[0]);
                    PointAndFigureBarsRemoved.Invoke((CQGPointAndFigureBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("PointAndFigureBarsResolved", dcObjKey, 
                PointAndFigureBarsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsResolved"], 
                PointAndFigureBarsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("PointAndFigureBarsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGPointAndFigureBarsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    PointAndFigureBarsResolved.Invoke((CQGPointAndFigureBars)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("PointAndFigureBarsUpdated", dcObjKey, 
                PointAndFigureBarsUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsUpdated"], 
                PointAndFigureBarsUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["PointAndFigureBarsUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("PointAndFigureBarsUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGPointAndFigureBarsClass((string)args[0]);
                    PointAndFigureBarsUpdated.Invoke((CQGPointAndFigureBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("PositionsStatementResolved", dcObjKey, 
                PositionsStatementResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["PositionsStatementResolved"], 
                PositionsStatementResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["PositionsStatementResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["PositionsStatementResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("PositionsStatementResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGPositionsStatementClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    PositionsStatementResolved.Invoke((CQGPositionsStatement)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("QFormulaDefinitionsResolved", dcObjKey, 
                QFormulaDefinitionsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["QFormulaDefinitionsResolved"], 
                QFormulaDefinitionsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["QFormulaDefinitionsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["QFormulaDefinitionsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("QFormulaDefinitionsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGQFormulaDefinitionsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    QFormulaDefinitionsResolved.Invoke((CQGQFormulaDefinitions)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("StrategyDefinitionProgress", dcObjKey, 
                StrategyDefinitionProgress != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["StrategyDefinitionProgress"], 
                StrategyDefinitionProgress == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["StrategyDefinitionProgress"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["StrategyDefinitionProgress"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("StrategyDefinitionProgress", out args);
                if (happened)
                {
                    var arg0 = new CQGStrategyDefinitionClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    StrategyDefinitionProgress.Invoke((CQGStrategyDefinition)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("SubMinuteBarsAdded", dcObjKey, 
                SubMinuteBarsAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsAdded"], 
                SubMinuteBarsAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("SubMinuteBarsAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGSubMinuteBarsClass((string)args[0]);
                    SubMinuteBarsAdded.Invoke((CQGSubMinuteBars)arg0);
                }
            }

            CQG.SubscriberChecking("SubMinuteBarsInserted", dcObjKey, 
                SubMinuteBarsInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsInserted"], 
                SubMinuteBarsInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("SubMinuteBarsInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGSubMinuteBarsClass((string)args[0]);
                    SubMinuteBarsInserted.Invoke((CQGSubMinuteBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("SubMinuteBarsRemoved", dcObjKey, 
                SubMinuteBarsRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsRemoved"], 
                SubMinuteBarsRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("SubMinuteBarsRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGSubMinuteBarsClass((string)args[0]);
                    SubMinuteBarsRemoved.Invoke((CQGSubMinuteBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("SubMinuteBarsResolved", dcObjKey, 
                SubMinuteBarsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsResolved"], 
                SubMinuteBarsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("SubMinuteBarsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGSubMinuteBarsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    SubMinuteBarsResolved.Invoke((CQGSubMinuteBars)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("SubMinuteBarsUpdated", dcObjKey, 
                SubMinuteBarsUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsUpdated"], 
                SubMinuteBarsUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["SubMinuteBarsUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("SubMinuteBarsUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGSubMinuteBarsClass((string)args[0]);
                    SubMinuteBarsUpdated.Invoke((CQGSubMinuteBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("SummariesStatementResolved", dcObjKey, 
                SummariesStatementResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["SummariesStatementResolved"], 
                SummariesStatementResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["SummariesStatementResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["SummariesStatementResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("SummariesStatementResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGSummariesStatementClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    SummariesStatementResolved.Invoke((CQGSummariesStatement)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("TFlowBarsAdded", dcObjKey, 
                TFlowBarsAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsAdded"], 
                TFlowBarsAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TFlowBarsAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGTFlowBarsClass((string)args[0]);
                    TFlowBarsAdded.Invoke((CQGTFlowBars)arg0);
                }
            }

            CQG.SubscriberChecking("TFlowBarsInserted", dcObjKey, 
                TFlowBarsInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsInserted"], 
                TFlowBarsInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TFlowBarsInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGTFlowBarsClass((string)args[0]);
                    TFlowBarsInserted.Invoke((CQGTFlowBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("TFlowBarsRemoved", dcObjKey, 
                TFlowBarsRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsRemoved"], 
                TFlowBarsRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TFlowBarsRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGTFlowBarsClass((string)args[0]);
                    TFlowBarsRemoved.Invoke((CQGTFlowBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("TFlowBarsResolved", dcObjKey, 
                TFlowBarsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsResolved"], 
                TFlowBarsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TFlowBarsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGTFlowBarsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    TFlowBarsResolved.Invoke((CQGTFlowBars)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("TFlowBarsUpdated", dcObjKey, 
                TFlowBarsUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsUpdated"], 
                TFlowBarsUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TFlowBarsUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TFlowBarsUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGTFlowBarsClass((string)args[0]);
                    TFlowBarsUpdated.Invoke((CQGTFlowBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("TicksAdded", dcObjKey, 
                TicksAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TicksAdded"], 
                TicksAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TicksAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TicksAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TicksAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGTicksClass((string)args[0]);
                    TicksAdded.Invoke((CQGTicks)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("TicksResolved", dcObjKey, 
                TicksResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TicksResolved"], 
                TicksResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TicksResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TicksResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TicksResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGTicksClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    TicksResolved.Invoke((CQGTicks)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("TimedBarsAdded", dcObjKey, 
                TimedBarsAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsAdded"], 
                TimedBarsAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TimedBarsAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGTimedBarsClass((string)args[0]);
                    TimedBarsAdded.Invoke((CQGTimedBars)arg0);
                }
            }

            CQG.SubscriberChecking("TimedBarsInserted", dcObjKey, 
                TimedBarsInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsInserted"], 
                TimedBarsInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TimedBarsInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGTimedBarsClass((string)args[0]);
                    TimedBarsInserted.Invoke((CQGTimedBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("TimedBarsRemoved", dcObjKey, 
                TimedBarsRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsRemoved"], 
                TimedBarsRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TimedBarsRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGTimedBarsClass((string)args[0]);
                    TimedBarsRemoved.Invoke((CQGTimedBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("TimedBarsResolved", dcObjKey, 
                TimedBarsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsResolved"], 
                TimedBarsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TimedBarsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGTimedBarsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    TimedBarsResolved.Invoke((CQGTimedBars)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("TimedBarsUpdated", dcObjKey, 
                TimedBarsUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsUpdated"], 
                TimedBarsUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TimedBarsUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TimedBarsUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGTimedBarsClass((string)args[0]);
                    TimedBarsUpdated.Invoke((CQGTimedBars)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("TradableCommoditiesResolved", dcObjKey, 
                TradableCommoditiesResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradableCommoditiesResolved"], 
                TradableCommoditiesResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradableCommoditiesResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradableCommoditiesResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradableCommoditiesResolved", out args);
                if (happened)
                {
                    var arg1 = new CQGCommoditiesClass((string)args[1]);
                    var arg2 = new CQGErrorClass((string)args[2]);
                    TradableCommoditiesResolved.Invoke((int)args[0], (CQGCommodities)arg1, (CQGError)arg2);
                }
            }

            CQG.SubscriberChecking("TradableExchangesResolved", dcObjKey, 
                TradableExchangesResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradableExchangesResolved"], 
                TradableExchangesResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradableExchangesResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradableExchangesResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradableExchangesResolved", out args);
                if (happened)
                {
                    var arg1 = new CQGExchangesClass((string)args[1]);
                    var arg2 = new CQGErrorClass((string)args[2]);
                    TradableExchangesResolved.Invoke((int)args[0], (CQGExchanges)arg1, (CQGError)arg2);
                }
            }

            CQG.SubscriberChecking("TradingSystemAddNotification", dcObjKey, 
                TradingSystemAddNotification != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemAddNotification"], 
                TradingSystemAddNotification == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemAddNotification"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemAddNotification"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradingSystemAddNotification", out args);
                if (happened)
                {
                    var arg0 = new CQGTradingSystemClass((string)args[0]);
                    var arg1 = new CQGTradingSystemAddInfoClass((string)args[1]);
                    TradingSystemAddNotification.Invoke((CQGTradingSystem)arg0, (CQGTradingSystemAddInfo)arg1);
                }
            }

            CQG.SubscriberChecking("TradingSystemDefinitionsResolved", dcObjKey, 
                TradingSystemDefinitionsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemDefinitionsResolved"], 
                TradingSystemDefinitionsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemDefinitionsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemDefinitionsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradingSystemDefinitionsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGTradingSystemDefinitionsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    TradingSystemDefinitionsResolved.Invoke((CQGTradingSystemDefinitions)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("TradingSystemInsertNotification", dcObjKey, 
                TradingSystemInsertNotification != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemInsertNotification"], 
                TradingSystemInsertNotification == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemInsertNotification"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemInsertNotification"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradingSystemInsertNotification", out args);
                if (happened)
                {
                    var arg0 = new CQGTradingSystemClass((string)args[0]);
                    var arg1 = new CQGTradingSystemInsertInfoClass((string)args[1]);
                    TradingSystemInsertNotification.Invoke((CQGTradingSystem)arg0, (CQGTradingSystemInsertInfo)arg1);
                }
            }

            CQG.SubscriberChecking("TradingSystemRemoveNotification", dcObjKey, 
                TradingSystemRemoveNotification != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemRemoveNotification"], 
                TradingSystemRemoveNotification == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemRemoveNotification"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemRemoveNotification"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradingSystemRemoveNotification", out args);
                if (happened)
                {
                    var arg0 = new CQGTradingSystemClass((string)args[0]);
                    var arg1 = new CQGTradingSystemRemoveInfoClass((string)args[1]);
                    TradingSystemRemoveNotification.Invoke((CQGTradingSystem)arg0, (CQGTradingSystemRemoveInfo)arg1);
                }
            }

            CQG.SubscriberChecking("TradingSystemResolved", dcObjKey, 
                TradingSystemResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemResolved"], 
                TradingSystemResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradingSystemResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGTradingSystemClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    TradingSystemResolved.Invoke((CQGTradingSystem)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("TradingSystemTradeRelationAddNotification", dcObjKey, 
                TradingSystemTradeRelationAddNotification != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemTradeRelationAddNotification"], 
                TradingSystemTradeRelationAddNotification == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemTradeRelationAddNotification"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemTradeRelationAddNotification"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradingSystemTradeRelationAddNotification", out args);
                if (happened)
                {
                    var arg0 = new CQGTradingSystemClass((string)args[0]);
                    var arg1 = new CQGTradingSystemRelationAddInfoClass((string)args[1]);
                    TradingSystemTradeRelationAddNotification.Invoke((CQGTradingSystem)arg0, (CQGTradingSystemRelationAddInfo)arg1);
                }
            }

            CQG.SubscriberChecking("TradingSystemUpdateNotification", dcObjKey, 
                TradingSystemUpdateNotification != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemUpdateNotification"], 
                TradingSystemUpdateNotification == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemUpdateNotification"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["TradingSystemUpdateNotification"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("TradingSystemUpdateNotification", out args);
                if (happened)
                {
                    var arg0 = new CQGTradingSystemClass((string)args[0]);
                    var arg1 = new CQGTradingSystemUpdateInfoClass((string)args[1]);
                    TradingSystemUpdateNotification.Invoke((CQGTradingSystem)arg0, (CQGTradingSystemUpdateInfo)arg1);
                }
            }

            CQG.SubscriberChecking("YieldsAdded", dcObjKey, 
                YieldsAdded != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsAdded"], 
                YieldsAdded == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsAdded"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsAdded"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("YieldsAdded", out args);
                if (happened)
                {
                    var arg0 = new CQGYieldsClass((string)args[0]);
                    YieldsAdded.Invoke((CQGYields)arg0);
                }
            }

            CQG.SubscriberChecking("YieldsInserted", dcObjKey, 
                YieldsInserted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsInserted"], 
                YieldsInserted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsInserted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsInserted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("YieldsInserted", out args);
                if (happened)
                {
                    var arg0 = new CQGYieldsClass((string)args[0]);
                    YieldsInserted.Invoke((CQGYields)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("YieldsRemoved", dcObjKey, 
                YieldsRemoved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsRemoved"], 
                YieldsRemoved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsRemoved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsRemoved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("YieldsRemoved", out args);
                if (happened)
                {
                    var arg0 = new CQGYieldsClass((string)args[0]);
                    YieldsRemoved.Invoke((CQGYields)arg0, (int)args[1]);
                }
            }

            CQG.SubscriberChecking("YieldsResolved", dcObjKey, 
                YieldsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsResolved"], 
                YieldsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("YieldsResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGYieldsClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    YieldsResolved.Invoke((CQGYields)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("YieldsUpdated", dcObjKey, 
                YieldsUpdated != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsUpdated"], 
                YieldsUpdated == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsUpdated"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["YieldsUpdated"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("YieldsUpdated", out args);
                if (happened)
                {
                    var arg0 = new CQGYieldsClass((string)args[0]);
                    YieldsUpdated.Invoke((CQGYields)arg0, (int)args[1]);
                }
            }

            eventCheckingTimer.Start();
        }

        #endregion

    }

    public class CQGChangedTradeEntriesClass : CQGChangedTradeEntries
    {
        private string dcObjKey;

        #region Constructors

        internal CQGChangedTradeEntriesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGChangedTradeEntriesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTradeChangeCategory ChangeFilter
        {
            get
            {
                string name = "ChangeFilter";
                var value = CQG.GetProperty<eTradeChangeCategory>(dcObjKey, name);
                return value;
            }

        }

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGChangedTradeEntry this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGChangedTradeEntryClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGChangedTradeEntryClass : CQGChangedTradeEntry
    {
        private string dcObjKey;

        #region Constructors

        internal CQGChangedTradeEntryClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGChangedTradeEntryClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTradeChangeCategory ChangeCategory
        {
            get
            {
                string name = "ChangeCategory";
                var value = CQG.GetProperty<eTradeChangeCategory>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeEntry TradeEntry
        {
            get
            {
                string name = "TradeEntry";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeEntryClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGChangedTradeExitClass : CQGChangedTradeExit
    {
        private string dcObjKey;

        #region Constructors

        internal CQGChangedTradeExitClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGChangedTradeExitClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTradeChangeCategory ChangeCategory
        {
            get
            {
                string name = "ChangeCategory";
                var value = CQG.GetProperty<eTradeChangeCategory>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeExit TradeExit
        {
            get
            {
                string name = "TradeExit";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeExitClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGChangedTradeExitsClass : CQGChangedTradeExits
    {
        private string dcObjKey;

        #region Constructors

        internal CQGChangedTradeExitsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGChangedTradeExitsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTradeChangeCategory ChangeFilter
        {
            get
            {
                string name = "ChangeFilter";
                var value = CQG.GetProperty<eTradeChangeCategory>(dcObjKey, name);
                return value;
            }

        }

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGChangedTradeExit this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGChangedTradeExitClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCommoditiesClass : CQGCommodities
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCommoditiesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCommoditiesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<string>(dcObjKey, name, args);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCommodityInstrumentsClass : CQGCommodityInstruments
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCommodityInstrumentsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCommodityInstrumentsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public bool IsTradableOnly
        {
            get
            {
                string name = "IsTradableOnly";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public string this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<string>(dcObjKey, name, args);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGConditionClass : CQGCondition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConditionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConditionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGConditionDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGConditionDefinitionClass(key);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGConditionResult this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGConditionResultClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGConditionRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGConditionRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual int IndexForDate(DateTime date_)
        {
            string name = "IndexForDate";
            var args = new object[] { date_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGConditionDefinitionClass : CQGConditionDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConditionDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConditionDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGParameterDefinitions ParameterDefinitions
        {
            get
            {
                string name = "ParameterDefinitions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGParameterDefinitionsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGConditionDefinitionsClass : CQGConditionDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConditionDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConditionDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGConditionDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGConditionDefinitionClass(key);
                return value;
            }

        }

        public CQGConditionDefinition this[string condition_name]
        {
            get
            {
                string name = "ItemByName";
                var args = new object[] { condition_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGConditionDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGConditionDefinition get_ItemByName(string condition_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { condition_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGConditionDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGConditionRequestClass : CQGConditionRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConditionRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConditionRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string BaseExpression
        {
            get
            {
                string name = "BaseExpression";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "BaseExpression";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGConditionDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGConditionDefinitionClass(key);
                return value;
            }

        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eHistoricalPeriod HistoricalPeriod
        {
            get
            {
                string name = "HistoricalPeriod";
                var value = CQG.GetProperty<eHistoricalPeriod>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "HistoricalPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int IntradayPeriod
        {
            get
            {
                string name = "IntradayPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IntradayPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object this[object key_]
        {
            get
            {
                string name = "Parameter";
                var args = new object[] { key_ };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Parameter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Parameter(object key_)
        {
            string name = "get_Parameter";
            var args = new object[] { key_ };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Parameter(object key_, object pVal)
        {
            string name = "set_Parameter";
            var args = new object[] { key_, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGConditionResultClass : CQGConditionResult
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConditionResultClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConditionResultClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public bool Value
        {
            get
            {
                string name = "Value";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGConditionsClass : CQGConditions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConditionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConditionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGCondition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGConditionClass(key);
                return value;
            }

        }

        public CQGCondition this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGConditionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGCondition get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGConditionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGConstantVolumeBarClass : CQGConstantVolumeBar
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConstantVolumeBarClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConstantVolumeBarClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int ActualVolume
        {
            get
            {
                string name = "ActualVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int AskVolume
        {
            get
            {
                string name = "AskVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Avg
        {
            get
            {
                string name = "Avg";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int BidVolume
        {
            get
            {
                string name = "BidVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Close
        {
            get
            {
                string name = "Close";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double High
        {
            get
            {
                string name = "High";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double HLC3
        {
            get
            {
                string name = "HLC3";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Low
        {
            get
            {
                string name = "Low";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Mid
        {
            get
            {
                string name = "Mid";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Open
        {
            get
            {
                string name = "Open";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Range
        {
            get
            {
                string name = "Range";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int TickVolume
        {
            get
            {
                string name = "TickVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double TrueHigh
        {
            get
            {
                string name = "TrueHigh";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueLow
        {
            get
            {
                string name = "TrueLow";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueRange
        {
            get
            {
                string name = "TrueRange";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGConstantVolumeBarsClass : CQGConstantVolumeBars
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConstantVolumeBarsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConstantVolumeBarsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGConstantVolumeBar this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGConstantVolumeBarClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGConstantVolumeBarsRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGConstantVolumeBarsRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGConstantVolumeBarsCollectionClass : CQGConstantVolumeBarsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConstantVolumeBarsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConstantVolumeBarsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGConstantVolumeBars this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGConstantVolumeBarsClass(key);
                return value;
            }

        }

        public CQGConstantVolumeBars this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGConstantVolumeBarsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGConstantVolumeBars get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGConstantVolumeBarsClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGConstantVolumeBarsRequestClass : CQGConstantVolumeBarsRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGConstantVolumeBarsRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGConstantVolumeBarsRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeFlatTicks
        {
            get
            {
                string name = "IncludeFlatTicks";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeFlatTicks";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int VolumeLevel
        {
            get
            {
                string name = "VolumeLevel";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "VolumeLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eCvbVolumeType VolumeType
        {
            get
            {
                string name = "VolumeType";
                var value = CQG.GetProperty<eCvbVolumeType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "VolumeType";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGCurrencyRateClass : CQGCurrencyRate
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCurrencyRateClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCurrencyRateClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string BaseCurrencyName
        {
            get
            {
                string name = "BaseCurrencyName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGCEL CEL
        {
            get
            {
                string name = "CEL";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCELClass(key);
                return value;
            }

        }

        public string CurrencyName
        {
            get
            {
                string name = "CurrencyName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int FcmID
        {
            get
            {
                string name = "FcmID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Rate
        {
            get
            {
                string name = "Rate";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGCurrencyRatesClass : CQGCurrencyRates
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCurrencyRatesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCurrencyRatesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGCurrencyRate this[int fcm_id, string currency_, string base_currency = ""]
        {
            get
            {
                string name = "Item";
                var args = new object[] { fcm_id, currency_, base_currency };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCurrencyRateClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCurveDefinitionClass : CQGCurveDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCurveDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCurveDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGCurveDefinitionsClass : CQGCurveDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCurveDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCurveDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGCurveDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCurveDefinitionClass(key);
                return value;
            }

        }

        public CQGCurveDefinition this[string curve_name]
        {
            get
            {
                string name = "ItemByName";
                var args = new object[] { curve_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCurveDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGCurveDefinition get_ItemByName(string curve_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { curve_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGCurveDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCurveHeadersClass : CQGCurveHeaders
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCurveHeadersClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCurveHeadersClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<string>(dcObjKey, name, args);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCurvesClass : CQGCurves
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCurvesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCurvesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double this[object key_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { key_ };
                var value = CQG.GetProperty<double>(dcObjKey, name, args);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCustomStudiesClass : CQGCustomStudies
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCustomStudiesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCustomStudiesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGCustomStudy this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCustomStudyClass(key);
                return value;
            }

        }

        public CQGCustomStudy this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCustomStudyClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGCustomStudy get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGCustomStudyClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCustomStudyClass : CQGCustomStudy
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCustomStudyClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCustomStudyClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGCurveHeaders CurveHeaders
        {
            get
            {
                string name = "CurveHeaders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCurveHeadersClass(key);
                return value;
            }

        }

        public CQGCustomStudyDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCustomStudyDefinitionClass(key);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGCurves this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCurvesClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGCustomStudyRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCustomStudyRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual int IndexForDate(DateTime date_)
        {
            string name = "IndexForDate";
            var args = new object[] { date_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGCustomStudyDefinitionClass : CQGCustomStudyDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCustomStudyDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCustomStudyDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Abbreviation
        {
            get
            {
                string name = "Abbreviation";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGCurveDefinitions CurveDefinitions
        {
            get
            {
                string name = "CurveDefinitions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCurveDefinitionsClass(key);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGParameterDefinitions ParameterDefinitions
        {
            get
            {
                string name = "ParameterDefinitions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGParameterDefinitionsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGCustomStudyDefinitionsClass : CQGCustomStudyDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCustomStudyDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCustomStudyDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGCustomStudyDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCustomStudyDefinitionClass(key);
                return value;
            }

        }

        public CQGCustomStudyDefinition this[string custom_study_abbreviation]
        {
            get
            {
                string name = "ItemByAbbreviation";
                var args = new object[] { custom_study_abbreviation };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGCustomStudyDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGCustomStudyDefinition get_ItemByAbbreviation(string custom_study_abbreviation)
        {
            string name = "get_ItemByAbbreviation";
            var args = new object[] { custom_study_abbreviation };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGCustomStudyDefinitionClass(key);
            return result;
        }

        public virtual CQGCustomStudyDefinition get_ItemByName(string custom_study_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { custom_study_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGCustomStudyDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGCustomStudyRequestClass : CQGCustomStudyRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGCustomStudyRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGCustomStudyRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string BaseExpression
        {
            get
            {
                string name = "BaseExpression";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "BaseExpression";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGCustomStudyDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCustomStudyDefinitionClass(key);
                return value;
            }

        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eHistoricalPeriod HistoricalPeriod
        {
            get
            {
                string name = "HistoricalPeriod";
                var value = CQG.GetProperty<eHistoricalPeriod>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "HistoricalPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int IntradayPeriod
        {
            get
            {
                string name = "IntradayPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IntradayPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object this[object key_]
        {
            get
            {
                string name = "Parameter";
                var args = new object[] { key_ };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Parameter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Parameter(object key_)
        {
            string name = "get_Parameter";
            var args = new object[] { key_ };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual void IncludeCurve(object curve_key)
        {
            string name = "IncludeCurve";
            var args = new object[] { curve_key };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual bool IsCurveIncluded(object curve_key)
        {
            string name = "IsCurveIncluded";
            var args = new object[] { curve_key };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Parameter(object key_, object pVal)
        {
            string name = "set_Parameter";
            var args = new object[] { key_, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGDataSourceClass : CQGDataSource
    {
        private string dcObjKey;

        #region Constructors

        internal CQGDataSourceClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGDataSourceClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Abbreviation
        {
            get
            {
                string name = "Abbreviation";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eDataSourceStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eDataSourceStatus>(dcObjKey, name);
                return value;
            }

        }

        public eSymbolType SymbolTypes
        {
            get
            {
                string name = "SymbolTypes";
                var value = CQG.GetProperty<eSymbolType>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGDataSourcesClass : CQGDataSources
    {
        private string dcObjKey;

        #region Constructors

        internal CQGDataSourcesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGDataSourcesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGDataSource this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGDataSourceClass(key);
                return value;
            }

        }

        public CQGDataSource this[string data_source_abbreviation]
        {
            get
            {
                string name = "ItemByAbbreviation";
                var args = new object[] { data_source_abbreviation };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGDataSourceClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGDataSource get_ItemByAbbreviation(string data_source_abbreviation)
        {
            string name = "get_ItemByAbbreviation";
            var args = new object[] { data_source_abbreviation };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGDataSourceClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGDataSourceSymbolClass : CQGDataSourceSymbol
    {
        private string dcObjKey;

        #region Constructors

        internal CQGDataSourceSymbolClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGDataSourceSymbolClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Abbreviation
        {
            get
            {
                string name = "Abbreviation";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Description
        {
            get
            {
                string name = "Description";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eSymbolType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eSymbolType>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGDataSourceSymbolsClass : CQGDataSourceSymbols
    {
        private string dcObjKey;

        #region Constructors

        internal CQGDataSourceSymbolsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGDataSourceSymbolsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string DataSourceAbbreviation
        {
            get
            {
                string name = "DataSourceAbbreviation";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGDataSourceSymbol this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGDataSourceSymbolClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGDirectEventsAccessorClass : CQGDirectEventsAccessor, _ICQGCELGeneralEvents_Event
    {
        private string dcObjKey;

        private System.Timers.Timer eventCheckingTimer;

        #region Constructors

        internal CQGDirectEventsAccessorClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
            eventCheckingTimer = new System.Timers.Timer();
            eventCheckingTimer.Interval = 30;
            eventCheckingTimer.Elapsed += eventCheckingTimer_Tick;
            eventCheckingTimer.AutoReset = false;
            eventCheckingTimer.Enabled = true;
        }

        #endregion

        #region Destructor

        ~CQGDirectEventsAccessorClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Events

        public event _ICQGCELGeneralEvents_CELStartedEventHandler CELStarted;

        public event _ICQGCELGeneralEvents_CurrencyRatesChangedEventHandler CurrencyRatesChanged;

        public event _ICQGCELGeneralEvents_DataConnectionStatusChangedEventHandler DataConnectionStatusChanged;

        public event _ICQGCELGeneralEvents_DataErrorEventHandler DataError;

        public event _ICQGCELGeneralEvents_GWConnectionStatusChangedEventHandler GWConnectionStatusChanged;

        public event _ICQGCELGeneralEvents_IsReadyEventHandler IsReady;

        public event _ICQGCELGeneralEvents_LineTimeChangedEventHandler LineTimeChanged;

        public event _ICQGCELGeneralEvents_OnIdleEventHandler OnIdle;

        public event _ICQGCELInstrumentEvents_CommodityInstrumentsResolvedEventHandler CommodityInstrumentsResolved;

        public event _ICQGCELInstrumentEvents_IncorrectSymbolEventHandler IncorrectSymbol;

        public event _ICQGCELInstrumentEvents_InstrumentChangedEventHandler InstrumentChanged;

        public event _ICQGCELInstrumentEvents_InstrumentDOMChangedEventHandler InstrumentDOMChanged;

        public event _ICQGCELInstrumentEvents_InstrumentsGroupChangedEventHandler InstrumentsGroupChanged;

        public event _ICQGCELInstrumentEvents_InstrumentsGroupResolvedEventHandler InstrumentsGroupResolved;

        public event _ICQGCELInstrumentEvents_InstrumentSubscribedEventHandler InstrumentSubscribed;

        #endregion

        #region Methods

        #endregion

        #region TimerTickHandlers

        private void eventCheckingTimer_Tick(Object source, System.Timers.ElapsedEventArgs e)
        {
            CQG.SubscriberChecking("CELStarted", dcObjKey, 
                CELStarted != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CELStarted"], 
                CELStarted == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CELStarted"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CELStarted"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CELStarted", out args);
                if (happened)
                {
                    CELStarted.Invoke();
                }
            }

            CQG.SubscriberChecking("CurrencyRatesChanged", dcObjKey, 
                CurrencyRatesChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CurrencyRatesChanged"], 
                CurrencyRatesChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CurrencyRatesChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CurrencyRatesChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CurrencyRatesChanged", out args);
                if (happened)
                {
                    var arg0 = new CQGCurrencyRatesClass((string)args[0]);
                    CurrencyRatesChanged.Invoke((CQGCurrencyRates)arg0);
                }
            }

            CQG.SubscriberChecking("DataConnectionStatusChanged", dcObjKey, 
                DataConnectionStatusChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataConnectionStatusChanged"], 
                DataConnectionStatusChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataConnectionStatusChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataConnectionStatusChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("DataConnectionStatusChanged", out args);
                if (happened)
                {
                    DataConnectionStatusChanged.Invoke((eConnectionStatus)args[0]);
                }
            }

            CQG.SubscriberChecking("DataError", dcObjKey, 
                DataError != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataError"], 
                DataError == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataError"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["DataError"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("DataError", out args);
                if (happened)
                {
                    DataError.Invoke((object)args[0], (string)args[1]);
                }
            }

            CQG.SubscriberChecking("GWConnectionStatusChanged", dcObjKey, 
                GWConnectionStatusChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWConnectionStatusChanged"], 
                GWConnectionStatusChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWConnectionStatusChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["GWConnectionStatusChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("GWConnectionStatusChanged", out args);
                if (happened)
                {
                    GWConnectionStatusChanged.Invoke((eConnectionStatus)args[0]);
                }
            }

            CQG.SubscriberChecking("IsReady", dcObjKey, 
                IsReady != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["IsReady"], 
                IsReady == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["IsReady"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["IsReady"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("IsReady", out args);
                if (happened)
                {
                    eReadyStatus rArg0 = (eReadyStatus)args[0];
                    IsReady.Invoke(ref rArg0);
                }
            }

            CQG.SubscriberChecking("LineTimeChanged", dcObjKey, 
                LineTimeChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["LineTimeChanged"], 
                LineTimeChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["LineTimeChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["LineTimeChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("LineTimeChanged", out args);
                if (happened)
                {
                    LineTimeChanged.Invoke((DateTime)args[0]);
                }
            }

            CQG.SubscriberChecking("OnIdle", dcObjKey, 
                OnIdle != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnIdle"], 
                OnIdle == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnIdle"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["OnIdle"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("OnIdle", out args);
                if (happened)
                {
                    OnIdle.Invoke();
                }
            }

            CQG.SubscriberChecking("CommodityInstrumentsResolved", dcObjKey, 
                CommodityInstrumentsResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["CommodityInstrumentsResolved"], 
                CommodityInstrumentsResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["CommodityInstrumentsResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["CommodityInstrumentsResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("CommodityInstrumentsResolved", out args);
                if (happened)
                {
                    var arg2 = new CQGCommodityInstrumentsClass((string)args[2]);
                    CommodityInstrumentsResolved.Invoke((string)args[0], (eInstrumentType)args[1], (CQGCommodityInstruments)arg2);
                }
            }

            CQG.SubscriberChecking("IncorrectSymbol", dcObjKey, 
                IncorrectSymbol != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["IncorrectSymbol"], 
                IncorrectSymbol == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["IncorrectSymbol"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["IncorrectSymbol"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("IncorrectSymbol", out args);
                if (happened)
                {
                    IncorrectSymbol.Invoke((string)args[0]);
                }
            }

            CQG.SubscriberChecking("InstrumentChanged", dcObjKey, 
                InstrumentChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentChanged"], 
                InstrumentChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentChanged", out args);
                if (happened)
                {
                    var arg0 = new CQGInstrumentClass((string)args[0]);
                    var arg1 = new CQGQuotesClass((string)args[1]);
                    var arg2 = new CQGInstrumentPropertiesClass((string)args[2]);
                    InstrumentChanged.Invoke((CQGInstrument)arg0, (CQGQuotes)arg1, (CQGInstrumentProperties)arg2);
                }
            }

            CQG.SubscriberChecking("InstrumentDOMChanged", dcObjKey, 
                InstrumentDOMChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentDOMChanged"], 
                InstrumentDOMChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentDOMChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentDOMChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentDOMChanged", out args);
                if (happened)
                {
                    var arg0 = new CQGInstrumentClass((string)args[0]);
                    var arg1 = new CQGDOMQuotesClass((string)args[1]);
                    var arg2 = new CQGDOMQuotesClass((string)args[2]);
                    InstrumentDOMChanged.Invoke((CQGInstrument)arg0, (CQGDOMQuotes)arg1, (CQGDOMQuotes)arg2);
                }
            }

            CQG.SubscriberChecking("InstrumentsGroupChanged", dcObjKey, 
                InstrumentsGroupChanged != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupChanged"], 
                InstrumentsGroupChanged == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupChanged"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupChanged"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentsGroupChanged", out args);
                if (happened)
                {
                    var arg1 = new CQGInstrumentsGroupClass((string)args[1]);
                    var arg2 = new CQGStringCollectionClass((string)args[2]);
                    InstrumentsGroupChanged.Invoke((eChangeType)args[0], (CQGInstrumentsGroup)arg1, (CQGStringCollection)arg2);
                }
            }

            CQG.SubscriberChecking("InstrumentsGroupResolved", dcObjKey, 
                InstrumentsGroupResolved != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupResolved"], 
                InstrumentsGroupResolved == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupResolved"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentsGroupResolved"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentsGroupResolved", out args);
                if (happened)
                {
                    var arg0 = new CQGInstrumentsGroupClass((string)args[0]);
                    var arg1 = new CQGErrorClass((string)args[1]);
                    InstrumentsGroupResolved.Invoke((CQGInstrumentsGroup)arg0, (CQGError)arg1);
                }
            }

            CQG.SubscriberChecking("InstrumentSubscribed", dcObjKey, 
                InstrumentSubscribed != null && !ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentSubscribed"], 
                InstrumentSubscribed == null && ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentSubscribed"]);

            if (ClientDictionaries.EventCheckingDictionary[dcObjKey]["InstrumentSubscribed"])
            {
                object[] args;
                bool happened = CQG.EventHelper.CheckWhetherEventHappened("InstrumentSubscribed", out args);
                if (happened)
                {
                    var arg1 = new CQGInstrumentClass((string)args[1]);
                    InstrumentSubscribed.Invoke((string)args[0], (CQGInstrument)arg1);
                }
            }

            eventCheckingTimer.Start();
        }

        #endregion

    }

    public class CQGDOMQuotesClass : CQGDOMQuotes
    {
        private string dcObjKey;

        #region Constructors

        internal CQGDOMQuotesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGDOMQuotesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGQuote this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGQuoteClass(key);
                return value;
            }

        }

        public CQGQuote this[double price_, bool round_to_better = true]
        {
            get
            {
                string name = "ItemByPrice";
                var args = new object[] { price_, round_to_better };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGQuoteClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGQuote get_ItemByPrice(double price_, bool round_to_better = true)
        {
            string name = "get_ItemByPrice";
            var args = new object[] { price_, round_to_better };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGQuoteClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGEnvironmentClass : CQGEnvironment
    {
        private string dcObjKey;

        #region Constructors

        internal CQGEnvironmentClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGEnvironmentClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGCEL CEL
        {
            get
            {
                string name = "CEL";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCELClass(key);
                return value;
            }

        }

        public string CELVersion
        {
            get
            {
                string name = "CELVersion";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int CQGSerialNumber
        {
            get
            {
                string name = "CQGSerialNumber";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string CQGVersion
        {
            get
            {
                string name = "CQGVersion";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eConnectionStatus DataConnectionStatus
        {
            get
            {
                string name = "DataConnectionStatus";
                var value = CQG.GetProperty<eConnectionStatus>(dcObjKey, name);
                return value;
            }

        }

        public eConnectionStatus GWConnectionStatus
        {
            get
            {
                string name = "GWConnectionStatus";
                var value = CQG.GetProperty<eConnectionStatus>(dcObjKey, name);
                return value;
            }

        }

        public string GWLogonName
        {
            get
            {
                string name = "GWLogonName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public DateTime LineTime
        {
            get
            {
                string name = "LineTime";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public DateTime LocalTime
        {
            get
            {
                string name = "LocalTime";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int MessagesPending
        {
            get
            {
                string name = "MessagesPending";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int OrdersPending
        {
            get
            {
                string name = "OrdersPending";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGRemoteOpenAPISession RemoteOpenAPISession
        {
            get
            {
                string name = "RemoteOpenAPISession";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGRemoteOpenAPISessionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGErrorClass : CQGError
    {
        private string dcObjKey;

        #region Constructors

        internal CQGErrorClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGErrorClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Code
        {
            get
            {
                string name = "Code";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string Description
        {
            get
            {
                string name = "Description";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public object Owner
        {
            get
            {
                string name = "Owner";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGExchangesClass : CQGExchanges
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExchangesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExchangesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<string>(dcObjKey, name, args);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGExecutionPatternClass : CQGExecutionPattern
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExecutionPatternClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExecutionPatternClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGExecutionPatternParameters Parameters
        {
            get
            {
                string name = "Parameters";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGExecutionPatternParametersClass(key);
                return value;
            }

        }

        public string PatternString
        {
            get
            {
                string name = "PatternString";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGExecutionPatternParameterClass : CQGExecutionPatternParameter
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExecutionPatternParameterClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExecutionPatternParameterClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGExecutionPatternParameters Parameters
        {
            get
            {
                string name = "Parameters";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGExecutionPatternParametersClass(key);
                return value;
            }

        }

        public eExecutionPatternParameterType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eExecutionPatternParameterType>(dcObjKey, name);
                return value;
            }

        }

        public string Value
        {
            get
            {
                string name = "Value";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Value";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGExecutionPatternParametersClass : CQGExecutionPatternParameters
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExecutionPatternParametersClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExecutionPatternParametersClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGExecutionPatternParameter this[object index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGExecutionPatternParameterClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGExecutionPatternParameter Add(string name_, eExecutionPatternParameterType type_, string value_ = "")
        {
            string name = "Add";
            var args = new object[] { name_, type_, value_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGExecutionPatternParameterClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual void Remove(object index_)
        {
            string name = "Remove";
            var args = new object[] { index_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGExpressionClass : CQGExpression
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExpressionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExpressionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGExpressionOutputs this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGExpressionOutputsClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGExpressionOutputHeaders OutputHeaders
        {
            get
            {
                string name = "OutputHeaders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGExpressionOutputHeadersClass(key);
                return value;
            }

        }

        public CQGExpressionRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGExpressionRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual int IndexForDate(DateTime date_)
        {
            string name = "IndexForDate";
            var args = new object[] { date_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGExpressionOutputHeadersClass : CQGExpressionOutputHeaders
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExpressionOutputHeadersClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExpressionOutputHeadersClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<string>(dcObjKey, name, args);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGExpressionOutputsClass : CQGExpressionOutputs
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExpressionOutputsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExpressionOutputsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double this[object key_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { key_ };
                var value = CQG.GetProperty<double>(dcObjKey, name, args);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGExpressionRequestClass : CQGExpressionRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExpressionRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExpressionRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eHistoricalPeriod HistoricalPeriod
        {
            get
            {
                string name = "HistoricalPeriod";
                var value = CQG.GetProperty<eHistoricalPeriod>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "HistoricalPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int IntradayPeriod
        {
            get
            {
                string name = "IntradayPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IntradayPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string this[int index_]
        {
            get
            {
                string name = "SubExpression";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<string>(dcObjKey, name, args);
                return value;
            }

        }

        public int SubExpressionCount
        {
            get
            {
                string name = "SubExpressionCount";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual void AddSubExpression(string sub_expression, string alias_ = "")
        {
            string name = "AddSubExpression";
            var args = new object[] { sub_expression, alias_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual string get_SubExpression(int index_)
        {
            string name = "get_SubExpression";
            var args = new object[] { index_ };
            var result = CQG.CallMethod<string>(dcObjKey, name, args);
            return result;
        }

        public virtual string get_SubExpressionAlias(int index_)
        {
            string name = "get_SubExpressionAlias";
            var args = new object[] { index_ };
            var result = CQG.CallMethod<string>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGExpressionsClass : CQGExpressions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGExpressionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGExpressionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGExpression this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGExpressionClass(key);
                return value;
            }

        }

        public CQGExpression this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGExpressionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGExpression get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGExpressionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGFillClass : CQGFill
    {
        private string dcObjKey;

        #region Constructors

        internal CQGFillClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGFillClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int this[int leg_]
        {
            get
            {
                string name = "GWTradesCount";
                var args = new object[] { leg_ };
                var value = CQG.GetProperty<int>(dcObjKey, name, args);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int LegCount
        {
            get
            {
                string name = "LegCount";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGOrder Order
        {
            get
            {
                string name = "Order";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrderClass(key);
                return value;
            }

        }

        public string RefFillId
        {
            get
            {
                string name = "RefFillId";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eFillStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eFillStatus>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual bool get_Aggressive(int leg_ = 0)
        {
            string name = "get_Aggressive";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        public virtual string get_Currency(int leg_ = 0)
        {
            string name = "get_Currency";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<string>(dcObjKey, name, args);
            return result;
        }

        public virtual string get_DisplayPrice(int leg_ = 0)
        {
            string name = "get_DisplayPrice";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<string>(dcObjKey, name, args);
            return result;
        }

        public virtual DateTime get_ExchangeTradeDate(int leg_ = 0)
        {
            string name = "get_ExchangeTradeDate";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<DateTime>(dcObjKey, name, args);
            return result;
        }

        public virtual string get_GWTradeId(int leg_ = 0)
        {
            string name = "get_GWTradeId";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<string>(dcObjKey, name, args);
            return result;
        }

        public virtual CQGGWTrades get_GWTrades(int leg_ = 0)
        {
            string name = "get_GWTrades";
            var args = new object[] { leg_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGGWTradesClass(key);
            return result;
        }

        public virtual int get_GWTradesCount(int leg_)
        {
            string name = "get_GWTradesCount";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual string get_InstrumentName(int leg_ = 0)
        {
            string name = "get_InstrumentName";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<string>(dcObjKey, name, args);
            return result;
        }

        public virtual double get_Price(int leg_ = 0)
        {
            string name = "get_Price";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual int get_Quantity(int leg_ = 0)
        {
            string name = "get_Quantity";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual eOrderSide get_Side(int leg_ = 0)
        {
            string name = "get_Side";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<eOrderSide>(dcObjKey, name, args);
            return result;
        }

        public virtual DateTime get_StatementDate(int leg_ = 0)
        {
            string name = "get_StatementDate";
            var args = new object[] { leg_ };
            var result = CQG.CallMethod<DateTime>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGFillsClass : CQGFills
    {
        private string dcObjKey;

        #region Constructors

        internal CQGFillsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGFillsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGFill this[string fill_id]
        {
            get
            {
                string name = "Item";
                var args = new object[] { fill_id };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGFillClass(key);
                return value;
            }

        }

        public CQGFill this[int index_]
        {
            get
            {
                string name = "ItemByIndex";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGFillClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGFill get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGFillClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGGWTradeClass : CQGGWTrade
    {
        private string dcObjKey;

        #region Constructors

        internal CQGGWTradeClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGGWTradeClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public bool Aggressive
        {
            get
            {
                string name = "Aggressive";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public string Currency
        {
            get
            {
                string name = "Currency";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string DisplayPrice
        {
            get
            {
                string name = "DisplayPrice";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ExchangeTradeDate
        {
            get
            {
                string name = "ExchangeTradeDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public CQGFill Fill
        {
            get
            {
                string name = "Fill";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGFillClass(key);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string InstrumentName
        {
            get
            {
                string name = "InstrumentName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int Leg
        {
            get
            {
                string name = "Leg";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public eOrderSide Side
        {
            get
            {
                string name = "Side";
                var value = CQG.GetProperty<eOrderSide>(dcObjKey, name);
                return value;
            }

        }

        public DateTime StatementDate
        {
            get
            {
                string name = "StatementDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGGWTradesClass : CQGGWTrades
    {
        private string dcObjKey;

        #region Constructors

        internal CQGGWTradesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGGWTradesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGGWTrade this[string trade_gw_id]
        {
            get
            {
                string name = "Item";
                var args = new object[] { trade_gw_id };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGGWTradeClass(key);
                return value;
            }

        }

        public CQGGWTrade this[int index_]
        {
            get
            {
                string name = "ItemByIndex";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGGWTradeClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGGWTrade get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGGWTradeClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGHistoricalSessionsRequestClass : CQGHistoricalSessionsRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGHistoricalSessionsRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGHistoricalSessionsRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public DateTime RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public DateTime RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eHistoricalSessionsRequestType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eHistoricalSessionsRequestType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Type";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGHolidayClass : CQGHoliday
    {
        private string dcObjKey;

        #region Constructors

        internal CQGHolidayClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGHolidayClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public DateTime HolidayDate
        {
            get
            {
                string name = "HolidayDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public bool IsDaily
        {
            get
            {
                string name = "IsDaily";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public eSessionWeekDays SessionMask
        {
            get
            {
                string name = "SessionMask";
                var value = CQG.GetProperty<eSessionWeekDays>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGHolidaysClass : CQGHolidays
    {
        private string dcObjKey;

        #region Constructors

        internal CQGHolidaysClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGHolidaysClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGHoliday this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGHolidayClass(key);
                return value;
            }

        }

        public CQGSessions Sessions
        {
            get
            {
                string name = "Sessions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGSessionsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGInstrumentClass : CQGInstrument
    {
        private string dcObjKey;

        #region Constructors

        internal CQGInstrumentClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGInstrumentClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGQuote Ask
        {
            get
            {
                string name = "Ask";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGQuoteClass(key);
                return value;
            }

        }

        public eDOMandBBAType BBAType
        {
            get
            {
                string name = "BBAType";
                var value = CQG.GetProperty<eDOMandBBAType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "BBAType";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGQuote Bid
        {
            get
            {
                string name = "Bid";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGQuoteClass(key);
                return value;
            }

        }

        public CQGCEL CEL
        {
            get
            {
                string name = "CEL";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCELClass(key);
                return value;
            }

        }

        public string Commodity
        {
            get
            {
                string name = "Commodity";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Country
        {
            get
            {
                string name = "Country";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Currency
        {
            get
            {
                string name = "Currency";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eDataSubscriptionLevel DataSubscriptionLevel
        {
            get
            {
                string name = "DataSubscriptionLevel";
                var value = CQG.GetProperty<eDataSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DataSubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Description
        {
            get
            {
                string name = "Description";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGDOMQuotes DOMAsks
        {
            get
            {
                string name = "DOMAsks";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGDOMQuotesClass(key);
                return value;
            }

        }

        public CQGDOMQuotes DOMBids
        {
            get
            {
                string name = "DOMBids";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGDOMQuotesClass(key);
                return value;
            }

        }

        public int DOMBookLimit
        {
            get
            {
                string name = "DOMBookLimit";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DOMBookLimit";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool DOMStatus
        {
            get
            {
                string name = "DOMStatus";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DOMStatus";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DTE
        {
            get
            {
                string name = "DTE";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string ExchangeAbbreviation
        {
            get
            {
                string name = "ExchangeAbbreviation";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int ExchangeID
        {
            get
            {
                string name = "ExchangeID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ExpirationDate
        {
            get
            {
                string name = "ExpirationDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string FullName
        {
            get
            {
                string name = "FullName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public double InitialMargin
        {
            get
            {
                string name = "InitialMargin";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int InstrumentID
        {
            get
            {
                string name = "InstrumentID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public eInstrumentType InstrumentType
        {
            get
            {
                string name = "InstrumentType";
                var value = CQG.GetProperty<eInstrumentType>(dcObjKey, name);
                return value;
            }

        }

        public bool IsDownTick
        {
            get
            {
                string name = "IsDownTick";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public bool IsFastMarket
        {
            get
            {
                string name = "IsFastMarket";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public bool IsUpTick
        {
            get
            {
                string name = "IsUpTick";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public double MaintenanceMargin
        {
            get
            {
                string name = "MaintenanceMargin";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Month
        {
            get
            {
                string name = "Month";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string MonthChar
        {
            get
            {
                string name = "MonthChar";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public double NetChange
        {
            get
            {
                string name = "NetChange";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public string PreferredSessionsName
        {
            get
            {
                string name = "PreferredSessionsName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstrumentProperties Properties
        {
            get
            {
                string name = "Properties";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentPropertiesClass(key);
                return value;
            }

        }

        public ePropertySubscriptionLevel PropertyLevel
        {
            get
            {
                string name = "PropertyLevel";
                var value = CQG.GetProperty<ePropertySubscriptionLevel>(dcObjKey, name);
                return value;
            }

        }

        public eQuoteSubscriptionLevel QuoteLevel
        {
            get
            {
                string name = "QuoteLevel";
                var value = CQG.GetProperty<eQuoteSubscriptionLevel>(dcObjKey, name);
                return value;
            }

        }

        public CQGQuotes Quotes
        {
            get
            {
                string name = "Quotes";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGQuotesClass(key);
                return value;
            }

        }

        public short Scale
        {
            get
            {
                string name = "Scale";
                var value = CQG.GetProperty<short>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int SessionMask
        {
            get
            {
                string name = "SessionMask";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int SessionNumber
        {
            get
            {
                string name = "SessionNumber";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGSessions Sessions
        {
            get
            {
                string name = "Sessions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGSessionsClass(key);
                return value;
            }

        }

        public int Strike
        {
            get
            {
                string name = "Strike";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tagName]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tagName };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public double TickSize
        {
            get
            {
                string name = "TickSize";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int TickSizeFractionDenominator
        {
            get
            {
                string name = "TickSizeFractionDenominator";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int TickSizeFractionNumerator
        {
            get
            {
                string name = "TickSizeFractionNumerator";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double TickValue
        {
            get
            {
                string name = "TickValue";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public double TodayCTotalVolume
        {
            get
            {
                string name = "TodayCTotalVolume";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public CQGQuote Trade
        {
            get
            {
                string name = "Trade";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGQuoteClass(key);
                return value;
            }

        }

        public CQGInstrument UnderlyingInstrument
        {
            get
            {
                string name = "UnderlyingInstrument";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentClass(key);
                return value;
            }

        }

        public string UnderlyingInstrumentName
        {
            get
            {
                string name = "UnderlyingInstrumentName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public double YCOI
        {
            get
            {
                string name = "YCOI";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Year
        {
            get
            {
                string name = "Year";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string YearString
        {
            get
            {
                string name = "YearString";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public double YesterdayCTotalVolume
        {
            get
            {
                string name = "YesterdayCTotalVolume";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual double FromDisplayPrice(string display_price)
        {
            string name = "FromDisplayPrice";
            var args = new object[] { display_price };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual object get_Tag(string tagName)
        {
            string name = "get_Tag";
            var args = new object[] { tagName };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual double GetNearestTradeablePrice(double price_)
        {
            string name = "GetNearestTradeablePrice";
            var args = new object[] { price_ };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double GetTickSizeFor(double Price)
        {
            string name = "GetTickSizeFor";
            var args = new object[] { Price };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual double GetTickValueFor(double Price)
        {
            string name = "GetTickValueFor";
            var args = new object[] { Price };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Tag(string tagName, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tagName, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual string ToDisplayPrice(double correct_price)
        {
            string name = "ToDisplayPrice";
            var args = new object[] { correct_price };
            var result = CQG.CallMethod<string>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGInstrumentPropertiesClass : CQGInstrumentProperties
    {
        private string dcObjKey;

        #region Constructors

        internal CQGInstrumentPropertiesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGInstrumentPropertiesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstrumentProperty this[eInstrumentProperty instrument_property]
        {
            get
            {
                string name = "Item";
                var args = new object[] { instrument_property };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGInstrumentPropertyClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGInstrumentPropertyClass : CQGInstrumentProperty
    {
        private string dcObjKey;

        #region Constructors

        internal CQGInstrumentPropertyClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGInstrumentPropertyClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGInstrument Instrument
        {
            get
            {
                string name = "Instrument";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentClass(key);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eInstrumentProperty Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eInstrumentProperty>(dcObjKey, name);
                return value;
            }

        }

        public object Value
        {
            get
            {
                string name = "Value";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGInstrumentsClass : CQGInstruments
    {
        private string dcObjKey;

        #region Constructors

        internal CQGInstrumentsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGInstrumentsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstrument this[object index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGInstrumentClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGInstrumentsGroupClass : CQGInstrumentsGroup
    {
        private string dcObjKey;

        #region Constructors

        internal CQGInstrumentsGroupClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGInstrumentsGroupClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstruments Instruments
        {
            get
            {
                string name = "Instruments";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentsClass(key);
                return value;
            }

        }

        public CQGInstrumentsGroupRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentsGroupRequestClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGInstrumentsGroupRequestClass : CQGInstrumentsGroupRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGInstrumentsGroupRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGInstrumentsGroupRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Commodity
        {
            get
            {
                string name = "Commodity";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Commodity";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eInstrumentType InstrumentTypes
        {
            get
            {
                string name = "InstrumentTypes";
                var value = CQG.GetProperty<eInstrumentType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "InstrumentTypes";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eGroupSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eGroupSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGInstrumentsGroupsClass : CQGInstrumentsGroups
    {
        private string dcObjKey;

        #region Constructors

        internal CQGInstrumentsGroupsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGInstrumentsGroupsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstrumentsGroup this[object index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGInstrumentsGroupClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGInstrumentSubscriptionRequestClass : CQGInstrumentSubscriptionRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGInstrumentSubscriptionRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGInstrumentSubscriptionRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eDOMandBBAType DOMBBAType
        {
            get
            {
                string name = "DOMBBAType";
                var value = CQG.GetProperty<eDOMandBBAType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DOMBBAType";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool DOMStatus
        {
            get
            {
                string name = "DOMStatus";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DOMStatus";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public ePropertySubscriptionLevel PropertyLevel
        {
            get
            {
                string name = "PropertyLevel";
                var value = CQG.GetProperty<ePropertySubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "PropertyLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eQuoteSubscriptionLevel QuoteLevel
        {
            get
            {
                string name = "QuoteLevel";
                var value = CQG.GetProperty<eQuoteSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "QuoteLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGIntegerCollectionClass : CQGIntegerCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGIntegerCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGIntegerCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<int>(dcObjKey, name, args);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGLoggerClass : CQGLogger
    {
        private string dcObjKey;

        #region Constructors

        internal CQGLoggerClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGLoggerClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGCEL CEL
        {
            get
            {
                string name = "CEL";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCELClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual void Log(string content_, eLogSeverity severity_ = eLogSeverity.lsInfo)
        {
            string name = "Log";
            var args = new object[] { content_, severity_ };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGManualFillClass : CQGManualFill
    {
        private string dcObjKey;

        #region Constructors

        internal CQGManualFillClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGManualFillClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string DisplayPrice
        {
            get
            {
                string name = "DisplayPrice";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string InstrumentName
        {
            get
            {
                string name = "InstrumentName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Note
        {
            get
            {
                string name = "Note";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public eOrderSide Side
        {
            get
            {
                string name = "Side";
                var value = CQG.GetProperty<eOrderSide>(dcObjKey, name);
                return value;
            }

        }

        public DateTime StatementDate
        {
            get
            {
                string name = "StatementDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TradeId
        {
            get
            {
                string name = "TradeId";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime TradeTimestamp
        {
            get
            {
                string name = "TradeTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGManualFillRequestClass : CQGManualFillRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGManualFillRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGManualFillRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "GWAccountID";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string InstrumentName
        {
            get
            {
                string name = "InstrumentName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "InstrumentName";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Note
        {
            get
            {
                string name = "Note";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Note";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Price";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Quantity";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eOrderSide Side
        {
            get
            {
                string name = "Side";
                var value = CQG.GetProperty<eOrderSide>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Side";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public DateTime StatementDate
        {
            get
            {
                string name = "StatementDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "StatementDate";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int TradeId
        {
            get
            {
                string name = "TradeId";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "TradeId";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public DateTime TradeTimestamp
        {
            get
            {
                string name = "TradeTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "TradeTimestamp";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGManualFillsClass : CQGManualFills
    {
        private string dcObjKey;

        #region Constructors

        internal CQGManualFillsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGManualFillsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public eManualFillsDataLevel DataLevel
        {
            get
            {
                string name = "DataLevel";
                var value = CQG.GetProperty<eManualFillsDataLevel>(dcObjKey, name);
                return value;
            }

        }

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGManualFill this[int trade_id]
        {
            get
            {
                string name = "Item";
                var args = new object[] { trade_id };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGManualFillClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGManualFill get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGManualFillClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGManualFillsCollectionClass : CQGManualFillsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGManualFillsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGManualFillsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGManualFills this[int account_id]
        {
            get
            {
                string name = "Item";
                var args = new object[] { account_id };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGManualFillsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGManualFills get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGManualFillsClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGModifiedPropertiesClass : CQGModifiedProperties
    {
        private string dcObjKey;

        #region Constructors

        internal CQGModifiedPropertiesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGModifiedPropertiesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGModifiedProperty this[eOrderProperty property_type]
        {
            get
            {
                string name = "Item";
                var args = new object[] { property_type };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGModifiedPropertyClass(key);
                return value;
            }

        }

        public CQGModifiedProperty this[int index_]
        {
            get
            {
                string name = "ItemByIndex";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGModifiedPropertyClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGModifiedProperty get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGModifiedPropertyClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGModifiedPropertyClass : CQGModifiedProperty
    {
        private string dcObjKey;

        #region Constructors

        internal CQGModifiedPropertyClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGModifiedPropertyClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Description
        {
            get
            {
                string name = "Description";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public object NewValue
        {
            get
            {
                string name = "NewValue";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

        }

        public object PreviousValue
        {
            get
            {
                string name = "PreviousValue";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

        }

        public eOrderProperty Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eOrderProperty>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGOrderActionRequestClass : CQGOrderActionRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrderActionRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrderActionRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGAccount Account
        {
            get
            {
                string name = "Account";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountClass(key);
                return value;
            }

            set
            {
                string name = "Account";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public uint AlgorithmID
        {
            get
            {
                string name = "AlgorithmID";
                var value = CQG.GetProperty<uint>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AlgorithmID";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string AlgorithmStringID
        {
            get
            {
                string name = "AlgorithmStringID";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AlgorithmStringID";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool FromAllTraders
        {
            get
            {
                string name = "FromAllTraders";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "FromAllTraders";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGInstrument Instrument
        {
            get
            {
                string name = "Instrument";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentClass(key);
                return value;
            }

            set
            {
                string name = "Instrument";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eOrderSide OrderSide
        {
            get
            {
                string name = "OrderSide";
                var value = CQG.GetProperty<eOrderSide>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "OrderSide";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool Parked
        {
            get
            {
                string name = "Parked";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Parked";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGOrderChainClass : CQGOrderChain
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrderChainClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrderChainClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public uint AlgorithmID
        {
            get
            {
                string name = "AlgorithmID";
                var value = CQG.GetProperty<uint>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AlgorithmID";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string AlgorithmStringID
        {
            get
            {
                string name = "AlgorithmStringID";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AlgorithmStringID";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual void AddOrder(CQGOrder cqg_order)
        {
            string name = "AddOrder";
            var args = new object[] { cqg_order };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGOrderClass : CQGOrder
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrderClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrderClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGAccount Account
        {
            get
            {
                string name = "Account";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountClass(key);
                return value;
            }

            set
            {
                string name = "Account";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public uint AlgorithmID
        {
            get
            {
                string name = "AlgorithmID";
                var value = CQG.GetProperty<uint>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AlgorithmID";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string AlgorithmStringID
        {
            get
            {
                string name = "AlgorithmStringID";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AlgorithmStringID";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool CanBeCanceled
        {
            get
            {
                string name = "CanBeCanceled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public bool CanBeModified
        {
            get
            {
                string name = "CanBeModified";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public bool CanBeReplaced
        {
            get
            {
                string name = "CanBeReplaced";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public eOrderCancelationType CancelationInstruction
        {
            get
            {
                string name = "CancelationInstruction";
                var value = CQG.GetProperty<eOrderCancelationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "CancelationInstruction";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Description
        {
            get
            {
                string name = "Description";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Description";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eOrderDuration DurationType
        {
            get
            {
                string name = "DurationType";
                var value = CQG.GetProperty<eOrderDuration>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DurationType";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int FilledQuantity
        {
            get
            {
                string name = "FilledQuantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGFills Fills
        {
            get
            {
                string name = "Fills";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGFillsClass(key);
                return value;
            }

        }

        public string GUID
        {
            get
            {
                string name = "GUID";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string GWOrderID
        {
            get
            {
                string name = "GWOrderID";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eOrderStatus GWStatus
        {
            get
            {
                string name = "GWStatus";
                var value = CQG.GetProperty<eOrderStatus>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstrument Instrument
        {
            get
            {
                string name = "Instrument";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentClass(key);
                return value;
            }

            set
            {
                string name = "Instrument";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string InstrumentName
        {
            get
            {
                string name = "InstrumentName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public bool IsExternal
        {
            get
            {
                string name = "IsExternal";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public bool IsFinal
        {
            get
            {
                string name = "IsFinal";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public eOrderEvent LastEvent
        {
            get
            {
                string name = "LastEvent";
                var value = CQG.GetProperty<eOrderEvent>(dcObjKey, name);
                return value;
            }

        }

        public double LimitPrice
        {
            get
            {
                string name = "LimitPrice";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "LimitPrice";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool OrderCheckMark
        {
            get
            {
                string name = "OrderCheckMark";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "OrderCheckMark";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string OriginalOrderID
        {
            get
            {
                string name = "OriginalOrderID";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime PlaceTime
        {
            get
            {
                string name = "PlaceTime";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public CQGOrderProperties Properties
        {
            get
            {
                string name = "Properties";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrderPropertiesClass(key);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Quantity";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RemainingQuantity
        {
            get
            {
                string name = "RemainingQuantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eOrderSide Side
        {
            get
            {
                string name = "Side";
                var value = CQG.GetProperty<eOrderSide>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Side";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eOrderLocalState State
        {
            get
            {
                string name = "State";
                var value = CQG.GetProperty<eOrderLocalState>(dcObjKey, name);
                return value;
            }

        }

        public double StopPrice
        {
            get
            {
                string name = "StopPrice";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "StopPrice";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public DateTime TimeActiveAt
        {
            get
            {
                string name = "TimeActiveAt";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public CQGTransactions Transactions
        {
            get
            {
                string name = "Transactions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTransactionsClass(key);
                return value;
            }

        }

        public eOrderType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eOrderType>(dcObjKey, name);
                return value;
            }

        }

        public string UEName
        {
            get
            {
                string name = "UEName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual void Activate()
        {
            string name = "Activate";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void Cancel()
        {
            string name = "Cancel";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual void Modify(CQGOrderModify cqg_order_modify)
        {
            string name = "Modify";
            var args = new object[] { cqg_order_modify };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void Place()
        {
            string name = "Place";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual CQGOrderModify PrepareModify()
        {
            string name = "PrepareModify";
            string key = CQG.CallMethod<string>(dcObjKey, name);
            var result = new CQGOrderModifyClass(key);
            return result;
        }

        public virtual void SendCareOrderAck()
        {
            string name = "SendCareOrderAck";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGOrderModifyClass : CQGOrderModify
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrderModifyClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrderModifyClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGOrderProperties Properties
        {
            get
            {
                string name = "Properties";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrderPropertiesClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGOrderPropertiesClass : CQGOrderProperties
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrderPropertiesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrderPropertiesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGOrderProperty this[eOrderProperty order_property]
        {
            get
            {
                string name = "Item";
                var args = new object[] { order_property };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGOrderPropertyClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGOrderPropertyClass : CQGOrderProperty
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrderPropertyClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrderPropertyClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public bool CanBeSet
        {
            get
            {
                string name = "CanBeSet";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public string Description
        {
            get
            {
                string name = "Description";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGOrder Order
        {
            get
            {
                string name = "Order";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrderClass(key);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eOrderProperty Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eOrderProperty>(dcObjKey, name);
                return value;
            }

        }

        public object Value
        {
            get
            {
                string name = "Value";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Value";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGOrdersClass : CQGOrders
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrdersClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrdersClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGOrder this[string order_id]
        {
            get
            {
                string name = "Item";
                var args = new object[] { order_id };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGOrderClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual void AddToLiveOrders()
        {
            string name = "AddToLiveOrders";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual CQGOrder get_ItemByGuid(string order_guid)
        {
            string name = "get_ItemByGuid";
            var args = new object[] { order_guid };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrderClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual CQGOrders SelectByInstrumentName(string instrument_name)
        {
            string name = "SelectByInstrumentName";
            var args = new object[] { instrument_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrdersClass(key);
            return result;
        }

        public virtual CQGOrders SelectByOrderStatus(eOrderStatus order_status)
        {
            string name = "SelectByOrderStatus";
            var args = new object[] { order_status };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrdersClass(key);
            return result;
        }

        public virtual CQGOrders SelectByOrderType(eOrderType order_type)
        {
            string name = "SelectByOrderType";
            var args = new object[] { order_type };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrdersClass(key);
            return result;
        }

        public virtual CQGOrders SelectByProperty(eOrderProperty property_type, object property_value)
        {
            string name = "SelectByProperty";
            var args = new object[] { property_type, property_value };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrdersClass(key);
            return result;
        }

        public virtual CQGOrders SelectBySide(eOrderSide order_side)
        {
            string name = "SelectBySide";
            var args = new object[] { order_side };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrdersClass(key);
            return result;
        }

        public virtual CQGOrders SelectByTag(string tag_name, object tag_value = null)
        {
            string name = "SelectByTag";
            var args = new object[] { tag_name, tag_value };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGOrdersClass(key);
            return result;
        }

        #endregion

    }

    public class CQGOrdersQueryClass : CQGOrdersQuery
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrdersQueryClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrdersQueryClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGAccount Account
        {
            get
            {
                string name = "Account";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountClass(key);
                return value;
            }

        }

        public CQGCEL CEL
        {
            get
            {
                string name = "CEL";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGCELClass(key);
                return value;
            }

        }

        public CQGError FinalError
        {
            get
            {
                string name = "FinalError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGOrders LastChunk
        {
            get
            {
                string name = "LastChunk";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrdersClass(key);
                return value;
            }

        }

        public CQGOrders Orders
        {
            get
            {
                string name = "Orders";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrdersClass(key);
                return value;
            }

        }

        public int QueryID
        {
            get
            {
                string name = "QueryID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual void Cancel()
        {
            string name = "Cancel";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        #endregion

    }

    public class CQGOrderStatisticsClass : CQGOrderStatistics
    {
        private string dcObjKey;

        #region Constructors

        internal CQGOrderStatisticsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGOrderStatisticsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public object this[string i_GUID]
        {
            get
            {
                string name = "StatisticsOnReceive";
                var args = new object[] { i_GUID };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

        }

        public bool Switch
        {
            set
            {
                string name = "Switch";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_StatisticsOnReceive(string i_GUID)
        {
            string name = "get_StatisticsOnReceive";
            var args = new object[] { i_GUID };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual object get_StatisticsOnSend(string i_GUID)
        {
            string name = "get_StatisticsOnSend";
            var args = new object[] { i_GUID };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGParameterDefinitionClass : CQGParameterDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGParameterDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGParameterDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGStringCollection AvailableValues
        {
            get
            {
                string name = "AvailableValues";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGStringCollectionClass(key);
                return value;
            }

        }

        public string Comment
        {
            get
            {
                string name = "Comment";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public object DefaultValue
        {
            get
            {
                string name = "DefaultValue";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eUserFormulaParameterType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eUserFormulaParameterType>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGParameterDefinitionsClass : CQGParameterDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGParameterDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGParameterDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGParameterDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGParameterDefinitionClass(key);
                return value;
            }

        }

        public CQGParameterDefinition this[string parameter_name]
        {
            get
            {
                string name = "ItemByName";
                var args = new object[] { parameter_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGParameterDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGParameterDefinition get_ItemByName(string parameter_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { parameter_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGParameterDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGPointAndFigureBarClass : CQGPointAndFigureBar
    {
        private string dcObjKey;

        #region Constructors

        internal CQGPointAndFigureBarClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGPointAndFigureBarClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public double High
        {
            get
            {
                string name = "High";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Low
        {
            get
            {
                string name = "Low";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Mid
        {
            get
            {
                string name = "Mid";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double PFHigh
        {
            get
            {
                string name = "PFHigh";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double PFLow
        {
            get
            {
                string name = "PFLow";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public bool Up
        {
            get
            {
                string name = "Up";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGPointAndFigureBarsClass : CQGPointAndFigureBars
    {
        private string dcObjKey;

        #region Constructors

        internal CQGPointAndFigureBarsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGPointAndFigureBarsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGPointAndFigureBar this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGPointAndFigureBarClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGPointAndFigureBarsRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGPointAndFigureBarsRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGPointAndFigureBarsCollectionClass : CQGPointAndFigureBarsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGPointAndFigureBarsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGPointAndFigureBarsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGPointAndFigureBars this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGPointAndFigureBarsClass(key);
                return value;
            }

        }

        public CQGPointAndFigureBars this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGPointAndFigureBarsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGPointAndFigureBars get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGPointAndFigureBarsClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGPointAndFigureBarsRequestClass : CQGPointAndFigureBarsRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGPointAndFigureBarsRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGPointAndFigureBarsRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int BoxSize
        {
            get
            {
                string name = "BoxSize";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "BoxSize";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public ePfBoxUnits BoxUnits
        {
            get
            {
                string name = "BoxUnits";
                var value = CQG.GetProperty<ePfBoxUnits>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "BoxUnits";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public ePfDataSource DataSource
        {
            get
            {
                string name = "DataSource";
                var value = CQG.GetProperty<ePfDataSource>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DataSource";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int Reversal
        {
            get
            {
                string name = "Reversal";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Reversal";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGPositionClass : CQGPosition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGPositionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGPositionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGAccount Account
        {
            get
            {
                string name = "Account";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountClass(key);
                return value;
            }

        }

        public double AveragePrice
        {
            get
            {
                string name = "AveragePrice";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstrument Instrument
        {
            get
            {
                string name = "Instrument";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentClass(key);
                return value;
            }

        }

        public string InstrumentName
        {
            get
            {
                string name = "InstrumentName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public bool ManualFillsInvolved
        {
            get
            {
                string name = "ManualFillsInvolved";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public CQGTrades MatchedTrades
        {
            get
            {
                string name = "MatchedTrades";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradesClass(key);
                return value;
            }

        }

        public double MVO
        {
            get
            {
                string name = "MVO";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public CQGTrades OpenTrades
        {
            get
            {
                string name = "OpenTrades";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradesClass(key);
                return value;
            }

        }

        public double OTE
        {
            get
            {
                string name = "OTE";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double ProfitLoss
        {
            get
            {
                string name = "ProfitLoss";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eOrderSide Side
        {
            get
            {
                string name = "Side";
                var value = CQG.GetProperty<eOrderSide>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public double UPL
        {
            get
            {
                string name = "UPL";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGPositionsClass : CQGPositions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGPositionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGPositionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGPosition this[string instrument_name]
        {
            get
            {
                string name = "Item";
                var args = new object[] { instrument_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGPositionClass(key);
                return value;
            }

        }

        public CQGPosition this[int index_]
        {
            get
            {
                string name = "ItemByIndex";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGPositionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGPosition get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGPositionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGPositionsStatementClass : CQGPositionsStatement
    {
        private string dcObjKey;

        #region Constructors

        internal CQGPositionsStatementClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGPositionsStatementClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGPositions Positions
        {
            get
            {
                string name = "Positions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGPositionsClass(key);
                return value;
            }

        }

        public DateTime StatementDate
        {
            get
            {
                string name = "StatementDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGQFormulaDefinitionClass : CQGQFormulaDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGQFormulaDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGQFormulaDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Expression
        {
            get
            {
                string name = "Expression";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int Number
        {
            get
            {
                string name = "Number";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGQFormulaDefinitionsClass : CQGQFormulaDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGQFormulaDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGQFormulaDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGQFormulaDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGQFormulaDefinitionClass(key);
                return value;
            }

        }

        public CQGQFormulaDefinition this[string qformula_name]
        {
            get
            {
                string name = "ItemByName";
                var args = new object[] { qformula_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGQFormulaDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGQFormulaDefinition get_ItemByName(string qformula_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { qformula_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGQFormulaDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGQuoteClass : CQGQuote
    {
        private string dcObjKey;

        #region Constructors

        internal CQGQuoteClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGQuoteClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public bool HasVolume
        {
            get
            {
                string name = "HasVolume";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstrument Instrument
        {
            get
            {
                string name = "Instrument";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentClass(key);
                return value;
            }

        }

        public bool IsValid
        {
            get
            {
                string name = "IsValid";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eQuoteType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eQuoteType>(dcObjKey, name);
                return value;
            }

        }

        public int Volume
        {
            get
            {
                string name = "Volume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGQuotesClass : CQGQuotes
    {
        private string dcObjKey;

        #region Constructors

        internal CQGQuotesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGQuotesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGQuote this[eQuoteType quote_type]
        {
            get
            {
                string name = "Item";
                var args = new object[] { quote_type };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGQuoteClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGRemoteOpenAPISessionClass : CQGRemoteOpenAPISession
    {
        private string dcObjKey;

        #region Constructors

        internal CQGRemoteOpenAPISessionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGRemoteOpenAPISessionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string LogonName
        {
            get
            {
                string name = "LogonName";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int ROMNumber
        {
            get
            {
                string name = "ROMNumber";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string ServerAddress
        {
            get
            {
                string name = "ServerAddress";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGSessionClass : CQGSession
    {
        private string dcObjKey;

        #region Constructors

        internal CQGSessionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGSessionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public DateTime ActivationDate
        {
            get
            {
                string name = "ActivationDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public sbyte DayCloseOffset
        {
            get
            {
                string name = "DayCloseOffset";
                var value = CQG.GetProperty<sbyte>(dcObjKey, name);
                return value;
            }

        }

        public sbyte DayStartOffset
        {
            get
            {
                string name = "DayStartOffset";
                var value = CQG.GetProperty<sbyte>(dcObjKey, name);
                return value;
            }

        }

        public bool DayStartsYesterday
        {
            get
            {
                string name = "DayStartsYesterday";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTime
        {
            get
            {
                string name = "EndTime";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public CQGInstrument Instrument
        {
            get
            {
                string name = "Instrument";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGInstrumentClass(key);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public short Number
        {
            get
            {
                string name = "Number";
                var value = CQG.GetProperty<short>(dcObjKey, name);
                return value;
            }

        }

        public bool PrimaryFlag
        {
            get
            {
                string name = "PrimaryFlag";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public DateTime StartTime
        {
            get
            {
                string name = "StartTime";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eSymbolSessionType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eSymbolSessionType>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ValidEndTime
        {
            get
            {
                string name = "ValidEndTime";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ValidStartTime
        {
            get
            {
                string name = "ValidStartTime";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eSessionWeekDays WorkingWeekDays
        {
            get
            {
                string name = "WorkingWeekDays";
                var value = CQG.GetProperty<eSessionWeekDays>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual bool IsTimeInSession(DateTime date_time, bool use_session_valid_times = false)
        {
            string name = "IsTimeInSession";
            var args = new object[] { date_time, use_session_valid_times };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGSessionsClass : CQGSessions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGSessionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGSessionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime DescriptionEnd
        {
            get
            {
                string name = "DescriptionEnd";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int DescriptionNumber
        {
            get
            {
                string name = "DescriptionNumber";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime DescriptionStart
        {
            get
            {
                string name = "DescriptionStart";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public CQGHolidays Holidays
        {
            get
            {
                string name = "Holidays";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGHolidaysClass(key);
                return value;
            }

        }

        public CQGSession this[object index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGSessionClass(key);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eSymbolSessionType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eSymbolSessionType>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual bool IsTimeInSession(DateTime date_time, bool use_session_valid_times = false)
        {
            string name = "IsTimeInSession";
            var args = new object[] { date_time, use_session_valid_times };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGSessionsCollectionClass : CQGSessionsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGSessionsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGSessionsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGSessions this[object index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGSessionsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGStrategyDefinitionClass : CQGStrategyDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGStrategyDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGStrategyDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string ClientId
        {
            get
            {
                string name = "ClientId";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public string RequestString
        {
            get
            {
                string name = "RequestString";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eStrategyRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eStrategyRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGStrategyDefinitionsClass : CQGStrategyDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGStrategyDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGStrategyDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGStrategyDefinition this[string id_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGStrategyDefinitionClass(key);
                return value;
            }

        }

        public CQGStrategyDefinition this[int index_]
        {
            get
            {
                string name = "ItemByIndex";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGStrategyDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGStrategyDefinition get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGStrategyDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGStrategyLegFillClass : CQGStrategyLegFill
    {
        private string dcObjKey;

        #region Constructors

        internal CQGStrategyLegFillClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGStrategyLegFillClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string ExecutionId
        {
            get
            {
                string name = "ExecutionId";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGOrder Order
        {
            get
            {
                string name = "Order";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrderClass(key);
                return value;
            }

        }

        public string OriginalOrderID
        {
            get
            {
                string name = "OriginalOrderID";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGStrategyLegFillsClass : CQGStrategyLegFills
    {
        private string dcObjKey;

        #region Constructors

        internal CQGStrategyLegFillsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGStrategyLegFillsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGStrategyLegFill this[int index_]
        {
            get
            {
                string name = "ItemByIndex";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGStrategyLegFillClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGStrategyLegFill get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGStrategyLegFillClass(key);
            return result;
        }

        #endregion

    }

    public class CQGStringCollectionClass : CQGStringCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGStringCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGStringCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<string>(dcObjKey, name, args);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGSubMinuteBarClass : CQGSubMinuteBar
    {
        private string dcObjKey;

        #region Constructors

        internal CQGSubMinuteBarClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGSubMinuteBarClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int AskVolume
        {
            get
            {
                string name = "AskVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Avg
        {
            get
            {
                string name = "Avg";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int BidVolume
        {
            get
            {
                string name = "BidVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Close
        {
            get
            {
                string name = "Close";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double High
        {
            get
            {
                string name = "High";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double HLC3
        {
            get
            {
                string name = "HLC3";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Low
        {
            get
            {
                string name = "Low";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Mid
        {
            get
            {
                string name = "Mid";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Open
        {
            get
            {
                string name = "Open";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Range
        {
            get
            {
                string name = "Range";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int TickVolume
        {
            get
            {
                string name = "TickVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double TrueHigh
        {
            get
            {
                string name = "TrueHigh";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueLow
        {
            get
            {
                string name = "TrueLow";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueRange
        {
            get
            {
                string name = "TrueRange";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Volume
        {
            get
            {
                string name = "Volume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGSubMinuteBarsClass : CQGSubMinuteBars
    {
        private string dcObjKey;

        #region Constructors

        internal CQGSubMinuteBarsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGSubMinuteBarsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGSubMinuteBar this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGSubMinuteBarClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGSubMinuteBarsRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGSubMinuteBarsRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGSubMinuteBarsCollectionClass : CQGSubMinuteBarsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGSubMinuteBarsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGSubMinuteBarsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGSubMinuteBars this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGSubMinuteBarsClass(key);
                return value;
            }

        }

        public CQGSubMinuteBars this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGSubMinuteBarsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGSubMinuteBars get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGSubMinuteBarsClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGSubMinuteBarsRequestClass : CQGSubMinuteBarsRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGSubMinuteBarsRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGSubMinuteBarsRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eGapFilter GapFilter
        {
            get
            {
                string name = "GapFilter";
                var value = CQG.GetProperty<eGapFilter>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "GapFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int Interval
        {
            get
            {
                string name = "Interval";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Interval";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTickFilter TickFilter
        {
            get
            {
                string name = "TickFilter";
                var value = CQG.GetProperty<eTickFilter>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "TickFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGSummariesStatementClass : CQGSummariesStatement
    {
        private string dcObjKey;

        #region Constructors

        internal CQGSummariesStatementClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGSummariesStatementClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGAccountSummaries CurrencySummaries
        {
            get
            {
                string name = "CurrencySummaries";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountSummariesClass(key);
                return value;
            }

        }

        public int GWAccountID
        {
            get
            {
                string name = "GWAccountID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime StatementDate
        {
            get
            {
                string name = "StatementDate";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public CQGAccountSummary Summary
        {
            get
            {
                string name = "Summary";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGAccountSummaryClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTFlowBarClass : CQGTFlowBar
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTFlowBarClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTFlowBarClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int AskVolume
        {
            get
            {
                string name = "AskVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double BestAskPrice
        {
            get
            {
                string name = "BestAskPrice";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double BestBidPrice
        {
            get
            {
                string name = "BestBidPrice";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int BidVolume
        {
            get
            {
                string name = "BidVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Close
        {
            get
            {
                string name = "Close";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int DomAskCount
        {
            get
            {
                string name = "DomAskCount";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int this[int index_]
        {
            get
            {
                string name = "DomAskVolume";
                var args = new object[] { index_ };
                var value = CQG.GetProperty<int>(dcObjKey, name, args);
                return value;
            }

        }

        public int DomBidCount
        {
            get
            {
                string name = "DomBidCount";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double High
        {
            get
            {
                string name = "High";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Low
        {
            get
            {
                string name = "Low";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Mid
        {
            get
            {
                string name = "Mid";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Open
        {
            get
            {
                string name = "Open";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double TrueHigh
        {
            get
            {
                string name = "TrueHigh";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueLow
        {
            get
            {
                string name = "TrueLow";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueMid
        {
            get
            {
                string name = "TrueMid";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual int get_DomAskVolume(int index_)
        {
            string name = "get_DomAskVolume";
            var args = new object[] { index_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual int get_DomBidVolume(int index_)
        {
            string name = "get_DomBidVolume";
            var args = new object[] { index_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGTFlowBarsClass : CQGTFlowBars
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTFlowBarsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTFlowBarsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGTFlowBar this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTFlowBarClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGTFlowBarsRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTFlowBarsRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGTFlowBarsCollectionClass : CQGTFlowBarsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTFlowBarsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTFlowBarsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTFlowBars this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTFlowBarsClass(key);
                return value;
            }

        }

        public CQGTFlowBars this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTFlowBarsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTFlowBars get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTFlowBarsClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTFlowBarsRequestClass : CQGTFlowBarsRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTFlowBarsRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTFlowBarsRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTfAggregation Aggregation
        {
            get
            {
                string name = "Aggregation";
                var value = CQG.GetProperty<eTfAggregation>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Aggregation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int AggregationLevel
        {
            get
            {
                string name = "AggregationLevel";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "AggregationLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTFlowRequestDomVolumeLevel DomAskVolumeLevel
        {
            get
            {
                string name = "DomAskVolumeLevel";
                var value = CQG.GetProperty<eTFlowRequestDomVolumeLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DomAskVolumeLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTFlowRequestDomVolumeLevel DomBidVolumeLevel
        {
            get
            {
                string name = "DomBidVolumeLevel";
                var value = CQG.GetProperty<eTFlowRequestDomVolumeLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DomBidVolumeLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTickClass : CQGTick
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTickClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTickClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string ContributorId
        {
            get
            {
                string name = "ContributorId";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public int ContributorIdCode
        {
            get
            {
                string name = "ContributorIdCode";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public eTickCorrectionType CorrectionType
        {
            get
            {
                string name = "CorrectionType";
                var value = CQG.GetProperty<eTickCorrectionType>(dcObjKey, name);
                return value;
            }

        }

        public eMarketState MarketState
        {
            get
            {
                string name = "MarketState";
                var value = CQG.GetProperty<eMarketState>(dcObjKey, name);
                return value;
            }

        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public eTickPriceType PriceType
        {
            get
            {
                string name = "PriceType";
                var value = CQG.GetProperty<eTickPriceType>(dcObjKey, name);
                return value;
            }

        }

        public int SalesConditionCode
        {
            get
            {
                string name = "SalesConditionCode";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string SalesConditionLabel
        {
            get
            {
                string name = "SalesConditionLabel";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int Volume
        {
            get
            {
                string name = "Volume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTicksClass : CQGTicks
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTicksClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTicksClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public bool HasUpdates
        {
            get
            {
                string name = "HasUpdates";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGTick this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTickClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGTicksRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTicksRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual int IndexForDate(DateTime date_)
        {
            string name = "IndexForDate";
            var args = new object[] { date_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual void IndicesForDates(DateTime date_1, DateTime date_2, ref Int32 start_index, ref Int32 end_index)
        {
            string name = "IndicesForDates";
            var args = new object[] { date_1, date_2, start_index, end_index };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGTicksCollectionClass : CQGTicksCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTicksCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTicksCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTicks this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTicksClass(key);
                return value;
            }

        }

        public CQGTicks this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTicksClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTicks get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTicksClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTicksRequestClass : CQGTicksRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTicksRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTicksRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public DateTime RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public DateTime RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTickFilter TickFilter
        {
            get
            {
                string name = "TickFilter";
                var value = CQG.GetProperty<eTickFilter>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "TickFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTicksRequestType Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eTicksRequestType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Type";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTimedBarClass : CQGTimedBar
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTimedBarClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTimedBarClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int ActualVolume
        {
            get
            {
                string name = "ActualVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int AskVolume
        {
            get
            {
                string name = "AskVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Avg
        {
            get
            {
                string name = "Avg";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int BidVolume
        {
            get
            {
                string name = "BidVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Close
        {
            get
            {
                string name = "Close";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int CommodityOpenInterest
        {
            get
            {
                string name = "CommodityOpenInterest";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int CommodityTickVolume
        {
            get
            {
                string name = "CommodityTickVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int CommodityVolume
        {
            get
            {
                string name = "CommodityVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int ContractOpenInterest
        {
            get
            {
                string name = "ContractOpenInterest";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int ContractTickVolume
        {
            get
            {
                string name = "ContractTickVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public int ContractVolume
        {
            get
            {
                string name = "ContractVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double High
        {
            get
            {
                string name = "High";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double HLC3
        {
            get
            {
                string name = "HLC3";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Low
        {
            get
            {
                string name = "Low";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Mid
        {
            get
            {
                string name = "Mid";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Open
        {
            get
            {
                string name = "Open";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int OpenInterest
        {
            get
            {
                string name = "OpenInterest";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double Range
        {
            get
            {
                string name = "Range";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int TickVolume
        {
            get
            {
                string name = "TickVolume";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public double TrueHigh
        {
            get
            {
                string name = "TrueHigh";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueLow
        {
            get
            {
                string name = "TrueLow";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueRange
        {
            get
            {
                string name = "TrueRange";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTimedBarsClass : CQGTimedBars
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTimedBarsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTimedBarsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGTimedBar this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTimedBarClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGTimedBarsRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTimedBarsRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual int IndexForDate(DateTime date_)
        {
            string name = "IndexForDate";
            var args = new object[] { date_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGTimedBarsCollectionClass : CQGTimedBarsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTimedBarsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTimedBarsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTimedBars this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTimedBarsClass(key);
                return value;
            }

        }

        public CQGTimedBars this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTimedBarsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTimedBars get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTimedBarsClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTimedBarsRequestClass : CQGTimedBarsRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTimedBarsRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTimedBarsRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eHistoricalPeriod HistoricalPeriod
        {
            get
            {
                string name = "HistoricalPeriod";
                var value = CQG.GetProperty<eHistoricalPeriod>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "HistoricalPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IgnoreEventsOnHistoricalBars
        {
            get
            {
                string name = "IgnoreEventsOnHistoricalBars";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IgnoreEventsOnHistoricalBars";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int IntradayPeriod
        {
            get
            {
                string name = "IntradayPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IntradayPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTickFilter TickFilter
        {
            get
            {
                string name = "TickFilter";
                var value = CQG.GetProperty<eTickFilter>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "TickFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual void ExcludeAllOutputs()
        {
            string name = "ExcludeAllOutputs";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual void IncludeOutput(eTimedBarsRequestOutputs timed_bar_output, bool include_output)
        {
            string name = "IncludeOutput";
            var args = new object[] { timed_bar_output, include_output };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual bool IsOutputIncluded(eTimedBarsRequestOutputs timed_bar_output)
        {
            string name = "IsOutputIncluded";
            var args = new object[] { timed_bar_output };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGTradeClass : CQGTrade
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradeClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradeClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int GroupID
        {
            get
            {
                string name = "GroupID";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public bool IsMatched
        {
            get
            {
                string name = "IsMatched";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eOrderSide Side
        {
            get
            {
                string name = "Side";
                var value = CQG.GetProperty<eOrderSide>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradeEntriesClass : CQGTradeEntries
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradeEntriesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradeEntriesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeEntry this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradeEntryClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradeEntryClass : CQGTradeEntry
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradeEntryClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradeEntryClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public bool CanPlaceOrderSignal
        {
            get
            {
                string name = "CanPlaceOrderSignal";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeEntryDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeEntryDefinitionClass(key);
                return value;
            }

        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeExits RelatedExits
        {
            get
            {
                string name = "RelatedExits";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeExitsClass(key);
                return value;
            }

        }

        public bool Signal
        {
            get
            {
                string name = "Signal";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public double StopLimitPrice
        {
            get
            {
                string name = "StopLimitPrice";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemTrade Trade
        {
            get
            {
                string name = "Trade";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemTradeClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradeEntryDefinitionClass : CQGTradeEntryDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradeEntryDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradeEntryDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public bool AllowEntryOnExit
        {
            get
            {
                string name = "AllowEntryOnExit";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public bool AllowPyramids
        {
            get
            {
                string name = "AllowPyramids";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public eOrderType OrderType
        {
            get
            {
                string name = "OrderType";
                var value = CQG.GetProperty<eOrderType>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradeExitClass : CQGTradeExit
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradeExitClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradeExitClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public bool CanPlaceOrderSignal
        {
            get
            {
                string name = "CanPlaceOrderSignal";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeExitDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeExitDefinitionClass(key);
                return value;
            }

        }

        public double Price
        {
            get
            {
                string name = "Price";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public int Quantity
        {
            get
            {
                string name = "Quantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeEntries RelatedEntries
        {
            get
            {
                string name = "RelatedEntries";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeEntriesClass(key);
                return value;
            }

        }

        public bool Signal
        {
            get
            {
                string name = "Signal";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public double StopLimitPrice
        {
            get
            {
                string name = "StopLimitPrice";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemTrade Trade
        {
            get
            {
                string name = "Trade";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemTradeClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradeExitDefinitionClass : CQGTradeExitDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradeExitDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradeExitDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public bool AllowExitOnEntry
        {
            get
            {
                string name = "AllowExitOnEntry";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public bool AllowMoreThanOnce
        {
            get
            {
                string name = "AllowMoreThanOnce";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eOrderType OrderType
        {
            get
            {
                string name = "OrderType";
                var value = CQG.GetProperty<eOrderType>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradeExitDefinitionsClass : CQGTradeExitDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradeExitDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradeExitDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeExitDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradeExitDefinitionClass(key);
                return value;
            }

        }

        public CQGTradeExitDefinition this[string exit_name]
        {
            get
            {
                string name = "ItemByName";
                var args = new object[] { exit_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradeExitDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTradeExitDefinition get_ItemByName(string exit_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { exit_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradeExitDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradeExitsClass : CQGTradeExits
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradeExitsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradeExitsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeExit this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradeExitClass(key);
                return value;
            }

        }

        public CQGTradeExit this[string exit_name]
        {
            get
            {
                string name = "ItemByName";
                var args = new object[] { exit_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradeExitClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTradeExit get_ItemByName(string exit_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { exit_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradeExitClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradesClass : CQGTrades
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradesClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradesClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTrade this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradeClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemAddInfoClass : CQGTradingSystemAddInfo
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemAddInfoClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemAddInfoClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradingSystemBaseBarParameterClass : CQGTradingSystemBaseBarParameter
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemBaseBarParameterClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemBaseBarParameterClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eTradingSystemBaseBarParameter Type
        {
            get
            {
                string name = "Type";
                var value = CQG.GetProperty<eTradingSystemBaseBarParameter>(dcObjKey, name);
                return value;
            }

        }

        public object Value
        {
            get
            {
                string name = "Value";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Value";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradingSystemBaseBarParametersClass : CQGTradingSystemBaseBarParameters
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemBaseBarParametersClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemBaseBarParametersClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemBaseBarParameter this[eTradingSystemBaseBarParameter parameter_type]
        {
            get
            {
                string name = "Item";
                var args = new object[] { parameter_type };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemBaseBarParameterClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemClass : CQGTradingSystem
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGTradingSystemDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemDefinitionClass(key);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGTradingSystemRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemRequestClass(key);
                return value;
            }

        }

        public CQGTradingSystemStatisticsCollection Statistics
        {
            get
            {
                string name = "Statistics";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemStatisticsCollectionClass(key);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGTradingSystemTradesRows TradesRows
        {
            get
            {
                string name = "TradesRows";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemTradesRowsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGTradingSystemDefinitionClass : CQGTradingSystemDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string Abbreviation
        {
            get
            {
                string name = "Abbreviation";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public double Commission
        {
            get
            {
                string name = "Commission";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public eTradingSystemCommissionType CommissionType
        {
            get
            {
                string name = "CommissionType";
                var value = CQG.GetProperty<eTradingSystemCommissionType>(dcObjKey, name);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGParameterDefinitions ParameterDefinitions
        {
            get
            {
                string name = "ParameterDefinitions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGParameterDefinitionsClass(key);
                return value;
            }

        }

        public CQGTradingSystemTradeDefinitions TradeDefinitions
        {
            get
            {
                string name = "TradeDefinitions";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemTradeDefinitionsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradingSystemDefinitionsClass : CQGTradingSystemDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemDefinitionClass(key);
                return value;
            }

        }

        public CQGTradingSystemDefinition this[string trading_system_abbreviation]
        {
            get
            {
                string name = "ItemByAbbreviation";
                var args = new object[] { trading_system_abbreviation };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTradingSystemDefinition get_ItemByAbbreviation(string trading_system_abbreviation)
        {
            string name = "get_ItemByAbbreviation";
            var args = new object[] { trading_system_abbreviation };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradingSystemDefinitionClass(key);
            return result;
        }

        public virtual CQGTradingSystemDefinition get_ItemByName(string trading_system_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { trading_system_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradingSystemDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemInsertInfoClass : CQGTradingSystemInsertInfo
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemInsertInfoClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemInsertInfoClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Index
        {
            get
            {
                string name = "Index";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradingSystemRelationAddInfoClass : CQGTradingSystemRelationAddInfo
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemRelationAddInfoClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemRelationAddInfoClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGTradeEntry Entry
        {
            get
            {
                string name = "Entry";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeEntryClass(key);
                return value;
            }

        }

        public int EntryRowIndex
        {
            get
            {
                string name = "EntryRowIndex";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeExit Exit
        {
            get
            {
                string name = "Exit";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeExitClass(key);
                return value;
            }

        }

        public int ExitRowIndex
        {
            get
            {
                string name = "ExitRowIndex";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradingSystemRemoveInfoClass : CQGTradingSystemRemoveInfo
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemRemoveInfoClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemRemoveInfoClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Index
        {
            get
            {
                string name = "Index";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradingSystemRequestClass : CQGTradingSystemRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGTradingSystemBaseBarParameters BaseBarParameters
        {
            get
            {
                string name = "BaseBarParameters";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemBaseBarParametersClass(key);
                return value;
            }

        }

        public eTradingSystemBaseBar BaseBarType
        {
            get
            {
                string name = "BaseBarType";
                var value = CQG.GetProperty<eTradingSystemBaseBar>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "BaseBarType";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string BaseExpression
        {
            get
            {
                string name = "BaseExpression";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "BaseExpression";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public CQGTradingSystemDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemDefinitionClass(key);
                return value;
            }

        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eHistoricalPeriod HistoricalPeriod
        {
            get
            {
                string name = "HistoricalPeriod";
                var value = CQG.GetProperty<eHistoricalPeriod>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "HistoricalPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int IntradayPeriod
        {
            get
            {
                string name = "IntradayPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IntradayPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object this[object key_]
        {
            get
            {
                string name = "Parameter";
                var args = new object[] { key_ };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Parameter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual void ExcludeAllStatistics()
        {
            string name = "ExcludeAllStatistics";
            CQG.CallVoidMethod(dcObjKey, name);
        }

        public virtual object get_Parameter(object key_)
        {
            string name = "get_Parameter";
            var args = new object[] { key_ };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual void IncludeStatistic(eTradingSystemStatistic trading_system_statistic)
        {
            string name = "IncludeStatistic";
            var args = new object[] { trading_system_statistic };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        public virtual bool IsStatisticIncluded(eTradingSystemStatistic trading_system_statistic)
        {
            string name = "IsStatisticIncluded";
            var args = new object[] { trading_system_statistic };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Parameter(object key_, object pVal)
        {
            string name = "set_Parameter";
            var args = new object[] { key_, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGTradingSystemsClass : CQGTradingSystems
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystem this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemClass(key);
                return value;
            }

        }

        public CQGTradingSystem this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTradingSystem get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradingSystemClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemStatisticsChangeInfoClass : CQGTradingSystemStatisticsChangeInfo
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemStatisticsChangeInfoClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemStatisticsChangeInfoClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGTradingSystemStatistics Statistics
        {
            get
            {
                string name = "Statistics";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemStatisticsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual bool IsStatisticChanged(eTradingSystemStatistic trading_system_statistic)
        {
            string name = "IsStatisticChanged";
            var args = new object[] { trading_system_statistic };
            var result = CQG.CallMethod<bool>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemStatisticsClass : CQGTradingSystemStatistics
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemStatisticsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemStatisticsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public double AverageDuration
        {
            get
            {
                string name = "AverageDuration";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double AverageLoss
        {
            get
            {
                string name = "AverageLoss";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double AverageProfit
        {
            get
            {
                string name = "AverageProfit";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double AverageWin
        {
            get
            {
                string name = "AverageWin";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double ClosedNetProfit
        {
            get
            {
                string name = "ClosedNetProfit";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double CurConsecLosses
        {
            get
            {
                string name = "CurConsecLosses";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double CurConsecWins
        {
            get
            {
                string name = "CurConsecWins";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double CurDrawDown
        {
            get
            {
                string name = "CurDrawDown";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double LinearRegression
        {
            get
            {
                string name = "LinearRegression";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double MaxClosedDraw
        {
            get
            {
                string name = "MaxClosedDraw";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double MaxConsecLosses
        {
            get
            {
                string name = "MaxConsecLosses";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double MaxConsecWins
        {
            get
            {
                string name = "MaxConsecWins";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double MaxDrawAmount
        {
            get
            {
                string name = "MaxDrawAmount";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double MaxDrawDuration
        {
            get
            {
                string name = "MaxDrawDuration";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double MaximumLoss
        {
            get
            {
                string name = "MaximumLoss";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double MaximumWin
        {
            get
            {
                string name = "MaximumWin";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double OpenPosition
        {
            get
            {
                string name = "OpenPosition";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double PercentLong
        {
            get
            {
                string name = "PercentLong";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double PercentWinners
        {
            get
            {
                string name = "PercentWinners";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double ProfitLossRatio
        {
            get
            {
                string name = "ProfitLossRatio";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double ProfitToMaxDraw
        {
            get
            {
                string name = "ProfitToMaxDraw";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double RemoveToNeutral
        {
            get
            {
                string name = "RemoveToNeutral";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double ReturnRetracement
        {
            get
            {
                string name = "ReturnRetracement";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TimePercentage
        {
            get
            {
                string name = "TimePercentage";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public double TotalNetProfit
        {
            get
            {
                string name = "TotalNetProfit";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TotalTradeCount
        {
            get
            {
                string name = "TotalTradeCount";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double this[eTradingSystemStatistic ts_statistic]
        {
            get
            {
                string name = "Value";
                var args = new object[] { ts_statistic };
                var value = CQG.GetProperty<double>(dcObjKey, name, args);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual double get_Value(eTradingSystemStatistic ts_statistic)
        {
            string name = "get_Value";
            var args = new object[] { ts_statistic };
            var result = CQG.CallMethod<double>(dcObjKey, name, args);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemStatisticsCollectionClass : CQGTradingSystemStatisticsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemStatisticsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemStatisticsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemStatistics this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemStatisticsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual int IndexForDate(DateTime date_)
        {
            string name = "IndexForDate";
            var args = new object[] { date_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual void IndicesForDates(DateTime date_1, DateTime date_2, ref Int32 start_index, ref Int32 end_index)
        {
            string name = "IndicesForDates";
            var args = new object[] { date_1, date_2, start_index, end_index };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGTradingSystemTradeClass : CQGTradingSystemTrade
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemTradeClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemTradeClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGTradingSystemTradeDefinition Definition
        {
            get
            {
                string name = "Definition";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemTradeDefinitionClass(key);
                return value;
            }

        }

        public bool IsActive
        {
            get
            {
                string name = "IsActive";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradeEntry TradeEntry
        {
            get
            {
                string name = "TradeEntry";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeEntryClass(key);
                return value;
            }

        }

        public CQGTradeExits TradeExits
        {
            get
            {
                string name = "TradeExits";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeExitsClass(key);
                return value;
            }

        }

        public CQGTradingSystemTradesRow TradesRow
        {
            get
            {
                string name = "TradesRow";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemTradesRowClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradingSystemTradeDefinitionClass : CQGTradingSystemTradeDefinition
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemTradeDefinitionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemTradeDefinitionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public CQGTradeEntryDefinition Entry
        {
            get
            {
                string name = "Entry";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeEntryDefinitionClass(key);
                return value;
            }

        }

        public CQGTradeExitDefinitions Exits
        {
            get
            {
                string name = "Exits";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradeExitDefinitionsClass(key);
                return value;
            }

        }

        public string Name
        {
            get
            {
                string name = "Name";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public eTradeSide Side
        {
            get
            {
                string name = "Side";
                var value = CQG.GetProperty<eTradeSide>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTradingSystemTradeDefinitionsClass : CQGTradingSystemTradeDefinitions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemTradeDefinitionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemTradeDefinitionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemTradeDefinition this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemTradeDefinitionClass(key);
                return value;
            }

        }

        public CQGTradingSystemTradeDefinition this[string trade_name]
        {
            get
            {
                string name = "ItemByName";
                var args = new object[] { trade_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemTradeDefinitionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTradingSystemTradeDefinition get_ItemByName(string trade_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { trade_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradingSystemTradeDefinitionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemTradesRowClass : CQGTradingSystemTradesRow
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemTradesRowClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemTradesRowClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemTrade this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemTradeClass(key);
                return value;
            }

        }

        public CQGTradingSystemTrade this[string trade_name]
        {
            get
            {
                string name = "ItemByName";
                var args = new object[] { trade_name };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemTradeClass(key);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public int TimestampOffset
        {
            get
            {
                string name = "TimestampOffset";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTradingSystemTrade get_ItemByName(string trade_name)
        {
            string name = "get_ItemByName";
            var args = new object[] { trade_name };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTradingSystemTradeClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemTradesRowsClass : CQGTradingSystemTradesRows
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemTradesRowsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemTradesRowsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemTradesRow this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTradingSystemTradesRowClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGTradingSystemUpdateInfoClass : CQGTradingSystemUpdateInfo
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTradingSystemUpdateInfoClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTradingSystemUpdateInfoClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Index
        {
            get
            {
                string name = "Index";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTradingSystemStatisticsChangeInfo StatisticsChangeInfo
        {
            get
            {
                string name = "StatisticsChangeInfo";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGTradingSystemStatisticsChangeInfoClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGChangedTradeEntries get_ChangedEntries(eTradeChangeCategory change_filter = eTradeChangeCategory.tccAll)
        {
            string name = "get_ChangedEntries";
            var args = new object[] { change_filter };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGChangedTradeEntriesClass(key);
            return result;
        }

        public virtual CQGChangedTradeExits get_ChangedExits(eTradeChangeCategory change_filter = eTradeChangeCategory.tccAll)
        {
            string name = "get_ChangedExits";
            var args = new object[] { change_filter };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGChangedTradeExitsClass(key);
            return result;
        }

        #endregion

    }

    public class CQGTransactionClass : CQGTransaction
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTransactionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTransactionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public string ExecutionId
        {
            get
            {
                string name = "ExecutionId";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGFill Fill
        {
            get
            {
                string name = "Fill";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGFillClass(key);
                return value;
            }

        }

        public CQGStringCollection HangOrderIds
        {
            get
            {
                string name = "HangOrderIds";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGStringCollectionClass(key);
                return value;
            }

        }

        public int HangQuantity
        {
            get
            {
                string name = "HangQuantity";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGOrder Order
        {
            get
            {
                string name = "Order";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGOrderClass(key);
                return value;
            }

        }

        public CQGModifiedProperties Properties
        {
            get
            {
                string name = "Properties";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGModifiedPropertiesClass(key);
                return value;
            }

        }

        public string RejectReason
        {
            get
            {
                string name = "RejectReason";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public DateTime ServerTimestamp
        {
            get
            {
                string name = "ServerTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eOrderEvent Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eOrderEvent>(dcObjKey, name);
                return value;
            }

        }

        public CQGStrategyLegFills StrategyLegFills
        {
            get
            {
                string name = "StrategyLegFills";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGStrategyLegFillsClass(key);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGTransactionsClass : CQGTransactions
    {
        private string dcObjKey;

        #region Constructors

        internal CQGTransactionsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGTransactionsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGTransaction this[string id_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTransactionClass(key);
                return value;
            }

        }

        public CQGTransaction this[int index_]
        {
            get
            {
                string name = "ItemByIndex";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGTransactionClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGTransaction get_ItemByIndex(int index_)
        {
            string name = "get_ItemByIndex";
            var args = new object[] { index_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGTransactionClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGYieldClass : CQGYield
    {
        private string dcObjKey;

        #region Constructors

        internal CQGYieldClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGYieldClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public double Avg
        {
            get
            {
                string name = "Avg";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Close
        {
            get
            {
                string name = "Close";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double High
        {
            get
            {
                string name = "High";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double HLC3
        {
            get
            {
                string name = "HLC3";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Low
        {
            get
            {
                string name = "Low";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Mid
        {
            get
            {
                string name = "Mid";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Open
        {
            get
            {
                string name = "Open";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double Range
        {
            get
            {
                string name = "Range";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public DateTime Timestamp
        {
            get
            {
                string name = "Timestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public double TrueHigh
        {
            get
            {
                string name = "TrueHigh";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueLow
        {
            get
            {
                string name = "TrueLow";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        public double TrueRange
        {
            get
            {
                string name = "TrueRange";
                var value = CQG.GetProperty<double>(dcObjKey, name);
                return value;
            }

        }

        #endregion

        #region Methods

        #endregion

    }

    public class CQGYieldsClass : CQGYields
    {
        private string dcObjKey;

        #region Constructors

        internal CQGYieldsClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGYieldsClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public DateTime EndTimestamp
        {
            get
            {
                string name = "EndTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public string Id
        {
            get
            {
                string name = "Id";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

        }

        public CQGYield this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGYieldClass(key);
                return value;
            }

        }

        public CQGError LastError
        {
            get
            {
                string name = "LastError";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGErrorClass(key);
                return value;
            }

        }

        public CQGYieldsRequest Request
        {
            get
            {
                string name = "Request";
                string key = CQG.GetProperty<string>(dcObjKey, name);
                var value = new CQGYieldsRequestClass(key);
                return value;
            }

        }

        public DateTime StartTimestamp
        {
            get
            {
                string name = "StartTimestamp";
                var value = CQG.GetProperty<DateTime>(dcObjKey, name);
                return value;
            }

        }

        public eRequestStatus Status
        {
            get
            {
                string name = "Status";
                var value = CQG.GetProperty<eRequestStatus>(dcObjKey, name);
                return value;
            }

        }

        public object this[string tag_name]
        {
            get
            {
                string name = "Tag";
                var args = new object[] { tag_name };
                var value = CQG.GetProperty<object>(dcObjKey, name, args);
                return value;
            }

            set
            {
                string name = "Tag";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        public virtual object get_Tag(string tag_name)
        {
            string name = "get_Tag";
            var args = new object[] { tag_name };
            var result = CQG.CallMethod<object>(dcObjKey, name, args);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        public virtual int IndexForDate(DateTime date_)
        {
            string name = "IndexForDate";
            var args = new object[] { date_ };
            var result = CQG.CallMethod<int>(dcObjKey, name, args);
            return result;
        }

        public virtual void set_Tag(string tag_name, object pVal)
        {
            string name = "set_Tag";
            var args = new object[] { tag_name, pVal };
            CQG.CallVoidMethod(dcObjKey, name, args);
        }

        #endregion

    }

    public class CQGYieldsCollectionClass : CQGYieldsCollection
    {
        private string dcObjKey;

        #region Constructors

        internal CQGYieldsCollectionClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGYieldsCollectionClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public int Count
        {
            get
            {
                string name = "Count";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

        }

        public CQGYields this[int index_]
        {
            get
            {
                string name = "Item";
                var args = new object[] { index_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGYieldsClass(key);
                return value;
            }

        }

        public CQGYields this[string id_]
        {
            get
            {
                string name = "ItemById";
                var args = new object[] { id_ };
                string key = CQG.GetProperty<string>(dcObjKey, name, args);
                var value = new CQGYieldsClass(key);
                return value;
            }

        }

        #endregion

        #region Methods

        public virtual CQGYields get_ItemById(string id_)
        {
            string name = "get_ItemById";
            var args = new object[] { id_ };
            string key = CQG.CallMethod<string>(dcObjKey, name, args);
            var result = new CQGYieldsClass(key);
            return result;
        }

        public virtual IEnumerator GetEnumerator()
        {
            string name = "GetEnumerator";
            var result = CQG.CallMethod<IEnumerator>(dcObjKey, name);
            return result;
        }

        #endregion

    }

    public class CQGYieldsRequestClass : CQGYieldsRequest
    {
        private string dcObjKey;

        #region Constructors

        internal CQGYieldsRequestClass(string dcObjKey)
        {
            this.dcObjKey = dcObjKey;
        }

        #endregion

        #region Destructor

        ~CQGYieldsRequestClass()
        {
            CQG.CallDtor(dcObjKey);
        }

        #endregion

        #region Properties

        public eYieldCompound Compound
        {
            get
            {
                string name = "Compound";
                var value = CQG.GetProperty<eYieldCompound>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Compound";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesContinuationType Continuation
        {
            get
            {
                string name = "Continuation";
                var value = CQG.GetProperty<eTimeSeriesContinuationType>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Continuation";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int DaysBeforeExpiration
        {
            get
            {
                string name = "DaysBeforeExpiration";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "DaysBeforeExpiration";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool EqualizeCloses
        {
            get
            {
                string name = "EqualizeCloses";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "EqualizeCloses";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool IncludeEnd
        {
            get
            {
                string name = "IncludeEnd";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "IncludeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eYieldModel Model
        {
            get
            {
                string name = "Model";
                var value = CQG.GetProperty<eYieldModel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Model";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeEnd
        {
            get
            {
                string name = "RangeEnd";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeEnd";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object RangeStart
        {
            get
            {
                string name = "RangeStart";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RangeStart";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public int RecalcPeriod
        {
            get
            {
                string name = "RecalcPeriod";
                var value = CQG.GetProperty<int>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "RecalcPeriod";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eSessionFlag SessionFlags
        {
            get
            {
                string name = "SessionFlags";
                var value = CQG.GetProperty<eSessionFlag>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionFlags";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public object SessionsFilter
        {
            get
            {
                string name = "SessionsFilter";
                var value = CQG.GetProperty<object>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SessionsFilter";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public eTimeSeriesSubscriptionLevel SubscriptionLevel
        {
            get
            {
                string name = "SubscriptionLevel";
                var value = CQG.GetProperty<eTimeSeriesSubscriptionLevel>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "SubscriptionLevel";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public string Symbol
        {
            get
            {
                string name = "Symbol";
                var value = CQG.GetProperty<string>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "Symbol";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        public bool UpdatesEnabled
        {
            get
            {
                string name = "UpdatesEnabled";
                var value = CQG.GetProperty<bool>(dcObjKey, name);
                return value;
            }

            set
            {
                string name = "UpdatesEnabled";
                CQG.SetProperty(dcObjKey, name, value);
            }
        }

        #endregion

        #region Methods

        #endregion

    }

    #endregion

    #region Structs

    public struct CQGCELConfiguration
    {
        #region Fields

        public eDataSubscriptionLevel DefaultInstrumentSubscriptionLevel;

        public eDOMUpdatesMode DOMUpdatesMode;

        public int DOMUpdatesPeriod;

        public eLogSeverity LogSeverity;

        public int MaxLogFileCount;

        public DateTime MaxLogFileDuration;

        public int MaxLogFileSize;

        public short MetaDataEnabled;

        public eReadyStatusCheck ReadyStatusCheck;

        public eTimeZone TimeZoneCode;

        #endregion

        #region Constructors

        #endregion

        #region Methods

        #endregion

    }

    #endregion

}
