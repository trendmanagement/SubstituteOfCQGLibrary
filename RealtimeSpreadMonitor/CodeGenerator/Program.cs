using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

namespace CodeGenerator
{
    partial class Program
    {
        static HashSet<string> SkippedAncestors = new HashSet<string>() { "Object", "ValueType", "__ComObject" };

        // The methods with the next name will be skipped always
        static HashSet<string> SkippedMethodsNames = new HashSet<string>() { "get_Item" };

        // The methods with the next name prefixes will be skipped always
        static HashSet<string> SkippedMethodsPrefixes = new HashSet<string>() { "add_", "remove_", "Finalize" };

        // The methods with the next name prefixes will be skipped if they have the specified number of input arguments
        // (otherwise, only corresponding properties will be created)
        static Tuple<string, int>[] SkippedMethodsPrefixesNumArgs = new Tuple<string, int>[] { Tuple.Create("get_", 0), Tuple.Create("set_", 1) };

        static HashSet<string> ObjectMethods = new HashSet<string>() { "Equals", "GetHashCode", "GetType", "ToString" };

        static HashSet<string> IEnumerableMethods = new HashSet<string>() { "GetEnumerator" };

        static StreamWriter File;
        static StreamWriter DCEvHndlrFile;

        // Set this to False to get type names in short form, e.g. "int" instead of "Int32"
        static bool QuickTestMode = true;

        static void Main(string[] args)
        {
            string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            string assmPath = path.Replace("\\bin\\", "\\obj\\") + "\\Interop.CQG.dll";
            var assm = Assembly.LoadFrom(assmPath);

            string outPath = Path.GetFullPath(path + @"..\..\..\..\CQGLibrary\CQGLibrary.cs");
            string dcOutPath = Path.GetFullPath(path + @"..\..\..\..\..\DataCollectionForRealtime\DataCollectionForRealtime\CQGEventHandlers.cs");
            DCEvHndlrFile = new StreamWriter(dcOutPath);

            using (DCEvHndlrFile)
            {
                DCEvHndlrFile.WriteLine("// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING");
                DCEvHndlrFile.WriteLine("// WARNING                                                                         WARNING");
                DCEvHndlrFile.WriteLine("// WARNING    THIS .CS FILE WAS AUTOGENERATED!                                     WARNING");
                DCEvHndlrFile.WriteLine("// WARNING    DO NOT EDIT IT BY HAND, BECAUSE ALL YOUR CHANGES WILL BE LOST!       WARNING");
                DCEvHndlrFile.WriteLine("// WARNING    MAKE ALL CHANGES DIRECTLY TO THE FILE GENERATOR CODE!                WARNING");
                DCEvHndlrFile.WriteLine("// WARNING                                                                         WARNING");
                DCEvHndlrFile.WriteLine("// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING");
                DCEvHndlrFile.WriteLine("");
                DCEvHndlrFile.WriteLine("// Disable two warnings caused by CQG API specific:");
                DCEvHndlrFile.WriteLine("// CS3003: Type of 'variable' is not CLS-compliant");
                DCEvHndlrFile.WriteLine("// CS3008: Identifier 'identifier' differing only in case is not CLS-compliant");
                DCEvHndlrFile.WriteLine("#pragma warning disable 3003, 3008");
                DCEvHndlrFile.WriteLine("");
                DCEvHndlrFile.WriteLine("using System;");
                DCEvHndlrFile.WriteLine("using System.Collections;");
                DCEvHndlrFile.WriteLine("using System.Runtime.Remoting;");
                DCEvHndlrFile.WriteLine("using FakeCQG;");
                DCEvHndlrFile.WriteLine("");
                DCEvHndlrFile.WriteLine("namespace DataCollectionForRealtime");
                DCEvHndlrFile.WriteLine("{");

                CurrentIndent = 1;
                InitIndents();

                DCEvHndlrFile.WriteLine(Indent1 + "class CQGEventHandlers");
                DCEvHndlrFile.WriteLine(Indent1 + "{");
            

                using (File = new StreamWriter(outPath))
                {
                    File.WriteLine("// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING");
                    File.WriteLine("// WARNING                                                                         WARNING");
                    File.WriteLine("// WARNING    THIS .CS FILE WAS AUTOGENERATED!                                     WARNING");
                    File.WriteLine("// WARNING    DO NOT EDIT IT BY HAND, BECAUSE ALL YOUR CHANGES WILL BE LOST!       WARNING");
                    File.WriteLine("// WARNING    MAKE ALL CHANGES DIRECTLY TO THE FILE GENERATOR CODE!                WARNING");
                    File.WriteLine("// WARNING                                                                         WARNING");
                    File.WriteLine("// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING");
                    File.WriteLine("");
                    File.WriteLine("// Disable two warnings caused by CQG API specific:");
                    File.WriteLine("// CS3003: Type of 'variable' is not CLS-compliant");
                    File.WriteLine("// CS3008: Identifier 'identifier' differing only in case is not CLS-compliant");
                    File.WriteLine("#pragma warning disable 3003, 3008");
                    File.WriteLine("");
                    File.WriteLine("using System;");
                    File.WriteLine("using System.Collections;");
                    File.WriteLine("using System.Runtime.Remoting;");
                    File.WriteLine("using FakeCQG.Models;");
                    File.WriteLine("");
                    File.WriteLine("namespace FakeCQG");
                    File.WriteLine("{");

                    CurrentIndent = 1;
                    InitIndents();

                    CreateTypes(assm.ExportedTypes);

                    File.WriteLine("}");
                }

            
                DCEvHndlrFile.WriteLine(Indent1 + "}");
                DCEvHndlrFile.WriteLine("}");
            }
        }
    }
}
